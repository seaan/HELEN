
nios_2.elf:     file format elf32-littlenios2
nios_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001100 vaddr 0x00008100 paddr 0x00008100 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00002000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x0000868c memsz 0x0000868c flags rwx
    LOAD off    0x0000b684 vaddr 0x02008684 paddr 0x02009ea4 align 2**12
         filesz 0x00001820 memsz 0x00001820 flags rw-
    LOAD off    0x0000d6c4 vaddr 0x0200b6c4 paddr 0x0200b6c4 align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008100  00008100  00001100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008514  02000000  02000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000170  02008514  02008514  0000a514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 TempMemory    00000004  02008684  02008684  0000a684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 PressureMemory 00000004  02008688  02008688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .rwdata       00001820  02008684  02009ea4  0000b684  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  7 .bss          00000134  0200b6c4  0200b6c4  0000d6c4  2**2
                  ALLOC, SMALL_DATA
  8 .onchip_2     00000000  00008310  00008310  0000cea4  2**0
                  CONTENTS
  9 .sdram        00000000  0200b7f8  0200b7f8  0000cea4  2**0
                  CONTENTS
 10 .flash        00000000  04011000  04011000  0000cea4  2**0
                  CONTENTS
 11 .comment      00000023  00000000  00000000  0000cea4  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000009a8  00000000  00000000  0000cec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000dc14  00000000  00000000  0000d870  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004b24  00000000  00000000  0001b484  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005543  00000000  00000000  0001ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001688  00000000  00000000  000254ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000030cf  00000000  00000000  00026b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00007ed7  00000000  00000000  00029c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_alt_sim_info 00000040  00000000  00000000  00031b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00000c18  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .thread_model 00000003  00000000  00000000  00035052  2**0
                  CONTENTS, READONLY
 22 .cpu          00000006  00000000  00000000  00035055  2**0
                  CONTENTS, READONLY
 23 .qsys         00000001  00000000  00000000  0003505b  2**0
                  CONTENTS, READONLY
 24 .simulation_enabled 00000001  00000000  00000000  0003505c  2**0
                  CONTENTS, READONLY
 25 .sysid_hash   00000004  00000000  00000000  0003505d  2**0
                  CONTENTS, READONLY
 26 .sysid_base   00000004  00000000  00000000  00035061  2**0
                  CONTENTS, READONLY
 27 .sysid_time   00000004  00000000  00000000  00035065  2**0
                  CONTENTS, READONLY
 28 .stderr_dev   0000000b  00000000  00000000  00035069  2**0
                  CONTENTS, READONLY
 29 .stdin_dev    0000000b  00000000  00000000  00035074  2**0
                  CONTENTS, READONLY
 30 .stdout_dev   0000000b  00000000  00000000  0003507f  2**0
                  CONTENTS, READONLY
 31 .sopc_system_name 00000005  00000000  00000000  0003508a  2**0
                  CONTENTS, READONLY
 32 .quartus_project_dir 00000024  00000000  00000000  0003508f  2**0
                  CONTENTS, READONLY
 33 .jdi          00007c1c  00000000  00000000  000350b3  2**0
                  CONTENTS, READONLY
 34 .sopcinfo     00092417  00000000  00000000  0003cccf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008100 l    d  .exceptions	00000000 .exceptions
02000000 l    d  .text	00000000 .text
02008514 l    d  .rodata	00000000 .rodata
02008684 l    d  TempMemory	00000000 TempMemory
02008688 l    d  PressureMemory	00000000 PressureMemory
02008684 l    d  .rwdata	00000000 .rwdata
0200b6c4 l    d  .bss	00000000 .bss
00008310 l    d  .onchip_2	00000000 .onchip_2
0200b7f8 l    d  .sdram	00000000 .sdram
04011000 l    d  .flash	00000000 .flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_2_bsp//obj/HAL/src/crt0.o
02000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
02008684 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 alt_load.c
02004344 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
020044dc l     F .text	00000034 alt_dev_reg
02008aa8 l     O .rwdata	000000cc flash
02008b74 l     O .rwdata	00001060 jtag_uart_0
02009bd4 l     O .rwdata	000000c4 uart
02009c98 l     O .rwdata	0000002c adc
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
020045b0 l     F .text	00000034 alt_flash_device_register
02004638 l     F .text	000003f8 alt_epcs_flash_query
02004a30 l     F .text	000000ec alt_epcs_flash_memcmp
02004e08 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
020052d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
020054dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
02005ecc l     F .text	0000009c altera_avalon_uart_irq
02005f68 l     F .text	000000e4 altera_avalon_uart_rxirq
0200604c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
020061e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02006400 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_adc.c
00000000 l    df *ABS*	00000000 epcs_commands.c
02006798 l     F .text	00000038 epcs_test_wip
020067d0 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
02006ffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02007130 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200715c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02007708 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02007868 l     F .text	0000003c alt_get_errno
020078a4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0200b6dc g     O .bss	00000004 alt_instruction_exception_handler
02004d7c g     F .text	0000008c alt_epcs_flash_get_info
02000514 g     F .text	0000011c calibratePressure
02004430 g     F .text	0000007c alt_main
0200b6f8 g     O .bss	00000100 alt_irq
0200098c g     F .text	0000019c log
02009ea4 g       *ABS*	00000000 __flash_rwdata_start
02002abc g     F .text	00000088 .hidden __eqdf2
0200b6e4 g     O .bss	00000014 p
04011000 g       *ABS*	00000000 __alt_mem_flash
02001400 g     F .text	00000440 .hidden __divsf3
02002b44 g     F .text	000000dc .hidden __gtdf2
02007d14 g     F .text	00000024 altera_nios2_gen2_irq_init
02004334 g     F .text	00000010 __errno
0200680c g     F .text	000000fc epcs_sector_erase
00008000 g     F .entry	0000000c __reset
00008100 g       *ABS*	00000000 __flash_exceptions_start
0200b6e0 g     O .bss	00000004 errno
0200b6c8 g     O .bss	00000004 alt_argv
02011e6c g       *ABS*	00000000 _gp
020044ac g     F .text	00000030 usleep
02009cec g     O .rwdata	00000180 alt_fd_list
0200015c g     F .text	000003b8 getTemperature
02006a50 g     F .text	0000006c epcs_write_status_register
020072fc g     F .text	00000090 alt_find_dev
02008068 g     F .text	00000148 memcpy
02003d88 g     F .text	000000dc .hidden __floatsidf
020077ec g     F .text	0000007c alt_io_redirect
02008514 g       *ABS*	00000000 __DTOR_END__
02007f04 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02004f14 g     F .text	00000100 alt_epcs_flash_write_block
02001244 g     F .text	00000074 __fpclassifyd
020056d4 g     F .text	0000021c altera_avalon_jtag_uart_read
02004278 g     F .text	00000064 .hidden __udivsi3
02009e88 g     O .rwdata	00000004 alt_max_fd
02003e64 g     F .text	00000110 .hidden __extendsfdf2
02008684 g     O TempMemory	00000004 temp
02001840 g     F .text	000008ac .hidden __adddf3
02004e9c g     F .text	00000078 alt_epcs_flash_erase_block
02009e6c g     O .rwdata	00000004 __fdlib_version
02009e70 g     O .rwdata	00000004 _global_impure_ptr
02006d1c g     F .text	0000005c epcs_exit_4_bytes_mode
0200b7f8 g       *ABS*	00000000 __bss_end
02007618 g     F .text	000000f0 alt_iic_isr_register
020065e8 g     F .text	0000003c alt_up_adc_open_dev
02007c0c g     F .text	00000108 alt_tick
02005e20 g     F .text	000000ac altera_avalon_uart_init
020075cc g     F .text	0000004c alt_ic_irq_enabled
02007b70 g     F .text	0000009c alt_alarm_stop
0200b6d0 g     O .bss	00000004 alt_irq_active
000081dc g     F .exceptions	000000d4 alt_irq_handler
02009cc4 g     O .rwdata	00000028 alt_dev_null
02000630 g     F .text	0000035c getPressure
02007110 g     F .text	00000020 alt_dcache_flush_all
02008688 g     O PressureMemory	00000004 pressure
02009ea4 g       *ABS*	00000000 __ram_rwdata_end
02009e80 g     O .rwdata	00000008 alt_dev_list
02008684 g       *ABS*	00000000 __ram_rodata_end
020042dc g     F .text	00000058 .hidden __umodsi3
02006bd8 g     F .text	00000068 epcs_read_electronic_signature
0200b7f8 g       *ABS*	00000000 end
0200643c g     F .text	000001ac altera_avalon_uart_write
02005210 g     F .text	000000c0 altera_avalon_jtag_uart_init
000082b0 g     F .exceptions	00000060 alt_instruction_exception_entry
02008514 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02005d70 g     F .text	00000060 altera_avalon_uart_write_fd
0200411c g     F .text	00000064 .hidden __clzsi2
02005dd0 g     F .text	00000050 altera_avalon_uart_close_fd
020058f0 g     F .text	00000224 altera_avalon_jtag_uart_write
02008360 g     F .text	00000180 __call_exitprocs
02000000 g     F .text	0000003c _start
0200b6d4 g     O .bss	00000004 _alt_tick_rate
02005b14 g     F .text	000001fc alt_avalon_spi_command
0200b6d8 g     O .bss	00000004 _alt_nticks
02004548 g     F .text	00000068 alt_sys_init
02008248 g     F .text	00000118 __register_exitproc
0200557c g     F .text	00000068 altera_avalon_jtag_uart_close
020013d8 g     F .text	00000028 .hidden __mulsi3
02008684 g       *ABS*	00000000 __ram_rwdata_start
02008514 g       *ABS*	00000000 __ram_rodata_start
0200673c g     F .text	0000005c epcs_read_status_register
020050ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02007e40 g     F .text	000000c4 alt_get_fd
02006ea4 g     F .text	00000158 alt_busy_sleep
02006c40 g     F .text	00000080 epcs_read_device_id
02007fec g     F .text	0000007c memcmp
0200516c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0200b7f8 g       *ABS*	00000000 __alt_stack_base
020051bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020020ec g     F .text	000009d0 .hidden __divdf3
02002c20 g     F .text	0000086c .hidden __muldf3
02007d38 g     F .text	00000108 alt_find_file
02007198 g     F .text	000000a4 alt_dev_llist_insert
02009e90 g     O .rwdata	00000008 alt_flash_dev_list
0200b6c4 g       *ABS*	00000000 __bss_start
0200003c g     F .text	00000120 main
0200b6cc g     O .bss	00000004 alt_envp
0200510c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
020012b8 g     F .text	00000008 matherr
02003f74 g     F .text	000001a8 .hidden __truncdfsf2
02009e8c g     O .rwdata	00000004 alt_errno
02006624 g     F .text	00000118 alt_up_adc_read
02004180 g     F .text	00000084 .hidden __divsi3
02008514 g       *ABS*	00000000 __CTOR_END__
02004b1c g     F .text	00000260 alt_epcs_flash_write
02008514 g       *ABS*	00000000 __flash_rodata_start
02008514 g       *ABS*	00000000 __DTOR_LIST__
00008000 g       *ABS*	00000000 __alt_mem_onchip_2
02002abc g     F .text	00000088 .hidden __nedf2
02004510 g     F .text	00000038 alt_irq_init
02007aec g     F .text	00000084 alt_release_fd
02008525 g     O .rodata	00000100 .hidden __clz_tab
02007fa0 g     F .text	00000014 atexit
02009e74 g     O .rwdata	00000004 _impure_ptr
0200b6c4 g     O .bss	00000004 alt_argc
0200729c g     F .text	00000060 _do_dtors
02000b28 g     F .text	0000071c __ieee754_log
00008100 g       .exceptions	00000000 alt_irq_entry
02009e78 g     O .rwdata	00000008 alt_fs_list
020012c0 g     F .text	0000000c nan
00008100 g       *ABS*	00000000 __ram_exceptions_start
02006908 g     F .text	000000f4 epcs_read_buffer
020045e4 g     F .text	00000054 alt_epcs_flash_init
02007468 g     F .text	00000050 alt_ic_isr_register
02009ea4 g       *ABS*	00000000 _edata
02005d10 g     F .text	00000060 altera_avalon_uart_read_fd
0200b7f8 g       *ABS*	00000000 _end
0200738c g     F .text	00000068 alt_flash_open_dev
00008310 g       *ABS*	00000000 __ram_exceptions_end
020055e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02007540 g     F .text	0000008c alt_ic_irq_disable
02006cc0 g     F .text	0000005c epcs_enter_4_bytes_mode
02007fb4 g     F .text	00000038 exit
020073f4 g     F .text	00000054 alt_flash_close_dev
02004204 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00008100 g     F .exceptions	00000000 alt_exception
02000000 g       *ABS*	00000000 __alt_mem_sdram
02006194 g     F .text	00000054 altera_avalon_uart_close
020084e0 g     F .text	00000034 _exit
02006d78 g     F .text	0000012c alt_alarm_start
020012cc g     F .text	0000010c .hidden __muldi3
020081b0 g     F .text	00000098 strlen
020069fc g     F .text	00000054 epcs_write_enable
02007990 g     F .text	0000015c open
02002b44 g     F .text	000000dc .hidden __gedf2
02007448 g     F .text	00000020 alt_icache_flush_all
02009e98 g     O .rwdata	00000004 alt_priority_mask
020074b8 g     F .text	00000088 alt_ic_irq_enable
02006224 g     F .text	000001dc altera_avalon_uart_read
0200348c g     F .text	000008fc .hidden __subdf3
02005014 g     F .text	00000098 alt_epcs_flash_read
02009e9c g     O .rwdata	00000008 alt_alarm_list
0200723c g     F .text	00000060 _do_ctors
02007038 g     F .text	000000d8 close
020043ac g     F .text	00000084 alt_load
02006abc g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
    8004:	08400014 	ori	at,at,0
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008100 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8100:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8104:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8108:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    810c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8110:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8114:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8118:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    811c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8120:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8124:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8128:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    812c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8130:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8134:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8138:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    813c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8140:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8144:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8148:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    814c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8150:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8154:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8158:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    815c:	10000326 	beq	r2,zero,816c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8160:	20000226 	beq	r4,zero,816c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8164:	00081dc0 	call	81dc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8168:	00000706 	br	8188 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    816c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8170:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8174:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8178:	00082b00 	call	82b0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    817c:	1000021e 	bne	r2,zero,8188 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    8180:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8184:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8188:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    818c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    8190:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    8194:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    8198:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    819c:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    81a0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    81a4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    81a8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    81ac:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    81b0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    81b4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    81b8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    81bc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    81c0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    81c4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    81c8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    81cc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    81d0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    81d4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    81d8:	ef80083a 	eret

000081dc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    81dc:	defff904 	addi	sp,sp,-28
    81e0:	dfc00615 	stw	ra,24(sp)
    81e4:	df000515 	stw	fp,20(sp)
    81e8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    81ec:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    81f0:	0005313a 	rdctl	r2,ipending
    81f4:	e0bffe15 	stw	r2,-8(fp)

  return active;
    81f8:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    81fc:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8200:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8204:	00800044 	movi	r2,1
    8208:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    820c:	e0fffb17 	ldw	r3,-20(fp)
    8210:	e0bffc17 	ldw	r2,-16(fp)
    8214:	1884703a 	and	r2,r3,r2
    8218:	10001426 	beq	r2,zero,826c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    821c:	00808074 	movhi	r2,513
    8220:	10adbe04 	addi	r2,r2,-18696
    8224:	e0fffd17 	ldw	r3,-12(fp)
    8228:	180690fa 	slli	r3,r3,3
    822c:	10c5883a 	add	r2,r2,r3
    8230:	10c00017 	ldw	r3,0(r2)
    8234:	00808074 	movhi	r2,513
    8238:	10adbe04 	addi	r2,r2,-18696
    823c:	e13ffd17 	ldw	r4,-12(fp)
    8240:	200890fa 	slli	r4,r4,3
    8244:	1105883a 	add	r2,r2,r4
    8248:	10800104 	addi	r2,r2,4
    824c:	10800017 	ldw	r2,0(r2)
    8250:	1009883a 	mov	r4,r2
    8254:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8258:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    825c:	0005313a 	rdctl	r2,ipending
    8260:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8264:	e0bfff17 	ldw	r2,-4(fp)
    8268:	00000706 	br	8288 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    826c:	e0bffc17 	ldw	r2,-16(fp)
    8270:	1085883a 	add	r2,r2,r2
    8274:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8278:	e0bffd17 	ldw	r2,-12(fp)
    827c:	10800044 	addi	r2,r2,1
    8280:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    8284:	003fe106 	br	820c <__alt_mem_flash+0xfbff720c>

    active = alt_irq_pending ();
    8288:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    828c:	e0bffb17 	ldw	r2,-20(fp)
    8290:	103fdb1e 	bne	r2,zero,8200 <__alt_mem_flash+0xfbff7200>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8294:	0001883a 	nop
}
    8298:	0001883a 	nop
    829c:	e037883a 	mov	sp,fp
    82a0:	dfc00117 	ldw	ra,4(sp)
    82a4:	df000017 	ldw	fp,0(sp)
    82a8:	dec00204 	addi	sp,sp,8
    82ac:	f800283a 	ret

000082b0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    82b0:	defffb04 	addi	sp,sp,-20
    82b4:	dfc00415 	stw	ra,16(sp)
    82b8:	df000315 	stw	fp,12(sp)
    82bc:	df000304 	addi	fp,sp,12
    82c0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    82c4:	00bfffc4 	movi	r2,-1
    82c8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    82cc:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    82d0:	d0a61c17 	ldw	r2,-26512(gp)
    82d4:	10000726 	beq	r2,zero,82f4 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    82d8:	d0a61c17 	ldw	r2,-26512(gp)
    82dc:	e0fffd17 	ldw	r3,-12(fp)
    82e0:	e1bffe17 	ldw	r6,-8(fp)
    82e4:	e17fff17 	ldw	r5,-4(fp)
    82e8:	1809883a 	mov	r4,r3
    82ec:	103ee83a 	callr	r2
    82f0:	00000206 	br	82fc <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    82f4:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    82f8:	0005883a 	mov	r2,zero
}
    82fc:	e037883a 	mov	sp,fp
    8300:	dfc00117 	ldw	ra,4(sp)
    8304:	df000017 	ldw	fp,0(sp)
    8308:	dec00204 	addi	sp,sp,8
    830c:	f800283a 	ret

Disassembly of section .text:

02000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000000:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000008:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 200000c:	d6879b14 	ori	gp,gp,7788
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000010:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000014:	10adb114 	ori	r2,r2,46788

    movhi r3, %hi(__bss_end)
 2000018:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200001c:	18edfe14 	ori	r3,r3,47096

    beq r2, r3, 1f
 2000020:	10c00326 	beq	r2,r3,2000030 <_start+0x30>

0:
    stw zero, (r2)
 2000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200002c:	10fffd36 	bltu	r2,r3,2000024 <__alt_mem_flash+0xfdfef024>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000030:	20043ac0 	call	20043ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000034:	20044300 	call	2004430 <alt_main>

02000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000038:	003fff06 	br	2000038 <__alt_mem_flash+0xfdfef038>

0200003c <main>:
alt_32 getPressure(void);
void calibratePressure(void);
alt_32 getPressure(void);

int main()
{
 200003c:	defff504 	addi	sp,sp,-44
 2000040:	dfc00a15 	stw	ra,40(sp)
 2000044:	df000915 	stw	fp,36(sp)
 2000048:	df000904 	addi	fp,sp,36
	int *tailIndex = (int *)SHARED_RAD_BASE;
 200004c:	0082fff4 	movhi	r2,3071
 2000050:	1098f004 	addi	r2,r2,25536
 2000054:	e0bff715 	stw	r2,-36(fp)
	int radData = 0;
 2000058:	e03ff815 	stw	zero,-32(fp)
	int presData = 0;
 200005c:	e03ff915 	stw	zero,-28(fp)
	int tempData = 0;
 2000060:	e03ffa15 	stw	zero,-24(fp)
	int radChannel = 1;
 2000064:	00800044 	movi	r2,1
 2000068:	e0bffb15 	stw	r2,-20(fp)
	int presChannel = 3;
 200006c:	008000c4 	movi	r2,3
 2000070:	e0bffc15 	stw	r2,-16(fp)
	int tempChannel = 5;
 2000074:	00800144 	movi	r2,5
 2000078:	e0bffd15 	stw	r2,-12(fp)
	int count = 0;
 200007c:	e03ffe15 	stw	zero,-8(fp)
	alt_up_adc_dev *adc = alt_up_adc_open_dev(ADC_NAME);
 2000080:	01008074 	movhi	r4,513
 2000084:	21214504 	addi	r4,r4,-31468
 2000088:	20065e80 	call	20065e8 <alt_up_adc_open_dev>
 200008c:	e0bfff15 	stw	r2,-4(fp)
	while (tailIndex < (int *)SHARED_RAD_END) {
 2000090:	00000706 	br	20000b0 <main+0x74>
		*tailIndex = FLAG;
 2000094:	e0fff717 	ldw	r3,-36(fp)
 2000098:	00a00034 	movhi	r2,32768
 200009c:	10bfffc4 	addi	r2,r2,-1
 20000a0:	18800015 	stw	r2,0(r3)
		tailIndex ++;
 20000a4:	e0bff717 	ldw	r2,-36(fp)
 20000a8:	10800104 	addi	r2,r2,4
 20000ac:	e0bff715 	stw	r2,-36(fp)
	int radChannel = 1;
	int presChannel = 3;
	int tempChannel = 5;
	int count = 0;
	alt_up_adc_dev *adc = alt_up_adc_open_dev(ADC_NAME);
	while (tailIndex < (int *)SHARED_RAD_END) {
 20000b0:	e0fff717 	ldw	r3,-36(fp)
 20000b4:	00830034 	movhi	r2,3072
 20000b8:	10bfff84 	addi	r2,r2,-2
 20000bc:	10fff52e 	bgeu	r2,r3,2000094 <__alt_mem_flash+0xfdfef094>
		*tailIndex = FLAG;
		tailIndex ++;
	}
	temp = FLAG;
 20000c0:	00808074 	movhi	r2,513
 20000c4:	10a1a104 	addi	r2,r2,-31100
 20000c8:	00d3c034 	movhi	r3,20224
 20000cc:	10c00015 	stw	r3,0(r2)
	tailIndex = (int *) SHARED_RAD_BASE;
 20000d0:	0082fff4 	movhi	r2,3071
 20000d4:	1098f004 	addi	r2,r2,25536
 20000d8:	e0bff715 	stw	r2,-36(fp)
	while (1) {
		while (adc != NULL) {
 20000dc:	00001c06 	br	2000150 <main+0x114>
			usleep(10);
 20000e0:	01000284 	movi	r4,10
 20000e4:	20044ac0 	call	20044ac <usleep>
			alt_up_adc_update(adc);
 20000e8:	e0bfff17 	ldw	r2,-4(fp)
 20000ec:	10800a17 	ldw	r2,40(r2)
 20000f0:	0007883a 	mov	r3,zero
 20000f4:	10c00035 	stwio	r3,0(r2)
			//TODO: move adc to pin 0?
			radData = alt_up_adc_read(adc, 5);
 20000f8:	01400144 	movi	r5,5
 20000fc:	e13fff17 	ldw	r4,-4(fp)
 2000100:	20066240 	call	2006624 <alt_up_adc_read>
 2000104:	e0bff815 	stw	r2,-32(fp)
			radData /= 16;
 2000108:	e0bff817 	ldw	r2,-32(fp)
 200010c:	1000010e 	bge	r2,zero,2000114 <main+0xd8>
 2000110:	108003c4 	addi	r2,r2,15
 2000114:	1005d13a 	srai	r2,r2,4
 2000118:	e0bff815 	stw	r2,-32(fp)
			//fprintf(stderr, "%d!\n", data);
			*tailIndex = radData;
 200011c:	e0bff717 	ldw	r2,-36(fp)
 2000120:	e0fff817 	ldw	r3,-32(fp)
 2000124:	10c00015 	stw	r3,0(r2)
			tailIndex ++;
 2000128:	e0bff717 	ldw	r2,-36(fp)
 200012c:	10800104 	addi	r2,r2,4
 2000130:	e0bff715 	stw	r2,-36(fp)
			if (tailIndex < (int *)SHARED_RAD_END) {
 2000134:	e0fff717 	ldw	r3,-36(fp)
 2000138:	00830034 	movhi	r2,3072
 200013c:	10bfff84 	addi	r2,r2,-2
 2000140:	10c00336 	bltu	r2,r3,2000150 <main+0x114>
				tailIndex = (int *)SHARED_RAD_BASE;
 2000144:	0082fff4 	movhi	r2,3071
 2000148:	1098f004 	addi	r2,r2,25536
 200014c:	e0bff715 	stw	r2,-36(fp)
		tailIndex ++;
	}
	temp = FLAG;
	tailIndex = (int *) SHARED_RAD_BASE;
	while (1) {
		while (adc != NULL) {
 2000150:	e0bfff17 	ldw	r2,-4(fp)
 2000154:	103fe21e 	bne	r2,zero,20000e0 <__alt_mem_flash+0xfdfef0e0>
//				count = 0;
//			} else {
//				count ++;
//			}
		}
	}
 2000158:	003fe006 	br	20000dc <__alt_mem_flash+0xfdfef0dc>

0200015c <getTemperature>:
  return 0;
}

float getTemperature (int tempData){
 200015c:	defff404 	addi	sp,sp,-48
 2000160:	dfc00b15 	stw	ra,44(sp)
 2000164:	df000a15 	stw	fp,40(sp)
 2000168:	dcc00915 	stw	r19,36(sp)
 200016c:	dc800815 	stw	r18,32(sp)
 2000170:	dc400715 	stw	r17,28(sp)
 2000174:	dc000615 	stw	r16,24(sp)
 2000178:	df000a04 	addi	fp,sp,40
 200017c:	e13ffb15 	stw	r4,-20(fp)
	//converts the adc reading into an actual voltage based off of slope.
	float voltage = (0.000502512562 * tempData - 0.095979899);
 2000180:	e13ffb17 	ldw	r4,-20(fp)
 2000184:	2003d880 	call	2003d88 <__floatsidf>
 2000188:	1011883a 	mov	r8,r2
 200018c:	1813883a 	mov	r9,r3
 2000190:	01a0a0f4 	movhi	r6,33411
 2000194:	31b86304 	addi	r6,r6,-7796
 2000198:	01cfd034 	movhi	r7,16192
 200019c:	39ddd844 	addi	r7,r7,30561
 20001a0:	4009883a 	mov	r4,r8
 20001a4:	480b883a 	mov	r5,r9
 20001a8:	2002c200 	call	2002c20 <__muldf3>
 20001ac:	1009883a 	mov	r4,r2
 20001b0:	180b883a 	mov	r5,r3
 20001b4:	2005883a 	mov	r2,r4
 20001b8:	2807883a 	mov	r3,r5
 20001bc:	019fd1f4 	movhi	r6,32583
 20001c0:	31910744 	addi	r6,r6,17437
 20001c4:	01cfee74 	movhi	r7,16313
 20001c8:	39e488c4 	addi	r7,r7,-28125
 20001cc:	1009883a 	mov	r4,r2
 20001d0:	180b883a 	mov	r5,r3
 20001d4:	200348c0 	call	200348c <__subdf3>
 20001d8:	1009883a 	mov	r4,r2
 20001dc:	180b883a 	mov	r5,r3
 20001e0:	2005883a 	mov	r2,r4
 20001e4:	2807883a 	mov	r3,r5
 20001e8:	1009883a 	mov	r4,r2
 20001ec:	180b883a 	mov	r5,r3
 20001f0:	2003f740 	call	2003f74 <__truncdfsf2>
 20001f4:	1007883a 	mov	r3,r2
 20001f8:	e0fff615 	stw	r3,-40(fp)
	//Need to convert our voltage reading into the resistance across the thermistor. To find this we use 3.3(R1)/(3.3-vadc) - R1
	float resistance = (3.3 * 10000)/(3.3 - voltage) - 10000;
 20001fc:	e13ff617 	ldw	r4,-40(fp)
 2000200:	2003e640 	call	2003e64 <__extendsfdf2>
 2000204:	1009883a 	mov	r4,r2
 2000208:	180b883a 	mov	r5,r3
 200020c:	200d883a 	mov	r6,r4
 2000210:	280f883a 	mov	r7,r5
 2000214:	011999b4 	movhi	r4,26214
 2000218:	21199984 	addi	r4,r4,26214
 200021c:	015002b4 	movhi	r5,16394
 2000220:	29599984 	addi	r5,r5,26214
 2000224:	200348c0 	call	200348c <__subdf3>
 2000228:	1009883a 	mov	r4,r2
 200022c:	180b883a 	mov	r5,r3
 2000230:	2005883a 	mov	r2,r4
 2000234:	2807883a 	mov	r3,r5
 2000238:	100d883a 	mov	r6,r2
 200023c:	180f883a 	mov	r7,r3
 2000240:	0009883a 	mov	r4,zero
 2000244:	01503834 	movhi	r5,16608
 2000248:	29474004 	addi	r5,r5,7424
 200024c:	20020ec0 	call	20020ec <__divdf3>
 2000250:	1009883a 	mov	r4,r2
 2000254:	180b883a 	mov	r5,r3
 2000258:	2005883a 	mov	r2,r4
 200025c:	2807883a 	mov	r3,r5
 2000260:	000d883a 	mov	r6,zero
 2000264:	01d03134 	movhi	r7,16580
 2000268:	39e20004 	addi	r7,r7,-30720
 200026c:	1009883a 	mov	r4,r2
 2000270:	180b883a 	mov	r5,r3
 2000274:	200348c0 	call	200348c <__subdf3>
 2000278:	1009883a 	mov	r4,r2
 200027c:	180b883a 	mov	r5,r3
 2000280:	2005883a 	mov	r2,r4
 2000284:	2807883a 	mov	r3,r5
 2000288:	1009883a 	mov	r4,r2
 200028c:	180b883a 	mov	r5,r3
 2000290:	2003f740 	call	2003f74 <__truncdfsf2>
 2000294:	1007883a 	mov	r3,r2
 2000298:	e0fff715 	stw	r3,-36(fp)
	//constants for the NTCLE100E3103HT1 in the Steinhart-Hart equation (T = 1/(A + Bln(resistance) + Dln^3(resistance))
	float a_const = 0.003354016;
 200029c:	008ed734 	movhi	r2,15196
 20002a0:	10b3c344 	addi	r2,r2,-12531
 20002a4:	e0bff815 	stw	r2,-32(fp)
	float b_const = 0.000256985;
 20002a8:	008e61f4 	movhi	r2,14727
 20002ac:	10aefc44 	addi	r2,r2,-17423
 20002b0:	e0bff915 	stw	r2,-28(fp)
	float d_const = 0.00000006383091;
 20002b4:	008ce274 	movhi	r2,13193
 20002b8:	1084da84 	addi	r2,r2,4970
 20002bc:	e0bffa15 	stw	r2,-24(fp)
	//Steinhart-Hart to find temperature then return it.
	return 1 / (a_const + b_const * log(resistance / 10000) + d_const * log(resistance / 10000) * log(resistance / 10000) * log(resistance / 10000));
 20002c0:	e13ff817 	ldw	r4,-32(fp)
 20002c4:	2003e640 	call	2003e64 <__extendsfdf2>
 20002c8:	1021883a 	mov	r16,r2
 20002cc:	1823883a 	mov	r17,r3
 20002d0:	e13ff917 	ldw	r4,-28(fp)
 20002d4:	2003e640 	call	2003e64 <__extendsfdf2>
 20002d8:	1025883a 	mov	r18,r2
 20002dc:	1827883a 	mov	r19,r3
 20002e0:	01518734 	movhi	r5,17948
 20002e4:	29500004 	addi	r5,r5,16384
 20002e8:	e13ff717 	ldw	r4,-36(fp)
 20002ec:	20014000 	call	2001400 <__divsf3>
 20002f0:	1007883a 	mov	r3,r2
 20002f4:	1805883a 	mov	r2,r3
 20002f8:	1009883a 	mov	r4,r2
 20002fc:	2003e640 	call	2003e64 <__extendsfdf2>
 2000300:	100b883a 	mov	r5,r2
 2000304:	180d883a 	mov	r6,r3
 2000308:	2809883a 	mov	r4,r5
 200030c:	300b883a 	mov	r5,r6
 2000310:	200098c0 	call	200098c <log>
 2000314:	1009883a 	mov	r4,r2
 2000318:	180b883a 	mov	r5,r3
 200031c:	200d883a 	mov	r6,r4
 2000320:	280f883a 	mov	r7,r5
 2000324:	9009883a 	mov	r4,r18
 2000328:	980b883a 	mov	r5,r19
 200032c:	2002c200 	call	2002c20 <__muldf3>
 2000330:	1009883a 	mov	r4,r2
 2000334:	180b883a 	mov	r5,r3
 2000338:	2005883a 	mov	r2,r4
 200033c:	2807883a 	mov	r3,r5
 2000340:	100d883a 	mov	r6,r2
 2000344:	180f883a 	mov	r7,r3
 2000348:	8009883a 	mov	r4,r16
 200034c:	880b883a 	mov	r5,r17
 2000350:	20018400 	call	2001840 <__adddf3>
 2000354:	1009883a 	mov	r4,r2
 2000358:	180b883a 	mov	r5,r3
 200035c:	2021883a 	mov	r16,r4
 2000360:	2823883a 	mov	r17,r5
 2000364:	e13ffa17 	ldw	r4,-24(fp)
 2000368:	2003e640 	call	2003e64 <__extendsfdf2>
 200036c:	1025883a 	mov	r18,r2
 2000370:	1827883a 	mov	r19,r3
 2000374:	01518734 	movhi	r5,17948
 2000378:	29500004 	addi	r5,r5,16384
 200037c:	e13ff717 	ldw	r4,-36(fp)
 2000380:	20014000 	call	2001400 <__divsf3>
 2000384:	1007883a 	mov	r3,r2
 2000388:	1805883a 	mov	r2,r3
 200038c:	1009883a 	mov	r4,r2
 2000390:	2003e640 	call	2003e64 <__extendsfdf2>
 2000394:	100b883a 	mov	r5,r2
 2000398:	180d883a 	mov	r6,r3
 200039c:	2809883a 	mov	r4,r5
 20003a0:	300b883a 	mov	r5,r6
 20003a4:	200098c0 	call	200098c <log>
 20003a8:	1009883a 	mov	r4,r2
 20003ac:	180b883a 	mov	r5,r3
 20003b0:	200d883a 	mov	r6,r4
 20003b4:	280f883a 	mov	r7,r5
 20003b8:	9009883a 	mov	r4,r18
 20003bc:	980b883a 	mov	r5,r19
 20003c0:	2002c200 	call	2002c20 <__muldf3>
 20003c4:	1009883a 	mov	r4,r2
 20003c8:	180b883a 	mov	r5,r3
 20003cc:	2025883a 	mov	r18,r4
 20003d0:	2827883a 	mov	r19,r5
 20003d4:	01518734 	movhi	r5,17948
 20003d8:	29500004 	addi	r5,r5,16384
 20003dc:	e13ff717 	ldw	r4,-36(fp)
 20003e0:	20014000 	call	2001400 <__divsf3>
 20003e4:	1007883a 	mov	r3,r2
 20003e8:	1805883a 	mov	r2,r3
 20003ec:	1009883a 	mov	r4,r2
 20003f0:	2003e640 	call	2003e64 <__extendsfdf2>
 20003f4:	100b883a 	mov	r5,r2
 20003f8:	180d883a 	mov	r6,r3
 20003fc:	2809883a 	mov	r4,r5
 2000400:	300b883a 	mov	r5,r6
 2000404:	200098c0 	call	200098c <log>
 2000408:	1009883a 	mov	r4,r2
 200040c:	180b883a 	mov	r5,r3
 2000410:	200d883a 	mov	r6,r4
 2000414:	280f883a 	mov	r7,r5
 2000418:	9009883a 	mov	r4,r18
 200041c:	980b883a 	mov	r5,r19
 2000420:	2002c200 	call	2002c20 <__muldf3>
 2000424:	1009883a 	mov	r4,r2
 2000428:	180b883a 	mov	r5,r3
 200042c:	2025883a 	mov	r18,r4
 2000430:	2827883a 	mov	r19,r5
 2000434:	01518734 	movhi	r5,17948
 2000438:	29500004 	addi	r5,r5,16384
 200043c:	e13ff717 	ldw	r4,-36(fp)
 2000440:	20014000 	call	2001400 <__divsf3>
 2000444:	1007883a 	mov	r3,r2
 2000448:	1805883a 	mov	r2,r3
 200044c:	1009883a 	mov	r4,r2
 2000450:	2003e640 	call	2003e64 <__extendsfdf2>
 2000454:	100b883a 	mov	r5,r2
 2000458:	180d883a 	mov	r6,r3
 200045c:	2809883a 	mov	r4,r5
 2000460:	300b883a 	mov	r5,r6
 2000464:	200098c0 	call	200098c <log>
 2000468:	1009883a 	mov	r4,r2
 200046c:	180b883a 	mov	r5,r3
 2000470:	200d883a 	mov	r6,r4
 2000474:	280f883a 	mov	r7,r5
 2000478:	9009883a 	mov	r4,r18
 200047c:	980b883a 	mov	r5,r19
 2000480:	2002c200 	call	2002c20 <__muldf3>
 2000484:	1009883a 	mov	r4,r2
 2000488:	180b883a 	mov	r5,r3
 200048c:	2005883a 	mov	r2,r4
 2000490:	2807883a 	mov	r3,r5
 2000494:	100d883a 	mov	r6,r2
 2000498:	180f883a 	mov	r7,r3
 200049c:	8009883a 	mov	r4,r16
 20004a0:	880b883a 	mov	r5,r17
 20004a4:	20018400 	call	2001840 <__adddf3>
 20004a8:	1009883a 	mov	r4,r2
 20004ac:	180b883a 	mov	r5,r3
 20004b0:	2005883a 	mov	r2,r4
 20004b4:	2807883a 	mov	r3,r5
 20004b8:	100d883a 	mov	r6,r2
 20004bc:	180f883a 	mov	r7,r3
 20004c0:	0009883a 	mov	r4,zero
 20004c4:	014ffc34 	movhi	r5,16368
 20004c8:	20020ec0 	call	20020ec <__divdf3>
 20004cc:	1009883a 	mov	r4,r2
 20004d0:	180b883a 	mov	r5,r3
 20004d4:	2005883a 	mov	r2,r4
 20004d8:	2807883a 	mov	r3,r5
 20004dc:	1009883a 	mov	r4,r2
 20004e0:	180b883a 	mov	r5,r3
 20004e4:	2003f740 	call	2003f74 <__truncdfsf2>
 20004e8:	1007883a 	mov	r3,r2
 20004ec:	1805883a 	mov	r2,r3
}
 20004f0:	e6fffc04 	addi	sp,fp,-16
 20004f4:	dfc00517 	ldw	ra,20(sp)
 20004f8:	df000417 	ldw	fp,16(sp)
 20004fc:	dcc00317 	ldw	r19,12(sp)
 2000500:	dc800217 	ldw	r18,8(sp)
 2000504:	dc400117 	ldw	r17,4(sp)
 2000508:	dc000017 	ldw	r16,0(sp)
 200050c:	dec00604 	addi	sp,sp,24
 2000510:	f800283a 	ret

02000514 <calibratePressure>:
	alt_u8 read_code[2];

} p;

/* Calibrate pressure from factory settings on the MS5611 */
void calibratePressure(void) {
 2000514:	defffa04 	addi	sp,sp,-24
 2000518:	dfc00515 	stw	ra,20(sp)
 200051c:	df000415 	stw	fp,16(sp)
 2000520:	df000404 	addi	fp,sp,16
	p.calibration_code[0] = 0b10100010;
 2000524:	00808074 	movhi	r2,513
 2000528:	10adb904 	addi	r2,r2,-18716
 200052c:	00ffe884 	movi	r3,-94
 2000530:	10c00005 	stb	r3,0(r2)
	p.calibration_code[0] = 0b10100100;
 2000534:	00808074 	movhi	r2,513
 2000538:	10adb904 	addi	r2,r2,-18716
 200053c:	00ffe904 	movi	r3,-92
 2000540:	10c00005 	stb	r3,0(r2)
	p.calibration_code[0] = 0b10100110;
 2000544:	00808074 	movhi	r2,513
 2000548:	10adb904 	addi	r2,r2,-18716
 200054c:	00ffe984 	movi	r3,-90
 2000550:	10c00005 	stb	r3,0(r2)
	p.calibration_code[0] = 0b10101000;
 2000554:	00808074 	movhi	r2,513
 2000558:	10adb904 	addi	r2,r2,-18716
 200055c:	00ffea04 	movi	r3,-88
 2000560:	10c00005 	stb	r3,0(r2)
	p.calibration_code[0] = 0b10101010;
 2000564:	00808074 	movhi	r2,513
 2000568:	10adb904 	addi	r2,r2,-18716
 200056c:	00ffea84 	movi	r3,-86
 2000570:	10c00005 	stb	r3,0(r2)
	p.calibration_code[0] = 0b10101100;
 2000574:	00808074 	movhi	r2,513
 2000578:	10adb904 	addi	r2,r2,-18716
 200057c:	00ffeb04 	movi	r3,-84
 2000580:	10c00005 	stb	r3,0(r2)

	p.read_code[0] = 0x48;
 2000584:	00808074 	movhi	r2,513
 2000588:	10adb904 	addi	r2,r2,-18716
 200058c:	00c01204 	movi	r3,72
 2000590:	10c00485 	stb	r3,18(r2)
	p.read_code[1] = 0x58;
 2000594:	00808074 	movhi	r2,513
 2000598:	10adb904 	addi	r2,r2,-18716
 200059c:	00c01604 	movi	r3,88
 20005a0:	10c004c5 	stb	r3,19(r2)
	/* Calibrate values c1 through c6 */
	for (int i = 0; i < 6; i++) {
 20005a4:	e03fff15 	stw	zero,-4(fp)
 20005a8:	00001806 	br	200060c <calibratePressure+0xf8>
		alt_avalon_spi_command(SPI_0_BASE, 0,
				1, &(p.calibration_code[i]), //write data, 1 byte
 20005ac:	e0ffff17 	ldw	r3,-4(fp)
 20005b0:	00808074 	movhi	r2,513
 20005b4:	10adb904 	addi	r2,r2,-18716
 20005b8:	1889883a 	add	r4,r3,r2
				2, &(p.calibration[i]),		 //read data, 2 bytes
 20005bc:	e0bfff17 	ldw	r2,-4(fp)
 20005c0:	10800084 	addi	r2,r2,2
 20005c4:	1087883a 	add	r3,r2,r2
 20005c8:	00808074 	movhi	r2,513
 20005cc:	10adb904 	addi	r2,r2,-18716
 20005d0:	1885883a 	add	r2,r3,r2
 20005d4:	10800084 	addi	r2,r2,2

	p.read_code[0] = 0x48;
	p.read_code[1] = 0x58;
	/* Calibrate values c1 through c6 */
	for (int i = 0; i < 6; i++) {
		alt_avalon_spi_command(SPI_0_BASE, 0,
 20005d8:	d8000215 	stw	zero,8(sp)
 20005dc:	d8800115 	stw	r2,4(sp)
 20005e0:	00800084 	movi	r2,2
 20005e4:	d8800015 	stw	r2,0(sp)
 20005e8:	200f883a 	mov	r7,r4
 20005ec:	01800044 	movi	r6,1
 20005f0:	000b883a 	mov	r5,zero
 20005f4:	01010074 	movhi	r4,1025
 20005f8:	21080804 	addi	r4,r4,8224
 20005fc:	2005b140 	call	2005b14 <alt_avalon_spi_command>
	p.calibration_code[0] = 0b10101100;

	p.read_code[0] = 0x48;
	p.read_code[1] = 0x58;
	/* Calibrate values c1 through c6 */
	for (int i = 0; i < 6; i++) {
 2000600:	e0bfff17 	ldw	r2,-4(fp)
 2000604:	10800044 	addi	r2,r2,1
 2000608:	e0bfff15 	stw	r2,-4(fp)
 200060c:	e0bfff17 	ldw	r2,-4(fp)
 2000610:	10800190 	cmplti	r2,r2,6
 2000614:	103fe51e 	bne	r2,zero,20005ac <__alt_mem_flash+0xfdfef5ac>
				1, &(p.calibration_code[i]), //write data, 1 byte
				2, &(p.calibration[i]),		 //read data, 2 bytes
				0);

	}
}
 2000618:	0001883a 	nop
 200061c:	e037883a 	mov	sp,fp
 2000620:	dfc00117 	ldw	ra,4(sp)
 2000624:	df000017 	ldw	fp,0(sp)
 2000628:	dec00204 	addi	sp,sp,8
 200062c:	f800283a 	ret

02000630 <getPressure>:

/* Get Current Pressure value */
alt_32 getPressure(void) {
 2000630:	deffd904 	addi	sp,sp,-156
 2000634:	dfc02615 	stw	ra,152(sp)
 2000638:	df002515 	stw	fp,148(sp)
 200063c:	ddc02415 	stw	r23,144(sp)
 2000640:	dd802315 	stw	r22,140(sp)
 2000644:	dd402215 	stw	r21,136(sp)
 2000648:	dd002115 	stw	r20,132(sp)
 200064c:	dcc02015 	stw	r19,128(sp)
 2000650:	dc801f15 	stw	r18,124(sp)
 2000654:	dc401e15 	stw	r17,120(sp)
 2000658:	dc001d15 	stw	r16,116(sp)
 200065c:	df002504 	addi	fp,sp,148
	/* Request and read current pressure value */
	alt_u32 uncal_pressure = 0;
 2000660:	e03fe415 	stw	zero,-112(fp)
	alt_avalon_spi_command(SPI_0_BASE, 0,
 2000664:	d8000215 	stw	zero,8(sp)
 2000668:	e0bfe404 	addi	r2,fp,-112
 200066c:	d8800115 	stw	r2,4(sp)
 2000670:	00800104 	movi	r2,4
 2000674:	d8800015 	stw	r2,0(sp)
 2000678:	01c08074 	movhi	r7,513
 200067c:	39edbd84 	addi	r7,r7,-18698
 2000680:	01800044 	movi	r6,1
 2000684:	000b883a 	mov	r5,zero
 2000688:	01010074 	movhi	r4,1025
 200068c:	21080804 	addi	r4,r4,8224
 2000690:	2005b140 	call	2005b14 <alt_avalon_spi_command>
			1, &(p.read_code[0]), //write data, 1 byte
			4, &(uncal_pressure), //read data, 2 bytes
			0);

	/* Request and read current temperature value */
	alt_u32 d2 = 0;
 2000694:	e03fe515 	stw	zero,-108(fp)
		alt_avalon_spi_command(SPI_0_BASE, 0,
 2000698:	d8000215 	stw	zero,8(sp)
 200069c:	e0bfe504 	addi	r2,fp,-108
 20006a0:	d8800115 	stw	r2,4(sp)
 20006a4:	00800104 	movi	r2,4
 20006a8:	d8800015 	stw	r2,0(sp)
 20006ac:	01c08074 	movhi	r7,513
 20006b0:	39edbdc4 	addi	r7,r7,-18697
 20006b4:	01800044 	movi	r6,1
 20006b8:	000b883a 	mov	r5,zero
 20006bc:	01010074 	movhi	r4,1025
 20006c0:	21080804 	addi	r4,r4,8224
 20006c4:	2005b140 	call	2005b14 <alt_avalon_spi_command>
				1, &(p.read_code[1]), //write data, 1 byte
				4, &(d2), //read data, 2 bytes
				0);

	/* Calculate temperature-adjusted pressure */
	alt_32 dT = (alt_64) d2 - (((alt_64) p.calibration[4]) * (256));
 20006c8:	e0ffe517 	ldw	r3,-108(fp)
 20006cc:	00808074 	movhi	r2,513
 20006d0:	10adb904 	addi	r2,r2,-18716
 20006d4:	1080038b 	ldhu	r2,14(r2)
 20006d8:	10bfffcc 	andi	r2,r2,65535
 20006dc:	1004923a 	slli	r2,r2,8
 20006e0:	1885c83a 	sub	r2,r3,r2
 20006e4:	e0bfde15 	stw	r2,-136(fp)
	alt_64 offset = ((alt_64) p.calibration[1]) * (65536)
 20006e8:	00808074 	movhi	r2,513
 20006ec:	10adb904 	addi	r2,r2,-18716
 20006f0:	1080020b 	ldhu	r2,8(r2)
 20006f4:	10bfffcc 	andi	r2,r2,65535
 20006f8:	1029883a 	mov	r20,r2
 20006fc:	002b883a 	mov	r21,zero
 2000700:	a004d43a 	srli	r2,r20,16
 2000704:	a826943a 	slli	r19,r21,16
 2000708:	14e6b03a 	or	r19,r2,r19
 200070c:	a024943a 	slli	r18,r20,16
			+ ((((alt_64) p.calibration[3]) * ((alt_64) dT)) / (128));
 2000710:	00808074 	movhi	r2,513
 2000714:	10adb904 	addi	r2,r2,-18716
 2000718:	1080030b 	ldhu	r2,12(r2)
 200071c:	10bfffcc 	andi	r2,r2,65535
 2000720:	e0bfe615 	stw	r2,-104(fp)
 2000724:	e03fe715 	stw	zero,-100(fp)
 2000728:	e0bfde17 	ldw	r2,-136(fp)
 200072c:	e0bfe815 	stw	r2,-96(fp)
 2000730:	1005d7fa 	srai	r2,r2,31
 2000734:	e0bfe915 	stw	r2,-92(fp)
 2000738:	e1bfe817 	ldw	r6,-96(fp)
 200073c:	e1ffe917 	ldw	r7,-92(fp)
 2000740:	e13fe617 	ldw	r4,-104(fp)
 2000744:	e17fe717 	ldw	r5,-100(fp)
 2000748:	20012cc0 	call	20012cc <__muldi3>
 200074c:	100d883a 	mov	r6,r2
 2000750:	180f883a 	mov	r7,r3
 2000754:	3009883a 	mov	r4,r6
 2000758:	380b883a 	mov	r5,r7
 200075c:	2005883a 	mov	r2,r4
 2000760:	2807883a 	mov	r3,r5
 2000764:	1800090e 	bge	r3,zero,200078c <getPressure+0x15c>
 2000768:	01c01fc4 	movi	r7,127
 200076c:	0011883a 	mov	r8,zero
 2000770:	11c9883a 	add	r4,r2,r7
 2000774:	208d803a 	cmpltu	r6,r4,r2
 2000778:	1a0b883a 	add	r5,r3,r8
 200077c:	3145883a 	add	r2,r6,r5
 2000780:	100b883a 	mov	r5,r2
 2000784:	2005883a 	mov	r2,r4
 2000788:	2807883a 	mov	r3,r5
 200078c:	1808967a 	slli	r4,r3,25
 2000790:	100ad1fa 	srli	r5,r2,7
 2000794:	e17ff415 	stw	r5,-48(fp)
 2000798:	e17ff417 	ldw	r5,-48(fp)
 200079c:	2148b03a 	or	r4,r4,r5
 20007a0:	e13ff415 	stw	r4,-48(fp)
 20007a4:	1809d1fa 	srai	r4,r3,7
 20007a8:	e13ff515 	stw	r4,-44(fp)
 20007ac:	e13ff417 	ldw	r4,-48(fp)
 20007b0:	e17ff517 	ldw	r5,-44(fp)
				4, &(d2), //read data, 2 bytes
				0);

	/* Calculate temperature-adjusted pressure */
	alt_32 dT = (alt_64) d2 - (((alt_64) p.calibration[4]) * (256));
	alt_64 offset = ((alt_64) p.calibration[1]) * (65536)
 20007b4:	9105883a 	add	r2,r18,r4
 20007b8:	148d803a 	cmpltu	r6,r2,r18
 20007bc:	9947883a 	add	r3,r19,r5
 20007c0:	30c9883a 	add	r4,r6,r3
 20007c4:	2007883a 	mov	r3,r4
 20007c8:	e0bfdf15 	stw	r2,-132(fp)
 20007cc:	e0ffe015 	stw	r3,-128(fp)
			+ ((((alt_64) p.calibration[3]) * ((alt_64) dT)) / (128));
	alt_64 sens = (((alt_64) p.calibration[0]) * (32768))
 20007d0:	00808074 	movhi	r2,513
 20007d4:	10adb904 	addi	r2,r2,-18716
 20007d8:	1080018b 	ldhu	r2,6(r2)
 20007dc:	10bfffcc 	andi	r2,r2,65535
 20007e0:	e0bfea15 	stw	r2,-88(fp)
 20007e4:	e03feb15 	stw	zero,-84(fp)
 20007e8:	e17fea17 	ldw	r5,-88(fp)
 20007ec:	2804d47a 	srli	r2,r5,17
 20007f0:	e0ffeb17 	ldw	r3,-84(fp)
 20007f4:	182293fa 	slli	r17,r3,15
 20007f8:	1462b03a 	or	r17,r2,r17
 20007fc:	e13fea17 	ldw	r4,-88(fp)
 2000800:	202093fa 	slli	r16,r4,15
			+ ((((alt_64) p.calibration[2]) * ((alt_64) dT)) / 256);
 2000804:	00808074 	movhi	r2,513
 2000808:	10adb904 	addi	r2,r2,-18716
 200080c:	1080028b 	ldhu	r2,10(r2)
 2000810:	10bfffcc 	andi	r2,r2,65535
 2000814:	e0bfec15 	stw	r2,-80(fp)
 2000818:	e03fed15 	stw	zero,-76(fp)
 200081c:	e0bfde17 	ldw	r2,-136(fp)
 2000820:	e0bfee15 	stw	r2,-72(fp)
 2000824:	1005d7fa 	srai	r2,r2,31
 2000828:	e0bfef15 	stw	r2,-68(fp)
 200082c:	e1bfee17 	ldw	r6,-72(fp)
 2000830:	e1ffef17 	ldw	r7,-68(fp)
 2000834:	e13fec17 	ldw	r4,-80(fp)
 2000838:	e17fed17 	ldw	r5,-76(fp)
 200083c:	20012cc0 	call	20012cc <__muldi3>
 2000840:	100d883a 	mov	r6,r2
 2000844:	180f883a 	mov	r7,r3
 2000848:	3009883a 	mov	r4,r6
 200084c:	380b883a 	mov	r5,r7
 2000850:	2005883a 	mov	r2,r4
 2000854:	2807883a 	mov	r3,r5
 2000858:	1800090e 	bge	r3,zero,2000880 <getPressure+0x250>
 200085c:	01803fc4 	movi	r6,255
 2000860:	000f883a 	mov	r7,zero
 2000864:	1189883a 	add	r4,r2,r6
 2000868:	2091803a 	cmpltu	r8,r4,r2
 200086c:	19cb883a 	add	r5,r3,r7
 2000870:	4145883a 	add	r2,r8,r5
 2000874:	100b883a 	mov	r5,r2
 2000878:	2005883a 	mov	r2,r4
 200087c:	2807883a 	mov	r3,r5
 2000880:	1808963a 	slli	r4,r3,24
 2000884:	100ad23a 	srli	r5,r2,8
 2000888:	e17ff615 	stw	r5,-40(fp)
 200088c:	e17ff617 	ldw	r5,-40(fp)
 2000890:	2148b03a 	or	r4,r4,r5
 2000894:	e13ff615 	stw	r4,-40(fp)
 2000898:	1809d23a 	srai	r4,r3,8
 200089c:	e13ff715 	stw	r4,-36(fp)
 20008a0:	e13ff617 	ldw	r4,-40(fp)
 20008a4:	e17ff717 	ldw	r5,-36(fp)

	/* Calculate temperature-adjusted pressure */
	alt_32 dT = (alt_64) d2 - (((alt_64) p.calibration[4]) * (256));
	alt_64 offset = ((alt_64) p.calibration[1]) * (65536)
			+ ((((alt_64) p.calibration[3]) * ((alt_64) dT)) / (128));
	alt_64 sens = (((alt_64) p.calibration[0]) * (32768))
 20008a8:	8105883a 	add	r2,r16,r4
 20008ac:	140d803a 	cmpltu	r6,r2,r16
 20008b0:	8947883a 	add	r3,r17,r5
 20008b4:	30c9883a 	add	r4,r6,r3
 20008b8:	2007883a 	mov	r3,r4
 20008bc:	e0bfe115 	stw	r2,-124(fp)
 20008c0:	e0ffe215 	stw	r3,-120(fp)
			+ ((((alt_64) p.calibration[2]) * ((alt_64) dT)) / 256);
	alt_32 pressure = ((((alt_64) uncal_pressure)
			* (((alt_u64) sens) / 2097152)) - (alt_64) offset) / 32768;
 20008c4:	e0bfe417 	ldw	r2,-112(fp)
 20008c8:	e0bff015 	stw	r2,-64(fp)
 20008cc:	e03ff115 	stw	zero,-60(fp)
 20008d0:	e0bfe117 	ldw	r2,-124(fp)
 20008d4:	e0ffe217 	ldw	r3,-120(fp)
 20008d8:	180892fa 	slli	r4,r3,11
 20008dc:	100ad57a 	srli	r5,r2,21
 20008e0:	e17ff215 	stw	r5,-56(fp)
 20008e4:	e17ff217 	ldw	r5,-56(fp)
 20008e8:	2148b03a 	or	r4,r4,r5
 20008ec:	e13ff215 	stw	r4,-56(fp)
 20008f0:	1808d57a 	srli	r4,r3,21
 20008f4:	e13ff315 	stw	r4,-52(fp)
 20008f8:	e1bff217 	ldw	r6,-56(fp)
 20008fc:	e1fff317 	ldw	r7,-52(fp)
 2000900:	e13ff017 	ldw	r4,-64(fp)
 2000904:	e17ff117 	ldw	r5,-60(fp)
 2000908:	20012cc0 	call	20012cc <__muldi3>
 200090c:	1009883a 	mov	r4,r2
 2000910:	180b883a 	mov	r5,r3
 2000914:	200d883a 	mov	r6,r4
 2000918:	280f883a 	mov	r7,r5
 200091c:	e13fdf17 	ldw	r4,-132(fp)
 2000920:	e17fe017 	ldw	r5,-128(fp)
 2000924:	3105c83a 	sub	r2,r6,r4
 2000928:	3091803a 	cmpltu	r8,r6,r2
 200092c:	3947c83a 	sub	r3,r7,r5
 2000930:	1a09c83a 	sub	r4,r3,r8
 2000934:	2007883a 	mov	r3,r4
 2000938:	1009883a 	mov	r4,r2
 200093c:	180b883a 	mov	r5,r3
 2000940:	2804947a 	slli	r2,r5,17
 2000944:	202cd3fa 	srli	r22,r4,15
 2000948:	15acb03a 	or	r22,r2,r22
 200094c:	282ed3fa 	srli	r23,r5,15
	alt_32 dT = (alt_64) d2 - (((alt_64) p.calibration[4]) * (256));
	alt_64 offset = ((alt_64) p.calibration[1]) * (65536)
			+ ((((alt_64) p.calibration[3]) * ((alt_64) dT)) / (128));
	alt_64 sens = (((alt_64) p.calibration[0]) * (32768))
			+ ((((alt_64) p.calibration[2]) * ((alt_64) dT)) / 256);
	alt_32 pressure = ((((alt_64) uncal_pressure)
 2000950:	e5bfe315 	stw	r22,-116(fp)
			* (((alt_u64) sens) / 2097152)) - (alt_64) offset) / 32768;

	return pressure; //pressure given in pascals.
 2000954:	e0bfe317 	ldw	r2,-116(fp)
}
 2000958:	e6fff804 	addi	sp,fp,-32
 200095c:	dfc00917 	ldw	ra,36(sp)
 2000960:	df000817 	ldw	fp,32(sp)
 2000964:	ddc00717 	ldw	r23,28(sp)
 2000968:	dd800617 	ldw	r22,24(sp)
 200096c:	dd400517 	ldw	r21,20(sp)
 2000970:	dd000417 	ldw	r20,16(sp)
 2000974:	dcc00317 	ldw	r19,12(sp)
 2000978:	dc800217 	ldw	r18,8(sp)
 200097c:	dc400117 	ldw	r17,4(sp)
 2000980:	dc000017 	ldw	r16,0(sp)
 2000984:	dec00a04 	addi	sp,sp,40
 2000988:	f800283a 	ret

0200098c <log>:
 200098c:	defff104 	addi	sp,sp,-60
 2000990:	dd000d15 	stw	r20,52(sp)
 2000994:	05008074 	movhi	r20,513
 2000998:	dcc00c15 	stw	r19,48(sp)
 200099c:	dc800b15 	stw	r18,44(sp)
 20009a0:	dc400a15 	stw	r17,40(sp)
 20009a4:	dc000915 	stw	r16,36(sp)
 20009a8:	dfc00e15 	stw	ra,56(sp)
 20009ac:	a5279b04 	addi	r20,r20,-24980
 20009b0:	2027883a 	mov	r19,r4
 20009b4:	2825883a 	mov	r18,r5
 20009b8:	2000b280 	call	2000b28 <__ieee754_log>
 20009bc:	1821883a 	mov	r16,r3
 20009c0:	a0c00017 	ldw	r3,0(r20)
 20009c4:	1023883a 	mov	r17,r2
 20009c8:	00bfffc4 	movi	r2,-1
 20009cc:	18800a26 	beq	r3,r2,20009f8 <log+0x6c>
 20009d0:	9809883a 	mov	r4,r19
 20009d4:	900b883a 	mov	r5,r18
 20009d8:	20012440 	call	2001244 <__fpclassifyd>
 20009dc:	10000626 	beq	r2,zero,20009f8 <log+0x6c>
 20009e0:	000d883a 	mov	r6,zero
 20009e4:	000f883a 	mov	r7,zero
 20009e8:	9809883a 	mov	r4,r19
 20009ec:	900b883a 	mov	r5,r18
 20009f0:	2002b440 	call	2002b44 <__gedf2>
 20009f4:	00800a0e 	bge	zero,r2,2000a20 <log+0x94>
 20009f8:	8805883a 	mov	r2,r17
 20009fc:	8007883a 	mov	r3,r16
 2000a00:	dfc00e17 	ldw	ra,56(sp)
 2000a04:	dd000d17 	ldw	r20,52(sp)
 2000a08:	dcc00c17 	ldw	r19,48(sp)
 2000a0c:	dc800b17 	ldw	r18,44(sp)
 2000a10:	dc400a17 	ldw	r17,40(sp)
 2000a14:	dc000917 	ldw	r16,36(sp)
 2000a18:	dec00f04 	addi	sp,sp,60
 2000a1c:	f800283a 	ret
 2000a20:	00808074 	movhi	r2,513
 2000a24:	a4000017 	ldw	r16,0(r20)
 2000a28:	10a14804 	addi	r2,r2,-31456
 2000a2c:	d8000815 	stw	zero,32(sp)
 2000a30:	d8800115 	stw	r2,4(sp)
 2000a34:	dcc00215 	stw	r19,8(sp)
 2000a38:	dc800315 	stw	r18,12(sp)
 2000a3c:	dcc00415 	stw	r19,16(sp)
 2000a40:	dc800515 	stw	r18,20(sp)
 2000a44:	000d883a 	mov	r6,zero
 2000a48:	000f883a 	mov	r7,zero
 2000a4c:	9809883a 	mov	r4,r19
 2000a50:	900b883a 	mov	r5,r18
 2000a54:	8000101e 	bne	r16,zero,2000a98 <log+0x10c>
 2000a58:	00b80034 	movhi	r2,57344
 2000a5c:	d8800615 	stw	r2,24(sp)
 2000a60:	00b1fc34 	movhi	r2,51184
 2000a64:	10bfffc4 	addi	r2,r2,-1
 2000a68:	d8800715 	stw	r2,28(sp)
 2000a6c:	2002abc0 	call	2002abc <__eqdf2>
 2000a70:	10001f1e 	bne	r2,zero,2000af0 <log+0x164>
 2000a74:	00800084 	movi	r2,2
 2000a78:	d8800015 	stw	r2,0(sp)
 2000a7c:	d809883a 	mov	r4,sp
 2000a80:	20012b80 	call	20012b8 <matherr>
 2000a84:	1000151e 	bne	r2,zero,2000adc <log+0x150>
 2000a88:	20043340 	call	2004334 <__errno>
 2000a8c:	00c00884 	movi	r3,34
 2000a90:	10c00015 	stw	r3,0(r2)
 2000a94:	00001106 	br	2000adc <log+0x150>
 2000a98:	00bffc34 	movhi	r2,65520
 2000a9c:	d8000615 	stw	zero,24(sp)
 2000aa0:	d8800715 	stw	r2,28(sp)
 2000aa4:	2002abc0 	call	2002abc <__eqdf2>
 2000aa8:	10001726 	beq	r2,zero,2000b08 <log+0x17c>
 2000aac:	00800044 	movi	r2,1
 2000ab0:	d8800015 	stw	r2,0(sp)
 2000ab4:	00800084 	movi	r2,2
 2000ab8:	80800f1e 	bne	r16,r2,2000af8 <log+0x16c>
 2000abc:	20043340 	call	2004334 <__errno>
 2000ac0:	00c00844 	movi	r3,33
 2000ac4:	10c00015 	stw	r3,0(r2)
 2000ac8:	01008074 	movhi	r4,513
 2000acc:	21214904 	addi	r4,r4,-31452
 2000ad0:	20012c00 	call	20012c0 <nan>
 2000ad4:	d8800615 	stw	r2,24(sp)
 2000ad8:	d8c00715 	stw	r3,28(sp)
 2000adc:	d8800817 	ldw	r2,32(sp)
 2000ae0:	10000d1e 	bne	r2,zero,2000b18 <log+0x18c>
 2000ae4:	d8800617 	ldw	r2,24(sp)
 2000ae8:	d8c00717 	ldw	r3,28(sp)
 2000aec:	003fc406 	br	2000a00 <__alt_mem_flash+0xfdfefa00>
 2000af0:	00800044 	movi	r2,1
 2000af4:	d8800015 	stw	r2,0(sp)
 2000af8:	d809883a 	mov	r4,sp
 2000afc:	20012b80 	call	20012b8 <matherr>
 2000b00:	103ff11e 	bne	r2,zero,2000ac8 <__alt_mem_flash+0xfdfefac8>
 2000b04:	003fed06 	br	2000abc <__alt_mem_flash+0xfdfefabc>
 2000b08:	00800084 	movi	r2,2
 2000b0c:	d8800015 	stw	r2,0(sp)
 2000b10:	80bfdd26 	beq	r16,r2,2000a88 <__alt_mem_flash+0xfdfefa88>
 2000b14:	003fd906 	br	2000a7c <__alt_mem_flash+0xfdfefa7c>
 2000b18:	20043340 	call	2004334 <__errno>
 2000b1c:	d8c00817 	ldw	r3,32(sp)
 2000b20:	10c00015 	stw	r3,0(r2)
 2000b24:	003fef06 	br	2000ae4 <__alt_mem_flash+0xfdfefae4>

02000b28 <__ieee754_log>:
 2000b28:	defff204 	addi	sp,sp,-56
 2000b2c:	01800434 	movhi	r6,16
 2000b30:	dfc00d15 	stw	ra,52(sp)
 2000b34:	df000c15 	stw	fp,48(sp)
 2000b38:	ddc00b15 	stw	r23,44(sp)
 2000b3c:	dd800a15 	stw	r22,40(sp)
 2000b40:	dd400915 	stw	r21,36(sp)
 2000b44:	dd000815 	stw	r20,32(sp)
 2000b48:	dcc00715 	stw	r19,28(sp)
 2000b4c:	dc800615 	stw	r18,24(sp)
 2000b50:	dc400515 	stw	r17,20(sp)
 2000b54:	dc000415 	stw	r16,16(sp)
 2000b58:	31bfffc4 	addi	r6,r6,-1
 2000b5c:	280f883a 	mov	r7,r5
 2000b60:	2005883a 	mov	r2,r4
 2000b64:	31404616 	blt	r6,r5,2000c80 <__ieee754_log+0x158>
 2000b68:	00e00034 	movhi	r3,32768
 2000b6c:	18ffffc4 	addi	r3,r3,-1
 2000b70:	28c6703a 	and	r3,r5,r3
 2000b74:	1906b03a 	or	r3,r3,r4
 2000b78:	1800f426 	beq	r3,zero,2000f4c <__ieee754_log+0x424>
 2000b7c:	28017816 	blt	r5,zero,2001160 <__ieee754_log+0x638>
 2000b80:	01d0d434 	movhi	r7,17232
 2000b84:	000d883a 	mov	r6,zero
 2000b88:	2002c200 	call	2002c20 <__muldf3>
 2000b8c:	015ffc34 	movhi	r5,32752
 2000b90:	297fffc4 	addi	r5,r5,-1
 2000b94:	180f883a 	mov	r7,r3
 2000b98:	013ff284 	movi	r4,-54
 2000b9c:	28c03d16 	blt	r5,r3,2000c94 <__ieee754_log+0x16c>
 2000ba0:	04c00434 	movhi	r19,16
 2000ba4:	9cffffc4 	addi	r19,r19,-1
 2000ba8:	01400274 	movhi	r5,9
 2000bac:	1cf8703a 	and	fp,r3,r19
 2000bb0:	2957d904 	addi	r5,r5,24420
 2000bb4:	1821d53a 	srai	r16,r3,20
 2000bb8:	e14b883a 	add	r5,fp,r5
 2000bbc:	2940042c 	andhi	r5,r5,16
 2000bc0:	2807d53a 	srai	r3,r5,20
 2000bc4:	843f0044 	addi	r16,r16,-1023
 2000bc8:	294ffc3c 	xorhi	r5,r5,16368
 2000bcc:	8121883a 	add	r16,r16,r4
 2000bd0:	000d883a 	mov	r6,zero
 2000bd4:	01cffc34 	movhi	r7,16368
 2000bd8:	1009883a 	mov	r4,r2
 2000bdc:	2f0ab03a 	or	r5,r5,fp
 2000be0:	1c21883a 	add	r16,r3,r16
 2000be4:	200348c0 	call	200348c <__subdf3>
 2000be8:	1025883a 	mov	r18,r2
 2000bec:	e0800084 	addi	r2,fp,2
 2000bf0:	14e6703a 	and	r19,r2,r19
 2000bf4:	00800084 	movi	r2,2
 2000bf8:	1823883a 	mov	r17,r3
 2000bfc:	000d883a 	mov	r6,zero
 2000c00:	14c03416 	blt	r2,r19,2000cd4 <__ieee754_log+0x1ac>
 2000c04:	000f883a 	mov	r7,zero
 2000c08:	9009883a 	mov	r4,r18
 2000c0c:	180b883a 	mov	r5,r3
 2000c10:	2002abc0 	call	2002abc <__eqdf2>
 2000c14:	1000d31e 	bne	r2,zero,2000f64 <__ieee754_log+0x43c>
 2000c18:	80015926 	beq	r16,zero,2001180 <__ieee754_log+0x658>
 2000c1c:	8009883a 	mov	r4,r16
 2000c20:	2003d880 	call	2003d88 <__floatsidf>
 2000c24:	01cff9b4 	movhi	r7,16358
 2000c28:	39cb9084 	addi	r7,r7,11842
 2000c2c:	01bfb834 	movhi	r6,65248
 2000c30:	1009883a 	mov	r4,r2
 2000c34:	180b883a 	mov	r5,r3
 2000c38:	1023883a 	mov	r17,r2
 2000c3c:	1821883a 	mov	r16,r3
 2000c40:	2002c200 	call	2002c20 <__muldf3>
 2000c44:	018d5e74 	movhi	r6,13689
 2000c48:	01cf7ab4 	movhi	r7,15850
 2000c4c:	8809883a 	mov	r4,r17
 2000c50:	800b883a 	mov	r5,r16
 2000c54:	318f1d84 	addi	r6,r6,15478
 2000c58:	39ce7bc4 	addi	r7,r7,14831
 2000c5c:	1027883a 	mov	r19,r2
 2000c60:	1825883a 	mov	r18,r3
 2000c64:	2002c200 	call	2002c20 <__muldf3>
 2000c68:	100d883a 	mov	r6,r2
 2000c6c:	180f883a 	mov	r7,r3
 2000c70:	9809883a 	mov	r4,r19
 2000c74:	900b883a 	mov	r5,r18
 2000c78:	20018400 	call	2001840 <__adddf3>
 2000c7c:	00000906 	br	2000ca4 <__ieee754_log+0x17c>
 2000c80:	2807883a 	mov	r3,r5
 2000c84:	015ffc34 	movhi	r5,32752
 2000c88:	297fffc4 	addi	r5,r5,-1
 2000c8c:	0009883a 	mov	r4,zero
 2000c90:	28ffc30e 	bge	r5,r3,2000ba0 <__alt_mem_flash+0xfdfefba0>
 2000c94:	100d883a 	mov	r6,r2
 2000c98:	1009883a 	mov	r4,r2
 2000c9c:	380b883a 	mov	r5,r7
 2000ca0:	20018400 	call	2001840 <__adddf3>
 2000ca4:	dfc00d17 	ldw	ra,52(sp)
 2000ca8:	df000c17 	ldw	fp,48(sp)
 2000cac:	ddc00b17 	ldw	r23,44(sp)
 2000cb0:	dd800a17 	ldw	r22,40(sp)
 2000cb4:	dd400917 	ldw	r21,36(sp)
 2000cb8:	dd000817 	ldw	r20,32(sp)
 2000cbc:	dcc00717 	ldw	r19,28(sp)
 2000cc0:	dc800617 	ldw	r18,24(sp)
 2000cc4:	dc400517 	ldw	r17,20(sp)
 2000cc8:	dc000417 	ldw	r16,16(sp)
 2000ccc:	dec00e04 	addi	sp,sp,56
 2000cd0:	f800283a 	ret
 2000cd4:	01d00034 	movhi	r7,16384
 2000cd8:	9009883a 	mov	r4,r18
 2000cdc:	180b883a 	mov	r5,r3
 2000ce0:	20018400 	call	2001840 <__adddf3>
 2000ce4:	100d883a 	mov	r6,r2
 2000ce8:	180f883a 	mov	r7,r3
 2000cec:	880b883a 	mov	r5,r17
 2000cf0:	9009883a 	mov	r4,r18
 2000cf4:	20020ec0 	call	20020ec <__divdf3>
 2000cf8:	8009883a 	mov	r4,r16
 2000cfc:	102d883a 	mov	r22,r2
 2000d00:	182b883a 	mov	r21,r3
 2000d04:	2003d880 	call	2003d88 <__floatsidf>
 2000d08:	b00d883a 	mov	r6,r22
 2000d0c:	a80f883a 	mov	r7,r21
 2000d10:	b009883a 	mov	r4,r22
 2000d14:	a80b883a 	mov	r5,r21
 2000d18:	d8800015 	stw	r2,0(sp)
 2000d1c:	d8c00115 	stw	r3,4(sp)
 2000d20:	2002c200 	call	2002c20 <__muldf3>
 2000d24:	027ffeb4 	movhi	r9,65530
 2000d28:	4a7ae184 	addi	r9,r9,-5242
 2000d2c:	100d883a 	mov	r6,r2
 2000d30:	180f883a 	mov	r7,r3
 2000d34:	1009883a 	mov	r4,r2
 2000d38:	180b883a 	mov	r5,r3
 2000d3c:	e26f883a 	add	r23,fp,r9
 2000d40:	d8c00315 	stw	r3,12(sp)
 2000d44:	d8800215 	stw	r2,8(sp)
 2000d48:	2002c200 	call	2002c20 <__muldf3>
 2000d4c:	01b7cfb4 	movhi	r6,57150
 2000d50:	01cff0f4 	movhi	r7,16323
 2000d54:	31949104 	addi	r6,r6,21060
 2000d58:	39fc4484 	addi	r7,r7,-3822
 2000d5c:	1009883a 	mov	r4,r2
 2000d60:	180b883a 	mov	r5,r3
 2000d64:	1029883a 	mov	r20,r2
 2000d68:	1827883a 	mov	r19,r3
 2000d6c:	2002c200 	call	2002c20 <__muldf3>
 2000d70:	01a5b2f4 	movhi	r6,38603
 2000d74:	01cff1f4 	movhi	r7,16327
 2000d78:	3180f784 	addi	r6,r6,990
 2000d7c:	39d19904 	addi	r7,r7,18020
 2000d80:	1009883a 	mov	r4,r2
 2000d84:	180b883a 	mov	r5,r3
 2000d88:	20018400 	call	2001840 <__adddf3>
 2000d8c:	a00d883a 	mov	r6,r20
 2000d90:	980f883a 	mov	r7,r19
 2000d94:	1009883a 	mov	r4,r2
 2000d98:	180b883a 	mov	r5,r3
 2000d9c:	2002c200 	call	2002c20 <__muldf3>
 2000da0:	01a508f4 	movhi	r6,37923
 2000da4:	01cff4b4 	movhi	r7,16338
 2000da8:	31a4d644 	addi	r6,r6,-27815
 2000dac:	39d24904 	addi	r7,r7,18724
 2000db0:	1009883a 	mov	r4,r2
 2000db4:	180b883a 	mov	r5,r3
 2000db8:	20018400 	call	2001840 <__adddf3>
 2000dbc:	a00d883a 	mov	r6,r20
 2000dc0:	980f883a 	mov	r7,r19
 2000dc4:	1009883a 	mov	r4,r2
 2000dc8:	180b883a 	mov	r5,r3
 2000dcc:	2002c200 	call	2002c20 <__muldf3>
 2000dd0:	01955574 	movhi	r6,21845
 2000dd4:	01cff974 	movhi	r7,16357
 2000dd8:	319564c4 	addi	r6,r6,21907
 2000ddc:	39d55544 	addi	r7,r7,21845
 2000de0:	1009883a 	mov	r4,r2
 2000de4:	180b883a 	mov	r5,r3
 2000de8:	20018400 	call	2001840 <__adddf3>
 2000dec:	dac00217 	ldw	r11,8(sp)
 2000df0:	da800317 	ldw	r10,12(sp)
 2000df4:	1009883a 	mov	r4,r2
 2000df8:	580d883a 	mov	r6,r11
 2000dfc:	500f883a 	mov	r7,r10
 2000e00:	180b883a 	mov	r5,r3
 2000e04:	2002c200 	call	2002c20 <__muldf3>
 2000e08:	01b41e74 	movhi	r6,53369
 2000e0c:	01cff134 	movhi	r7,16324
 2000e10:	a009883a 	mov	r4,r20
 2000e14:	980b883a 	mov	r5,r19
 2000e18:	31b1a7c4 	addi	r6,r6,-14689
 2000e1c:	39e68244 	addi	r7,r7,-26103
 2000e20:	d8c00315 	stw	r3,12(sp)
 2000e24:	d8800215 	stw	r2,8(sp)
 2000e28:	2002c200 	call	2002c20 <__muldf3>
 2000e2c:	018763b4 	movhi	r6,7566
 2000e30:	01cff334 	movhi	r7,16332
 2000e34:	319e2bc4 	addi	r6,r6,30895
 2000e38:	39dc7144 	addi	r7,r7,29125
 2000e3c:	1009883a 	mov	r4,r2
 2000e40:	180b883a 	mov	r5,r3
 2000e44:	20018400 	call	2001840 <__adddf3>
 2000e48:	a00d883a 	mov	r6,r20
 2000e4c:	980f883a 	mov	r7,r19
 2000e50:	1009883a 	mov	r4,r2
 2000e54:	180b883a 	mov	r5,r3
 2000e58:	2002c200 	call	2002c20 <__muldf3>
 2000e5c:	01a66634 	movhi	r6,39320
 2000e60:	01cff6b4 	movhi	r7,16346
 2000e64:	31be8104 	addi	r6,r6,-1532
 2000e68:	39e66644 	addi	r7,r7,-26215
 2000e6c:	1009883a 	mov	r4,r2
 2000e70:	180b883a 	mov	r5,r3
 2000e74:	20018400 	call	2001840 <__adddf3>
 2000e78:	a00d883a 	mov	r6,r20
 2000e7c:	980f883a 	mov	r7,r19
 2000e80:	1009883a 	mov	r4,r2
 2000e84:	180b883a 	mov	r5,r3
 2000e88:	2002c200 	call	2002c20 <__muldf3>
 2000e8c:	dac00217 	ldw	r11,8(sp)
 2000e90:	da800317 	ldw	r10,12(sp)
 2000e94:	100d883a 	mov	r6,r2
 2000e98:	180f883a 	mov	r7,r3
 2000e9c:	5809883a 	mov	r4,r11
 2000ea0:	500b883a 	mov	r5,r10
 2000ea4:	20018400 	call	2001840 <__adddf3>
 2000ea8:	1827883a 	mov	r19,r3
 2000eac:	00c001f4 	movhi	r3,7
 2000eb0:	18ee1444 	addi	r3,r3,-18351
 2000eb4:	1f07c83a 	sub	r3,r3,fp
 2000eb8:	1dd2b03a 	or	r9,r3,r23
 2000ebc:	1029883a 	mov	r20,r2
 2000ec0:	0240490e 	bge	zero,r9,2000fe8 <__ieee754_log+0x4c0>
 2000ec4:	000d883a 	mov	r6,zero
 2000ec8:	01cff834 	movhi	r7,16352
 2000ecc:	9009883a 	mov	r4,r18
 2000ed0:	880b883a 	mov	r5,r17
 2000ed4:	2002c200 	call	2002c20 <__muldf3>
 2000ed8:	900d883a 	mov	r6,r18
 2000edc:	880f883a 	mov	r7,r17
 2000ee0:	1009883a 	mov	r4,r2
 2000ee4:	180b883a 	mov	r5,r3
 2000ee8:	2002c200 	call	2002c20 <__muldf3>
 2000eec:	1039883a 	mov	fp,r2
 2000ef0:	182f883a 	mov	r23,r3
 2000ef4:	8000691e 	bne	r16,zero,200109c <__ieee754_log+0x574>
 2000ef8:	100d883a 	mov	r6,r2
 2000efc:	180f883a 	mov	r7,r3
 2000f00:	a009883a 	mov	r4,r20
 2000f04:	980b883a 	mov	r5,r19
 2000f08:	20018400 	call	2001840 <__adddf3>
 2000f0c:	b00d883a 	mov	r6,r22
 2000f10:	a80f883a 	mov	r7,r21
 2000f14:	1009883a 	mov	r4,r2
 2000f18:	180b883a 	mov	r5,r3
 2000f1c:	2002c200 	call	2002c20 <__muldf3>
 2000f20:	100d883a 	mov	r6,r2
 2000f24:	180f883a 	mov	r7,r3
 2000f28:	e009883a 	mov	r4,fp
 2000f2c:	b80b883a 	mov	r5,r23
 2000f30:	200348c0 	call	200348c <__subdf3>
 2000f34:	100d883a 	mov	r6,r2
 2000f38:	180f883a 	mov	r7,r3
 2000f3c:	9009883a 	mov	r4,r18
 2000f40:	880b883a 	mov	r5,r17
 2000f44:	200348c0 	call	200348c <__subdf3>
 2000f48:	003f5606 	br	2000ca4 <__alt_mem_flash+0xfdfefca4>
 2000f4c:	000d883a 	mov	r6,zero
 2000f50:	000f883a 	mov	r7,zero
 2000f54:	0009883a 	mov	r4,zero
 2000f58:	0170d434 	movhi	r5,50000
 2000f5c:	20020ec0 	call	20020ec <__divdf3>
 2000f60:	003f5006 	br	2000ca4 <__alt_mem_flash+0xfdfefca4>
 2000f64:	01955574 	movhi	r6,21845
 2000f68:	01cff574 	movhi	r7,16341
 2000f6c:	31955544 	addi	r6,r6,21845
 2000f70:	39d55544 	addi	r7,r7,21845
 2000f74:	9009883a 	mov	r4,r18
 2000f78:	880b883a 	mov	r5,r17
 2000f7c:	2002c200 	call	2002c20 <__muldf3>
 2000f80:	100d883a 	mov	r6,r2
 2000f84:	180f883a 	mov	r7,r3
 2000f88:	0009883a 	mov	r4,zero
 2000f8c:	014ff834 	movhi	r5,16352
 2000f90:	200348c0 	call	200348c <__subdf3>
 2000f94:	900d883a 	mov	r6,r18
 2000f98:	880f883a 	mov	r7,r17
 2000f9c:	9009883a 	mov	r4,r18
 2000fa0:	880b883a 	mov	r5,r17
 2000fa4:	1029883a 	mov	r20,r2
 2000fa8:	1827883a 	mov	r19,r3
 2000fac:	2002c200 	call	2002c20 <__muldf3>
 2000fb0:	a009883a 	mov	r4,r20
 2000fb4:	980b883a 	mov	r5,r19
 2000fb8:	100d883a 	mov	r6,r2
 2000fbc:	180f883a 	mov	r7,r3
 2000fc0:	2002c200 	call	2002c20 <__muldf3>
 2000fc4:	1029883a 	mov	r20,r2
 2000fc8:	1827883a 	mov	r19,r3
 2000fcc:	80006f1e 	bne	r16,zero,200118c <__ieee754_log+0x664>
 2000fd0:	100d883a 	mov	r6,r2
 2000fd4:	180f883a 	mov	r7,r3
 2000fd8:	9009883a 	mov	r4,r18
 2000fdc:	880b883a 	mov	r5,r17
 2000fe0:	200348c0 	call	200348c <__subdf3>
 2000fe4:	003f2f06 	br	2000ca4 <__alt_mem_flash+0xfdfefca4>
 2000fe8:	80008b26 	beq	r16,zero,2001218 <__ieee754_log+0x6f0>
 2000fec:	d9000017 	ldw	r4,0(sp)
 2000ff0:	d9400117 	ldw	r5,4(sp)
 2000ff4:	01cff9b4 	movhi	r7,16358
 2000ff8:	39cb9084 	addi	r7,r7,11842
 2000ffc:	01bfb834 	movhi	r6,65248
 2001000:	2002c200 	call	2002c20 <__muldf3>
 2001004:	a00d883a 	mov	r6,r20
 2001008:	980f883a 	mov	r7,r19
 200100c:	9009883a 	mov	r4,r18
 2001010:	880b883a 	mov	r5,r17
 2001014:	1821883a 	mov	r16,r3
 2001018:	d8800215 	stw	r2,8(sp)
 200101c:	200348c0 	call	200348c <__subdf3>
 2001020:	b00d883a 	mov	r6,r22
 2001024:	a80f883a 	mov	r7,r21
 2001028:	1009883a 	mov	r4,r2
 200102c:	180b883a 	mov	r5,r3
 2001030:	2002c200 	call	2002c20 <__muldf3>
 2001034:	d9000017 	ldw	r4,0(sp)
 2001038:	d9400117 	ldw	r5,4(sp)
 200103c:	018d5e74 	movhi	r6,13689
 2001040:	01cf7ab4 	movhi	r7,15850
 2001044:	318f1d84 	addi	r6,r6,15478
 2001048:	39ce7bc4 	addi	r7,r7,14831
 200104c:	1029883a 	mov	r20,r2
 2001050:	1827883a 	mov	r19,r3
 2001054:	2002c200 	call	2002c20 <__muldf3>
 2001058:	a009883a 	mov	r4,r20
 200105c:	980b883a 	mov	r5,r19
 2001060:	100d883a 	mov	r6,r2
 2001064:	180f883a 	mov	r7,r3
 2001068:	200348c0 	call	200348c <__subdf3>
 200106c:	900d883a 	mov	r6,r18
 2001070:	880f883a 	mov	r7,r17
 2001074:	1009883a 	mov	r4,r2
 2001078:	180b883a 	mov	r5,r3
 200107c:	200348c0 	call	200348c <__subdf3>
 2001080:	da000217 	ldw	r8,8(sp)
 2001084:	100d883a 	mov	r6,r2
 2001088:	180f883a 	mov	r7,r3
 200108c:	4009883a 	mov	r4,r8
 2001090:	800b883a 	mov	r5,r16
 2001094:	200348c0 	call	200348c <__subdf3>
 2001098:	003f0206 	br	2000ca4 <__alt_mem_flash+0xfdfefca4>
 200109c:	d9000017 	ldw	r4,0(sp)
 20010a0:	d9400117 	ldw	r5,4(sp)
 20010a4:	01cff9b4 	movhi	r7,16358
 20010a8:	39cb9084 	addi	r7,r7,11842
 20010ac:	01bfb834 	movhi	r6,65248
 20010b0:	2002c200 	call	2002c20 <__muldf3>
 20010b4:	e00d883a 	mov	r6,fp
 20010b8:	b80f883a 	mov	r7,r23
 20010bc:	a009883a 	mov	r4,r20
 20010c0:	980b883a 	mov	r5,r19
 20010c4:	1821883a 	mov	r16,r3
 20010c8:	d8800315 	stw	r2,12(sp)
 20010cc:	20018400 	call	2001840 <__adddf3>
 20010d0:	b00d883a 	mov	r6,r22
 20010d4:	a80f883a 	mov	r7,r21
 20010d8:	1009883a 	mov	r4,r2
 20010dc:	180b883a 	mov	r5,r3
 20010e0:	2002c200 	call	2002c20 <__muldf3>
 20010e4:	d9000017 	ldw	r4,0(sp)
 20010e8:	d9400117 	ldw	r5,4(sp)
 20010ec:	018d5e74 	movhi	r6,13689
 20010f0:	01cf7ab4 	movhi	r7,15850
 20010f4:	318f1d84 	addi	r6,r6,15478
 20010f8:	39ce7bc4 	addi	r7,r7,14831
 20010fc:	1029883a 	mov	r20,r2
 2001100:	1827883a 	mov	r19,r3
 2001104:	2002c200 	call	2002c20 <__muldf3>
 2001108:	a009883a 	mov	r4,r20
 200110c:	980b883a 	mov	r5,r19
 2001110:	100d883a 	mov	r6,r2
 2001114:	180f883a 	mov	r7,r3
 2001118:	20018400 	call	2001840 <__adddf3>
 200111c:	e009883a 	mov	r4,fp
 2001120:	b80b883a 	mov	r5,r23
 2001124:	100d883a 	mov	r6,r2
 2001128:	180f883a 	mov	r7,r3
 200112c:	200348c0 	call	200348c <__subdf3>
 2001130:	900d883a 	mov	r6,r18
 2001134:	880f883a 	mov	r7,r17
 2001138:	1009883a 	mov	r4,r2
 200113c:	180b883a 	mov	r5,r3
 2001140:	200348c0 	call	200348c <__subdf3>
 2001144:	da800317 	ldw	r10,12(sp)
 2001148:	100d883a 	mov	r6,r2
 200114c:	180f883a 	mov	r7,r3
 2001150:	5009883a 	mov	r4,r10
 2001154:	800b883a 	mov	r5,r16
 2001158:	200348c0 	call	200348c <__subdf3>
 200115c:	003ed106 	br	2000ca4 <__alt_mem_flash+0xfdfefca4>
 2001160:	200d883a 	mov	r6,r4
 2001164:	200348c0 	call	200348c <__subdf3>
 2001168:	000d883a 	mov	r6,zero
 200116c:	000f883a 	mov	r7,zero
 2001170:	1009883a 	mov	r4,r2
 2001174:	180b883a 	mov	r5,r3
 2001178:	20020ec0 	call	20020ec <__divdf3>
 200117c:	003ec906 	br	2000ca4 <__alt_mem_flash+0xfdfefca4>
 2001180:	0005883a 	mov	r2,zero
 2001184:	0007883a 	mov	r3,zero
 2001188:	003ec606 	br	2000ca4 <__alt_mem_flash+0xfdfefca4>
 200118c:	8009883a 	mov	r4,r16
 2001190:	2003d880 	call	2003d88 <__floatsidf>
 2001194:	01cff9b4 	movhi	r7,16358
 2001198:	39cb9084 	addi	r7,r7,11842
 200119c:	01bfb834 	movhi	r6,65248
 20011a0:	1009883a 	mov	r4,r2
 20011a4:	180b883a 	mov	r5,r3
 20011a8:	102b883a 	mov	r21,r2
 20011ac:	1821883a 	mov	r16,r3
 20011b0:	2002c200 	call	2002c20 <__muldf3>
 20011b4:	018d5e74 	movhi	r6,13689
 20011b8:	01cf7ab4 	movhi	r7,15850
 20011bc:	a809883a 	mov	r4,r21
 20011c0:	800b883a 	mov	r5,r16
 20011c4:	318f1d84 	addi	r6,r6,15478
 20011c8:	39ce7bc4 	addi	r7,r7,14831
 20011cc:	102f883a 	mov	r23,r2
 20011d0:	182d883a 	mov	r22,r3
 20011d4:	2002c200 	call	2002c20 <__muldf3>
 20011d8:	a009883a 	mov	r4,r20
 20011dc:	980b883a 	mov	r5,r19
 20011e0:	100d883a 	mov	r6,r2
 20011e4:	180f883a 	mov	r7,r3
 20011e8:	200348c0 	call	200348c <__subdf3>
 20011ec:	900d883a 	mov	r6,r18
 20011f0:	880f883a 	mov	r7,r17
 20011f4:	1009883a 	mov	r4,r2
 20011f8:	180b883a 	mov	r5,r3
 20011fc:	200348c0 	call	200348c <__subdf3>
 2001200:	100d883a 	mov	r6,r2
 2001204:	180f883a 	mov	r7,r3
 2001208:	b809883a 	mov	r4,r23
 200120c:	b00b883a 	mov	r5,r22
 2001210:	200348c0 	call	200348c <__subdf3>
 2001214:	003ea306 	br	2000ca4 <__alt_mem_flash+0xfdfefca4>
 2001218:	a00d883a 	mov	r6,r20
 200121c:	980f883a 	mov	r7,r19
 2001220:	9009883a 	mov	r4,r18
 2001224:	880b883a 	mov	r5,r17
 2001228:	200348c0 	call	200348c <__subdf3>
 200122c:	b00d883a 	mov	r6,r22
 2001230:	a80f883a 	mov	r7,r21
 2001234:	1009883a 	mov	r4,r2
 2001238:	180b883a 	mov	r5,r3
 200123c:	2002c200 	call	2002c20 <__muldf3>
 2001240:	003f3c06 	br	2000f34 <__alt_mem_flash+0xfdfeff34>

02001244 <__fpclassifyd>:
 2001244:	00a00034 	movhi	r2,32768
 2001248:	10bfffc4 	addi	r2,r2,-1
 200124c:	2884703a 	and	r2,r5,r2
 2001250:	10000726 	beq	r2,zero,2001270 <__fpclassifyd+0x2c>
 2001254:	00fffc34 	movhi	r3,65520
 2001258:	019ff834 	movhi	r6,32736
 200125c:	28c7883a 	add	r3,r5,r3
 2001260:	31bfffc4 	addi	r6,r6,-1
 2001264:	30c00536 	bltu	r6,r3,200127c <__fpclassifyd+0x38>
 2001268:	00800104 	movi	r2,4
 200126c:	f800283a 	ret
 2001270:	2000021e 	bne	r4,zero,200127c <__fpclassifyd+0x38>
 2001274:	00800084 	movi	r2,2
 2001278:	f800283a 	ret
 200127c:	00dffc34 	movhi	r3,32752
 2001280:	019ff834 	movhi	r6,32736
 2001284:	28cb883a 	add	r5,r5,r3
 2001288:	31bfffc4 	addi	r6,r6,-1
 200128c:	317ff62e 	bgeu	r6,r5,2001268 <__alt_mem_flash+0xfdff0268>
 2001290:	01400434 	movhi	r5,16
 2001294:	297fffc4 	addi	r5,r5,-1
 2001298:	28800236 	bltu	r5,r2,20012a4 <__fpclassifyd+0x60>
 200129c:	008000c4 	movi	r2,3
 20012a0:	f800283a 	ret
 20012a4:	10c00226 	beq	r2,r3,20012b0 <__fpclassifyd+0x6c>
 20012a8:	0005883a 	mov	r2,zero
 20012ac:	f800283a 	ret
 20012b0:	2005003a 	cmpeq	r2,r4,zero
 20012b4:	f800283a 	ret

020012b8 <matherr>:
 20012b8:	0005883a 	mov	r2,zero
 20012bc:	f800283a 	ret

020012c0 <nan>:
 20012c0:	0005883a 	mov	r2,zero
 20012c4:	00dffe34 	movhi	r3,32760
 20012c8:	f800283a 	ret

020012cc <__muldi3>:
 20012cc:	defff604 	addi	sp,sp,-40
 20012d0:	dd800615 	stw	r22,24(sp)
 20012d4:	dd400515 	stw	r21,20(sp)
 20012d8:	dc400115 	stw	r17,4(sp)
 20012dc:	357fffcc 	andi	r21,r6,65535
 20012e0:	2022d43a 	srli	r17,r4,16
 20012e4:	25bfffcc 	andi	r22,r4,65535
 20012e8:	dcc00315 	stw	r19,12(sp)
 20012ec:	dc800215 	stw	r18,8(sp)
 20012f0:	2027883a 	mov	r19,r4
 20012f4:	2825883a 	mov	r18,r5
 20012f8:	b009883a 	mov	r4,r22
 20012fc:	a80b883a 	mov	r5,r21
 2001300:	dfc00915 	stw	ra,36(sp)
 2001304:	df000815 	stw	fp,32(sp)
 2001308:	ddc00715 	stw	r23,28(sp)
 200130c:	3839883a 	mov	fp,r7
 2001310:	302ed43a 	srli	r23,r6,16
 2001314:	dd000415 	stw	r20,16(sp)
 2001318:	dc000015 	stw	r16,0(sp)
 200131c:	3029883a 	mov	r20,r6
 2001320:	20013d80 	call	20013d8 <__mulsi3>
 2001324:	a80b883a 	mov	r5,r21
 2001328:	8809883a 	mov	r4,r17
 200132c:	1021883a 	mov	r16,r2
 2001330:	20013d80 	call	20013d8 <__mulsi3>
 2001334:	8809883a 	mov	r4,r17
 2001338:	b80b883a 	mov	r5,r23
 200133c:	102b883a 	mov	r21,r2
 2001340:	20013d80 	call	20013d8 <__mulsi3>
 2001344:	b80b883a 	mov	r5,r23
 2001348:	b009883a 	mov	r4,r22
 200134c:	1023883a 	mov	r17,r2
 2001350:	20013d80 	call	20013d8 <__mulsi3>
 2001354:	8006d43a 	srli	r3,r16,16
 2001358:	1545883a 	add	r2,r2,r21
 200135c:	1885883a 	add	r2,r3,r2
 2001360:	1540022e 	bgeu	r2,r21,200136c <__muldi3+0xa0>
 2001364:	00c00074 	movhi	r3,1
 2001368:	88e3883a 	add	r17,r17,r3
 200136c:	1006d43a 	srli	r3,r2,16
 2001370:	1004943a 	slli	r2,r2,16
 2001374:	e00b883a 	mov	r5,fp
 2001378:	9809883a 	mov	r4,r19
 200137c:	843fffcc 	andi	r16,r16,65535
 2001380:	1c63883a 	add	r17,r3,r17
 2001384:	1421883a 	add	r16,r2,r16
 2001388:	20013d80 	call	20013d8 <__mulsi3>
 200138c:	900b883a 	mov	r5,r18
 2001390:	a009883a 	mov	r4,r20
 2001394:	1027883a 	mov	r19,r2
 2001398:	20013d80 	call	20013d8 <__mulsi3>
 200139c:	9885883a 	add	r2,r19,r2
 20013a0:	1447883a 	add	r3,r2,r17
 20013a4:	8005883a 	mov	r2,r16
 20013a8:	dfc00917 	ldw	ra,36(sp)
 20013ac:	df000817 	ldw	fp,32(sp)
 20013b0:	ddc00717 	ldw	r23,28(sp)
 20013b4:	dd800617 	ldw	r22,24(sp)
 20013b8:	dd400517 	ldw	r21,20(sp)
 20013bc:	dd000417 	ldw	r20,16(sp)
 20013c0:	dcc00317 	ldw	r19,12(sp)
 20013c4:	dc800217 	ldw	r18,8(sp)
 20013c8:	dc400117 	ldw	r17,4(sp)
 20013cc:	dc000017 	ldw	r16,0(sp)
 20013d0:	dec00a04 	addi	sp,sp,40
 20013d4:	f800283a 	ret

020013d8 <__mulsi3>:
 20013d8:	0005883a 	mov	r2,zero
 20013dc:	20000726 	beq	r4,zero,20013fc <__mulsi3+0x24>
 20013e0:	20c0004c 	andi	r3,r4,1
 20013e4:	2008d07a 	srli	r4,r4,1
 20013e8:	18000126 	beq	r3,zero,20013f0 <__mulsi3+0x18>
 20013ec:	1145883a 	add	r2,r2,r5
 20013f0:	294b883a 	add	r5,r5,r5
 20013f4:	203ffa1e 	bne	r4,zero,20013e0 <__alt_mem_flash+0xfdff03e0>
 20013f8:	f800283a 	ret
 20013fc:	f800283a 	ret

02001400 <__divsf3>:
 2001400:	defff504 	addi	sp,sp,-44
 2001404:	200cd5fa 	srli	r6,r4,23
 2001408:	dcc00415 	stw	r19,16(sp)
 200140c:	2026d7fa 	srli	r19,r4,31
 2001410:	00c02034 	movhi	r3,128
 2001414:	dd800715 	stw	r22,28(sp)
 2001418:	dd000515 	stw	r20,20(sp)
 200141c:	dc800315 	stw	r18,12(sp)
 2001420:	18ffffc4 	addi	r3,r3,-1
 2001424:	dfc00a15 	stw	ra,40(sp)
 2001428:	df000915 	stw	fp,36(sp)
 200142c:	ddc00815 	stw	r23,32(sp)
 2001430:	dd400615 	stw	r21,24(sp)
 2001434:	dc400215 	stw	r17,8(sp)
 2001438:	dc000115 	stw	r16,4(sp)
 200143c:	35003fcc 	andi	r20,r6,255
 2001440:	1924703a 	and	r18,r3,r4
 2001444:	9d803fcc 	andi	r22,r19,255
 2001448:	a0005226 	beq	r20,zero,2001594 <__divsf3+0x194>
 200144c:	00803fc4 	movi	r2,255
 2001450:	a0802e26 	beq	r20,r2,200150c <__divsf3+0x10c>
 2001454:	91002034 	orhi	r4,r18,128
 2001458:	202490fa 	slli	r18,r4,3
 200145c:	a53fe044 	addi	r20,r20,-127
 2001460:	0021883a 	mov	r16,zero
 2001464:	002f883a 	mov	r23,zero
 2001468:	280cd5fa 	srli	r6,r5,23
 200146c:	282ad7fa 	srli	r21,r5,31
 2001470:	00c02034 	movhi	r3,128
 2001474:	18ffffc4 	addi	r3,r3,-1
 2001478:	31803fcc 	andi	r6,r6,255
 200147c:	1962703a 	and	r17,r3,r5
 2001480:	af003fcc 	andi	fp,r21,255
 2001484:	30004a26 	beq	r6,zero,20015b0 <__divsf3+0x1b0>
 2001488:	00803fc4 	movi	r2,255
 200148c:	30804526 	beq	r6,r2,20015a4 <__divsf3+0x1a4>
 2001490:	89402034 	orhi	r5,r17,128
 2001494:	282290fa 	slli	r17,r5,3
 2001498:	31bfe044 	addi	r6,r6,-127
 200149c:	000b883a 	mov	r5,zero
 20014a0:	2c20b03a 	or	r16,r5,r16
 20014a4:	802090ba 	slli	r16,r16,2
 20014a8:	00808034 	movhi	r2,512
 20014ac:	10853304 	addi	r2,r2,5324
 20014b0:	80a1883a 	add	r16,r16,r2
 20014b4:	81000017 	ldw	r4,0(r16)
 20014b8:	9d46f03a 	xor	r3,r19,r21
 20014bc:	180f883a 	mov	r7,r3
 20014c0:	18803fcc 	andi	r2,r3,255
 20014c4:	a18dc83a 	sub	r6,r20,r6
 20014c8:	2000683a 	jmp	r4
 20014cc:	020016b0 	cmpltui	r8,zero,90
 20014d0:	02001534 	movhi	r8,84
 20014d4:	020016a4 	muli	r8,zero,90
 20014d8:	02001520 	cmpeqi	r8,zero,84
 20014dc:	020016a4 	muli	r8,zero,90
 20014e0:	0200167c 	xorhi	r8,zero,89
 20014e4:	020016a4 	muli	r8,zero,90
 20014e8:	02001520 	cmpeqi	r8,zero,84
 20014ec:	02001534 	movhi	r8,84
 20014f0:	02001534 	movhi	r8,84
 20014f4:	0200167c 	xorhi	r8,zero,89
 20014f8:	02001520 	cmpeqi	r8,zero,84
 20014fc:	02001790 	cmplti	r8,zero,94
 2001500:	02001790 	cmplti	r8,zero,94
 2001504:	02001790 	cmplti	r8,zero,94
 2001508:	02001744 	movi	r8,93
 200150c:	9000581e 	bne	r18,zero,2001670 <__divsf3+0x270>
 2001510:	04000204 	movi	r16,8
 2001514:	05c00084 	movi	r23,2
 2001518:	003fd306 	br	2001468 <__alt_mem_flash+0xfdff0468>
 200151c:	0023883a 	mov	r17,zero
 2001520:	e02d883a 	mov	r22,fp
 2001524:	282f883a 	mov	r23,r5
 2001528:	00800084 	movi	r2,2
 200152c:	b8808f1e 	bne	r23,r2,200176c <__divsf3+0x36c>
 2001530:	b005883a 	mov	r2,r22
 2001534:	11c0004c 	andi	r7,r2,1
 2001538:	013fffc4 	movi	r4,-1
 200153c:	000d883a 	mov	r6,zero
 2001540:	21003fcc 	andi	r4,r4,255
 2001544:	200895fa 	slli	r4,r4,23
 2001548:	38803fcc 	andi	r2,r7,255
 200154c:	00c02034 	movhi	r3,128
 2001550:	100497fa 	slli	r2,r2,31
 2001554:	18ffffc4 	addi	r3,r3,-1
 2001558:	30c6703a 	and	r3,r6,r3
 200155c:	1906b03a 	or	r3,r3,r4
 2001560:	1884b03a 	or	r2,r3,r2
 2001564:	dfc00a17 	ldw	ra,40(sp)
 2001568:	df000917 	ldw	fp,36(sp)
 200156c:	ddc00817 	ldw	r23,32(sp)
 2001570:	dd800717 	ldw	r22,28(sp)
 2001574:	dd400617 	ldw	r21,24(sp)
 2001578:	dd000517 	ldw	r20,20(sp)
 200157c:	dcc00417 	ldw	r19,16(sp)
 2001580:	dc800317 	ldw	r18,12(sp)
 2001584:	dc400217 	ldw	r17,8(sp)
 2001588:	dc000117 	ldw	r16,4(sp)
 200158c:	dec00b04 	addi	sp,sp,44
 2001590:	f800283a 	ret
 2001594:	90002b1e 	bne	r18,zero,2001644 <__divsf3+0x244>
 2001598:	04000104 	movi	r16,4
 200159c:	05c00044 	movi	r23,1
 20015a0:	003fb106 	br	2001468 <__alt_mem_flash+0xfdff0468>
 20015a4:	8800251e 	bne	r17,zero,200163c <__divsf3+0x23c>
 20015a8:	01400084 	movi	r5,2
 20015ac:	00000206 	br	20015b8 <__divsf3+0x1b8>
 20015b0:	88001a1e 	bne	r17,zero,200161c <__divsf3+0x21c>
 20015b4:	01400044 	movi	r5,1
 20015b8:	8160b03a 	or	r16,r16,r5
 20015bc:	802090ba 	slli	r16,r16,2
 20015c0:	00c08034 	movhi	r3,512
 20015c4:	18c57704 	addi	r3,r3,5596
 20015c8:	80e1883a 	add	r16,r16,r3
 20015cc:	80c00017 	ldw	r3,0(r16)
 20015d0:	9d44f03a 	xor	r2,r19,r21
 20015d4:	a18dc83a 	sub	r6,r20,r6
 20015d8:	1800683a 	jmp	r3
 20015dc:	02001534 	movhi	r8,84
 20015e0:	02001534 	movhi	r8,84
 20015e4:	02001780 	call	200178 <__ram_exceptions_end+0x1f7e68>
 20015e8:	0200151c 	xori	r8,zero,84
 20015ec:	02001780 	call	200178 <__ram_exceptions_end+0x1f7e68>
 20015f0:	0200167c 	xorhi	r8,zero,89
 20015f4:	02001780 	call	200178 <__ram_exceptions_end+0x1f7e68>
 20015f8:	0200151c 	xori	r8,zero,84
 20015fc:	02001534 	movhi	r8,84
 2001600:	02001534 	movhi	r8,84
 2001604:	0200167c 	xorhi	r8,zero,89
 2001608:	0200151c 	xori	r8,zero,84
 200160c:	02001790 	cmplti	r8,zero,94
 2001610:	02001790 	cmplti	r8,zero,94
 2001614:	02001790 	cmplti	r8,zero,94
 2001618:	020017a8 	cmpgeui	r8,zero,94
 200161c:	8809883a 	mov	r4,r17
 2001620:	200411c0 	call	200411c <__clzsi2>
 2001624:	10fffec4 	addi	r3,r2,-5
 2001628:	10801d84 	addi	r2,r2,118
 200162c:	88e2983a 	sll	r17,r17,r3
 2001630:	008dc83a 	sub	r6,zero,r2
 2001634:	000b883a 	mov	r5,zero
 2001638:	003f9906 	br	20014a0 <__alt_mem_flash+0xfdff04a0>
 200163c:	014000c4 	movi	r5,3
 2001640:	003f9706 	br	20014a0 <__alt_mem_flash+0xfdff04a0>
 2001644:	9009883a 	mov	r4,r18
 2001648:	d9400015 	stw	r5,0(sp)
 200164c:	200411c0 	call	200411c <__clzsi2>
 2001650:	10fffec4 	addi	r3,r2,-5
 2001654:	11801d84 	addi	r6,r2,118
 2001658:	90e4983a 	sll	r18,r18,r3
 200165c:	01a9c83a 	sub	r20,zero,r6
 2001660:	0021883a 	mov	r16,zero
 2001664:	002f883a 	mov	r23,zero
 2001668:	d9400017 	ldw	r5,0(sp)
 200166c:	003f7e06 	br	2001468 <__alt_mem_flash+0xfdff0468>
 2001670:	04000304 	movi	r16,12
 2001674:	05c000c4 	movi	r23,3
 2001678:	003f7b06 	br	2001468 <__alt_mem_flash+0xfdff0468>
 200167c:	01802034 	movhi	r6,128
 2001680:	000f883a 	mov	r7,zero
 2001684:	31bfffc4 	addi	r6,r6,-1
 2001688:	013fffc4 	movi	r4,-1
 200168c:	003fac06 	br	2001540 <__alt_mem_flash+0xfdff0540>
 2001690:	01400044 	movi	r5,1
 2001694:	2909c83a 	sub	r4,r5,r4
 2001698:	00c006c4 	movi	r3,27
 200169c:	19004b0e 	bge	r3,r4,20017cc <__divsf3+0x3cc>
 20016a0:	114e703a 	and	r7,r2,r5
 20016a4:	0009883a 	mov	r4,zero
 20016a8:	000d883a 	mov	r6,zero
 20016ac:	003fa406 	br	2001540 <__alt_mem_flash+0xfdff0540>
 20016b0:	9006917a 	slli	r3,r18,5
 20016b4:	8822917a 	slli	r17,r17,5
 20016b8:	1c40372e 	bgeu	r3,r17,2001798 <__divsf3+0x398>
 20016bc:	31bfffc4 	addi	r6,r6,-1
 20016c0:	010006c4 	movi	r4,27
 20016c4:	000b883a 	mov	r5,zero
 20016c8:	180f883a 	mov	r7,r3
 20016cc:	294b883a 	add	r5,r5,r5
 20016d0:	18c7883a 	add	r3,r3,r3
 20016d4:	38000116 	blt	r7,zero,20016dc <__divsf3+0x2dc>
 20016d8:	1c400236 	bltu	r3,r17,20016e4 <__divsf3+0x2e4>
 20016dc:	1c47c83a 	sub	r3,r3,r17
 20016e0:	29400054 	ori	r5,r5,1
 20016e4:	213fffc4 	addi	r4,r4,-1
 20016e8:	203ff71e 	bne	r4,zero,20016c8 <__alt_mem_flash+0xfdff06c8>
 20016ec:	1806c03a 	cmpne	r3,r3,zero
 20016f0:	1962b03a 	or	r17,r3,r5
 20016f4:	31001fc4 	addi	r4,r6,127
 20016f8:	013fe50e 	bge	zero,r4,2001690 <__alt_mem_flash+0xfdff0690>
 20016fc:	88c001cc 	andi	r3,r17,7
 2001700:	18000426 	beq	r3,zero,2001714 <__divsf3+0x314>
 2001704:	88c003cc 	andi	r3,r17,15
 2001708:	01400104 	movi	r5,4
 200170c:	19400126 	beq	r3,r5,2001714 <__divsf3+0x314>
 2001710:	8963883a 	add	r17,r17,r5
 2001714:	88c2002c 	andhi	r3,r17,2048
 2001718:	18000426 	beq	r3,zero,200172c <__divsf3+0x32c>
 200171c:	00fe0034 	movhi	r3,63488
 2001720:	18ffffc4 	addi	r3,r3,-1
 2001724:	31002004 	addi	r4,r6,128
 2001728:	88e2703a 	and	r17,r17,r3
 200172c:	00c03f84 	movi	r3,254
 2001730:	193f8016 	blt	r3,r4,2001534 <__alt_mem_flash+0xfdff0534>
 2001734:	880c91ba 	slli	r6,r17,6
 2001738:	11c0004c 	andi	r7,r2,1
 200173c:	300cd27a 	srli	r6,r6,9
 2001740:	003f7f06 	br	2001540 <__alt_mem_flash+0xfdff0540>
 2001744:	9080102c 	andhi	r2,r18,64
 2001748:	10000226 	beq	r2,zero,2001754 <__divsf3+0x354>
 200174c:	8880102c 	andhi	r2,r17,64
 2001750:	10001826 	beq	r2,zero,20017b4 <__divsf3+0x3b4>
 2001754:	00802034 	movhi	r2,128
 2001758:	91801034 	orhi	r6,r18,64
 200175c:	10bfffc4 	addi	r2,r2,-1
 2001760:	980f883a 	mov	r7,r19
 2001764:	308c703a 	and	r6,r6,r2
 2001768:	003fc706 	br	2001688 <__alt_mem_flash+0xfdff0688>
 200176c:	008000c4 	movi	r2,3
 2001770:	b8802d26 	beq	r23,r2,2001828 <__divsf3+0x428>
 2001774:	00c00044 	movi	r3,1
 2001778:	b005883a 	mov	r2,r22
 200177c:	b8ffdd1e 	bne	r23,r3,20016f4 <__alt_mem_flash+0xfdff06f4>
 2001780:	11c0004c 	andi	r7,r2,1
 2001784:	0009883a 	mov	r4,zero
 2001788:	000d883a 	mov	r6,zero
 200178c:	003f6c06 	br	2001540 <__alt_mem_flash+0xfdff0540>
 2001790:	9023883a 	mov	r17,r18
 2001794:	003f6406 	br	2001528 <__alt_mem_flash+0xfdff0528>
 2001798:	1c47c83a 	sub	r3,r3,r17
 200179c:	01000684 	movi	r4,26
 20017a0:	01400044 	movi	r5,1
 20017a4:	003fc806 	br	20016c8 <__alt_mem_flash+0xfdff06c8>
 20017a8:	9080102c 	andhi	r2,r18,64
 20017ac:	103fe926 	beq	r2,zero,2001754 <__alt_mem_flash+0xfdff0754>
 20017b0:	0023883a 	mov	r17,zero
 20017b4:	00802034 	movhi	r2,128
 20017b8:	89801034 	orhi	r6,r17,64
 20017bc:	10bfffc4 	addi	r2,r2,-1
 20017c0:	a80f883a 	mov	r7,r21
 20017c4:	308c703a 	and	r6,r6,r2
 20017c8:	003faf06 	br	2001688 <__alt_mem_flash+0xfdff0688>
 20017cc:	01c00804 	movi	r7,32
 20017d0:	390fc83a 	sub	r7,r7,r4
 20017d4:	89ce983a 	sll	r7,r17,r7
 20017d8:	890ad83a 	srl	r5,r17,r4
 20017dc:	380ec03a 	cmpne	r7,r7,zero
 20017e0:	29cab03a 	or	r5,r5,r7
 20017e4:	28c001cc 	andi	r3,r5,7
 20017e8:	18000426 	beq	r3,zero,20017fc <__divsf3+0x3fc>
 20017ec:	28c003cc 	andi	r3,r5,15
 20017f0:	01000104 	movi	r4,4
 20017f4:	19000126 	beq	r3,r4,20017fc <__divsf3+0x3fc>
 20017f8:	290b883a 	add	r5,r5,r4
 20017fc:	28c1002c 	andhi	r3,r5,1024
 2001800:	18000426 	beq	r3,zero,2001814 <__divsf3+0x414>
 2001804:	11c0004c 	andi	r7,r2,1
 2001808:	01000044 	movi	r4,1
 200180c:	000d883a 	mov	r6,zero
 2001810:	003f4b06 	br	2001540 <__alt_mem_flash+0xfdff0540>
 2001814:	280a91ba 	slli	r5,r5,6
 2001818:	11c0004c 	andi	r7,r2,1
 200181c:	0009883a 	mov	r4,zero
 2001820:	280cd27a 	srli	r6,r5,9
 2001824:	003f4606 	br	2001540 <__alt_mem_flash+0xfdff0540>
 2001828:	00802034 	movhi	r2,128
 200182c:	89801034 	orhi	r6,r17,64
 2001830:	10bfffc4 	addi	r2,r2,-1
 2001834:	b00f883a 	mov	r7,r22
 2001838:	308c703a 	and	r6,r6,r2
 200183c:	003f9206 	br	2001688 <__alt_mem_flash+0xfdff0688>

02001840 <__adddf3>:
 2001840:	02c00434 	movhi	r11,16
 2001844:	5affffc4 	addi	r11,r11,-1
 2001848:	2806d7fa 	srli	r3,r5,31
 200184c:	2ad4703a 	and	r10,r5,r11
 2001850:	3ad2703a 	and	r9,r7,r11
 2001854:	3804d53a 	srli	r2,r7,20
 2001858:	3018d77a 	srli	r12,r6,29
 200185c:	280ad53a 	srli	r5,r5,20
 2001860:	501490fa 	slli	r10,r10,3
 2001864:	2010d77a 	srli	r8,r4,29
 2001868:	481290fa 	slli	r9,r9,3
 200186c:	380ed7fa 	srli	r7,r7,31
 2001870:	defffb04 	addi	sp,sp,-20
 2001874:	dc800215 	stw	r18,8(sp)
 2001878:	dc400115 	stw	r17,4(sp)
 200187c:	dc000015 	stw	r16,0(sp)
 2001880:	dfc00415 	stw	ra,16(sp)
 2001884:	dcc00315 	stw	r19,12(sp)
 2001888:	1c803fcc 	andi	r18,r3,255
 200188c:	2c01ffcc 	andi	r16,r5,2047
 2001890:	5210b03a 	or	r8,r10,r8
 2001894:	202290fa 	slli	r17,r4,3
 2001898:	1081ffcc 	andi	r2,r2,2047
 200189c:	4b12b03a 	or	r9,r9,r12
 20018a0:	300c90fa 	slli	r6,r6,3
 20018a4:	91c07526 	beq	r18,r7,2001a7c <__adddf3+0x23c>
 20018a8:	8087c83a 	sub	r3,r16,r2
 20018ac:	00c0ab0e 	bge	zero,r3,2001b5c <__adddf3+0x31c>
 20018b0:	10002a1e 	bne	r2,zero,200195c <__adddf3+0x11c>
 20018b4:	4984b03a 	or	r2,r9,r6
 20018b8:	1000961e 	bne	r2,zero,2001b14 <__adddf3+0x2d4>
 20018bc:	888001cc 	andi	r2,r17,7
 20018c0:	10000726 	beq	r2,zero,20018e0 <__adddf3+0xa0>
 20018c4:	888003cc 	andi	r2,r17,15
 20018c8:	00c00104 	movi	r3,4
 20018cc:	10c00426 	beq	r2,r3,20018e0 <__adddf3+0xa0>
 20018d0:	88c7883a 	add	r3,r17,r3
 20018d4:	1c63803a 	cmpltu	r17,r3,r17
 20018d8:	4451883a 	add	r8,r8,r17
 20018dc:	1823883a 	mov	r17,r3
 20018e0:	4080202c 	andhi	r2,r8,128
 20018e4:	10005926 	beq	r2,zero,2001a4c <__adddf3+0x20c>
 20018e8:	84000044 	addi	r16,r16,1
 20018ec:	0081ffc4 	movi	r2,2047
 20018f0:	8080ba26 	beq	r16,r2,2001bdc <__adddf3+0x39c>
 20018f4:	00bfe034 	movhi	r2,65408
 20018f8:	10bfffc4 	addi	r2,r2,-1
 20018fc:	4090703a 	and	r8,r8,r2
 2001900:	4004977a 	slli	r2,r8,29
 2001904:	4010927a 	slli	r8,r8,9
 2001908:	8822d0fa 	srli	r17,r17,3
 200190c:	8401ffcc 	andi	r16,r16,2047
 2001910:	4010d33a 	srli	r8,r8,12
 2001914:	9007883a 	mov	r3,r18
 2001918:	1444b03a 	or	r2,r2,r17
 200191c:	8401ffcc 	andi	r16,r16,2047
 2001920:	8020953a 	slli	r16,r16,20
 2001924:	18c03fcc 	andi	r3,r3,255
 2001928:	01000434 	movhi	r4,16
 200192c:	213fffc4 	addi	r4,r4,-1
 2001930:	180697fa 	slli	r3,r3,31
 2001934:	4110703a 	and	r8,r8,r4
 2001938:	4410b03a 	or	r8,r8,r16
 200193c:	40c6b03a 	or	r3,r8,r3
 2001940:	dfc00417 	ldw	ra,16(sp)
 2001944:	dcc00317 	ldw	r19,12(sp)
 2001948:	dc800217 	ldw	r18,8(sp)
 200194c:	dc400117 	ldw	r17,4(sp)
 2001950:	dc000017 	ldw	r16,0(sp)
 2001954:	dec00504 	addi	sp,sp,20
 2001958:	f800283a 	ret
 200195c:	0081ffc4 	movi	r2,2047
 2001960:	80bfd626 	beq	r16,r2,20018bc <__alt_mem_flash+0xfdff08bc>
 2001964:	4a402034 	orhi	r9,r9,128
 2001968:	00800e04 	movi	r2,56
 200196c:	10c09f16 	blt	r2,r3,2001bec <__adddf3+0x3ac>
 2001970:	008007c4 	movi	r2,31
 2001974:	10c0c216 	blt	r2,r3,2001c80 <__adddf3+0x440>
 2001978:	00800804 	movi	r2,32
 200197c:	10c5c83a 	sub	r2,r2,r3
 2001980:	488a983a 	sll	r5,r9,r2
 2001984:	30c8d83a 	srl	r4,r6,r3
 2001988:	3084983a 	sll	r2,r6,r2
 200198c:	48c6d83a 	srl	r3,r9,r3
 2001990:	290cb03a 	or	r6,r5,r4
 2001994:	1004c03a 	cmpne	r2,r2,zero
 2001998:	308cb03a 	or	r6,r6,r2
 200199c:	898dc83a 	sub	r6,r17,r6
 20019a0:	89a3803a 	cmpltu	r17,r17,r6
 20019a4:	40d1c83a 	sub	r8,r8,r3
 20019a8:	4451c83a 	sub	r8,r8,r17
 20019ac:	3023883a 	mov	r17,r6
 20019b0:	4080202c 	andhi	r2,r8,128
 20019b4:	10002326 	beq	r2,zero,2001a44 <__adddf3+0x204>
 20019b8:	04c02034 	movhi	r19,128
 20019bc:	9cffffc4 	addi	r19,r19,-1
 20019c0:	44e6703a 	and	r19,r8,r19
 20019c4:	98007626 	beq	r19,zero,2001ba0 <__adddf3+0x360>
 20019c8:	9809883a 	mov	r4,r19
 20019cc:	200411c0 	call	200411c <__clzsi2>
 20019d0:	10fffe04 	addi	r3,r2,-8
 20019d4:	010007c4 	movi	r4,31
 20019d8:	20c07716 	blt	r4,r3,2001bb8 <__adddf3+0x378>
 20019dc:	00800804 	movi	r2,32
 20019e0:	10c5c83a 	sub	r2,r2,r3
 20019e4:	8884d83a 	srl	r2,r17,r2
 20019e8:	98d0983a 	sll	r8,r19,r3
 20019ec:	88e2983a 	sll	r17,r17,r3
 20019f0:	1204b03a 	or	r2,r2,r8
 20019f4:	1c007416 	blt	r3,r16,2001bc8 <__adddf3+0x388>
 20019f8:	1c21c83a 	sub	r16,r3,r16
 20019fc:	82000044 	addi	r8,r16,1
 2001a00:	00c007c4 	movi	r3,31
 2001a04:	1a009116 	blt	r3,r8,2001c4c <__adddf3+0x40c>
 2001a08:	00c00804 	movi	r3,32
 2001a0c:	1a07c83a 	sub	r3,r3,r8
 2001a10:	8a08d83a 	srl	r4,r17,r8
 2001a14:	88e2983a 	sll	r17,r17,r3
 2001a18:	10c6983a 	sll	r3,r2,r3
 2001a1c:	1210d83a 	srl	r8,r2,r8
 2001a20:	8804c03a 	cmpne	r2,r17,zero
 2001a24:	1906b03a 	or	r3,r3,r4
 2001a28:	18a2b03a 	or	r17,r3,r2
 2001a2c:	0021883a 	mov	r16,zero
 2001a30:	003fa206 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001a34:	1890b03a 	or	r8,r3,r2
 2001a38:	40017d26 	beq	r8,zero,2002030 <__adddf3+0x7f0>
 2001a3c:	1011883a 	mov	r8,r2
 2001a40:	1823883a 	mov	r17,r3
 2001a44:	888001cc 	andi	r2,r17,7
 2001a48:	103f9e1e 	bne	r2,zero,20018c4 <__alt_mem_flash+0xfdff08c4>
 2001a4c:	4004977a 	slli	r2,r8,29
 2001a50:	8822d0fa 	srli	r17,r17,3
 2001a54:	4010d0fa 	srli	r8,r8,3
 2001a58:	9007883a 	mov	r3,r18
 2001a5c:	1444b03a 	or	r2,r2,r17
 2001a60:	0101ffc4 	movi	r4,2047
 2001a64:	81002426 	beq	r16,r4,2001af8 <__adddf3+0x2b8>
 2001a68:	8120703a 	and	r16,r16,r4
 2001a6c:	01000434 	movhi	r4,16
 2001a70:	213fffc4 	addi	r4,r4,-1
 2001a74:	4110703a 	and	r8,r8,r4
 2001a78:	003fa806 	br	200191c <__alt_mem_flash+0xfdff091c>
 2001a7c:	8089c83a 	sub	r4,r16,r2
 2001a80:	01005e0e 	bge	zero,r4,2001bfc <__adddf3+0x3bc>
 2001a84:	10002b26 	beq	r2,zero,2001b34 <__adddf3+0x2f4>
 2001a88:	0081ffc4 	movi	r2,2047
 2001a8c:	80bf8b26 	beq	r16,r2,20018bc <__alt_mem_flash+0xfdff08bc>
 2001a90:	4a402034 	orhi	r9,r9,128
 2001a94:	00800e04 	movi	r2,56
 2001a98:	1100a40e 	bge	r2,r4,2001d2c <__adddf3+0x4ec>
 2001a9c:	498cb03a 	or	r6,r9,r6
 2001aa0:	300ac03a 	cmpne	r5,r6,zero
 2001aa4:	0013883a 	mov	r9,zero
 2001aa8:	2c4b883a 	add	r5,r5,r17
 2001aac:	2c63803a 	cmpltu	r17,r5,r17
 2001ab0:	4a11883a 	add	r8,r9,r8
 2001ab4:	8a11883a 	add	r8,r17,r8
 2001ab8:	2823883a 	mov	r17,r5
 2001abc:	4080202c 	andhi	r2,r8,128
 2001ac0:	103fe026 	beq	r2,zero,2001a44 <__alt_mem_flash+0xfdff0a44>
 2001ac4:	84000044 	addi	r16,r16,1
 2001ac8:	0081ffc4 	movi	r2,2047
 2001acc:	8080d226 	beq	r16,r2,2001e18 <__adddf3+0x5d8>
 2001ad0:	00bfe034 	movhi	r2,65408
 2001ad4:	10bfffc4 	addi	r2,r2,-1
 2001ad8:	4090703a 	and	r8,r8,r2
 2001adc:	880ad07a 	srli	r5,r17,1
 2001ae0:	400897fa 	slli	r4,r8,31
 2001ae4:	88c0004c 	andi	r3,r17,1
 2001ae8:	28e2b03a 	or	r17,r5,r3
 2001aec:	4010d07a 	srli	r8,r8,1
 2001af0:	2462b03a 	or	r17,r4,r17
 2001af4:	003f7106 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001af8:	4088b03a 	or	r4,r8,r2
 2001afc:	20014526 	beq	r4,zero,2002014 <__adddf3+0x7d4>
 2001b00:	01000434 	movhi	r4,16
 2001b04:	42000234 	orhi	r8,r8,8
 2001b08:	213fffc4 	addi	r4,r4,-1
 2001b0c:	4110703a 	and	r8,r8,r4
 2001b10:	003f8206 	br	200191c <__alt_mem_flash+0xfdff091c>
 2001b14:	18ffffc4 	addi	r3,r3,-1
 2001b18:	1800491e 	bne	r3,zero,2001c40 <__adddf3+0x400>
 2001b1c:	898bc83a 	sub	r5,r17,r6
 2001b20:	8963803a 	cmpltu	r17,r17,r5
 2001b24:	4251c83a 	sub	r8,r8,r9
 2001b28:	4451c83a 	sub	r8,r8,r17
 2001b2c:	2823883a 	mov	r17,r5
 2001b30:	003f9f06 	br	20019b0 <__alt_mem_flash+0xfdff09b0>
 2001b34:	4984b03a 	or	r2,r9,r6
 2001b38:	103f6026 	beq	r2,zero,20018bc <__alt_mem_flash+0xfdff08bc>
 2001b3c:	213fffc4 	addi	r4,r4,-1
 2001b40:	2000931e 	bne	r4,zero,2001d90 <__adddf3+0x550>
 2001b44:	898d883a 	add	r6,r17,r6
 2001b48:	3463803a 	cmpltu	r17,r6,r17
 2001b4c:	4251883a 	add	r8,r8,r9
 2001b50:	8a11883a 	add	r8,r17,r8
 2001b54:	3023883a 	mov	r17,r6
 2001b58:	003fd806 	br	2001abc <__alt_mem_flash+0xfdff0abc>
 2001b5c:	1800541e 	bne	r3,zero,2001cb0 <__adddf3+0x470>
 2001b60:	80800044 	addi	r2,r16,1
 2001b64:	1081ffcc 	andi	r2,r2,2047
 2001b68:	00c00044 	movi	r3,1
 2001b6c:	1880a00e 	bge	r3,r2,2001df0 <__adddf3+0x5b0>
 2001b70:	8989c83a 	sub	r4,r17,r6
 2001b74:	8905803a 	cmpltu	r2,r17,r4
 2001b78:	4267c83a 	sub	r19,r8,r9
 2001b7c:	98a7c83a 	sub	r19,r19,r2
 2001b80:	9880202c 	andhi	r2,r19,128
 2001b84:	10006326 	beq	r2,zero,2001d14 <__adddf3+0x4d4>
 2001b88:	3463c83a 	sub	r17,r6,r17
 2001b8c:	4a07c83a 	sub	r3,r9,r8
 2001b90:	344d803a 	cmpltu	r6,r6,r17
 2001b94:	19a7c83a 	sub	r19,r3,r6
 2001b98:	3825883a 	mov	r18,r7
 2001b9c:	983f8a1e 	bne	r19,zero,20019c8 <__alt_mem_flash+0xfdff09c8>
 2001ba0:	8809883a 	mov	r4,r17
 2001ba4:	200411c0 	call	200411c <__clzsi2>
 2001ba8:	10800804 	addi	r2,r2,32
 2001bac:	10fffe04 	addi	r3,r2,-8
 2001bb0:	010007c4 	movi	r4,31
 2001bb4:	20ff890e 	bge	r4,r3,20019dc <__alt_mem_flash+0xfdff09dc>
 2001bb8:	10bff604 	addi	r2,r2,-40
 2001bbc:	8884983a 	sll	r2,r17,r2
 2001bc0:	0023883a 	mov	r17,zero
 2001bc4:	1c3f8c0e 	bge	r3,r16,20019f8 <__alt_mem_flash+0xfdff09f8>
 2001bc8:	023fe034 	movhi	r8,65408
 2001bcc:	423fffc4 	addi	r8,r8,-1
 2001bd0:	80e1c83a 	sub	r16,r16,r3
 2001bd4:	1210703a 	and	r8,r2,r8
 2001bd8:	003f3806 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001bdc:	9007883a 	mov	r3,r18
 2001be0:	0011883a 	mov	r8,zero
 2001be4:	0005883a 	mov	r2,zero
 2001be8:	003f4c06 	br	200191c <__alt_mem_flash+0xfdff091c>
 2001bec:	498cb03a 	or	r6,r9,r6
 2001bf0:	300cc03a 	cmpne	r6,r6,zero
 2001bf4:	0007883a 	mov	r3,zero
 2001bf8:	003f6806 	br	200199c <__alt_mem_flash+0xfdff099c>
 2001bfc:	20009c1e 	bne	r4,zero,2001e70 <__adddf3+0x630>
 2001c00:	80800044 	addi	r2,r16,1
 2001c04:	1141ffcc 	andi	r5,r2,2047
 2001c08:	01000044 	movi	r4,1
 2001c0c:	2140670e 	bge	r4,r5,2001dac <__adddf3+0x56c>
 2001c10:	0101ffc4 	movi	r4,2047
 2001c14:	11007f26 	beq	r2,r4,2001e14 <__adddf3+0x5d4>
 2001c18:	898d883a 	add	r6,r17,r6
 2001c1c:	4247883a 	add	r3,r8,r9
 2001c20:	3451803a 	cmpltu	r8,r6,r17
 2001c24:	40d1883a 	add	r8,r8,r3
 2001c28:	402297fa 	slli	r17,r8,31
 2001c2c:	300cd07a 	srli	r6,r6,1
 2001c30:	4010d07a 	srli	r8,r8,1
 2001c34:	1021883a 	mov	r16,r2
 2001c38:	89a2b03a 	or	r17,r17,r6
 2001c3c:	003f1f06 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001c40:	0081ffc4 	movi	r2,2047
 2001c44:	80bf481e 	bne	r16,r2,2001968 <__alt_mem_flash+0xfdff0968>
 2001c48:	003f1c06 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001c4c:	843ff844 	addi	r16,r16,-31
 2001c50:	01000804 	movi	r4,32
 2001c54:	1406d83a 	srl	r3,r2,r16
 2001c58:	41005026 	beq	r8,r4,2001d9c <__adddf3+0x55c>
 2001c5c:	01001004 	movi	r4,64
 2001c60:	2211c83a 	sub	r8,r4,r8
 2001c64:	1204983a 	sll	r2,r2,r8
 2001c68:	88a2b03a 	or	r17,r17,r2
 2001c6c:	8822c03a 	cmpne	r17,r17,zero
 2001c70:	1c62b03a 	or	r17,r3,r17
 2001c74:	0011883a 	mov	r8,zero
 2001c78:	0021883a 	mov	r16,zero
 2001c7c:	003f7106 	br	2001a44 <__alt_mem_flash+0xfdff0a44>
 2001c80:	193ff804 	addi	r4,r3,-32
 2001c84:	00800804 	movi	r2,32
 2001c88:	4908d83a 	srl	r4,r9,r4
 2001c8c:	18804526 	beq	r3,r2,2001da4 <__adddf3+0x564>
 2001c90:	00801004 	movi	r2,64
 2001c94:	10c5c83a 	sub	r2,r2,r3
 2001c98:	4886983a 	sll	r3,r9,r2
 2001c9c:	198cb03a 	or	r6,r3,r6
 2001ca0:	300cc03a 	cmpne	r6,r6,zero
 2001ca4:	218cb03a 	or	r6,r4,r6
 2001ca8:	0007883a 	mov	r3,zero
 2001cac:	003f3b06 	br	200199c <__alt_mem_flash+0xfdff099c>
 2001cb0:	80002a26 	beq	r16,zero,2001d5c <__adddf3+0x51c>
 2001cb4:	0101ffc4 	movi	r4,2047
 2001cb8:	11006826 	beq	r2,r4,2001e5c <__adddf3+0x61c>
 2001cbc:	00c7c83a 	sub	r3,zero,r3
 2001cc0:	42002034 	orhi	r8,r8,128
 2001cc4:	01000e04 	movi	r4,56
 2001cc8:	20c07c16 	blt	r4,r3,2001ebc <__adddf3+0x67c>
 2001ccc:	010007c4 	movi	r4,31
 2001cd0:	20c0da16 	blt	r4,r3,200203c <__adddf3+0x7fc>
 2001cd4:	01000804 	movi	r4,32
 2001cd8:	20c9c83a 	sub	r4,r4,r3
 2001cdc:	4114983a 	sll	r10,r8,r4
 2001ce0:	88cad83a 	srl	r5,r17,r3
 2001ce4:	8908983a 	sll	r4,r17,r4
 2001ce8:	40c6d83a 	srl	r3,r8,r3
 2001cec:	5162b03a 	or	r17,r10,r5
 2001cf0:	2008c03a 	cmpne	r4,r4,zero
 2001cf4:	8922b03a 	or	r17,r17,r4
 2001cf8:	3463c83a 	sub	r17,r6,r17
 2001cfc:	48c7c83a 	sub	r3,r9,r3
 2001d00:	344d803a 	cmpltu	r6,r6,r17
 2001d04:	1991c83a 	sub	r8,r3,r6
 2001d08:	1021883a 	mov	r16,r2
 2001d0c:	3825883a 	mov	r18,r7
 2001d10:	003f2706 	br	20019b0 <__alt_mem_flash+0xfdff09b0>
 2001d14:	24d0b03a 	or	r8,r4,r19
 2001d18:	40001b1e 	bne	r8,zero,2001d88 <__adddf3+0x548>
 2001d1c:	0005883a 	mov	r2,zero
 2001d20:	0007883a 	mov	r3,zero
 2001d24:	0021883a 	mov	r16,zero
 2001d28:	003f4d06 	br	2001a60 <__alt_mem_flash+0xfdff0a60>
 2001d2c:	008007c4 	movi	r2,31
 2001d30:	11003c16 	blt	r2,r4,2001e24 <__adddf3+0x5e4>
 2001d34:	00800804 	movi	r2,32
 2001d38:	1105c83a 	sub	r2,r2,r4
 2001d3c:	488e983a 	sll	r7,r9,r2
 2001d40:	310ad83a 	srl	r5,r6,r4
 2001d44:	3084983a 	sll	r2,r6,r2
 2001d48:	4912d83a 	srl	r9,r9,r4
 2001d4c:	394ab03a 	or	r5,r7,r5
 2001d50:	1004c03a 	cmpne	r2,r2,zero
 2001d54:	288ab03a 	or	r5,r5,r2
 2001d58:	003f5306 	br	2001aa8 <__alt_mem_flash+0xfdff0aa8>
 2001d5c:	4448b03a 	or	r4,r8,r17
 2001d60:	20003e26 	beq	r4,zero,2001e5c <__adddf3+0x61c>
 2001d64:	00c6303a 	nor	r3,zero,r3
 2001d68:	18003a1e 	bne	r3,zero,2001e54 <__adddf3+0x614>
 2001d6c:	3463c83a 	sub	r17,r6,r17
 2001d70:	4a07c83a 	sub	r3,r9,r8
 2001d74:	344d803a 	cmpltu	r6,r6,r17
 2001d78:	1991c83a 	sub	r8,r3,r6
 2001d7c:	1021883a 	mov	r16,r2
 2001d80:	3825883a 	mov	r18,r7
 2001d84:	003f0a06 	br	20019b0 <__alt_mem_flash+0xfdff09b0>
 2001d88:	2023883a 	mov	r17,r4
 2001d8c:	003f0d06 	br	20019c4 <__alt_mem_flash+0xfdff09c4>
 2001d90:	0081ffc4 	movi	r2,2047
 2001d94:	80bf3f1e 	bne	r16,r2,2001a94 <__alt_mem_flash+0xfdff0a94>
 2001d98:	003ec806 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001d9c:	0005883a 	mov	r2,zero
 2001da0:	003fb106 	br	2001c68 <__alt_mem_flash+0xfdff0c68>
 2001da4:	0007883a 	mov	r3,zero
 2001da8:	003fbc06 	br	2001c9c <__alt_mem_flash+0xfdff0c9c>
 2001dac:	4444b03a 	or	r2,r8,r17
 2001db0:	8000871e 	bne	r16,zero,2001fd0 <__adddf3+0x790>
 2001db4:	1000ba26 	beq	r2,zero,20020a0 <__adddf3+0x860>
 2001db8:	4984b03a 	or	r2,r9,r6
 2001dbc:	103ebf26 	beq	r2,zero,20018bc <__alt_mem_flash+0xfdff08bc>
 2001dc0:	8985883a 	add	r2,r17,r6
 2001dc4:	4247883a 	add	r3,r8,r9
 2001dc8:	1451803a 	cmpltu	r8,r2,r17
 2001dcc:	40d1883a 	add	r8,r8,r3
 2001dd0:	40c0202c 	andhi	r3,r8,128
 2001dd4:	1023883a 	mov	r17,r2
 2001dd8:	183f1a26 	beq	r3,zero,2001a44 <__alt_mem_flash+0xfdff0a44>
 2001ddc:	00bfe034 	movhi	r2,65408
 2001de0:	10bfffc4 	addi	r2,r2,-1
 2001de4:	2021883a 	mov	r16,r4
 2001de8:	4090703a 	and	r8,r8,r2
 2001dec:	003eb306 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001df0:	4444b03a 	or	r2,r8,r17
 2001df4:	8000291e 	bne	r16,zero,2001e9c <__adddf3+0x65c>
 2001df8:	10004b1e 	bne	r2,zero,2001f28 <__adddf3+0x6e8>
 2001dfc:	4990b03a 	or	r8,r9,r6
 2001e00:	40008b26 	beq	r8,zero,2002030 <__adddf3+0x7f0>
 2001e04:	4811883a 	mov	r8,r9
 2001e08:	3023883a 	mov	r17,r6
 2001e0c:	3825883a 	mov	r18,r7
 2001e10:	003eaa06 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001e14:	1021883a 	mov	r16,r2
 2001e18:	0011883a 	mov	r8,zero
 2001e1c:	0005883a 	mov	r2,zero
 2001e20:	003f0f06 	br	2001a60 <__alt_mem_flash+0xfdff0a60>
 2001e24:	217ff804 	addi	r5,r4,-32
 2001e28:	00800804 	movi	r2,32
 2001e2c:	494ad83a 	srl	r5,r9,r5
 2001e30:	20807d26 	beq	r4,r2,2002028 <__adddf3+0x7e8>
 2001e34:	00801004 	movi	r2,64
 2001e38:	1109c83a 	sub	r4,r2,r4
 2001e3c:	4912983a 	sll	r9,r9,r4
 2001e40:	498cb03a 	or	r6,r9,r6
 2001e44:	300cc03a 	cmpne	r6,r6,zero
 2001e48:	298ab03a 	or	r5,r5,r6
 2001e4c:	0013883a 	mov	r9,zero
 2001e50:	003f1506 	br	2001aa8 <__alt_mem_flash+0xfdff0aa8>
 2001e54:	0101ffc4 	movi	r4,2047
 2001e58:	113f9a1e 	bne	r2,r4,2001cc4 <__alt_mem_flash+0xfdff0cc4>
 2001e5c:	4811883a 	mov	r8,r9
 2001e60:	3023883a 	mov	r17,r6
 2001e64:	1021883a 	mov	r16,r2
 2001e68:	3825883a 	mov	r18,r7
 2001e6c:	003e9306 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001e70:	8000161e 	bne	r16,zero,2001ecc <__adddf3+0x68c>
 2001e74:	444ab03a 	or	r5,r8,r17
 2001e78:	28005126 	beq	r5,zero,2001fc0 <__adddf3+0x780>
 2001e7c:	0108303a 	nor	r4,zero,r4
 2001e80:	20004d1e 	bne	r4,zero,2001fb8 <__adddf3+0x778>
 2001e84:	89a3883a 	add	r17,r17,r6
 2001e88:	4253883a 	add	r9,r8,r9
 2001e8c:	898d803a 	cmpltu	r6,r17,r6
 2001e90:	3251883a 	add	r8,r6,r9
 2001e94:	1021883a 	mov	r16,r2
 2001e98:	003f0806 	br	2001abc <__alt_mem_flash+0xfdff0abc>
 2001e9c:	1000301e 	bne	r2,zero,2001f60 <__adddf3+0x720>
 2001ea0:	4984b03a 	or	r2,r9,r6
 2001ea4:	10007126 	beq	r2,zero,200206c <__adddf3+0x82c>
 2001ea8:	4811883a 	mov	r8,r9
 2001eac:	3023883a 	mov	r17,r6
 2001eb0:	3825883a 	mov	r18,r7
 2001eb4:	0401ffc4 	movi	r16,2047
 2001eb8:	003e8006 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001ebc:	4462b03a 	or	r17,r8,r17
 2001ec0:	8822c03a 	cmpne	r17,r17,zero
 2001ec4:	0007883a 	mov	r3,zero
 2001ec8:	003f8b06 	br	2001cf8 <__alt_mem_flash+0xfdff0cf8>
 2001ecc:	0141ffc4 	movi	r5,2047
 2001ed0:	11403b26 	beq	r2,r5,2001fc0 <__adddf3+0x780>
 2001ed4:	0109c83a 	sub	r4,zero,r4
 2001ed8:	42002034 	orhi	r8,r8,128
 2001edc:	01400e04 	movi	r5,56
 2001ee0:	29006716 	blt	r5,r4,2002080 <__adddf3+0x840>
 2001ee4:	014007c4 	movi	r5,31
 2001ee8:	29007016 	blt	r5,r4,20020ac <__adddf3+0x86c>
 2001eec:	01400804 	movi	r5,32
 2001ef0:	290bc83a 	sub	r5,r5,r4
 2001ef4:	4154983a 	sll	r10,r8,r5
 2001ef8:	890ed83a 	srl	r7,r17,r4
 2001efc:	894a983a 	sll	r5,r17,r5
 2001f00:	4108d83a 	srl	r4,r8,r4
 2001f04:	51e2b03a 	or	r17,r10,r7
 2001f08:	280ac03a 	cmpne	r5,r5,zero
 2001f0c:	8962b03a 	or	r17,r17,r5
 2001f10:	89a3883a 	add	r17,r17,r6
 2001f14:	2253883a 	add	r9,r4,r9
 2001f18:	898d803a 	cmpltu	r6,r17,r6
 2001f1c:	3251883a 	add	r8,r6,r9
 2001f20:	1021883a 	mov	r16,r2
 2001f24:	003ee506 	br	2001abc <__alt_mem_flash+0xfdff0abc>
 2001f28:	4984b03a 	or	r2,r9,r6
 2001f2c:	103e6326 	beq	r2,zero,20018bc <__alt_mem_flash+0xfdff08bc>
 2001f30:	8987c83a 	sub	r3,r17,r6
 2001f34:	88c9803a 	cmpltu	r4,r17,r3
 2001f38:	4245c83a 	sub	r2,r8,r9
 2001f3c:	1105c83a 	sub	r2,r2,r4
 2001f40:	1100202c 	andhi	r4,r2,128
 2001f44:	203ebb26 	beq	r4,zero,2001a34 <__alt_mem_flash+0xfdff0a34>
 2001f48:	3463c83a 	sub	r17,r6,r17
 2001f4c:	4a07c83a 	sub	r3,r9,r8
 2001f50:	344d803a 	cmpltu	r6,r6,r17
 2001f54:	1991c83a 	sub	r8,r3,r6
 2001f58:	3825883a 	mov	r18,r7
 2001f5c:	003e5706 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001f60:	4984b03a 	or	r2,r9,r6
 2001f64:	10002e26 	beq	r2,zero,2002020 <__adddf3+0x7e0>
 2001f68:	4004d0fa 	srli	r2,r8,3
 2001f6c:	8822d0fa 	srli	r17,r17,3
 2001f70:	4010977a 	slli	r8,r8,29
 2001f74:	10c0022c 	andhi	r3,r2,8
 2001f78:	4462b03a 	or	r17,r8,r17
 2001f7c:	18000826 	beq	r3,zero,2001fa0 <__adddf3+0x760>
 2001f80:	4808d0fa 	srli	r4,r9,3
 2001f84:	20c0022c 	andhi	r3,r4,8
 2001f88:	1800051e 	bne	r3,zero,2001fa0 <__adddf3+0x760>
 2001f8c:	300cd0fa 	srli	r6,r6,3
 2001f90:	4806977a 	slli	r3,r9,29
 2001f94:	2005883a 	mov	r2,r4
 2001f98:	3825883a 	mov	r18,r7
 2001f9c:	19a2b03a 	or	r17,r3,r6
 2001fa0:	8810d77a 	srli	r8,r17,29
 2001fa4:	100490fa 	slli	r2,r2,3
 2001fa8:	882290fa 	slli	r17,r17,3
 2001fac:	0401ffc4 	movi	r16,2047
 2001fb0:	4090b03a 	or	r8,r8,r2
 2001fb4:	003e4106 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001fb8:	0141ffc4 	movi	r5,2047
 2001fbc:	117fc71e 	bne	r2,r5,2001edc <__alt_mem_flash+0xfdff0edc>
 2001fc0:	4811883a 	mov	r8,r9
 2001fc4:	3023883a 	mov	r17,r6
 2001fc8:	1021883a 	mov	r16,r2
 2001fcc:	003e3b06 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2001fd0:	10002f26 	beq	r2,zero,2002090 <__adddf3+0x850>
 2001fd4:	4984b03a 	or	r2,r9,r6
 2001fd8:	10001126 	beq	r2,zero,2002020 <__adddf3+0x7e0>
 2001fdc:	4004d0fa 	srli	r2,r8,3
 2001fe0:	8822d0fa 	srli	r17,r17,3
 2001fe4:	4010977a 	slli	r8,r8,29
 2001fe8:	10c0022c 	andhi	r3,r2,8
 2001fec:	4462b03a 	or	r17,r8,r17
 2001ff0:	183feb26 	beq	r3,zero,2001fa0 <__alt_mem_flash+0xfdff0fa0>
 2001ff4:	4808d0fa 	srli	r4,r9,3
 2001ff8:	20c0022c 	andhi	r3,r4,8
 2001ffc:	183fe81e 	bne	r3,zero,2001fa0 <__alt_mem_flash+0xfdff0fa0>
 2002000:	300cd0fa 	srli	r6,r6,3
 2002004:	4806977a 	slli	r3,r9,29
 2002008:	2005883a 	mov	r2,r4
 200200c:	19a2b03a 	or	r17,r3,r6
 2002010:	003fe306 	br	2001fa0 <__alt_mem_flash+0xfdff0fa0>
 2002014:	0011883a 	mov	r8,zero
 2002018:	0005883a 	mov	r2,zero
 200201c:	003e3f06 	br	200191c <__alt_mem_flash+0xfdff091c>
 2002020:	0401ffc4 	movi	r16,2047
 2002024:	003e2506 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 2002028:	0013883a 	mov	r9,zero
 200202c:	003f8406 	br	2001e40 <__alt_mem_flash+0xfdff0e40>
 2002030:	0005883a 	mov	r2,zero
 2002034:	0007883a 	mov	r3,zero
 2002038:	003e8906 	br	2001a60 <__alt_mem_flash+0xfdff0a60>
 200203c:	197ff804 	addi	r5,r3,-32
 2002040:	01000804 	movi	r4,32
 2002044:	414ad83a 	srl	r5,r8,r5
 2002048:	19002426 	beq	r3,r4,20020dc <__adddf3+0x89c>
 200204c:	01001004 	movi	r4,64
 2002050:	20c7c83a 	sub	r3,r4,r3
 2002054:	40c6983a 	sll	r3,r8,r3
 2002058:	1c46b03a 	or	r3,r3,r17
 200205c:	1806c03a 	cmpne	r3,r3,zero
 2002060:	28e2b03a 	or	r17,r5,r3
 2002064:	0007883a 	mov	r3,zero
 2002068:	003f2306 	br	2001cf8 <__alt_mem_flash+0xfdff0cf8>
 200206c:	0007883a 	mov	r3,zero
 2002070:	5811883a 	mov	r8,r11
 2002074:	00bfffc4 	movi	r2,-1
 2002078:	0401ffc4 	movi	r16,2047
 200207c:	003e7806 	br	2001a60 <__alt_mem_flash+0xfdff0a60>
 2002080:	4462b03a 	or	r17,r8,r17
 2002084:	8822c03a 	cmpne	r17,r17,zero
 2002088:	0009883a 	mov	r4,zero
 200208c:	003fa006 	br	2001f10 <__alt_mem_flash+0xfdff0f10>
 2002090:	4811883a 	mov	r8,r9
 2002094:	3023883a 	mov	r17,r6
 2002098:	0401ffc4 	movi	r16,2047
 200209c:	003e0706 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 20020a0:	4811883a 	mov	r8,r9
 20020a4:	3023883a 	mov	r17,r6
 20020a8:	003e0406 	br	20018bc <__alt_mem_flash+0xfdff08bc>
 20020ac:	21fff804 	addi	r7,r4,-32
 20020b0:	01400804 	movi	r5,32
 20020b4:	41ced83a 	srl	r7,r8,r7
 20020b8:	21400a26 	beq	r4,r5,20020e4 <__adddf3+0x8a4>
 20020bc:	01401004 	movi	r5,64
 20020c0:	2909c83a 	sub	r4,r5,r4
 20020c4:	4108983a 	sll	r4,r8,r4
 20020c8:	2448b03a 	or	r4,r4,r17
 20020cc:	2008c03a 	cmpne	r4,r4,zero
 20020d0:	3922b03a 	or	r17,r7,r4
 20020d4:	0009883a 	mov	r4,zero
 20020d8:	003f8d06 	br	2001f10 <__alt_mem_flash+0xfdff0f10>
 20020dc:	0007883a 	mov	r3,zero
 20020e0:	003fdd06 	br	2002058 <__alt_mem_flash+0xfdff1058>
 20020e4:	0009883a 	mov	r4,zero
 20020e8:	003ff706 	br	20020c8 <__alt_mem_flash+0xfdff10c8>

020020ec <__divdf3>:
 20020ec:	defff004 	addi	sp,sp,-64
 20020f0:	dc800815 	stw	r18,32(sp)
 20020f4:	2824d53a 	srli	r18,r5,20
 20020f8:	dd800c15 	stw	r22,48(sp)
 20020fc:	282cd7fa 	srli	r22,r5,31
 2002100:	dc000615 	stw	r16,24(sp)
 2002104:	04000434 	movhi	r16,16
 2002108:	843fffc4 	addi	r16,r16,-1
 200210c:	dfc00f15 	stw	ra,60(sp)
 2002110:	df000e15 	stw	fp,56(sp)
 2002114:	ddc00d15 	stw	r23,52(sp)
 2002118:	dd400b15 	stw	r21,44(sp)
 200211c:	dd000a15 	stw	r20,40(sp)
 2002120:	dcc00915 	stw	r19,36(sp)
 2002124:	dc400715 	stw	r17,28(sp)
 2002128:	9481ffcc 	andi	r18,r18,2047
 200212c:	2c20703a 	and	r16,r5,r16
 2002130:	b2003fcc 	andi	r8,r22,255
 2002134:	90006126 	beq	r18,zero,20022bc <__divdf3+0x1d0>
 2002138:	0081ffc4 	movi	r2,2047
 200213c:	202b883a 	mov	r21,r4
 2002140:	90803726 	beq	r18,r2,2002220 <__divdf3+0x134>
 2002144:	80800434 	orhi	r2,r16,16
 2002148:	100490fa 	slli	r2,r2,3
 200214c:	2020d77a 	srli	r16,r4,29
 2002150:	202a90fa 	slli	r21,r4,3
 2002154:	94bf0044 	addi	r18,r18,-1023
 2002158:	80a0b03a 	or	r16,r16,r2
 200215c:	0013883a 	mov	r9,zero
 2002160:	000b883a 	mov	r5,zero
 2002164:	3806d53a 	srli	r3,r7,20
 2002168:	382ed7fa 	srli	r23,r7,31
 200216c:	04400434 	movhi	r17,16
 2002170:	8c7fffc4 	addi	r17,r17,-1
 2002174:	18c1ffcc 	andi	r3,r3,2047
 2002178:	3029883a 	mov	r20,r6
 200217c:	3c62703a 	and	r17,r7,r17
 2002180:	bf003fcc 	andi	fp,r23,255
 2002184:	18006e26 	beq	r3,zero,2002340 <__divdf3+0x254>
 2002188:	0081ffc4 	movi	r2,2047
 200218c:	18806626 	beq	r3,r2,2002328 <__divdf3+0x23c>
 2002190:	88800434 	orhi	r2,r17,16
 2002194:	100490fa 	slli	r2,r2,3
 2002198:	3022d77a 	srli	r17,r6,29
 200219c:	302890fa 	slli	r20,r6,3
 20021a0:	18ff0044 	addi	r3,r3,-1023
 20021a4:	88a2b03a 	or	r17,r17,r2
 20021a8:	000f883a 	mov	r7,zero
 20021ac:	b5e6f03a 	xor	r19,r22,r23
 20021b0:	3a4cb03a 	or	r6,r7,r9
 20021b4:	008003c4 	movi	r2,15
 20021b8:	9809883a 	mov	r4,r19
 20021bc:	90c7c83a 	sub	r3,r18,r3
 20021c0:	9cc03fcc 	andi	r19,r19,255
 20021c4:	11809636 	bltu	r2,r6,2002420 <__divdf3+0x334>
 20021c8:	300c90ba 	slli	r6,r6,2
 20021cc:	00808034 	movhi	r2,512
 20021d0:	10887804 	addi	r2,r2,8672
 20021d4:	308d883a 	add	r6,r6,r2
 20021d8:	30800017 	ldw	r2,0(r6)
 20021dc:	1000683a 	jmp	r2
 20021e0:	02002420 	cmpeqi	r8,zero,144
 20021e4:	02002258 	cmpnei	r8,zero,137
 20021e8:	02002410 	cmplti	r8,zero,144
 20021ec:	0200224c 	andi	r8,zero,137
 20021f0:	02002410 	cmplti	r8,zero,144
 20021f4:	020023e4 	muli	r8,zero,143
 20021f8:	02002410 	cmplti	r8,zero,144
 20021fc:	0200224c 	andi	r8,zero,137
 2002200:	02002258 	cmpnei	r8,zero,137
 2002204:	02002258 	cmpnei	r8,zero,137
 2002208:	020023e4 	muli	r8,zero,143
 200220c:	0200224c 	andi	r8,zero,137
 2002210:	0200223c 	xorhi	r8,zero,136
 2002214:	0200223c 	xorhi	r8,zero,136
 2002218:	0200223c 	xorhi	r8,zero,136
 200221c:	020027a8 	cmpgeui	r8,zero,158
 2002220:	2404b03a 	or	r2,r4,r16
 2002224:	10006c1e 	bne	r2,zero,20023d8 <__divdf3+0x2ec>
 2002228:	02400204 	movi	r9,8
 200222c:	0021883a 	mov	r16,zero
 2002230:	002b883a 	mov	r21,zero
 2002234:	01400084 	movi	r5,2
 2002238:	003fca06 	br	2002164 <__alt_mem_flash+0xfdff1164>
 200223c:	8023883a 	mov	r17,r16
 2002240:	a829883a 	mov	r20,r21
 2002244:	4039883a 	mov	fp,r8
 2002248:	280f883a 	mov	r7,r5
 200224c:	00800084 	movi	r2,2
 2002250:	3881601e 	bne	r7,r2,20027d4 <__divdf3+0x6e8>
 2002254:	e027883a 	mov	r19,fp
 2002258:	9900004c 	andi	r4,r19,1
 200225c:	0081ffc4 	movi	r2,2047
 2002260:	0021883a 	mov	r16,zero
 2002264:	002b883a 	mov	r21,zero
 2002268:	1004953a 	slli	r2,r2,20
 200226c:	20c03fcc 	andi	r3,r4,255
 2002270:	01400434 	movhi	r5,16
 2002274:	297fffc4 	addi	r5,r5,-1
 2002278:	180697fa 	slli	r3,r3,31
 200227c:	8160703a 	and	r16,r16,r5
 2002280:	80a0b03a 	or	r16,r16,r2
 2002284:	80c6b03a 	or	r3,r16,r3
 2002288:	a805883a 	mov	r2,r21
 200228c:	dfc00f17 	ldw	ra,60(sp)
 2002290:	df000e17 	ldw	fp,56(sp)
 2002294:	ddc00d17 	ldw	r23,52(sp)
 2002298:	dd800c17 	ldw	r22,48(sp)
 200229c:	dd400b17 	ldw	r21,44(sp)
 20022a0:	dd000a17 	ldw	r20,40(sp)
 20022a4:	dcc00917 	ldw	r19,36(sp)
 20022a8:	dc800817 	ldw	r18,32(sp)
 20022ac:	dc400717 	ldw	r17,28(sp)
 20022b0:	dc000617 	ldw	r16,24(sp)
 20022b4:	dec01004 	addi	sp,sp,64
 20022b8:	f800283a 	ret
 20022bc:	2404b03a 	or	r2,r4,r16
 20022c0:	2023883a 	mov	r17,r4
 20022c4:	10003f26 	beq	r2,zero,20023c4 <__divdf3+0x2d8>
 20022c8:	80015e26 	beq	r16,zero,2002844 <__divdf3+0x758>
 20022cc:	8009883a 	mov	r4,r16
 20022d0:	d9800215 	stw	r6,8(sp)
 20022d4:	d9c00515 	stw	r7,20(sp)
 20022d8:	da000415 	stw	r8,16(sp)
 20022dc:	200411c0 	call	200411c <__clzsi2>
 20022e0:	d9800217 	ldw	r6,8(sp)
 20022e4:	d9c00517 	ldw	r7,20(sp)
 20022e8:	da000417 	ldw	r8,16(sp)
 20022ec:	113ffd44 	addi	r4,r2,-11
 20022f0:	00c00704 	movi	r3,28
 20022f4:	19014f16 	blt	r3,r4,2002834 <__divdf3+0x748>
 20022f8:	00c00744 	movi	r3,29
 20022fc:	157ffe04 	addi	r21,r2,-8
 2002300:	1907c83a 	sub	r3,r3,r4
 2002304:	8560983a 	sll	r16,r16,r21
 2002308:	88c6d83a 	srl	r3,r17,r3
 200230c:	8d6a983a 	sll	r21,r17,r21
 2002310:	1c20b03a 	or	r16,r3,r16
 2002314:	1080fcc4 	addi	r2,r2,1011
 2002318:	00a5c83a 	sub	r18,zero,r2
 200231c:	0013883a 	mov	r9,zero
 2002320:	000b883a 	mov	r5,zero
 2002324:	003f8f06 	br	2002164 <__alt_mem_flash+0xfdff1164>
 2002328:	3444b03a 	or	r2,r6,r17
 200232c:	1000231e 	bne	r2,zero,20023bc <__divdf3+0x2d0>
 2002330:	0023883a 	mov	r17,zero
 2002334:	0029883a 	mov	r20,zero
 2002338:	01c00084 	movi	r7,2
 200233c:	003f9b06 	br	20021ac <__alt_mem_flash+0xfdff11ac>
 2002340:	3444b03a 	or	r2,r6,r17
 2002344:	10001926 	beq	r2,zero,20023ac <__divdf3+0x2c0>
 2002348:	88014b26 	beq	r17,zero,2002878 <__divdf3+0x78c>
 200234c:	8809883a 	mov	r4,r17
 2002350:	d9400115 	stw	r5,4(sp)
 2002354:	d9800215 	stw	r6,8(sp)
 2002358:	da000415 	stw	r8,16(sp)
 200235c:	da400315 	stw	r9,12(sp)
 2002360:	200411c0 	call	200411c <__clzsi2>
 2002364:	d9400117 	ldw	r5,4(sp)
 2002368:	d9800217 	ldw	r6,8(sp)
 200236c:	da000417 	ldw	r8,16(sp)
 2002370:	da400317 	ldw	r9,12(sp)
 2002374:	113ffd44 	addi	r4,r2,-11
 2002378:	00c00704 	movi	r3,28
 200237c:	19013a16 	blt	r3,r4,2002868 <__divdf3+0x77c>
 2002380:	00c00744 	movi	r3,29
 2002384:	153ffe04 	addi	r20,r2,-8
 2002388:	1907c83a 	sub	r3,r3,r4
 200238c:	8d22983a 	sll	r17,r17,r20
 2002390:	30c6d83a 	srl	r3,r6,r3
 2002394:	3528983a 	sll	r20,r6,r20
 2002398:	1c62b03a 	or	r17,r3,r17
 200239c:	1080fcc4 	addi	r2,r2,1011
 20023a0:	0087c83a 	sub	r3,zero,r2
 20023a4:	000f883a 	mov	r7,zero
 20023a8:	003f8006 	br	20021ac <__alt_mem_flash+0xfdff11ac>
 20023ac:	0023883a 	mov	r17,zero
 20023b0:	0029883a 	mov	r20,zero
 20023b4:	01c00044 	movi	r7,1
 20023b8:	003f7c06 	br	20021ac <__alt_mem_flash+0xfdff11ac>
 20023bc:	01c000c4 	movi	r7,3
 20023c0:	003f7a06 	br	20021ac <__alt_mem_flash+0xfdff11ac>
 20023c4:	02400104 	movi	r9,4
 20023c8:	0021883a 	mov	r16,zero
 20023cc:	002b883a 	mov	r21,zero
 20023d0:	01400044 	movi	r5,1
 20023d4:	003f6306 	br	2002164 <__alt_mem_flash+0xfdff1164>
 20023d8:	02400304 	movi	r9,12
 20023dc:	014000c4 	movi	r5,3
 20023e0:	003f6006 	br	2002164 <__alt_mem_flash+0xfdff1164>
 20023e4:	04000434 	movhi	r16,16
 20023e8:	0009883a 	mov	r4,zero
 20023ec:	843fffc4 	addi	r16,r16,-1
 20023f0:	057fffc4 	movi	r21,-1
 20023f4:	0081ffc4 	movi	r2,2047
 20023f8:	003f9b06 	br	2002268 <__alt_mem_flash+0xfdff1268>
 20023fc:	00c00044 	movi	r3,1
 2002400:	1887c83a 	sub	r3,r3,r2
 2002404:	01000e04 	movi	r4,56
 2002408:	20c1530e 	bge	r4,r3,2002958 <__divdf3+0x86c>
 200240c:	9900004c 	andi	r4,r19,1
 2002410:	0005883a 	mov	r2,zero
 2002414:	0021883a 	mov	r16,zero
 2002418:	002b883a 	mov	r21,zero
 200241c:	003f9206 	br	2002268 <__alt_mem_flash+0xfdff1268>
 2002420:	8c012e36 	bltu	r17,r16,20028dc <__divdf3+0x7f0>
 2002424:	84412c26 	beq	r16,r17,20028d8 <__divdf3+0x7ec>
 2002428:	a82f883a 	mov	r23,r21
 200242c:	18ffffc4 	addi	r3,r3,-1
 2002430:	002b883a 	mov	r21,zero
 2002434:	a004d63a 	srli	r2,r20,24
 2002438:	8822923a 	slli	r17,r17,8
 200243c:	a028923a 	slli	r20,r20,8
 2002440:	8009883a 	mov	r4,r16
 2002444:	88acb03a 	or	r22,r17,r2
 2002448:	dd000015 	stw	r20,0(sp)
 200244c:	b028d43a 	srli	r20,r22,16
 2002450:	d8c00215 	stw	r3,8(sp)
 2002454:	b4bfffcc 	andi	r18,r22,65535
 2002458:	a00b883a 	mov	r5,r20
 200245c:	20042780 	call	2004278 <__udivsi3>
 2002460:	100b883a 	mov	r5,r2
 2002464:	9009883a 	mov	r4,r18
 2002468:	1023883a 	mov	r17,r2
 200246c:	20013d80 	call	20013d8 <__mulsi3>
 2002470:	8009883a 	mov	r4,r16
 2002474:	a00b883a 	mov	r5,r20
 2002478:	1039883a 	mov	fp,r2
 200247c:	20042dc0 	call	20042dc <__umodsi3>
 2002480:	1004943a 	slli	r2,r2,16
 2002484:	b808d43a 	srli	r4,r23,16
 2002488:	d8c00217 	ldw	r3,8(sp)
 200248c:	2084b03a 	or	r2,r4,r2
 2002490:	1700062e 	bgeu	r2,fp,20024ac <__divdf3+0x3c0>
 2002494:	1585883a 	add	r2,r2,r22
 2002498:	893fffc4 	addi	r4,r17,-1
 200249c:	15811d36 	bltu	r2,r22,2002914 <__divdf3+0x828>
 20024a0:	17011c2e 	bgeu	r2,fp,2002914 <__divdf3+0x828>
 20024a4:	8c7fff84 	addi	r17,r17,-2
 20024a8:	1585883a 	add	r2,r2,r22
 20024ac:	1739c83a 	sub	fp,r2,fp
 20024b0:	a00b883a 	mov	r5,r20
 20024b4:	e009883a 	mov	r4,fp
 20024b8:	d8c00215 	stw	r3,8(sp)
 20024bc:	20042780 	call	2004278 <__udivsi3>
 20024c0:	100b883a 	mov	r5,r2
 20024c4:	9009883a 	mov	r4,r18
 20024c8:	1021883a 	mov	r16,r2
 20024cc:	20013d80 	call	20013d8 <__mulsi3>
 20024d0:	a00b883a 	mov	r5,r20
 20024d4:	e009883a 	mov	r4,fp
 20024d8:	d8800415 	stw	r2,16(sp)
 20024dc:	20042dc0 	call	20042dc <__umodsi3>
 20024e0:	1004943a 	slli	r2,r2,16
 20024e4:	da000417 	ldw	r8,16(sp)
 20024e8:	bdffffcc 	andi	r23,r23,65535
 20024ec:	b884b03a 	or	r2,r23,r2
 20024f0:	d8c00217 	ldw	r3,8(sp)
 20024f4:	1200062e 	bgeu	r2,r8,2002510 <__divdf3+0x424>
 20024f8:	1585883a 	add	r2,r2,r22
 20024fc:	813fffc4 	addi	r4,r16,-1
 2002500:	15810236 	bltu	r2,r22,200290c <__divdf3+0x820>
 2002504:	1201012e 	bgeu	r2,r8,200290c <__divdf3+0x820>
 2002508:	843fff84 	addi	r16,r16,-2
 200250c:	1585883a 	add	r2,r2,r22
 2002510:	8822943a 	slli	r17,r17,16
 2002514:	d9800017 	ldw	r6,0(sp)
 2002518:	1211c83a 	sub	r8,r2,r8
 200251c:	8c22b03a 	or	r17,r17,r16
 2002520:	373fffcc 	andi	fp,r6,65535
 2002524:	8abfffcc 	andi	r10,r17,65535
 2002528:	8820d43a 	srli	r16,r17,16
 200252c:	5009883a 	mov	r4,r10
 2002530:	e00b883a 	mov	r5,fp
 2002534:	302ed43a 	srli	r23,r6,16
 2002538:	d8c00215 	stw	r3,8(sp)
 200253c:	da000415 	stw	r8,16(sp)
 2002540:	da800115 	stw	r10,4(sp)
 2002544:	20013d80 	call	20013d8 <__mulsi3>
 2002548:	800b883a 	mov	r5,r16
 200254c:	e009883a 	mov	r4,fp
 2002550:	d8800515 	stw	r2,20(sp)
 2002554:	20013d80 	call	20013d8 <__mulsi3>
 2002558:	8009883a 	mov	r4,r16
 200255c:	b80b883a 	mov	r5,r23
 2002560:	d8800315 	stw	r2,12(sp)
 2002564:	20013d80 	call	20013d8 <__mulsi3>
 2002568:	da800117 	ldw	r10,4(sp)
 200256c:	b80b883a 	mov	r5,r23
 2002570:	1021883a 	mov	r16,r2
 2002574:	5009883a 	mov	r4,r10
 2002578:	20013d80 	call	20013d8 <__mulsi3>
 200257c:	d9c00517 	ldw	r7,20(sp)
 2002580:	da400317 	ldw	r9,12(sp)
 2002584:	d8c00217 	ldw	r3,8(sp)
 2002588:	3808d43a 	srli	r4,r7,16
 200258c:	1245883a 	add	r2,r2,r9
 2002590:	da000417 	ldw	r8,16(sp)
 2002594:	2085883a 	add	r2,r4,r2
 2002598:	1240022e 	bgeu	r2,r9,20025a4 <__divdf3+0x4b8>
 200259c:	01000074 	movhi	r4,1
 20025a0:	8121883a 	add	r16,r16,r4
 20025a4:	1008d43a 	srli	r4,r2,16
 20025a8:	1004943a 	slli	r2,r2,16
 20025ac:	39ffffcc 	andi	r7,r7,65535
 20025b0:	2409883a 	add	r4,r4,r16
 20025b4:	11c5883a 	add	r2,r2,r7
 20025b8:	4100bb36 	bltu	r8,r4,20028a8 <__divdf3+0x7bc>
 20025bc:	4100d726 	beq	r8,r4,200291c <__divdf3+0x830>
 20025c0:	4109c83a 	sub	r4,r8,r4
 20025c4:	a8a1c83a 	sub	r16,r21,r2
 20025c8:	ac2b803a 	cmpltu	r21,r21,r16
 20025cc:	256bc83a 	sub	r21,r4,r21
 20025d0:	b540d926 	beq	r22,r21,2002938 <__divdf3+0x84c>
 20025d4:	a00b883a 	mov	r5,r20
 20025d8:	a809883a 	mov	r4,r21
 20025dc:	d8c00215 	stw	r3,8(sp)
 20025e0:	20042780 	call	2004278 <__udivsi3>
 20025e4:	100b883a 	mov	r5,r2
 20025e8:	9009883a 	mov	r4,r18
 20025ec:	d8800515 	stw	r2,20(sp)
 20025f0:	20013d80 	call	20013d8 <__mulsi3>
 20025f4:	a809883a 	mov	r4,r21
 20025f8:	a00b883a 	mov	r5,r20
 20025fc:	d8800415 	stw	r2,16(sp)
 2002600:	20042dc0 	call	20042dc <__umodsi3>
 2002604:	1004943a 	slli	r2,r2,16
 2002608:	8008d43a 	srli	r4,r16,16
 200260c:	da000417 	ldw	r8,16(sp)
 2002610:	d8c00217 	ldw	r3,8(sp)
 2002614:	2084b03a 	or	r2,r4,r2
 2002618:	d9c00517 	ldw	r7,20(sp)
 200261c:	1200062e 	bgeu	r2,r8,2002638 <__divdf3+0x54c>
 2002620:	1585883a 	add	r2,r2,r22
 2002624:	393fffc4 	addi	r4,r7,-1
 2002628:	1580c536 	bltu	r2,r22,2002940 <__divdf3+0x854>
 200262c:	1200c42e 	bgeu	r2,r8,2002940 <__divdf3+0x854>
 2002630:	39ffff84 	addi	r7,r7,-2
 2002634:	1585883a 	add	r2,r2,r22
 2002638:	122bc83a 	sub	r21,r2,r8
 200263c:	a00b883a 	mov	r5,r20
 2002640:	a809883a 	mov	r4,r21
 2002644:	d8c00215 	stw	r3,8(sp)
 2002648:	d9c00515 	stw	r7,20(sp)
 200264c:	20042780 	call	2004278 <__udivsi3>
 2002650:	9009883a 	mov	r4,r18
 2002654:	100b883a 	mov	r5,r2
 2002658:	d8800415 	stw	r2,16(sp)
 200265c:	20013d80 	call	20013d8 <__mulsi3>
 2002660:	a809883a 	mov	r4,r21
 2002664:	a00b883a 	mov	r5,r20
 2002668:	1025883a 	mov	r18,r2
 200266c:	20042dc0 	call	20042dc <__umodsi3>
 2002670:	1004943a 	slli	r2,r2,16
 2002674:	813fffcc 	andi	r4,r16,65535
 2002678:	d8c00217 	ldw	r3,8(sp)
 200267c:	20a0b03a 	or	r16,r4,r2
 2002680:	d9c00517 	ldw	r7,20(sp)
 2002684:	da000417 	ldw	r8,16(sp)
 2002688:	8480062e 	bgeu	r16,r18,20026a4 <__divdf3+0x5b8>
 200268c:	85a1883a 	add	r16,r16,r22
 2002690:	40bfffc4 	addi	r2,r8,-1
 2002694:	8580ac36 	bltu	r16,r22,2002948 <__divdf3+0x85c>
 2002698:	8480ab2e 	bgeu	r16,r18,2002948 <__divdf3+0x85c>
 200269c:	423fff84 	addi	r8,r8,-2
 20026a0:	85a1883a 	add	r16,r16,r22
 20026a4:	3804943a 	slli	r2,r7,16
 20026a8:	84a1c83a 	sub	r16,r16,r18
 20026ac:	e009883a 	mov	r4,fp
 20026b0:	1228b03a 	or	r20,r2,r8
 20026b4:	a1ffffcc 	andi	r7,r20,65535
 20026b8:	a024d43a 	srli	r18,r20,16
 20026bc:	380b883a 	mov	r5,r7
 20026c0:	d8c00215 	stw	r3,8(sp)
 20026c4:	d9c00515 	stw	r7,20(sp)
 20026c8:	20013d80 	call	20013d8 <__mulsi3>
 20026cc:	900b883a 	mov	r5,r18
 20026d0:	e009883a 	mov	r4,fp
 20026d4:	102b883a 	mov	r21,r2
 20026d8:	20013d80 	call	20013d8 <__mulsi3>
 20026dc:	900b883a 	mov	r5,r18
 20026e0:	b809883a 	mov	r4,r23
 20026e4:	1039883a 	mov	fp,r2
 20026e8:	20013d80 	call	20013d8 <__mulsi3>
 20026ec:	d9c00517 	ldw	r7,20(sp)
 20026f0:	b80b883a 	mov	r5,r23
 20026f4:	1025883a 	mov	r18,r2
 20026f8:	3809883a 	mov	r4,r7
 20026fc:	20013d80 	call	20013d8 <__mulsi3>
 2002700:	a808d43a 	srli	r4,r21,16
 2002704:	1705883a 	add	r2,r2,fp
 2002708:	d8c00217 	ldw	r3,8(sp)
 200270c:	2085883a 	add	r2,r4,r2
 2002710:	1700022e 	bgeu	r2,fp,200271c <__divdf3+0x630>
 2002714:	01000074 	movhi	r4,1
 2002718:	9125883a 	add	r18,r18,r4
 200271c:	1008d43a 	srli	r4,r2,16
 2002720:	1004943a 	slli	r2,r2,16
 2002724:	ad7fffcc 	andi	r21,r21,65535
 2002728:	2489883a 	add	r4,r4,r18
 200272c:	1545883a 	add	r2,r2,r21
 2002730:	81003836 	bltu	r16,r4,2002814 <__divdf3+0x728>
 2002734:	81003626 	beq	r16,r4,2002810 <__divdf3+0x724>
 2002738:	a5000054 	ori	r20,r20,1
 200273c:	1880ffc4 	addi	r2,r3,1023
 2002740:	00bf2e0e 	bge	zero,r2,20023fc <__alt_mem_flash+0xfdff13fc>
 2002744:	a10001cc 	andi	r4,r20,7
 2002748:	20000726 	beq	r4,zero,2002768 <__divdf3+0x67c>
 200274c:	a10003cc 	andi	r4,r20,15
 2002750:	01400104 	movi	r5,4
 2002754:	21400426 	beq	r4,r5,2002768 <__divdf3+0x67c>
 2002758:	a149883a 	add	r4,r20,r5
 200275c:	2529803a 	cmpltu	r20,r4,r20
 2002760:	8d23883a 	add	r17,r17,r20
 2002764:	2029883a 	mov	r20,r4
 2002768:	8900402c 	andhi	r4,r17,256
 200276c:	20000426 	beq	r4,zero,2002780 <__divdf3+0x694>
 2002770:	18810004 	addi	r2,r3,1024
 2002774:	00ffc034 	movhi	r3,65280
 2002778:	18ffffc4 	addi	r3,r3,-1
 200277c:	88e2703a 	and	r17,r17,r3
 2002780:	00c1ff84 	movi	r3,2046
 2002784:	18beb416 	blt	r3,r2,2002258 <__alt_mem_flash+0xfdff1258>
 2002788:	a028d0fa 	srli	r20,r20,3
 200278c:	882a977a 	slli	r21,r17,29
 2002790:	8820927a 	slli	r16,r17,9
 2002794:	1081ffcc 	andi	r2,r2,2047
 2002798:	ad2ab03a 	or	r21,r21,r20
 200279c:	8020d33a 	srli	r16,r16,12
 20027a0:	9900004c 	andi	r4,r19,1
 20027a4:	003eb006 	br	2002268 <__alt_mem_flash+0xfdff1268>
 20027a8:	8080022c 	andhi	r2,r16,8
 20027ac:	10001226 	beq	r2,zero,20027f8 <__divdf3+0x70c>
 20027b0:	8880022c 	andhi	r2,r17,8
 20027b4:	1000101e 	bne	r2,zero,20027f8 <__divdf3+0x70c>
 20027b8:	00800434 	movhi	r2,16
 20027bc:	8c000234 	orhi	r16,r17,8
 20027c0:	10bfffc4 	addi	r2,r2,-1
 20027c4:	b809883a 	mov	r4,r23
 20027c8:	80a0703a 	and	r16,r16,r2
 20027cc:	a02b883a 	mov	r21,r20
 20027d0:	003f0806 	br	20023f4 <__alt_mem_flash+0xfdff13f4>
 20027d4:	008000c4 	movi	r2,3
 20027d8:	3880b126 	beq	r7,r2,2002aa0 <__divdf3+0x9b4>
 20027dc:	00800044 	movi	r2,1
 20027e0:	38805b1e 	bne	r7,r2,2002950 <__divdf3+0x864>
 20027e4:	e009883a 	mov	r4,fp
 20027e8:	0005883a 	mov	r2,zero
 20027ec:	0021883a 	mov	r16,zero
 20027f0:	002b883a 	mov	r21,zero
 20027f4:	003e9c06 	br	2002268 <__alt_mem_flash+0xfdff1268>
 20027f8:	00800434 	movhi	r2,16
 20027fc:	84000234 	orhi	r16,r16,8
 2002800:	10bfffc4 	addi	r2,r2,-1
 2002804:	b009883a 	mov	r4,r22
 2002808:	80a0703a 	and	r16,r16,r2
 200280c:	003ef906 	br	20023f4 <__alt_mem_flash+0xfdff13f4>
 2002810:	103fca26 	beq	r2,zero,200273c <__alt_mem_flash+0xfdff173c>
 2002814:	b421883a 	add	r16,r22,r16
 2002818:	a17fffc4 	addi	r5,r20,-1
 200281c:	8580422e 	bgeu	r16,r22,2002928 <__divdf3+0x83c>
 2002820:	2829883a 	mov	r20,r5
 2002824:	813fc41e 	bne	r16,r4,2002738 <__alt_mem_flash+0xfdff1738>
 2002828:	d9800017 	ldw	r6,0(sp)
 200282c:	30bfc21e 	bne	r6,r2,2002738 <__alt_mem_flash+0xfdff1738>
 2002830:	003fc206 	br	200273c <__alt_mem_flash+0xfdff173c>
 2002834:	143ff604 	addi	r16,r2,-40
 2002838:	8c20983a 	sll	r16,r17,r16
 200283c:	002b883a 	mov	r21,zero
 2002840:	003eb406 	br	2002314 <__alt_mem_flash+0xfdff1314>
 2002844:	d9800215 	stw	r6,8(sp)
 2002848:	d9c00515 	stw	r7,20(sp)
 200284c:	da000415 	stw	r8,16(sp)
 2002850:	200411c0 	call	200411c <__clzsi2>
 2002854:	10800804 	addi	r2,r2,32
 2002858:	da000417 	ldw	r8,16(sp)
 200285c:	d9c00517 	ldw	r7,20(sp)
 2002860:	d9800217 	ldw	r6,8(sp)
 2002864:	003ea106 	br	20022ec <__alt_mem_flash+0xfdff12ec>
 2002868:	147ff604 	addi	r17,r2,-40
 200286c:	3462983a 	sll	r17,r6,r17
 2002870:	0029883a 	mov	r20,zero
 2002874:	003ec906 	br	200239c <__alt_mem_flash+0xfdff139c>
 2002878:	3009883a 	mov	r4,r6
 200287c:	d9400115 	stw	r5,4(sp)
 2002880:	d9800215 	stw	r6,8(sp)
 2002884:	da000415 	stw	r8,16(sp)
 2002888:	da400315 	stw	r9,12(sp)
 200288c:	200411c0 	call	200411c <__clzsi2>
 2002890:	10800804 	addi	r2,r2,32
 2002894:	da400317 	ldw	r9,12(sp)
 2002898:	da000417 	ldw	r8,16(sp)
 200289c:	d9800217 	ldw	r6,8(sp)
 20028a0:	d9400117 	ldw	r5,4(sp)
 20028a4:	003eb306 	br	2002374 <__alt_mem_flash+0xfdff1374>
 20028a8:	d9800017 	ldw	r6,0(sp)
 20028ac:	a9ab883a 	add	r21,r21,r6
 20028b0:	a98b803a 	cmpltu	r5,r21,r6
 20028b4:	2d8b883a 	add	r5,r5,r22
 20028b8:	2a11883a 	add	r8,r5,r8
 20028bc:	897fffc4 	addi	r5,r17,-1
 20028c0:	b2000c2e 	bgeu	r22,r8,20028f4 <__divdf3+0x808>
 20028c4:	41003f36 	bltu	r8,r4,20029c4 <__divdf3+0x8d8>
 20028c8:	22006c26 	beq	r4,r8,2002a7c <__divdf3+0x990>
 20028cc:	4109c83a 	sub	r4,r8,r4
 20028d0:	2823883a 	mov	r17,r5
 20028d4:	003f3b06 	br	20025c4 <__alt_mem_flash+0xfdff15c4>
 20028d8:	ad3ed336 	bltu	r21,r20,2002428 <__alt_mem_flash+0xfdff1428>
 20028dc:	a804d07a 	srli	r2,r21,1
 20028e0:	802e97fa 	slli	r23,r16,31
 20028e4:	a82a97fa 	slli	r21,r21,31
 20028e8:	8020d07a 	srli	r16,r16,1
 20028ec:	b8aeb03a 	or	r23,r23,r2
 20028f0:	003ed006 	br	2002434 <__alt_mem_flash+0xfdff1434>
 20028f4:	b23ff51e 	bne	r22,r8,20028cc <__alt_mem_flash+0xfdff18cc>
 20028f8:	d9800017 	ldw	r6,0(sp)
 20028fc:	a9bff12e 	bgeu	r21,r6,20028c4 <__alt_mem_flash+0xfdff18c4>
 2002900:	b109c83a 	sub	r4,r22,r4
 2002904:	2823883a 	mov	r17,r5
 2002908:	003f2e06 	br	20025c4 <__alt_mem_flash+0xfdff15c4>
 200290c:	2021883a 	mov	r16,r4
 2002910:	003eff06 	br	2002510 <__alt_mem_flash+0xfdff1510>
 2002914:	2023883a 	mov	r17,r4
 2002918:	003ee406 	br	20024ac <__alt_mem_flash+0xfdff14ac>
 200291c:	a8bfe236 	bltu	r21,r2,20028a8 <__alt_mem_flash+0xfdff18a8>
 2002920:	0009883a 	mov	r4,zero
 2002924:	003f2706 	br	20025c4 <__alt_mem_flash+0xfdff15c4>
 2002928:	81002d36 	bltu	r16,r4,20029e0 <__divdf3+0x8f4>
 200292c:	24005626 	beq	r4,r16,2002a88 <__divdf3+0x99c>
 2002930:	2829883a 	mov	r20,r5
 2002934:	003f8006 	br	2002738 <__alt_mem_flash+0xfdff1738>
 2002938:	053fffc4 	movi	r20,-1
 200293c:	003f7f06 	br	200273c <__alt_mem_flash+0xfdff173c>
 2002940:	200f883a 	mov	r7,r4
 2002944:	003f3c06 	br	2002638 <__alt_mem_flash+0xfdff1638>
 2002948:	1011883a 	mov	r8,r2
 200294c:	003f5506 	br	20026a4 <__alt_mem_flash+0xfdff16a4>
 2002950:	e027883a 	mov	r19,fp
 2002954:	003f7906 	br	200273c <__alt_mem_flash+0xfdff173c>
 2002958:	010007c4 	movi	r4,31
 200295c:	20c02816 	blt	r4,r3,2002a00 <__divdf3+0x914>
 2002960:	00800804 	movi	r2,32
 2002964:	10c5c83a 	sub	r2,r2,r3
 2002968:	888a983a 	sll	r5,r17,r2
 200296c:	a0c8d83a 	srl	r4,r20,r3
 2002970:	a084983a 	sll	r2,r20,r2
 2002974:	88e2d83a 	srl	r17,r17,r3
 2002978:	2906b03a 	or	r3,r5,r4
 200297c:	1004c03a 	cmpne	r2,r2,zero
 2002980:	1886b03a 	or	r3,r3,r2
 2002984:	188001cc 	andi	r2,r3,7
 2002988:	10000726 	beq	r2,zero,20029a8 <__divdf3+0x8bc>
 200298c:	188003cc 	andi	r2,r3,15
 2002990:	01000104 	movi	r4,4
 2002994:	11000426 	beq	r2,r4,20029a8 <__divdf3+0x8bc>
 2002998:	1805883a 	mov	r2,r3
 200299c:	10c00104 	addi	r3,r2,4
 20029a0:	1885803a 	cmpltu	r2,r3,r2
 20029a4:	88a3883a 	add	r17,r17,r2
 20029a8:	8880202c 	andhi	r2,r17,128
 20029ac:	10002926 	beq	r2,zero,2002a54 <__divdf3+0x968>
 20029b0:	9900004c 	andi	r4,r19,1
 20029b4:	00800044 	movi	r2,1
 20029b8:	0021883a 	mov	r16,zero
 20029bc:	002b883a 	mov	r21,zero
 20029c0:	003e2906 	br	2002268 <__alt_mem_flash+0xfdff1268>
 20029c4:	d9800017 	ldw	r6,0(sp)
 20029c8:	8c7fff84 	addi	r17,r17,-2
 20029cc:	a9ab883a 	add	r21,r21,r6
 20029d0:	a98b803a 	cmpltu	r5,r21,r6
 20029d4:	2d8b883a 	add	r5,r5,r22
 20029d8:	2a11883a 	add	r8,r5,r8
 20029dc:	003ef806 	br	20025c0 <__alt_mem_flash+0xfdff15c0>
 20029e0:	d9800017 	ldw	r6,0(sp)
 20029e4:	318f883a 	add	r7,r6,r6
 20029e8:	398b803a 	cmpltu	r5,r7,r6
 20029ec:	2d8d883a 	add	r6,r5,r22
 20029f0:	81a1883a 	add	r16,r16,r6
 20029f4:	a17fff84 	addi	r5,r20,-2
 20029f8:	d9c00015 	stw	r7,0(sp)
 20029fc:	003f8806 	br	2002820 <__alt_mem_flash+0xfdff1820>
 2002a00:	013ff844 	movi	r4,-31
 2002a04:	2085c83a 	sub	r2,r4,r2
 2002a08:	8888d83a 	srl	r4,r17,r2
 2002a0c:	00800804 	movi	r2,32
 2002a10:	18802126 	beq	r3,r2,2002a98 <__divdf3+0x9ac>
 2002a14:	04001004 	movi	r16,64
 2002a18:	80c7c83a 	sub	r3,r16,r3
 2002a1c:	88e0983a 	sll	r16,r17,r3
 2002a20:	8504b03a 	or	r2,r16,r20
 2002a24:	1004c03a 	cmpne	r2,r2,zero
 2002a28:	2084b03a 	or	r2,r4,r2
 2002a2c:	144001cc 	andi	r17,r2,7
 2002a30:	88000d1e 	bne	r17,zero,2002a68 <__divdf3+0x97c>
 2002a34:	0021883a 	mov	r16,zero
 2002a38:	102ad0fa 	srli	r21,r2,3
 2002a3c:	9900004c 	andi	r4,r19,1
 2002a40:	0005883a 	mov	r2,zero
 2002a44:	ac6ab03a 	or	r21,r21,r17
 2002a48:	003e0706 	br	2002268 <__alt_mem_flash+0xfdff1268>
 2002a4c:	1007883a 	mov	r3,r2
 2002a50:	0023883a 	mov	r17,zero
 2002a54:	8820927a 	slli	r16,r17,9
 2002a58:	1805883a 	mov	r2,r3
 2002a5c:	8822977a 	slli	r17,r17,29
 2002a60:	8020d33a 	srli	r16,r16,12
 2002a64:	003ff406 	br	2002a38 <__alt_mem_flash+0xfdff1a38>
 2002a68:	10c003cc 	andi	r3,r2,15
 2002a6c:	01000104 	movi	r4,4
 2002a70:	193ff626 	beq	r3,r4,2002a4c <__alt_mem_flash+0xfdff1a4c>
 2002a74:	0023883a 	mov	r17,zero
 2002a78:	003fc806 	br	200299c <__alt_mem_flash+0xfdff199c>
 2002a7c:	a8bfd136 	bltu	r21,r2,20029c4 <__alt_mem_flash+0xfdff19c4>
 2002a80:	2823883a 	mov	r17,r5
 2002a84:	003fa606 	br	2002920 <__alt_mem_flash+0xfdff1920>
 2002a88:	d9800017 	ldw	r6,0(sp)
 2002a8c:	30bfd436 	bltu	r6,r2,20029e0 <__alt_mem_flash+0xfdff19e0>
 2002a90:	2829883a 	mov	r20,r5
 2002a94:	003f6406 	br	2002828 <__alt_mem_flash+0xfdff1828>
 2002a98:	0021883a 	mov	r16,zero
 2002a9c:	003fe006 	br	2002a20 <__alt_mem_flash+0xfdff1a20>
 2002aa0:	00800434 	movhi	r2,16
 2002aa4:	8c000234 	orhi	r16,r17,8
 2002aa8:	10bfffc4 	addi	r2,r2,-1
 2002aac:	e009883a 	mov	r4,fp
 2002ab0:	80a0703a 	and	r16,r16,r2
 2002ab4:	a02b883a 	mov	r21,r20
 2002ab8:	003e4e06 	br	20023f4 <__alt_mem_flash+0xfdff13f4>

02002abc <__eqdf2>:
 2002abc:	2804d53a 	srli	r2,r5,20
 2002ac0:	3806d53a 	srli	r3,r7,20
 2002ac4:	02000434 	movhi	r8,16
 2002ac8:	423fffc4 	addi	r8,r8,-1
 2002acc:	1081ffcc 	andi	r2,r2,2047
 2002ad0:	0281ffc4 	movi	r10,2047
 2002ad4:	2a12703a 	and	r9,r5,r8
 2002ad8:	18c1ffcc 	andi	r3,r3,2047
 2002adc:	3a10703a 	and	r8,r7,r8
 2002ae0:	280ad7fa 	srli	r5,r5,31
 2002ae4:	380ed7fa 	srli	r7,r7,31
 2002ae8:	12801026 	beq	r2,r10,2002b2c <__eqdf2+0x70>
 2002aec:	0281ffc4 	movi	r10,2047
 2002af0:	1a800a26 	beq	r3,r10,2002b1c <__eqdf2+0x60>
 2002af4:	10c00226 	beq	r2,r3,2002b00 <__eqdf2+0x44>
 2002af8:	00800044 	movi	r2,1
 2002afc:	f800283a 	ret
 2002b00:	4a3ffd1e 	bne	r9,r8,2002af8 <__alt_mem_flash+0xfdff1af8>
 2002b04:	21bffc1e 	bne	r4,r6,2002af8 <__alt_mem_flash+0xfdff1af8>
 2002b08:	29c00c26 	beq	r5,r7,2002b3c <__eqdf2+0x80>
 2002b0c:	103ffa1e 	bne	r2,zero,2002af8 <__alt_mem_flash+0xfdff1af8>
 2002b10:	2244b03a 	or	r2,r4,r9
 2002b14:	1004c03a 	cmpne	r2,r2,zero
 2002b18:	f800283a 	ret
 2002b1c:	3214b03a 	or	r10,r6,r8
 2002b20:	503ff426 	beq	r10,zero,2002af4 <__alt_mem_flash+0xfdff1af4>
 2002b24:	00800044 	movi	r2,1
 2002b28:	f800283a 	ret
 2002b2c:	2254b03a 	or	r10,r4,r9
 2002b30:	503fee26 	beq	r10,zero,2002aec <__alt_mem_flash+0xfdff1aec>
 2002b34:	00800044 	movi	r2,1
 2002b38:	f800283a 	ret
 2002b3c:	0005883a 	mov	r2,zero
 2002b40:	f800283a 	ret

02002b44 <__gedf2>:
 2002b44:	2804d53a 	srli	r2,r5,20
 2002b48:	3806d53a 	srli	r3,r7,20
 2002b4c:	02000434 	movhi	r8,16
 2002b50:	423fffc4 	addi	r8,r8,-1
 2002b54:	1081ffcc 	andi	r2,r2,2047
 2002b58:	0241ffc4 	movi	r9,2047
 2002b5c:	2a14703a 	and	r10,r5,r8
 2002b60:	18c1ffcc 	andi	r3,r3,2047
 2002b64:	3a10703a 	and	r8,r7,r8
 2002b68:	280ad7fa 	srli	r5,r5,31
 2002b6c:	380ed7fa 	srli	r7,r7,31
 2002b70:	12401d26 	beq	r2,r9,2002be8 <__gedf2+0xa4>
 2002b74:	0241ffc4 	movi	r9,2047
 2002b78:	1a401226 	beq	r3,r9,2002bc4 <__gedf2+0x80>
 2002b7c:	1000081e 	bne	r2,zero,2002ba0 <__gedf2+0x5c>
 2002b80:	2296b03a 	or	r11,r4,r10
 2002b84:	5813003a 	cmpeq	r9,r11,zero
 2002b88:	1800091e 	bne	r3,zero,2002bb0 <__gedf2+0x6c>
 2002b8c:	3218b03a 	or	r12,r6,r8
 2002b90:	6000071e 	bne	r12,zero,2002bb0 <__gedf2+0x6c>
 2002b94:	0005883a 	mov	r2,zero
 2002b98:	5800101e 	bne	r11,zero,2002bdc <__gedf2+0x98>
 2002b9c:	f800283a 	ret
 2002ba0:	18000c1e 	bne	r3,zero,2002bd4 <__gedf2+0x90>
 2002ba4:	3212b03a 	or	r9,r6,r8
 2002ba8:	48000c26 	beq	r9,zero,2002bdc <__gedf2+0x98>
 2002bac:	0013883a 	mov	r9,zero
 2002bb0:	39c03fcc 	andi	r7,r7,255
 2002bb4:	48000826 	beq	r9,zero,2002bd8 <__gedf2+0x94>
 2002bb8:	38000926 	beq	r7,zero,2002be0 <__gedf2+0x9c>
 2002bbc:	00800044 	movi	r2,1
 2002bc0:	f800283a 	ret
 2002bc4:	3212b03a 	or	r9,r6,r8
 2002bc8:	483fec26 	beq	r9,zero,2002b7c <__alt_mem_flash+0xfdff1b7c>
 2002bcc:	00bfff84 	movi	r2,-2
 2002bd0:	f800283a 	ret
 2002bd4:	39c03fcc 	andi	r7,r7,255
 2002bd8:	29c00626 	beq	r5,r7,2002bf4 <__gedf2+0xb0>
 2002bdc:	283ff726 	beq	r5,zero,2002bbc <__alt_mem_flash+0xfdff1bbc>
 2002be0:	00bfffc4 	movi	r2,-1
 2002be4:	f800283a 	ret
 2002be8:	2292b03a 	or	r9,r4,r10
 2002bec:	483fe126 	beq	r9,zero,2002b74 <__alt_mem_flash+0xfdff1b74>
 2002bf0:	003ff606 	br	2002bcc <__alt_mem_flash+0xfdff1bcc>
 2002bf4:	18bff916 	blt	r3,r2,2002bdc <__alt_mem_flash+0xfdff1bdc>
 2002bf8:	10c00316 	blt	r2,r3,2002c08 <__gedf2+0xc4>
 2002bfc:	42bff736 	bltu	r8,r10,2002bdc <__alt_mem_flash+0xfdff1bdc>
 2002c00:	52000326 	beq	r10,r8,2002c10 <__gedf2+0xcc>
 2002c04:	5200042e 	bgeu	r10,r8,2002c18 <__gedf2+0xd4>
 2002c08:	283fec1e 	bne	r5,zero,2002bbc <__alt_mem_flash+0xfdff1bbc>
 2002c0c:	003ff406 	br	2002be0 <__alt_mem_flash+0xfdff1be0>
 2002c10:	313ff236 	bltu	r6,r4,2002bdc <__alt_mem_flash+0xfdff1bdc>
 2002c14:	21bffc36 	bltu	r4,r6,2002c08 <__alt_mem_flash+0xfdff1c08>
 2002c18:	0005883a 	mov	r2,zero
 2002c1c:	f800283a 	ret

02002c20 <__muldf3>:
 2002c20:	deffee04 	addi	sp,sp,-72
 2002c24:	dd000c15 	stw	r20,48(sp)
 2002c28:	2828d53a 	srli	r20,r5,20
 2002c2c:	ddc00f15 	stw	r23,60(sp)
 2002c30:	282ed7fa 	srli	r23,r5,31
 2002c34:	dc000815 	stw	r16,32(sp)
 2002c38:	04000434 	movhi	r16,16
 2002c3c:	dcc00b15 	stw	r19,44(sp)
 2002c40:	843fffc4 	addi	r16,r16,-1
 2002c44:	dfc01115 	stw	ra,68(sp)
 2002c48:	df001015 	stw	fp,64(sp)
 2002c4c:	dd800e15 	stw	r22,56(sp)
 2002c50:	dd400d15 	stw	r21,52(sp)
 2002c54:	dc800a15 	stw	r18,40(sp)
 2002c58:	dc400915 	stw	r17,36(sp)
 2002c5c:	a501ffcc 	andi	r20,r20,2047
 2002c60:	2c20703a 	and	r16,r5,r16
 2002c64:	b827883a 	mov	r19,r23
 2002c68:	ba403fcc 	andi	r9,r23,255
 2002c6c:	a0006026 	beq	r20,zero,2002df0 <__muldf3+0x1d0>
 2002c70:	0081ffc4 	movi	r2,2047
 2002c74:	202d883a 	mov	r22,r4
 2002c78:	a0803626 	beq	r20,r2,2002d54 <__muldf3+0x134>
 2002c7c:	84000434 	orhi	r16,r16,16
 2002c80:	200ad77a 	srli	r5,r4,29
 2002c84:	800490fa 	slli	r2,r16,3
 2002c88:	202c90fa 	slli	r22,r4,3
 2002c8c:	a53f0044 	addi	r20,r20,-1023
 2002c90:	28a0b03a 	or	r16,r5,r2
 2002c94:	002b883a 	mov	r21,zero
 2002c98:	000b883a 	mov	r5,zero
 2002c9c:	3804d53a 	srli	r2,r7,20
 2002ca0:	3838d7fa 	srli	fp,r7,31
 2002ca4:	04400434 	movhi	r17,16
 2002ca8:	8c7fffc4 	addi	r17,r17,-1
 2002cac:	1081ffcc 	andi	r2,r2,2047
 2002cb0:	3025883a 	mov	r18,r6
 2002cb4:	3c62703a 	and	r17,r7,r17
 2002cb8:	e2803fcc 	andi	r10,fp,255
 2002cbc:	10006d26 	beq	r2,zero,2002e74 <__muldf3+0x254>
 2002cc0:	00c1ffc4 	movi	r3,2047
 2002cc4:	10c06526 	beq	r2,r3,2002e5c <__muldf3+0x23c>
 2002cc8:	8c400434 	orhi	r17,r17,16
 2002ccc:	300ed77a 	srli	r7,r6,29
 2002cd0:	880690fa 	slli	r3,r17,3
 2002cd4:	302490fa 	slli	r18,r6,3
 2002cd8:	10bf0044 	addi	r2,r2,-1023
 2002cdc:	38e2b03a 	or	r17,r7,r3
 2002ce0:	000f883a 	mov	r7,zero
 2002ce4:	a087883a 	add	r3,r20,r2
 2002ce8:	010003c4 	movi	r4,15
 2002cec:	3d44b03a 	or	r2,r7,r21
 2002cf0:	e5ccf03a 	xor	r6,fp,r23
 2002cf4:	1a000044 	addi	r8,r3,1
 2002cf8:	20809b36 	bltu	r4,r2,2002f68 <__muldf3+0x348>
 2002cfc:	100490ba 	slli	r2,r2,2
 2002d00:	01008034 	movhi	r4,512
 2002d04:	210b4504 	addi	r4,r4,11540
 2002d08:	1105883a 	add	r2,r2,r4
 2002d0c:	10800017 	ldw	r2,0(r2)
 2002d10:	1000683a 	jmp	r2
 2002d14:	02002f68 	cmpgeui	r8,zero,189
 2002d18:	02002d74 	movhi	r8,181
 2002d1c:	02002d74 	movhi	r8,181
 2002d20:	02002d70 	cmpltui	r8,zero,181
 2002d24:	02002f44 	movi	r8,189
 2002d28:	02002f44 	movi	r8,189
 2002d2c:	02002f2c 	andhi	r8,zero,188
 2002d30:	02002d70 	cmpltui	r8,zero,181
 2002d34:	02002f44 	movi	r8,189
 2002d38:	02002f2c 	andhi	r8,zero,188
 2002d3c:	02002f44 	movi	r8,189
 2002d40:	02002d70 	cmpltui	r8,zero,181
 2002d44:	02002f54 	movui	r8,189
 2002d48:	02002f54 	movui	r8,189
 2002d4c:	02002f54 	movui	r8,189
 2002d50:	020032b4 	movhi	r8,202
 2002d54:	2404b03a 	or	r2,r4,r16
 2002d58:	1000711e 	bne	r2,zero,2002f20 <__muldf3+0x300>
 2002d5c:	05400204 	movi	r21,8
 2002d60:	0021883a 	mov	r16,zero
 2002d64:	002d883a 	mov	r22,zero
 2002d68:	01400084 	movi	r5,2
 2002d6c:	003fcb06 	br	2002c9c <__alt_mem_flash+0xfdff1c9c>
 2002d70:	500d883a 	mov	r6,r10
 2002d74:	00800084 	movi	r2,2
 2002d78:	38805926 	beq	r7,r2,2002ee0 <__muldf3+0x2c0>
 2002d7c:	008000c4 	movi	r2,3
 2002d80:	3881bb26 	beq	r7,r2,2003470 <__muldf3+0x850>
 2002d84:	00800044 	movi	r2,1
 2002d88:	3881961e 	bne	r7,r2,20033e4 <__muldf3+0x7c4>
 2002d8c:	3027883a 	mov	r19,r6
 2002d90:	0005883a 	mov	r2,zero
 2002d94:	0021883a 	mov	r16,zero
 2002d98:	002d883a 	mov	r22,zero
 2002d9c:	1004953a 	slli	r2,r2,20
 2002da0:	98c03fcc 	andi	r3,r19,255
 2002da4:	04400434 	movhi	r17,16
 2002da8:	8c7fffc4 	addi	r17,r17,-1
 2002dac:	180697fa 	slli	r3,r3,31
 2002db0:	8460703a 	and	r16,r16,r17
 2002db4:	80a0b03a 	or	r16,r16,r2
 2002db8:	80c6b03a 	or	r3,r16,r3
 2002dbc:	b005883a 	mov	r2,r22
 2002dc0:	dfc01117 	ldw	ra,68(sp)
 2002dc4:	df001017 	ldw	fp,64(sp)
 2002dc8:	ddc00f17 	ldw	r23,60(sp)
 2002dcc:	dd800e17 	ldw	r22,56(sp)
 2002dd0:	dd400d17 	ldw	r21,52(sp)
 2002dd4:	dd000c17 	ldw	r20,48(sp)
 2002dd8:	dcc00b17 	ldw	r19,44(sp)
 2002ddc:	dc800a17 	ldw	r18,40(sp)
 2002de0:	dc400917 	ldw	r17,36(sp)
 2002de4:	dc000817 	ldw	r16,32(sp)
 2002de8:	dec01204 	addi	sp,sp,72
 2002dec:	f800283a 	ret
 2002df0:	2404b03a 	or	r2,r4,r16
 2002df4:	202b883a 	mov	r21,r4
 2002df8:	10004426 	beq	r2,zero,2002f0c <__muldf3+0x2ec>
 2002dfc:	80015126 	beq	r16,zero,2003344 <__muldf3+0x724>
 2002e00:	8009883a 	mov	r4,r16
 2002e04:	d9800715 	stw	r6,28(sp)
 2002e08:	d9c00215 	stw	r7,8(sp)
 2002e0c:	da400415 	stw	r9,16(sp)
 2002e10:	200411c0 	call	200411c <__clzsi2>
 2002e14:	d9800717 	ldw	r6,28(sp)
 2002e18:	d9c00217 	ldw	r7,8(sp)
 2002e1c:	da400417 	ldw	r9,16(sp)
 2002e20:	113ffd44 	addi	r4,r2,-11
 2002e24:	00c00704 	movi	r3,28
 2002e28:	19014216 	blt	r3,r4,2003334 <__muldf3+0x714>
 2002e2c:	00c00744 	movi	r3,29
 2002e30:	15bffe04 	addi	r22,r2,-8
 2002e34:	1907c83a 	sub	r3,r3,r4
 2002e38:	85a0983a 	sll	r16,r16,r22
 2002e3c:	a8c6d83a 	srl	r3,r21,r3
 2002e40:	adac983a 	sll	r22,r21,r22
 2002e44:	1c20b03a 	or	r16,r3,r16
 2002e48:	1080fcc4 	addi	r2,r2,1011
 2002e4c:	00a9c83a 	sub	r20,zero,r2
 2002e50:	002b883a 	mov	r21,zero
 2002e54:	000b883a 	mov	r5,zero
 2002e58:	003f9006 	br	2002c9c <__alt_mem_flash+0xfdff1c9c>
 2002e5c:	3446b03a 	or	r3,r6,r17
 2002e60:	1800281e 	bne	r3,zero,2002f04 <__muldf3+0x2e4>
 2002e64:	0023883a 	mov	r17,zero
 2002e68:	0025883a 	mov	r18,zero
 2002e6c:	01c00084 	movi	r7,2
 2002e70:	003f9c06 	br	2002ce4 <__alt_mem_flash+0xfdff1ce4>
 2002e74:	3446b03a 	or	r3,r6,r17
 2002e78:	18001e26 	beq	r3,zero,2002ef4 <__muldf3+0x2d4>
 2002e7c:	88012126 	beq	r17,zero,2003304 <__muldf3+0x6e4>
 2002e80:	8809883a 	mov	r4,r17
 2002e84:	d9400215 	stw	r5,8(sp)
 2002e88:	d9800715 	stw	r6,28(sp)
 2002e8c:	da400415 	stw	r9,16(sp)
 2002e90:	da800315 	stw	r10,12(sp)
 2002e94:	200411c0 	call	200411c <__clzsi2>
 2002e98:	d9400217 	ldw	r5,8(sp)
 2002e9c:	d9800717 	ldw	r6,28(sp)
 2002ea0:	da400417 	ldw	r9,16(sp)
 2002ea4:	da800317 	ldw	r10,12(sp)
 2002ea8:	113ffd44 	addi	r4,r2,-11
 2002eac:	00c00704 	movi	r3,28
 2002eb0:	19011016 	blt	r3,r4,20032f4 <__muldf3+0x6d4>
 2002eb4:	00c00744 	movi	r3,29
 2002eb8:	14bffe04 	addi	r18,r2,-8
 2002ebc:	1907c83a 	sub	r3,r3,r4
 2002ec0:	8ca2983a 	sll	r17,r17,r18
 2002ec4:	30c6d83a 	srl	r3,r6,r3
 2002ec8:	34a4983a 	sll	r18,r6,r18
 2002ecc:	1c62b03a 	or	r17,r3,r17
 2002ed0:	1080fcc4 	addi	r2,r2,1011
 2002ed4:	0085c83a 	sub	r2,zero,r2
 2002ed8:	000f883a 	mov	r7,zero
 2002edc:	003f8106 	br	2002ce4 <__alt_mem_flash+0xfdff1ce4>
 2002ee0:	3027883a 	mov	r19,r6
 2002ee4:	0081ffc4 	movi	r2,2047
 2002ee8:	0021883a 	mov	r16,zero
 2002eec:	002d883a 	mov	r22,zero
 2002ef0:	003faa06 	br	2002d9c <__alt_mem_flash+0xfdff1d9c>
 2002ef4:	0023883a 	mov	r17,zero
 2002ef8:	0025883a 	mov	r18,zero
 2002efc:	01c00044 	movi	r7,1
 2002f00:	003f7806 	br	2002ce4 <__alt_mem_flash+0xfdff1ce4>
 2002f04:	01c000c4 	movi	r7,3
 2002f08:	003f7606 	br	2002ce4 <__alt_mem_flash+0xfdff1ce4>
 2002f0c:	05400104 	movi	r21,4
 2002f10:	0021883a 	mov	r16,zero
 2002f14:	002d883a 	mov	r22,zero
 2002f18:	01400044 	movi	r5,1
 2002f1c:	003f5f06 	br	2002c9c <__alt_mem_flash+0xfdff1c9c>
 2002f20:	05400304 	movi	r21,12
 2002f24:	014000c4 	movi	r5,3
 2002f28:	003f5c06 	br	2002c9c <__alt_mem_flash+0xfdff1c9c>
 2002f2c:	04000434 	movhi	r16,16
 2002f30:	0027883a 	mov	r19,zero
 2002f34:	843fffc4 	addi	r16,r16,-1
 2002f38:	05bfffc4 	movi	r22,-1
 2002f3c:	0081ffc4 	movi	r2,2047
 2002f40:	003f9606 	br	2002d9c <__alt_mem_flash+0xfdff1d9c>
 2002f44:	8023883a 	mov	r17,r16
 2002f48:	b025883a 	mov	r18,r22
 2002f4c:	280f883a 	mov	r7,r5
 2002f50:	003f8806 	br	2002d74 <__alt_mem_flash+0xfdff1d74>
 2002f54:	8023883a 	mov	r17,r16
 2002f58:	b025883a 	mov	r18,r22
 2002f5c:	480d883a 	mov	r6,r9
 2002f60:	280f883a 	mov	r7,r5
 2002f64:	003f8306 	br	2002d74 <__alt_mem_flash+0xfdff1d74>
 2002f68:	b026d43a 	srli	r19,r22,16
 2002f6c:	902ed43a 	srli	r23,r18,16
 2002f70:	b5bfffcc 	andi	r22,r22,65535
 2002f74:	94bfffcc 	andi	r18,r18,65535
 2002f78:	b00b883a 	mov	r5,r22
 2002f7c:	9009883a 	mov	r4,r18
 2002f80:	d8c00515 	stw	r3,20(sp)
 2002f84:	d9800715 	stw	r6,28(sp)
 2002f88:	da000615 	stw	r8,24(sp)
 2002f8c:	20013d80 	call	20013d8 <__mulsi3>
 2002f90:	980b883a 	mov	r5,r19
 2002f94:	9009883a 	mov	r4,r18
 2002f98:	1029883a 	mov	r20,r2
 2002f9c:	20013d80 	call	20013d8 <__mulsi3>
 2002fa0:	b80b883a 	mov	r5,r23
 2002fa4:	9809883a 	mov	r4,r19
 2002fa8:	102b883a 	mov	r21,r2
 2002fac:	20013d80 	call	20013d8 <__mulsi3>
 2002fb0:	b809883a 	mov	r4,r23
 2002fb4:	b00b883a 	mov	r5,r22
 2002fb8:	1039883a 	mov	fp,r2
 2002fbc:	20013d80 	call	20013d8 <__mulsi3>
 2002fc0:	a008d43a 	srli	r4,r20,16
 2002fc4:	1545883a 	add	r2,r2,r21
 2002fc8:	d8c00517 	ldw	r3,20(sp)
 2002fcc:	2085883a 	add	r2,r4,r2
 2002fd0:	d9800717 	ldw	r6,28(sp)
 2002fd4:	da000617 	ldw	r8,24(sp)
 2002fd8:	1540022e 	bgeu	r2,r21,2002fe4 <__muldf3+0x3c4>
 2002fdc:	01000074 	movhi	r4,1
 2002fe0:	e139883a 	add	fp,fp,r4
 2002fe4:	100e943a 	slli	r7,r2,16
 2002fe8:	1004d43a 	srli	r2,r2,16
 2002fec:	882ad43a 	srli	r21,r17,16
 2002ff0:	a53fffcc 	andi	r20,r20,65535
 2002ff4:	8c7fffcc 	andi	r17,r17,65535
 2002ff8:	3d29883a 	add	r20,r7,r20
 2002ffc:	b00b883a 	mov	r5,r22
 2003000:	8809883a 	mov	r4,r17
 2003004:	d8c00515 	stw	r3,20(sp)
 2003008:	d9800715 	stw	r6,28(sp)
 200300c:	da000615 	stw	r8,24(sp)
 2003010:	dd000115 	stw	r20,4(sp)
 2003014:	d8800015 	stw	r2,0(sp)
 2003018:	20013d80 	call	20013d8 <__mulsi3>
 200301c:	980b883a 	mov	r5,r19
 2003020:	8809883a 	mov	r4,r17
 2003024:	d8800215 	stw	r2,8(sp)
 2003028:	20013d80 	call	20013d8 <__mulsi3>
 200302c:	9809883a 	mov	r4,r19
 2003030:	a80b883a 	mov	r5,r21
 2003034:	1029883a 	mov	r20,r2
 2003038:	20013d80 	call	20013d8 <__mulsi3>
 200303c:	b00b883a 	mov	r5,r22
 2003040:	a809883a 	mov	r4,r21
 2003044:	d8800415 	stw	r2,16(sp)
 2003048:	20013d80 	call	20013d8 <__mulsi3>
 200304c:	d9c00217 	ldw	r7,8(sp)
 2003050:	1505883a 	add	r2,r2,r20
 2003054:	d8c00517 	ldw	r3,20(sp)
 2003058:	3826d43a 	srli	r19,r7,16
 200305c:	d9800717 	ldw	r6,28(sp)
 2003060:	da000617 	ldw	r8,24(sp)
 2003064:	9885883a 	add	r2,r19,r2
 2003068:	da400417 	ldw	r9,16(sp)
 200306c:	1500022e 	bgeu	r2,r20,2003078 <__muldf3+0x458>
 2003070:	01000074 	movhi	r4,1
 2003074:	4913883a 	add	r9,r9,r4
 2003078:	1028d43a 	srli	r20,r2,16
 200307c:	1004943a 	slli	r2,r2,16
 2003080:	802cd43a 	srli	r22,r16,16
 2003084:	843fffcc 	andi	r16,r16,65535
 2003088:	3cffffcc 	andi	r19,r7,65535
 200308c:	9009883a 	mov	r4,r18
 2003090:	800b883a 	mov	r5,r16
 2003094:	a269883a 	add	r20,r20,r9
 2003098:	d8c00515 	stw	r3,20(sp)
 200309c:	d9800715 	stw	r6,28(sp)
 20030a0:	da000615 	stw	r8,24(sp)
 20030a4:	14e7883a 	add	r19,r2,r19
 20030a8:	20013d80 	call	20013d8 <__mulsi3>
 20030ac:	9009883a 	mov	r4,r18
 20030b0:	b00b883a 	mov	r5,r22
 20030b4:	d8800315 	stw	r2,12(sp)
 20030b8:	20013d80 	call	20013d8 <__mulsi3>
 20030bc:	b809883a 	mov	r4,r23
 20030c0:	b00b883a 	mov	r5,r22
 20030c4:	d8800215 	stw	r2,8(sp)
 20030c8:	20013d80 	call	20013d8 <__mulsi3>
 20030cc:	b80b883a 	mov	r5,r23
 20030d0:	8009883a 	mov	r4,r16
 20030d4:	d8800415 	stw	r2,16(sp)
 20030d8:	20013d80 	call	20013d8 <__mulsi3>
 20030dc:	da800317 	ldw	r10,12(sp)
 20030e0:	d9c00217 	ldw	r7,8(sp)
 20030e4:	d9000017 	ldw	r4,0(sp)
 20030e8:	502ed43a 	srli	r23,r10,16
 20030ec:	11c5883a 	add	r2,r2,r7
 20030f0:	24e5883a 	add	r18,r4,r19
 20030f4:	b885883a 	add	r2,r23,r2
 20030f8:	d8c00517 	ldw	r3,20(sp)
 20030fc:	d9800717 	ldw	r6,28(sp)
 2003100:	da000617 	ldw	r8,24(sp)
 2003104:	da400417 	ldw	r9,16(sp)
 2003108:	11c0022e 	bgeu	r2,r7,2003114 <__muldf3+0x4f4>
 200310c:	01000074 	movhi	r4,1
 2003110:	4913883a 	add	r9,r9,r4
 2003114:	100ed43a 	srli	r7,r2,16
 2003118:	1004943a 	slli	r2,r2,16
 200311c:	55ffffcc 	andi	r23,r10,65535
 2003120:	3a53883a 	add	r9,r7,r9
 2003124:	8809883a 	mov	r4,r17
 2003128:	800b883a 	mov	r5,r16
 200312c:	d8c00515 	stw	r3,20(sp)
 2003130:	d9800715 	stw	r6,28(sp)
 2003134:	da000615 	stw	r8,24(sp)
 2003138:	da400415 	stw	r9,16(sp)
 200313c:	15ef883a 	add	r23,r2,r23
 2003140:	20013d80 	call	20013d8 <__mulsi3>
 2003144:	8809883a 	mov	r4,r17
 2003148:	b00b883a 	mov	r5,r22
 200314c:	d8800215 	stw	r2,8(sp)
 2003150:	20013d80 	call	20013d8 <__mulsi3>
 2003154:	b00b883a 	mov	r5,r22
 2003158:	a809883a 	mov	r4,r21
 200315c:	d8800315 	stw	r2,12(sp)
 2003160:	20013d80 	call	20013d8 <__mulsi3>
 2003164:	8009883a 	mov	r4,r16
 2003168:	a80b883a 	mov	r5,r21
 200316c:	1023883a 	mov	r17,r2
 2003170:	20013d80 	call	20013d8 <__mulsi3>
 2003174:	d9c00217 	ldw	r7,8(sp)
 2003178:	da800317 	ldw	r10,12(sp)
 200317c:	d8c00517 	ldw	r3,20(sp)
 2003180:	3808d43a 	srli	r4,r7,16
 2003184:	1285883a 	add	r2,r2,r10
 2003188:	d9800717 	ldw	r6,28(sp)
 200318c:	2085883a 	add	r2,r4,r2
 2003190:	da000617 	ldw	r8,24(sp)
 2003194:	da400417 	ldw	r9,16(sp)
 2003198:	1280022e 	bgeu	r2,r10,20031a4 <__muldf3+0x584>
 200319c:	01000074 	movhi	r4,1
 20031a0:	8923883a 	add	r17,r17,r4
 20031a4:	1008943a 	slli	r4,r2,16
 20031a8:	39ffffcc 	andi	r7,r7,65535
 20031ac:	e4b9883a 	add	fp,fp,r18
 20031b0:	21cf883a 	add	r7,r4,r7
 20031b4:	e4e7803a 	cmpltu	r19,fp,r19
 20031b8:	3d0f883a 	add	r7,r7,r20
 20031bc:	bf39883a 	add	fp,r23,fp
 20031c0:	99c9883a 	add	r4,r19,r7
 20031c4:	e5ef803a 	cmpltu	r23,fp,r23
 20031c8:	490b883a 	add	r5,r9,r4
 20031cc:	1004d43a 	srli	r2,r2,16
 20031d0:	b965883a 	add	r18,r23,r5
 20031d4:	24c9803a 	cmpltu	r4,r4,r19
 20031d8:	3d29803a 	cmpltu	r20,r7,r20
 20031dc:	a128b03a 	or	r20,r20,r4
 20031e0:	95ef803a 	cmpltu	r23,r18,r23
 20031e4:	2a53803a 	cmpltu	r9,r5,r9
 20031e8:	a0a9883a 	add	r20,r20,r2
 20031ec:	4deeb03a 	or	r23,r9,r23
 20031f0:	a5ef883a 	add	r23,r20,r23
 20031f4:	bc63883a 	add	r17,r23,r17
 20031f8:	e004927a 	slli	r2,fp,9
 20031fc:	d9000117 	ldw	r4,4(sp)
 2003200:	882e927a 	slli	r23,r17,9
 2003204:	9022d5fa 	srli	r17,r18,23
 2003208:	e038d5fa 	srli	fp,fp,23
 200320c:	1104b03a 	or	r2,r2,r4
 2003210:	9024927a 	slli	r18,r18,9
 2003214:	1004c03a 	cmpne	r2,r2,zero
 2003218:	bc62b03a 	or	r17,r23,r17
 200321c:	1738b03a 	or	fp,r2,fp
 2003220:	8880402c 	andhi	r2,r17,256
 2003224:	e4a4b03a 	or	r18,fp,r18
 2003228:	10000726 	beq	r2,zero,2003248 <__muldf3+0x628>
 200322c:	9006d07a 	srli	r3,r18,1
 2003230:	880497fa 	slli	r2,r17,31
 2003234:	9480004c 	andi	r18,r18,1
 2003238:	8822d07a 	srli	r17,r17,1
 200323c:	1ca4b03a 	or	r18,r3,r18
 2003240:	14a4b03a 	or	r18,r2,r18
 2003244:	4007883a 	mov	r3,r8
 2003248:	1880ffc4 	addi	r2,r3,1023
 200324c:	0080460e 	bge	zero,r2,2003368 <__muldf3+0x748>
 2003250:	910001cc 	andi	r4,r18,7
 2003254:	20000726 	beq	r4,zero,2003274 <__muldf3+0x654>
 2003258:	910003cc 	andi	r4,r18,15
 200325c:	01400104 	movi	r5,4
 2003260:	21400426 	beq	r4,r5,2003274 <__muldf3+0x654>
 2003264:	9149883a 	add	r4,r18,r5
 2003268:	24a5803a 	cmpltu	r18,r4,r18
 200326c:	8ca3883a 	add	r17,r17,r18
 2003270:	2025883a 	mov	r18,r4
 2003274:	8900402c 	andhi	r4,r17,256
 2003278:	20000426 	beq	r4,zero,200328c <__muldf3+0x66c>
 200327c:	18810004 	addi	r2,r3,1024
 2003280:	00ffc034 	movhi	r3,65280
 2003284:	18ffffc4 	addi	r3,r3,-1
 2003288:	88e2703a 	and	r17,r17,r3
 200328c:	00c1ff84 	movi	r3,2046
 2003290:	18bf1316 	blt	r3,r2,2002ee0 <__alt_mem_flash+0xfdff1ee0>
 2003294:	882c977a 	slli	r22,r17,29
 2003298:	9024d0fa 	srli	r18,r18,3
 200329c:	8822927a 	slli	r17,r17,9
 20032a0:	1081ffcc 	andi	r2,r2,2047
 20032a4:	b4acb03a 	or	r22,r22,r18
 20032a8:	8820d33a 	srli	r16,r17,12
 20032ac:	3027883a 	mov	r19,r6
 20032b0:	003eba06 	br	2002d9c <__alt_mem_flash+0xfdff1d9c>
 20032b4:	8080022c 	andhi	r2,r16,8
 20032b8:	10000926 	beq	r2,zero,20032e0 <__muldf3+0x6c0>
 20032bc:	8880022c 	andhi	r2,r17,8
 20032c0:	1000071e 	bne	r2,zero,20032e0 <__muldf3+0x6c0>
 20032c4:	00800434 	movhi	r2,16
 20032c8:	8c000234 	orhi	r16,r17,8
 20032cc:	10bfffc4 	addi	r2,r2,-1
 20032d0:	e027883a 	mov	r19,fp
 20032d4:	80a0703a 	and	r16,r16,r2
 20032d8:	902d883a 	mov	r22,r18
 20032dc:	003f1706 	br	2002f3c <__alt_mem_flash+0xfdff1f3c>
 20032e0:	00800434 	movhi	r2,16
 20032e4:	84000234 	orhi	r16,r16,8
 20032e8:	10bfffc4 	addi	r2,r2,-1
 20032ec:	80a0703a 	and	r16,r16,r2
 20032f0:	003f1206 	br	2002f3c <__alt_mem_flash+0xfdff1f3c>
 20032f4:	147ff604 	addi	r17,r2,-40
 20032f8:	3462983a 	sll	r17,r6,r17
 20032fc:	0025883a 	mov	r18,zero
 2003300:	003ef306 	br	2002ed0 <__alt_mem_flash+0xfdff1ed0>
 2003304:	3009883a 	mov	r4,r6
 2003308:	d9400215 	stw	r5,8(sp)
 200330c:	d9800715 	stw	r6,28(sp)
 2003310:	da400415 	stw	r9,16(sp)
 2003314:	da800315 	stw	r10,12(sp)
 2003318:	200411c0 	call	200411c <__clzsi2>
 200331c:	10800804 	addi	r2,r2,32
 2003320:	da800317 	ldw	r10,12(sp)
 2003324:	da400417 	ldw	r9,16(sp)
 2003328:	d9800717 	ldw	r6,28(sp)
 200332c:	d9400217 	ldw	r5,8(sp)
 2003330:	003edd06 	br	2002ea8 <__alt_mem_flash+0xfdff1ea8>
 2003334:	143ff604 	addi	r16,r2,-40
 2003338:	ac20983a 	sll	r16,r21,r16
 200333c:	002d883a 	mov	r22,zero
 2003340:	003ec106 	br	2002e48 <__alt_mem_flash+0xfdff1e48>
 2003344:	d9800715 	stw	r6,28(sp)
 2003348:	d9c00215 	stw	r7,8(sp)
 200334c:	da400415 	stw	r9,16(sp)
 2003350:	200411c0 	call	200411c <__clzsi2>
 2003354:	10800804 	addi	r2,r2,32
 2003358:	da400417 	ldw	r9,16(sp)
 200335c:	d9c00217 	ldw	r7,8(sp)
 2003360:	d9800717 	ldw	r6,28(sp)
 2003364:	003eae06 	br	2002e20 <__alt_mem_flash+0xfdff1e20>
 2003368:	00c00044 	movi	r3,1
 200336c:	1887c83a 	sub	r3,r3,r2
 2003370:	01000e04 	movi	r4,56
 2003374:	20fe8516 	blt	r4,r3,2002d8c <__alt_mem_flash+0xfdff1d8c>
 2003378:	010007c4 	movi	r4,31
 200337c:	20c01b16 	blt	r4,r3,20033ec <__muldf3+0x7cc>
 2003380:	00800804 	movi	r2,32
 2003384:	10c5c83a 	sub	r2,r2,r3
 2003388:	888a983a 	sll	r5,r17,r2
 200338c:	90c8d83a 	srl	r4,r18,r3
 2003390:	9084983a 	sll	r2,r18,r2
 2003394:	88e2d83a 	srl	r17,r17,r3
 2003398:	2906b03a 	or	r3,r5,r4
 200339c:	1004c03a 	cmpne	r2,r2,zero
 20033a0:	1886b03a 	or	r3,r3,r2
 20033a4:	188001cc 	andi	r2,r3,7
 20033a8:	10000726 	beq	r2,zero,20033c8 <__muldf3+0x7a8>
 20033ac:	188003cc 	andi	r2,r3,15
 20033b0:	01000104 	movi	r4,4
 20033b4:	11000426 	beq	r2,r4,20033c8 <__muldf3+0x7a8>
 20033b8:	1805883a 	mov	r2,r3
 20033bc:	10c00104 	addi	r3,r2,4
 20033c0:	1885803a 	cmpltu	r2,r3,r2
 20033c4:	88a3883a 	add	r17,r17,r2
 20033c8:	8880202c 	andhi	r2,r17,128
 20033cc:	10001c26 	beq	r2,zero,2003440 <__muldf3+0x820>
 20033d0:	3027883a 	mov	r19,r6
 20033d4:	00800044 	movi	r2,1
 20033d8:	0021883a 	mov	r16,zero
 20033dc:	002d883a 	mov	r22,zero
 20033e0:	003e6e06 	br	2002d9c <__alt_mem_flash+0xfdff1d9c>
 20033e4:	4007883a 	mov	r3,r8
 20033e8:	003f9706 	br	2003248 <__alt_mem_flash+0xfdff2248>
 20033ec:	017ff844 	movi	r5,-31
 20033f0:	2885c83a 	sub	r2,r5,r2
 20033f4:	888ad83a 	srl	r5,r17,r2
 20033f8:	00800804 	movi	r2,32
 20033fc:	18801a26 	beq	r3,r2,2003468 <__muldf3+0x848>
 2003400:	01001004 	movi	r4,64
 2003404:	20c7c83a 	sub	r3,r4,r3
 2003408:	88e2983a 	sll	r17,r17,r3
 200340c:	8ca4b03a 	or	r18,r17,r18
 2003410:	9004c03a 	cmpne	r2,r18,zero
 2003414:	2884b03a 	or	r2,r5,r2
 2003418:	144001cc 	andi	r17,r2,7
 200341c:	88000d1e 	bne	r17,zero,2003454 <__muldf3+0x834>
 2003420:	0021883a 	mov	r16,zero
 2003424:	102cd0fa 	srli	r22,r2,3
 2003428:	3027883a 	mov	r19,r6
 200342c:	0005883a 	mov	r2,zero
 2003430:	b46cb03a 	or	r22,r22,r17
 2003434:	003e5906 	br	2002d9c <__alt_mem_flash+0xfdff1d9c>
 2003438:	1007883a 	mov	r3,r2
 200343c:	0023883a 	mov	r17,zero
 2003440:	8820927a 	slli	r16,r17,9
 2003444:	1805883a 	mov	r2,r3
 2003448:	8822977a 	slli	r17,r17,29
 200344c:	8020d33a 	srli	r16,r16,12
 2003450:	003ff406 	br	2003424 <__alt_mem_flash+0xfdff2424>
 2003454:	10c003cc 	andi	r3,r2,15
 2003458:	01000104 	movi	r4,4
 200345c:	193ff626 	beq	r3,r4,2003438 <__alt_mem_flash+0xfdff2438>
 2003460:	0023883a 	mov	r17,zero
 2003464:	003fd506 	br	20033bc <__alt_mem_flash+0xfdff23bc>
 2003468:	0023883a 	mov	r17,zero
 200346c:	003fe706 	br	200340c <__alt_mem_flash+0xfdff240c>
 2003470:	00800434 	movhi	r2,16
 2003474:	8c000234 	orhi	r16,r17,8
 2003478:	10bfffc4 	addi	r2,r2,-1
 200347c:	3027883a 	mov	r19,r6
 2003480:	80a0703a 	and	r16,r16,r2
 2003484:	902d883a 	mov	r22,r18
 2003488:	003eac06 	br	2002f3c <__alt_mem_flash+0xfdff1f3c>

0200348c <__subdf3>:
 200348c:	02000434 	movhi	r8,16
 2003490:	423fffc4 	addi	r8,r8,-1
 2003494:	defffb04 	addi	sp,sp,-20
 2003498:	2a14703a 	and	r10,r5,r8
 200349c:	3812d53a 	srli	r9,r7,20
 20034a0:	3a10703a 	and	r8,r7,r8
 20034a4:	2006d77a 	srli	r3,r4,29
 20034a8:	3004d77a 	srli	r2,r6,29
 20034ac:	dc000015 	stw	r16,0(sp)
 20034b0:	501490fa 	slli	r10,r10,3
 20034b4:	2820d53a 	srli	r16,r5,20
 20034b8:	401090fa 	slli	r8,r8,3
 20034bc:	dc800215 	stw	r18,8(sp)
 20034c0:	dc400115 	stw	r17,4(sp)
 20034c4:	dfc00415 	stw	ra,16(sp)
 20034c8:	202290fa 	slli	r17,r4,3
 20034cc:	dcc00315 	stw	r19,12(sp)
 20034d0:	4a41ffcc 	andi	r9,r9,2047
 20034d4:	0101ffc4 	movi	r4,2047
 20034d8:	2824d7fa 	srli	r18,r5,31
 20034dc:	8401ffcc 	andi	r16,r16,2047
 20034e0:	50c6b03a 	or	r3,r10,r3
 20034e4:	380ed7fa 	srli	r7,r7,31
 20034e8:	408ab03a 	or	r5,r8,r2
 20034ec:	300c90fa 	slli	r6,r6,3
 20034f0:	49009626 	beq	r9,r4,200374c <__subdf3+0x2c0>
 20034f4:	39c0005c 	xori	r7,r7,1
 20034f8:	8245c83a 	sub	r2,r16,r9
 20034fc:	3c807426 	beq	r7,r18,20036d0 <__subdf3+0x244>
 2003500:	0080af0e 	bge	zero,r2,20037c0 <__subdf3+0x334>
 2003504:	48002a1e 	bne	r9,zero,20035b0 <__subdf3+0x124>
 2003508:	2988b03a 	or	r4,r5,r6
 200350c:	20009a1e 	bne	r4,zero,2003778 <__subdf3+0x2ec>
 2003510:	888001cc 	andi	r2,r17,7
 2003514:	10000726 	beq	r2,zero,2003534 <__subdf3+0xa8>
 2003518:	888003cc 	andi	r2,r17,15
 200351c:	01000104 	movi	r4,4
 2003520:	11000426 	beq	r2,r4,2003534 <__subdf3+0xa8>
 2003524:	890b883a 	add	r5,r17,r4
 2003528:	2c63803a 	cmpltu	r17,r5,r17
 200352c:	1c47883a 	add	r3,r3,r17
 2003530:	2823883a 	mov	r17,r5
 2003534:	1880202c 	andhi	r2,r3,128
 2003538:	10005926 	beq	r2,zero,20036a0 <__subdf3+0x214>
 200353c:	84000044 	addi	r16,r16,1
 2003540:	0081ffc4 	movi	r2,2047
 2003544:	8080be26 	beq	r16,r2,2003840 <__subdf3+0x3b4>
 2003548:	017fe034 	movhi	r5,65408
 200354c:	297fffc4 	addi	r5,r5,-1
 2003550:	1946703a 	and	r3,r3,r5
 2003554:	1804977a 	slli	r2,r3,29
 2003558:	1806927a 	slli	r3,r3,9
 200355c:	8822d0fa 	srli	r17,r17,3
 2003560:	8401ffcc 	andi	r16,r16,2047
 2003564:	180ad33a 	srli	r5,r3,12
 2003568:	9100004c 	andi	r4,r18,1
 200356c:	1444b03a 	or	r2,r2,r17
 2003570:	80c1ffcc 	andi	r3,r16,2047
 2003574:	1820953a 	slli	r16,r3,20
 2003578:	20c03fcc 	andi	r3,r4,255
 200357c:	180897fa 	slli	r4,r3,31
 2003580:	00c00434 	movhi	r3,16
 2003584:	18ffffc4 	addi	r3,r3,-1
 2003588:	28c6703a 	and	r3,r5,r3
 200358c:	1c06b03a 	or	r3,r3,r16
 2003590:	1906b03a 	or	r3,r3,r4
 2003594:	dfc00417 	ldw	ra,16(sp)
 2003598:	dcc00317 	ldw	r19,12(sp)
 200359c:	dc800217 	ldw	r18,8(sp)
 20035a0:	dc400117 	ldw	r17,4(sp)
 20035a4:	dc000017 	ldw	r16,0(sp)
 20035a8:	dec00504 	addi	sp,sp,20
 20035ac:	f800283a 	ret
 20035b0:	0101ffc4 	movi	r4,2047
 20035b4:	813fd626 	beq	r16,r4,2003510 <__alt_mem_flash+0xfdff2510>
 20035b8:	29402034 	orhi	r5,r5,128
 20035bc:	01000e04 	movi	r4,56
 20035c0:	2080a316 	blt	r4,r2,2003850 <__subdf3+0x3c4>
 20035c4:	010007c4 	movi	r4,31
 20035c8:	2080c616 	blt	r4,r2,20038e4 <__subdf3+0x458>
 20035cc:	01000804 	movi	r4,32
 20035d0:	2089c83a 	sub	r4,r4,r2
 20035d4:	2910983a 	sll	r8,r5,r4
 20035d8:	308ed83a 	srl	r7,r6,r2
 20035dc:	3108983a 	sll	r4,r6,r4
 20035e0:	2884d83a 	srl	r2,r5,r2
 20035e4:	41ccb03a 	or	r6,r8,r7
 20035e8:	2008c03a 	cmpne	r4,r4,zero
 20035ec:	310cb03a 	or	r6,r6,r4
 20035f0:	898dc83a 	sub	r6,r17,r6
 20035f4:	89a3803a 	cmpltu	r17,r17,r6
 20035f8:	1887c83a 	sub	r3,r3,r2
 20035fc:	1c47c83a 	sub	r3,r3,r17
 2003600:	3023883a 	mov	r17,r6
 2003604:	1880202c 	andhi	r2,r3,128
 2003608:	10002326 	beq	r2,zero,2003698 <__subdf3+0x20c>
 200360c:	04c02034 	movhi	r19,128
 2003610:	9cffffc4 	addi	r19,r19,-1
 2003614:	1ce6703a 	and	r19,r3,r19
 2003618:	98007a26 	beq	r19,zero,2003804 <__subdf3+0x378>
 200361c:	9809883a 	mov	r4,r19
 2003620:	200411c0 	call	200411c <__clzsi2>
 2003624:	113ffe04 	addi	r4,r2,-8
 2003628:	00c007c4 	movi	r3,31
 200362c:	19007b16 	blt	r3,r4,200381c <__subdf3+0x390>
 2003630:	00800804 	movi	r2,32
 2003634:	1105c83a 	sub	r2,r2,r4
 2003638:	8884d83a 	srl	r2,r17,r2
 200363c:	9906983a 	sll	r3,r19,r4
 2003640:	8922983a 	sll	r17,r17,r4
 2003644:	10c4b03a 	or	r2,r2,r3
 2003648:	24007816 	blt	r4,r16,200382c <__subdf3+0x3a0>
 200364c:	2421c83a 	sub	r16,r4,r16
 2003650:	80c00044 	addi	r3,r16,1
 2003654:	010007c4 	movi	r4,31
 2003658:	20c09516 	blt	r4,r3,20038b0 <__subdf3+0x424>
 200365c:	01400804 	movi	r5,32
 2003660:	28cbc83a 	sub	r5,r5,r3
 2003664:	88c8d83a 	srl	r4,r17,r3
 2003668:	8962983a 	sll	r17,r17,r5
 200366c:	114a983a 	sll	r5,r2,r5
 2003670:	10c6d83a 	srl	r3,r2,r3
 2003674:	8804c03a 	cmpne	r2,r17,zero
 2003678:	290ab03a 	or	r5,r5,r4
 200367c:	28a2b03a 	or	r17,r5,r2
 2003680:	0021883a 	mov	r16,zero
 2003684:	003fa206 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003688:	2090b03a 	or	r8,r4,r2
 200368c:	40018e26 	beq	r8,zero,2003cc8 <__subdf3+0x83c>
 2003690:	1007883a 	mov	r3,r2
 2003694:	2023883a 	mov	r17,r4
 2003698:	888001cc 	andi	r2,r17,7
 200369c:	103f9e1e 	bne	r2,zero,2003518 <__alt_mem_flash+0xfdff2518>
 20036a0:	1804977a 	slli	r2,r3,29
 20036a4:	8822d0fa 	srli	r17,r17,3
 20036a8:	1810d0fa 	srli	r8,r3,3
 20036ac:	9100004c 	andi	r4,r18,1
 20036b0:	1444b03a 	or	r2,r2,r17
 20036b4:	00c1ffc4 	movi	r3,2047
 20036b8:	80c02826 	beq	r16,r3,200375c <__subdf3+0x2d0>
 20036bc:	01400434 	movhi	r5,16
 20036c0:	297fffc4 	addi	r5,r5,-1
 20036c4:	80e0703a 	and	r16,r16,r3
 20036c8:	414a703a 	and	r5,r8,r5
 20036cc:	003fa806 	br	2003570 <__alt_mem_flash+0xfdff2570>
 20036d0:	0080630e 	bge	zero,r2,2003860 <__subdf3+0x3d4>
 20036d4:	48003026 	beq	r9,zero,2003798 <__subdf3+0x30c>
 20036d8:	0101ffc4 	movi	r4,2047
 20036dc:	813f8c26 	beq	r16,r4,2003510 <__alt_mem_flash+0xfdff2510>
 20036e0:	29402034 	orhi	r5,r5,128
 20036e4:	01000e04 	movi	r4,56
 20036e8:	2080a90e 	bge	r4,r2,2003990 <__subdf3+0x504>
 20036ec:	298cb03a 	or	r6,r5,r6
 20036f0:	3012c03a 	cmpne	r9,r6,zero
 20036f4:	0005883a 	mov	r2,zero
 20036f8:	4c53883a 	add	r9,r9,r17
 20036fc:	4c63803a 	cmpltu	r17,r9,r17
 2003700:	10c7883a 	add	r3,r2,r3
 2003704:	88c7883a 	add	r3,r17,r3
 2003708:	4823883a 	mov	r17,r9
 200370c:	1880202c 	andhi	r2,r3,128
 2003710:	1000d026 	beq	r2,zero,2003a54 <__subdf3+0x5c8>
 2003714:	84000044 	addi	r16,r16,1
 2003718:	0081ffc4 	movi	r2,2047
 200371c:	8080fe26 	beq	r16,r2,2003b18 <__subdf3+0x68c>
 2003720:	00bfe034 	movhi	r2,65408
 2003724:	10bfffc4 	addi	r2,r2,-1
 2003728:	1886703a 	and	r3,r3,r2
 200372c:	880ad07a 	srli	r5,r17,1
 2003730:	180497fa 	slli	r2,r3,31
 2003734:	8900004c 	andi	r4,r17,1
 2003738:	2922b03a 	or	r17,r5,r4
 200373c:	1806d07a 	srli	r3,r3,1
 2003740:	1462b03a 	or	r17,r2,r17
 2003744:	3825883a 	mov	r18,r7
 2003748:	003f7106 	br	2003510 <__alt_mem_flash+0xfdff2510>
 200374c:	2984b03a 	or	r2,r5,r6
 2003750:	103f6826 	beq	r2,zero,20034f4 <__alt_mem_flash+0xfdff24f4>
 2003754:	39c03fcc 	andi	r7,r7,255
 2003758:	003f6706 	br	20034f8 <__alt_mem_flash+0xfdff24f8>
 200375c:	4086b03a 	or	r3,r8,r2
 2003760:	18015226 	beq	r3,zero,2003cac <__subdf3+0x820>
 2003764:	00c00434 	movhi	r3,16
 2003768:	41400234 	orhi	r5,r8,8
 200376c:	18ffffc4 	addi	r3,r3,-1
 2003770:	28ca703a 	and	r5,r5,r3
 2003774:	003f7e06 	br	2003570 <__alt_mem_flash+0xfdff2570>
 2003778:	10bfffc4 	addi	r2,r2,-1
 200377c:	1000491e 	bne	r2,zero,20038a4 <__subdf3+0x418>
 2003780:	898fc83a 	sub	r7,r17,r6
 2003784:	89e3803a 	cmpltu	r17,r17,r7
 2003788:	1947c83a 	sub	r3,r3,r5
 200378c:	1c47c83a 	sub	r3,r3,r17
 2003790:	3823883a 	mov	r17,r7
 2003794:	003f9b06 	br	2003604 <__alt_mem_flash+0xfdff2604>
 2003798:	2988b03a 	or	r4,r5,r6
 200379c:	203f5c26 	beq	r4,zero,2003510 <__alt_mem_flash+0xfdff2510>
 20037a0:	10bfffc4 	addi	r2,r2,-1
 20037a4:	1000931e 	bne	r2,zero,20039f4 <__subdf3+0x568>
 20037a8:	898d883a 	add	r6,r17,r6
 20037ac:	3463803a 	cmpltu	r17,r6,r17
 20037b0:	1947883a 	add	r3,r3,r5
 20037b4:	88c7883a 	add	r3,r17,r3
 20037b8:	3023883a 	mov	r17,r6
 20037bc:	003fd306 	br	200370c <__alt_mem_flash+0xfdff270c>
 20037c0:	1000541e 	bne	r2,zero,2003914 <__subdf3+0x488>
 20037c4:	80800044 	addi	r2,r16,1
 20037c8:	1081ffcc 	andi	r2,r2,2047
 20037cc:	01000044 	movi	r4,1
 20037d0:	2080a20e 	bge	r4,r2,2003a5c <__subdf3+0x5d0>
 20037d4:	8989c83a 	sub	r4,r17,r6
 20037d8:	8905803a 	cmpltu	r2,r17,r4
 20037dc:	1967c83a 	sub	r19,r3,r5
 20037e0:	98a7c83a 	sub	r19,r19,r2
 20037e4:	9880202c 	andhi	r2,r19,128
 20037e8:	10006326 	beq	r2,zero,2003978 <__subdf3+0x4ec>
 20037ec:	3463c83a 	sub	r17,r6,r17
 20037f0:	28c7c83a 	sub	r3,r5,r3
 20037f4:	344d803a 	cmpltu	r6,r6,r17
 20037f8:	19a7c83a 	sub	r19,r3,r6
 20037fc:	3825883a 	mov	r18,r7
 2003800:	983f861e 	bne	r19,zero,200361c <__alt_mem_flash+0xfdff261c>
 2003804:	8809883a 	mov	r4,r17
 2003808:	200411c0 	call	200411c <__clzsi2>
 200380c:	10800804 	addi	r2,r2,32
 2003810:	113ffe04 	addi	r4,r2,-8
 2003814:	00c007c4 	movi	r3,31
 2003818:	193f850e 	bge	r3,r4,2003630 <__alt_mem_flash+0xfdff2630>
 200381c:	10bff604 	addi	r2,r2,-40
 2003820:	8884983a 	sll	r2,r17,r2
 2003824:	0023883a 	mov	r17,zero
 2003828:	243f880e 	bge	r4,r16,200364c <__alt_mem_flash+0xfdff264c>
 200382c:	00ffe034 	movhi	r3,65408
 2003830:	18ffffc4 	addi	r3,r3,-1
 2003834:	8121c83a 	sub	r16,r16,r4
 2003838:	10c6703a 	and	r3,r2,r3
 200383c:	003f3406 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003840:	9100004c 	andi	r4,r18,1
 2003844:	000b883a 	mov	r5,zero
 2003848:	0005883a 	mov	r2,zero
 200384c:	003f4806 	br	2003570 <__alt_mem_flash+0xfdff2570>
 2003850:	298cb03a 	or	r6,r5,r6
 2003854:	300cc03a 	cmpne	r6,r6,zero
 2003858:	0005883a 	mov	r2,zero
 200385c:	003f6406 	br	20035f0 <__alt_mem_flash+0xfdff25f0>
 2003860:	10009a1e 	bne	r2,zero,2003acc <__subdf3+0x640>
 2003864:	82400044 	addi	r9,r16,1
 2003868:	4881ffcc 	andi	r2,r9,2047
 200386c:	02800044 	movi	r10,1
 2003870:	5080670e 	bge	r10,r2,2003a10 <__subdf3+0x584>
 2003874:	0081ffc4 	movi	r2,2047
 2003878:	4880af26 	beq	r9,r2,2003b38 <__subdf3+0x6ac>
 200387c:	898d883a 	add	r6,r17,r6
 2003880:	1945883a 	add	r2,r3,r5
 2003884:	3447803a 	cmpltu	r3,r6,r17
 2003888:	1887883a 	add	r3,r3,r2
 200388c:	182297fa 	slli	r17,r3,31
 2003890:	300cd07a 	srli	r6,r6,1
 2003894:	1806d07a 	srli	r3,r3,1
 2003898:	4821883a 	mov	r16,r9
 200389c:	89a2b03a 	or	r17,r17,r6
 20038a0:	003f1b06 	br	2003510 <__alt_mem_flash+0xfdff2510>
 20038a4:	0101ffc4 	movi	r4,2047
 20038a8:	813f441e 	bne	r16,r4,20035bc <__alt_mem_flash+0xfdff25bc>
 20038ac:	003f1806 	br	2003510 <__alt_mem_flash+0xfdff2510>
 20038b0:	843ff844 	addi	r16,r16,-31
 20038b4:	01400804 	movi	r5,32
 20038b8:	1408d83a 	srl	r4,r2,r16
 20038bc:	19405026 	beq	r3,r5,2003a00 <__subdf3+0x574>
 20038c0:	01401004 	movi	r5,64
 20038c4:	28c7c83a 	sub	r3,r5,r3
 20038c8:	10c4983a 	sll	r2,r2,r3
 20038cc:	88a2b03a 	or	r17,r17,r2
 20038d0:	8822c03a 	cmpne	r17,r17,zero
 20038d4:	2462b03a 	or	r17,r4,r17
 20038d8:	0007883a 	mov	r3,zero
 20038dc:	0021883a 	mov	r16,zero
 20038e0:	003f6d06 	br	2003698 <__alt_mem_flash+0xfdff2698>
 20038e4:	11fff804 	addi	r7,r2,-32
 20038e8:	01000804 	movi	r4,32
 20038ec:	29ced83a 	srl	r7,r5,r7
 20038f0:	11004526 	beq	r2,r4,2003a08 <__subdf3+0x57c>
 20038f4:	01001004 	movi	r4,64
 20038f8:	2089c83a 	sub	r4,r4,r2
 20038fc:	2904983a 	sll	r2,r5,r4
 2003900:	118cb03a 	or	r6,r2,r6
 2003904:	300cc03a 	cmpne	r6,r6,zero
 2003908:	398cb03a 	or	r6,r7,r6
 200390c:	0005883a 	mov	r2,zero
 2003910:	003f3706 	br	20035f0 <__alt_mem_flash+0xfdff25f0>
 2003914:	80002a26 	beq	r16,zero,20039c0 <__subdf3+0x534>
 2003918:	0101ffc4 	movi	r4,2047
 200391c:	49006626 	beq	r9,r4,2003ab8 <__subdf3+0x62c>
 2003920:	0085c83a 	sub	r2,zero,r2
 2003924:	18c02034 	orhi	r3,r3,128
 2003928:	01000e04 	movi	r4,56
 200392c:	20807e16 	blt	r4,r2,2003b28 <__subdf3+0x69c>
 2003930:	010007c4 	movi	r4,31
 2003934:	2080e716 	blt	r4,r2,2003cd4 <__subdf3+0x848>
 2003938:	01000804 	movi	r4,32
 200393c:	2089c83a 	sub	r4,r4,r2
 2003940:	1914983a 	sll	r10,r3,r4
 2003944:	8890d83a 	srl	r8,r17,r2
 2003948:	8908983a 	sll	r4,r17,r4
 200394c:	1884d83a 	srl	r2,r3,r2
 2003950:	5222b03a 	or	r17,r10,r8
 2003954:	2006c03a 	cmpne	r3,r4,zero
 2003958:	88e2b03a 	or	r17,r17,r3
 200395c:	3463c83a 	sub	r17,r6,r17
 2003960:	2885c83a 	sub	r2,r5,r2
 2003964:	344d803a 	cmpltu	r6,r6,r17
 2003968:	1187c83a 	sub	r3,r2,r6
 200396c:	4821883a 	mov	r16,r9
 2003970:	3825883a 	mov	r18,r7
 2003974:	003f2306 	br	2003604 <__alt_mem_flash+0xfdff2604>
 2003978:	24d0b03a 	or	r8,r4,r19
 200397c:	40001b1e 	bne	r8,zero,20039ec <__subdf3+0x560>
 2003980:	0005883a 	mov	r2,zero
 2003984:	0009883a 	mov	r4,zero
 2003988:	0021883a 	mov	r16,zero
 200398c:	003f4906 	br	20036b4 <__alt_mem_flash+0xfdff26b4>
 2003990:	010007c4 	movi	r4,31
 2003994:	20803a16 	blt	r4,r2,2003a80 <__subdf3+0x5f4>
 2003998:	01000804 	movi	r4,32
 200399c:	2089c83a 	sub	r4,r4,r2
 20039a0:	2912983a 	sll	r9,r5,r4
 20039a4:	3090d83a 	srl	r8,r6,r2
 20039a8:	3108983a 	sll	r4,r6,r4
 20039ac:	2884d83a 	srl	r2,r5,r2
 20039b0:	4a12b03a 	or	r9,r9,r8
 20039b4:	2008c03a 	cmpne	r4,r4,zero
 20039b8:	4912b03a 	or	r9,r9,r4
 20039bc:	003f4e06 	br	20036f8 <__alt_mem_flash+0xfdff26f8>
 20039c0:	1c48b03a 	or	r4,r3,r17
 20039c4:	20003c26 	beq	r4,zero,2003ab8 <__subdf3+0x62c>
 20039c8:	0084303a 	nor	r2,zero,r2
 20039cc:	1000381e 	bne	r2,zero,2003ab0 <__subdf3+0x624>
 20039d0:	3463c83a 	sub	r17,r6,r17
 20039d4:	28c5c83a 	sub	r2,r5,r3
 20039d8:	344d803a 	cmpltu	r6,r6,r17
 20039dc:	1187c83a 	sub	r3,r2,r6
 20039e0:	4821883a 	mov	r16,r9
 20039e4:	3825883a 	mov	r18,r7
 20039e8:	003f0606 	br	2003604 <__alt_mem_flash+0xfdff2604>
 20039ec:	2023883a 	mov	r17,r4
 20039f0:	003f0906 	br	2003618 <__alt_mem_flash+0xfdff2618>
 20039f4:	0101ffc4 	movi	r4,2047
 20039f8:	813f3a1e 	bne	r16,r4,20036e4 <__alt_mem_flash+0xfdff26e4>
 20039fc:	003ec406 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003a00:	0005883a 	mov	r2,zero
 2003a04:	003fb106 	br	20038cc <__alt_mem_flash+0xfdff28cc>
 2003a08:	0005883a 	mov	r2,zero
 2003a0c:	003fbc06 	br	2003900 <__alt_mem_flash+0xfdff2900>
 2003a10:	1c44b03a 	or	r2,r3,r17
 2003a14:	80008e1e 	bne	r16,zero,2003c50 <__subdf3+0x7c4>
 2003a18:	1000c826 	beq	r2,zero,2003d3c <__subdf3+0x8b0>
 2003a1c:	2984b03a 	or	r2,r5,r6
 2003a20:	103ebb26 	beq	r2,zero,2003510 <__alt_mem_flash+0xfdff2510>
 2003a24:	8989883a 	add	r4,r17,r6
 2003a28:	1945883a 	add	r2,r3,r5
 2003a2c:	2447803a 	cmpltu	r3,r4,r17
 2003a30:	1887883a 	add	r3,r3,r2
 2003a34:	1880202c 	andhi	r2,r3,128
 2003a38:	2023883a 	mov	r17,r4
 2003a3c:	103f1626 	beq	r2,zero,2003698 <__alt_mem_flash+0xfdff2698>
 2003a40:	00bfe034 	movhi	r2,65408
 2003a44:	10bfffc4 	addi	r2,r2,-1
 2003a48:	5021883a 	mov	r16,r10
 2003a4c:	1886703a 	and	r3,r3,r2
 2003a50:	003eaf06 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003a54:	3825883a 	mov	r18,r7
 2003a58:	003f0f06 	br	2003698 <__alt_mem_flash+0xfdff2698>
 2003a5c:	1c44b03a 	or	r2,r3,r17
 2003a60:	8000251e 	bne	r16,zero,2003af8 <__subdf3+0x66c>
 2003a64:	1000661e 	bne	r2,zero,2003c00 <__subdf3+0x774>
 2003a68:	2990b03a 	or	r8,r5,r6
 2003a6c:	40009626 	beq	r8,zero,2003cc8 <__subdf3+0x83c>
 2003a70:	2807883a 	mov	r3,r5
 2003a74:	3023883a 	mov	r17,r6
 2003a78:	3825883a 	mov	r18,r7
 2003a7c:	003ea406 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003a80:	127ff804 	addi	r9,r2,-32
 2003a84:	01000804 	movi	r4,32
 2003a88:	2a52d83a 	srl	r9,r5,r9
 2003a8c:	11008c26 	beq	r2,r4,2003cc0 <__subdf3+0x834>
 2003a90:	01001004 	movi	r4,64
 2003a94:	2085c83a 	sub	r2,r4,r2
 2003a98:	2884983a 	sll	r2,r5,r2
 2003a9c:	118cb03a 	or	r6,r2,r6
 2003aa0:	300cc03a 	cmpne	r6,r6,zero
 2003aa4:	4992b03a 	or	r9,r9,r6
 2003aa8:	0005883a 	mov	r2,zero
 2003aac:	003f1206 	br	20036f8 <__alt_mem_flash+0xfdff26f8>
 2003ab0:	0101ffc4 	movi	r4,2047
 2003ab4:	493f9c1e 	bne	r9,r4,2003928 <__alt_mem_flash+0xfdff2928>
 2003ab8:	2807883a 	mov	r3,r5
 2003abc:	3023883a 	mov	r17,r6
 2003ac0:	4821883a 	mov	r16,r9
 2003ac4:	3825883a 	mov	r18,r7
 2003ac8:	003e9106 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003acc:	80001f1e 	bne	r16,zero,2003b4c <__subdf3+0x6c0>
 2003ad0:	1c48b03a 	or	r4,r3,r17
 2003ad4:	20005a26 	beq	r4,zero,2003c40 <__subdf3+0x7b4>
 2003ad8:	0084303a 	nor	r2,zero,r2
 2003adc:	1000561e 	bne	r2,zero,2003c38 <__subdf3+0x7ac>
 2003ae0:	89a3883a 	add	r17,r17,r6
 2003ae4:	1945883a 	add	r2,r3,r5
 2003ae8:	898d803a 	cmpltu	r6,r17,r6
 2003aec:	3087883a 	add	r3,r6,r2
 2003af0:	4821883a 	mov	r16,r9
 2003af4:	003f0506 	br	200370c <__alt_mem_flash+0xfdff270c>
 2003af8:	10002b1e 	bne	r2,zero,2003ba8 <__subdf3+0x71c>
 2003afc:	2984b03a 	or	r2,r5,r6
 2003b00:	10008026 	beq	r2,zero,2003d04 <__subdf3+0x878>
 2003b04:	2807883a 	mov	r3,r5
 2003b08:	3023883a 	mov	r17,r6
 2003b0c:	3825883a 	mov	r18,r7
 2003b10:	0401ffc4 	movi	r16,2047
 2003b14:	003e7e06 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003b18:	3809883a 	mov	r4,r7
 2003b1c:	0011883a 	mov	r8,zero
 2003b20:	0005883a 	mov	r2,zero
 2003b24:	003ee306 	br	20036b4 <__alt_mem_flash+0xfdff26b4>
 2003b28:	1c62b03a 	or	r17,r3,r17
 2003b2c:	8822c03a 	cmpne	r17,r17,zero
 2003b30:	0005883a 	mov	r2,zero
 2003b34:	003f8906 	br	200395c <__alt_mem_flash+0xfdff295c>
 2003b38:	3809883a 	mov	r4,r7
 2003b3c:	4821883a 	mov	r16,r9
 2003b40:	0011883a 	mov	r8,zero
 2003b44:	0005883a 	mov	r2,zero
 2003b48:	003eda06 	br	20036b4 <__alt_mem_flash+0xfdff26b4>
 2003b4c:	0101ffc4 	movi	r4,2047
 2003b50:	49003b26 	beq	r9,r4,2003c40 <__subdf3+0x7b4>
 2003b54:	0085c83a 	sub	r2,zero,r2
 2003b58:	18c02034 	orhi	r3,r3,128
 2003b5c:	01000e04 	movi	r4,56
 2003b60:	20806e16 	blt	r4,r2,2003d1c <__subdf3+0x890>
 2003b64:	010007c4 	movi	r4,31
 2003b68:	20807716 	blt	r4,r2,2003d48 <__subdf3+0x8bc>
 2003b6c:	01000804 	movi	r4,32
 2003b70:	2089c83a 	sub	r4,r4,r2
 2003b74:	1914983a 	sll	r10,r3,r4
 2003b78:	8890d83a 	srl	r8,r17,r2
 2003b7c:	8908983a 	sll	r4,r17,r4
 2003b80:	1884d83a 	srl	r2,r3,r2
 2003b84:	5222b03a 	or	r17,r10,r8
 2003b88:	2006c03a 	cmpne	r3,r4,zero
 2003b8c:	88e2b03a 	or	r17,r17,r3
 2003b90:	89a3883a 	add	r17,r17,r6
 2003b94:	1145883a 	add	r2,r2,r5
 2003b98:	898d803a 	cmpltu	r6,r17,r6
 2003b9c:	3087883a 	add	r3,r6,r2
 2003ba0:	4821883a 	mov	r16,r9
 2003ba4:	003ed906 	br	200370c <__alt_mem_flash+0xfdff270c>
 2003ba8:	2984b03a 	or	r2,r5,r6
 2003bac:	10004226 	beq	r2,zero,2003cb8 <__subdf3+0x82c>
 2003bb0:	1808d0fa 	srli	r4,r3,3
 2003bb4:	8822d0fa 	srli	r17,r17,3
 2003bb8:	1806977a 	slli	r3,r3,29
 2003bbc:	2080022c 	andhi	r2,r4,8
 2003bc0:	1c62b03a 	or	r17,r3,r17
 2003bc4:	10000826 	beq	r2,zero,2003be8 <__subdf3+0x75c>
 2003bc8:	2812d0fa 	srli	r9,r5,3
 2003bcc:	4880022c 	andhi	r2,r9,8
 2003bd0:	1000051e 	bne	r2,zero,2003be8 <__subdf3+0x75c>
 2003bd4:	300cd0fa 	srli	r6,r6,3
 2003bd8:	2804977a 	slli	r2,r5,29
 2003bdc:	4809883a 	mov	r4,r9
 2003be0:	3825883a 	mov	r18,r7
 2003be4:	11a2b03a 	or	r17,r2,r6
 2003be8:	8806d77a 	srli	r3,r17,29
 2003bec:	200890fa 	slli	r4,r4,3
 2003bf0:	882290fa 	slli	r17,r17,3
 2003bf4:	0401ffc4 	movi	r16,2047
 2003bf8:	1906b03a 	or	r3,r3,r4
 2003bfc:	003e4406 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003c00:	2984b03a 	or	r2,r5,r6
 2003c04:	103e4226 	beq	r2,zero,2003510 <__alt_mem_flash+0xfdff2510>
 2003c08:	8989c83a 	sub	r4,r17,r6
 2003c0c:	8911803a 	cmpltu	r8,r17,r4
 2003c10:	1945c83a 	sub	r2,r3,r5
 2003c14:	1205c83a 	sub	r2,r2,r8
 2003c18:	1200202c 	andhi	r8,r2,128
 2003c1c:	403e9a26 	beq	r8,zero,2003688 <__alt_mem_flash+0xfdff2688>
 2003c20:	3463c83a 	sub	r17,r6,r17
 2003c24:	28c5c83a 	sub	r2,r5,r3
 2003c28:	344d803a 	cmpltu	r6,r6,r17
 2003c2c:	1187c83a 	sub	r3,r2,r6
 2003c30:	3825883a 	mov	r18,r7
 2003c34:	003e3606 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003c38:	0101ffc4 	movi	r4,2047
 2003c3c:	493fc71e 	bne	r9,r4,2003b5c <__alt_mem_flash+0xfdff2b5c>
 2003c40:	2807883a 	mov	r3,r5
 2003c44:	3023883a 	mov	r17,r6
 2003c48:	4821883a 	mov	r16,r9
 2003c4c:	003e3006 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003c50:	10003626 	beq	r2,zero,2003d2c <__subdf3+0x8a0>
 2003c54:	2984b03a 	or	r2,r5,r6
 2003c58:	10001726 	beq	r2,zero,2003cb8 <__subdf3+0x82c>
 2003c5c:	1808d0fa 	srli	r4,r3,3
 2003c60:	8822d0fa 	srli	r17,r17,3
 2003c64:	1806977a 	slli	r3,r3,29
 2003c68:	2080022c 	andhi	r2,r4,8
 2003c6c:	1c62b03a 	or	r17,r3,r17
 2003c70:	10000726 	beq	r2,zero,2003c90 <__subdf3+0x804>
 2003c74:	2812d0fa 	srli	r9,r5,3
 2003c78:	4880022c 	andhi	r2,r9,8
 2003c7c:	1000041e 	bne	r2,zero,2003c90 <__subdf3+0x804>
 2003c80:	300cd0fa 	srli	r6,r6,3
 2003c84:	2804977a 	slli	r2,r5,29
 2003c88:	4809883a 	mov	r4,r9
 2003c8c:	11a2b03a 	or	r17,r2,r6
 2003c90:	8806d77a 	srli	r3,r17,29
 2003c94:	200890fa 	slli	r4,r4,3
 2003c98:	882290fa 	slli	r17,r17,3
 2003c9c:	3825883a 	mov	r18,r7
 2003ca0:	1906b03a 	or	r3,r3,r4
 2003ca4:	0401ffc4 	movi	r16,2047
 2003ca8:	003e1906 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003cac:	000b883a 	mov	r5,zero
 2003cb0:	0005883a 	mov	r2,zero
 2003cb4:	003e2e06 	br	2003570 <__alt_mem_flash+0xfdff2570>
 2003cb8:	0401ffc4 	movi	r16,2047
 2003cbc:	003e1406 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003cc0:	0005883a 	mov	r2,zero
 2003cc4:	003f7506 	br	2003a9c <__alt_mem_flash+0xfdff2a9c>
 2003cc8:	0005883a 	mov	r2,zero
 2003ccc:	0009883a 	mov	r4,zero
 2003cd0:	003e7806 	br	20036b4 <__alt_mem_flash+0xfdff26b4>
 2003cd4:	123ff804 	addi	r8,r2,-32
 2003cd8:	01000804 	movi	r4,32
 2003cdc:	1a10d83a 	srl	r8,r3,r8
 2003ce0:	11002526 	beq	r2,r4,2003d78 <__subdf3+0x8ec>
 2003ce4:	01001004 	movi	r4,64
 2003ce8:	2085c83a 	sub	r2,r4,r2
 2003cec:	1884983a 	sll	r2,r3,r2
 2003cf0:	1444b03a 	or	r2,r2,r17
 2003cf4:	1004c03a 	cmpne	r2,r2,zero
 2003cf8:	40a2b03a 	or	r17,r8,r2
 2003cfc:	0005883a 	mov	r2,zero
 2003d00:	003f1606 	br	200395c <__alt_mem_flash+0xfdff295c>
 2003d04:	02000434 	movhi	r8,16
 2003d08:	0009883a 	mov	r4,zero
 2003d0c:	423fffc4 	addi	r8,r8,-1
 2003d10:	00bfffc4 	movi	r2,-1
 2003d14:	0401ffc4 	movi	r16,2047
 2003d18:	003e6606 	br	20036b4 <__alt_mem_flash+0xfdff26b4>
 2003d1c:	1c62b03a 	or	r17,r3,r17
 2003d20:	8822c03a 	cmpne	r17,r17,zero
 2003d24:	0005883a 	mov	r2,zero
 2003d28:	003f9906 	br	2003b90 <__alt_mem_flash+0xfdff2b90>
 2003d2c:	2807883a 	mov	r3,r5
 2003d30:	3023883a 	mov	r17,r6
 2003d34:	0401ffc4 	movi	r16,2047
 2003d38:	003df506 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003d3c:	2807883a 	mov	r3,r5
 2003d40:	3023883a 	mov	r17,r6
 2003d44:	003df206 	br	2003510 <__alt_mem_flash+0xfdff2510>
 2003d48:	123ff804 	addi	r8,r2,-32
 2003d4c:	01000804 	movi	r4,32
 2003d50:	1a10d83a 	srl	r8,r3,r8
 2003d54:	11000a26 	beq	r2,r4,2003d80 <__subdf3+0x8f4>
 2003d58:	01001004 	movi	r4,64
 2003d5c:	2085c83a 	sub	r2,r4,r2
 2003d60:	1884983a 	sll	r2,r3,r2
 2003d64:	1444b03a 	or	r2,r2,r17
 2003d68:	1004c03a 	cmpne	r2,r2,zero
 2003d6c:	40a2b03a 	or	r17,r8,r2
 2003d70:	0005883a 	mov	r2,zero
 2003d74:	003f8606 	br	2003b90 <__alt_mem_flash+0xfdff2b90>
 2003d78:	0005883a 	mov	r2,zero
 2003d7c:	003fdc06 	br	2003cf0 <__alt_mem_flash+0xfdff2cf0>
 2003d80:	0005883a 	mov	r2,zero
 2003d84:	003ff706 	br	2003d64 <__alt_mem_flash+0xfdff2d64>

02003d88 <__floatsidf>:
 2003d88:	defffd04 	addi	sp,sp,-12
 2003d8c:	dfc00215 	stw	ra,8(sp)
 2003d90:	dc400115 	stw	r17,4(sp)
 2003d94:	dc000015 	stw	r16,0(sp)
 2003d98:	20002b26 	beq	r4,zero,2003e48 <__floatsidf+0xc0>
 2003d9c:	2023883a 	mov	r17,r4
 2003da0:	2020d7fa 	srli	r16,r4,31
 2003da4:	20002d16 	blt	r4,zero,2003e5c <__floatsidf+0xd4>
 2003da8:	8809883a 	mov	r4,r17
 2003dac:	200411c0 	call	200411c <__clzsi2>
 2003db0:	01410784 	movi	r5,1054
 2003db4:	288bc83a 	sub	r5,r5,r2
 2003db8:	01010cc4 	movi	r4,1075
 2003dbc:	2149c83a 	sub	r4,r4,r5
 2003dc0:	00c007c4 	movi	r3,31
 2003dc4:	1900160e 	bge	r3,r4,2003e20 <__floatsidf+0x98>
 2003dc8:	00c104c4 	movi	r3,1043
 2003dcc:	1947c83a 	sub	r3,r3,r5
 2003dd0:	88c6983a 	sll	r3,r17,r3
 2003dd4:	00800434 	movhi	r2,16
 2003dd8:	10bfffc4 	addi	r2,r2,-1
 2003ddc:	1886703a 	and	r3,r3,r2
 2003de0:	2941ffcc 	andi	r5,r5,2047
 2003de4:	800d883a 	mov	r6,r16
 2003de8:	0005883a 	mov	r2,zero
 2003dec:	280a953a 	slli	r5,r5,20
 2003df0:	31803fcc 	andi	r6,r6,255
 2003df4:	01000434 	movhi	r4,16
 2003df8:	300c97fa 	slli	r6,r6,31
 2003dfc:	213fffc4 	addi	r4,r4,-1
 2003e00:	1906703a 	and	r3,r3,r4
 2003e04:	1946b03a 	or	r3,r3,r5
 2003e08:	1986b03a 	or	r3,r3,r6
 2003e0c:	dfc00217 	ldw	ra,8(sp)
 2003e10:	dc400117 	ldw	r17,4(sp)
 2003e14:	dc000017 	ldw	r16,0(sp)
 2003e18:	dec00304 	addi	sp,sp,12
 2003e1c:	f800283a 	ret
 2003e20:	00c002c4 	movi	r3,11
 2003e24:	1887c83a 	sub	r3,r3,r2
 2003e28:	88c6d83a 	srl	r3,r17,r3
 2003e2c:	8904983a 	sll	r2,r17,r4
 2003e30:	01000434 	movhi	r4,16
 2003e34:	213fffc4 	addi	r4,r4,-1
 2003e38:	2941ffcc 	andi	r5,r5,2047
 2003e3c:	1906703a 	and	r3,r3,r4
 2003e40:	800d883a 	mov	r6,r16
 2003e44:	003fe906 	br	2003dec <__alt_mem_flash+0xfdff2dec>
 2003e48:	000d883a 	mov	r6,zero
 2003e4c:	000b883a 	mov	r5,zero
 2003e50:	0007883a 	mov	r3,zero
 2003e54:	0005883a 	mov	r2,zero
 2003e58:	003fe406 	br	2003dec <__alt_mem_flash+0xfdff2dec>
 2003e5c:	0123c83a 	sub	r17,zero,r4
 2003e60:	003fd106 	br	2003da8 <__alt_mem_flash+0xfdff2da8>

02003e64 <__extendsfdf2>:
 2003e64:	200ad5fa 	srli	r5,r4,23
 2003e68:	defffd04 	addi	sp,sp,-12
 2003e6c:	dc400115 	stw	r17,4(sp)
 2003e70:	29403fcc 	andi	r5,r5,255
 2003e74:	29800044 	addi	r6,r5,1
 2003e78:	04402034 	movhi	r17,128
 2003e7c:	dc000015 	stw	r16,0(sp)
 2003e80:	8c7fffc4 	addi	r17,r17,-1
 2003e84:	dfc00215 	stw	ra,8(sp)
 2003e88:	31803fcc 	andi	r6,r6,255
 2003e8c:	00800044 	movi	r2,1
 2003e90:	8922703a 	and	r17,r17,r4
 2003e94:	2020d7fa 	srli	r16,r4,31
 2003e98:	1180110e 	bge	r2,r6,2003ee0 <__extendsfdf2+0x7c>
 2003e9c:	880cd0fa 	srli	r6,r17,3
 2003ea0:	8822977a 	slli	r17,r17,29
 2003ea4:	2940e004 	addi	r5,r5,896
 2003ea8:	2941ffcc 	andi	r5,r5,2047
 2003eac:	2804953a 	slli	r2,r5,20
 2003eb0:	01400434 	movhi	r5,16
 2003eb4:	800697fa 	slli	r3,r16,31
 2003eb8:	297fffc4 	addi	r5,r5,-1
 2003ebc:	314a703a 	and	r5,r6,r5
 2003ec0:	288ab03a 	or	r5,r5,r2
 2003ec4:	28c6b03a 	or	r3,r5,r3
 2003ec8:	8805883a 	mov	r2,r17
 2003ecc:	dfc00217 	ldw	ra,8(sp)
 2003ed0:	dc400117 	ldw	r17,4(sp)
 2003ed4:	dc000017 	ldw	r16,0(sp)
 2003ed8:	dec00304 	addi	sp,sp,12
 2003edc:	f800283a 	ret
 2003ee0:	2800111e 	bne	r5,zero,2003f28 <__extendsfdf2+0xc4>
 2003ee4:	88001c26 	beq	r17,zero,2003f58 <__extendsfdf2+0xf4>
 2003ee8:	8809883a 	mov	r4,r17
 2003eec:	200411c0 	call	200411c <__clzsi2>
 2003ef0:	00c00284 	movi	r3,10
 2003ef4:	18801b16 	blt	r3,r2,2003f64 <__extendsfdf2+0x100>
 2003ef8:	018002c4 	movi	r6,11
 2003efc:	308dc83a 	sub	r6,r6,r2
 2003f00:	11000544 	addi	r4,r2,21
 2003f04:	8986d83a 	srl	r3,r17,r6
 2003f08:	8922983a 	sll	r17,r17,r4
 2003f0c:	0180e244 	movi	r6,905
 2003f10:	01400434 	movhi	r5,16
 2003f14:	3085c83a 	sub	r2,r6,r2
 2003f18:	297fffc4 	addi	r5,r5,-1
 2003f1c:	194c703a 	and	r6,r3,r5
 2003f20:	1141ffcc 	andi	r5,r2,2047
 2003f24:	003fe006 	br	2003ea8 <__alt_mem_flash+0xfdff2ea8>
 2003f28:	88000826 	beq	r17,zero,2003f4c <__extendsfdf2+0xe8>
 2003f2c:	880cd0fa 	srli	r6,r17,3
 2003f30:	00800434 	movhi	r2,16
 2003f34:	10bfffc4 	addi	r2,r2,-1
 2003f38:	31800234 	orhi	r6,r6,8
 2003f3c:	8822977a 	slli	r17,r17,29
 2003f40:	308c703a 	and	r6,r6,r2
 2003f44:	0141ffc4 	movi	r5,2047
 2003f48:	003fd706 	br	2003ea8 <__alt_mem_flash+0xfdff2ea8>
 2003f4c:	0141ffc4 	movi	r5,2047
 2003f50:	000d883a 	mov	r6,zero
 2003f54:	003fd406 	br	2003ea8 <__alt_mem_flash+0xfdff2ea8>
 2003f58:	000b883a 	mov	r5,zero
 2003f5c:	000d883a 	mov	r6,zero
 2003f60:	003fd106 	br	2003ea8 <__alt_mem_flash+0xfdff2ea8>
 2003f64:	11bffd44 	addi	r6,r2,-11
 2003f68:	8986983a 	sll	r3,r17,r6
 2003f6c:	0023883a 	mov	r17,zero
 2003f70:	003fe606 	br	2003f0c <__alt_mem_flash+0xfdff2f0c>

02003f74 <__truncdfsf2>:
 2003f74:	2810d53a 	srli	r8,r5,20
 2003f78:	01c00434 	movhi	r7,16
 2003f7c:	39ffffc4 	addi	r7,r7,-1
 2003f80:	29ce703a 	and	r7,r5,r7
 2003f84:	4201ffcc 	andi	r8,r8,2047
 2003f88:	380e90fa 	slli	r7,r7,3
 2003f8c:	200cd77a 	srli	r6,r4,29
 2003f90:	42400044 	addi	r9,r8,1
 2003f94:	4a41ffcc 	andi	r9,r9,2047
 2003f98:	00c00044 	movi	r3,1
 2003f9c:	280ad7fa 	srli	r5,r5,31
 2003fa0:	31ceb03a 	or	r7,r6,r7
 2003fa4:	200490fa 	slli	r2,r4,3
 2003fa8:	1a40230e 	bge	r3,r9,2004038 <__truncdfsf2+0xc4>
 2003fac:	40ff2004 	addi	r3,r8,-896
 2003fb0:	01803f84 	movi	r6,254
 2003fb4:	30c01516 	blt	r6,r3,200400c <__truncdfsf2+0x98>
 2003fb8:	00c0380e 	bge	zero,r3,200409c <__truncdfsf2+0x128>
 2003fbc:	200c91ba 	slli	r6,r4,6
 2003fc0:	380e90fa 	slli	r7,r7,3
 2003fc4:	1004d77a 	srli	r2,r2,29
 2003fc8:	300cc03a 	cmpne	r6,r6,zero
 2003fcc:	31ccb03a 	or	r6,r6,r7
 2003fd0:	308cb03a 	or	r6,r6,r2
 2003fd4:	308001cc 	andi	r2,r6,7
 2003fd8:	10000426 	beq	r2,zero,2003fec <__truncdfsf2+0x78>
 2003fdc:	308003cc 	andi	r2,r6,15
 2003fe0:	01000104 	movi	r4,4
 2003fe4:	11000126 	beq	r2,r4,2003fec <__truncdfsf2+0x78>
 2003fe8:	31800104 	addi	r6,r6,4
 2003fec:	3081002c 	andhi	r2,r6,1024
 2003ff0:	10001626 	beq	r2,zero,200404c <__truncdfsf2+0xd8>
 2003ff4:	18c00044 	addi	r3,r3,1
 2003ff8:	00803fc4 	movi	r2,255
 2003ffc:	18800326 	beq	r3,r2,200400c <__truncdfsf2+0x98>
 2004000:	300c91ba 	slli	r6,r6,6
 2004004:	300cd27a 	srli	r6,r6,9
 2004008:	00000206 	br	2004014 <__truncdfsf2+0xa0>
 200400c:	00ffffc4 	movi	r3,-1
 2004010:	000d883a 	mov	r6,zero
 2004014:	18c03fcc 	andi	r3,r3,255
 2004018:	180895fa 	slli	r4,r3,23
 200401c:	00c02034 	movhi	r3,128
 2004020:	280a97fa 	slli	r5,r5,31
 2004024:	18ffffc4 	addi	r3,r3,-1
 2004028:	30c6703a 	and	r3,r6,r3
 200402c:	1906b03a 	or	r3,r3,r4
 2004030:	1944b03a 	or	r2,r3,r5
 2004034:	f800283a 	ret
 2004038:	40000b1e 	bne	r8,zero,2004068 <__truncdfsf2+0xf4>
 200403c:	388cb03a 	or	r6,r7,r2
 2004040:	0007883a 	mov	r3,zero
 2004044:	30000426 	beq	r6,zero,2004058 <__truncdfsf2+0xe4>
 2004048:	01800144 	movi	r6,5
 200404c:	00803fc4 	movi	r2,255
 2004050:	300cd0fa 	srli	r6,r6,3
 2004054:	18800a26 	beq	r3,r2,2004080 <__truncdfsf2+0x10c>
 2004058:	00802034 	movhi	r2,128
 200405c:	10bfffc4 	addi	r2,r2,-1
 2004060:	308c703a 	and	r6,r6,r2
 2004064:	003feb06 	br	2004014 <__alt_mem_flash+0xfdff3014>
 2004068:	3888b03a 	or	r4,r7,r2
 200406c:	203fe726 	beq	r4,zero,200400c <__alt_mem_flash+0xfdff300c>
 2004070:	380c90fa 	slli	r6,r7,3
 2004074:	00c03fc4 	movi	r3,255
 2004078:	31808034 	orhi	r6,r6,512
 200407c:	003fd506 	br	2003fd4 <__alt_mem_flash+0xfdff2fd4>
 2004080:	303fe226 	beq	r6,zero,200400c <__alt_mem_flash+0xfdff300c>
 2004084:	00802034 	movhi	r2,128
 2004088:	31801034 	orhi	r6,r6,64
 200408c:	10bfffc4 	addi	r2,r2,-1
 2004090:	00ffffc4 	movi	r3,-1
 2004094:	308c703a 	and	r6,r6,r2
 2004098:	003fde06 	br	2004014 <__alt_mem_flash+0xfdff3014>
 200409c:	013ffa44 	movi	r4,-23
 20040a0:	19000e16 	blt	r3,r4,20040dc <__truncdfsf2+0x168>
 20040a4:	01000784 	movi	r4,30
 20040a8:	20c9c83a 	sub	r4,r4,r3
 20040ac:	018007c4 	movi	r6,31
 20040b0:	39c02034 	orhi	r7,r7,128
 20040b4:	31000b16 	blt	r6,r4,20040e4 <__truncdfsf2+0x170>
 20040b8:	423f2084 	addi	r8,r8,-894
 20040bc:	120c983a 	sll	r6,r2,r8
 20040c0:	3a0e983a 	sll	r7,r7,r8
 20040c4:	1104d83a 	srl	r2,r2,r4
 20040c8:	300cc03a 	cmpne	r6,r6,zero
 20040cc:	31ceb03a 	or	r7,r6,r7
 20040d0:	388cb03a 	or	r6,r7,r2
 20040d4:	0007883a 	mov	r3,zero
 20040d8:	003fbe06 	br	2003fd4 <__alt_mem_flash+0xfdff2fd4>
 20040dc:	0007883a 	mov	r3,zero
 20040e0:	003fd906 	br	2004048 <__alt_mem_flash+0xfdff3048>
 20040e4:	01bfff84 	movi	r6,-2
 20040e8:	30cdc83a 	sub	r6,r6,r3
 20040ec:	00c00804 	movi	r3,32
 20040f0:	398cd83a 	srl	r6,r7,r6
 20040f4:	20c00726 	beq	r4,r3,2004114 <__truncdfsf2+0x1a0>
 20040f8:	423f2884 	addi	r8,r8,-862
 20040fc:	3a0e983a 	sll	r7,r7,r8
 2004100:	3884b03a 	or	r2,r7,r2
 2004104:	1004c03a 	cmpne	r2,r2,zero
 2004108:	118cb03a 	or	r6,r2,r6
 200410c:	0007883a 	mov	r3,zero
 2004110:	003fb006 	br	2003fd4 <__alt_mem_flash+0xfdff2fd4>
 2004114:	000f883a 	mov	r7,zero
 2004118:	003ff906 	br	2004100 <__alt_mem_flash+0xfdff3100>

0200411c <__clzsi2>:
 200411c:	00bfffd4 	movui	r2,65535
 2004120:	11000536 	bltu	r2,r4,2004138 <__clzsi2+0x1c>
 2004124:	00803fc4 	movi	r2,255
 2004128:	11000f36 	bltu	r2,r4,2004168 <__clzsi2+0x4c>
 200412c:	00800804 	movi	r2,32
 2004130:	0007883a 	mov	r3,zero
 2004134:	00000506 	br	200414c <__clzsi2+0x30>
 2004138:	00804034 	movhi	r2,256
 200413c:	10bfffc4 	addi	r2,r2,-1
 2004140:	11000c2e 	bgeu	r2,r4,2004174 <__clzsi2+0x58>
 2004144:	00800204 	movi	r2,8
 2004148:	00c00604 	movi	r3,24
 200414c:	20c8d83a 	srl	r4,r4,r3
 2004150:	00c08074 	movhi	r3,513
 2004154:	18e14944 	addi	r3,r3,-31451
 2004158:	1909883a 	add	r4,r3,r4
 200415c:	20c00003 	ldbu	r3,0(r4)
 2004160:	10c5c83a 	sub	r2,r2,r3
 2004164:	f800283a 	ret
 2004168:	00800604 	movi	r2,24
 200416c:	00c00204 	movi	r3,8
 2004170:	003ff606 	br	200414c <__alt_mem_flash+0xfdff314c>
 2004174:	00800404 	movi	r2,16
 2004178:	1007883a 	mov	r3,r2
 200417c:	003ff306 	br	200414c <__alt_mem_flash+0xfdff314c>

02004180 <__divsi3>:
 2004180:	20001b16 	blt	r4,zero,20041f0 <__divsi3+0x70>
 2004184:	000f883a 	mov	r7,zero
 2004188:	28001616 	blt	r5,zero,20041e4 <__divsi3+0x64>
 200418c:	200d883a 	mov	r6,r4
 2004190:	29001a2e 	bgeu	r5,r4,20041fc <__divsi3+0x7c>
 2004194:	00800804 	movi	r2,32
 2004198:	00c00044 	movi	r3,1
 200419c:	00000106 	br	20041a4 <__divsi3+0x24>
 20041a0:	10000d26 	beq	r2,zero,20041d8 <__divsi3+0x58>
 20041a4:	294b883a 	add	r5,r5,r5
 20041a8:	10bfffc4 	addi	r2,r2,-1
 20041ac:	18c7883a 	add	r3,r3,r3
 20041b0:	293ffb36 	bltu	r5,r4,20041a0 <__alt_mem_flash+0xfdff31a0>
 20041b4:	0005883a 	mov	r2,zero
 20041b8:	18000726 	beq	r3,zero,20041d8 <__divsi3+0x58>
 20041bc:	0005883a 	mov	r2,zero
 20041c0:	31400236 	bltu	r6,r5,20041cc <__divsi3+0x4c>
 20041c4:	314dc83a 	sub	r6,r6,r5
 20041c8:	10c4b03a 	or	r2,r2,r3
 20041cc:	1806d07a 	srli	r3,r3,1
 20041d0:	280ad07a 	srli	r5,r5,1
 20041d4:	183ffa1e 	bne	r3,zero,20041c0 <__alt_mem_flash+0xfdff31c0>
 20041d8:	38000126 	beq	r7,zero,20041e0 <__divsi3+0x60>
 20041dc:	0085c83a 	sub	r2,zero,r2
 20041e0:	f800283a 	ret
 20041e4:	014bc83a 	sub	r5,zero,r5
 20041e8:	39c0005c 	xori	r7,r7,1
 20041ec:	003fe706 	br	200418c <__alt_mem_flash+0xfdff318c>
 20041f0:	0109c83a 	sub	r4,zero,r4
 20041f4:	01c00044 	movi	r7,1
 20041f8:	003fe306 	br	2004188 <__alt_mem_flash+0xfdff3188>
 20041fc:	00c00044 	movi	r3,1
 2004200:	003fee06 	br	20041bc <__alt_mem_flash+0xfdff31bc>

02004204 <__modsi3>:
 2004204:	20001716 	blt	r4,zero,2004264 <__modsi3+0x60>
 2004208:	000f883a 	mov	r7,zero
 200420c:	2005883a 	mov	r2,r4
 2004210:	28001216 	blt	r5,zero,200425c <__modsi3+0x58>
 2004214:	2900162e 	bgeu	r5,r4,2004270 <__modsi3+0x6c>
 2004218:	01800804 	movi	r6,32
 200421c:	00c00044 	movi	r3,1
 2004220:	00000106 	br	2004228 <__modsi3+0x24>
 2004224:	30000a26 	beq	r6,zero,2004250 <__modsi3+0x4c>
 2004228:	294b883a 	add	r5,r5,r5
 200422c:	31bfffc4 	addi	r6,r6,-1
 2004230:	18c7883a 	add	r3,r3,r3
 2004234:	293ffb36 	bltu	r5,r4,2004224 <__alt_mem_flash+0xfdff3224>
 2004238:	18000526 	beq	r3,zero,2004250 <__modsi3+0x4c>
 200423c:	1806d07a 	srli	r3,r3,1
 2004240:	11400136 	bltu	r2,r5,2004248 <__modsi3+0x44>
 2004244:	1145c83a 	sub	r2,r2,r5
 2004248:	280ad07a 	srli	r5,r5,1
 200424c:	183ffb1e 	bne	r3,zero,200423c <__alt_mem_flash+0xfdff323c>
 2004250:	38000126 	beq	r7,zero,2004258 <__modsi3+0x54>
 2004254:	0085c83a 	sub	r2,zero,r2
 2004258:	f800283a 	ret
 200425c:	014bc83a 	sub	r5,zero,r5
 2004260:	003fec06 	br	2004214 <__alt_mem_flash+0xfdff3214>
 2004264:	0109c83a 	sub	r4,zero,r4
 2004268:	01c00044 	movi	r7,1
 200426c:	003fe706 	br	200420c <__alt_mem_flash+0xfdff320c>
 2004270:	00c00044 	movi	r3,1
 2004274:	003ff106 	br	200423c <__alt_mem_flash+0xfdff323c>

02004278 <__udivsi3>:
 2004278:	200d883a 	mov	r6,r4
 200427c:	2900152e 	bgeu	r5,r4,20042d4 <__udivsi3+0x5c>
 2004280:	28001416 	blt	r5,zero,20042d4 <__udivsi3+0x5c>
 2004284:	00800804 	movi	r2,32
 2004288:	00c00044 	movi	r3,1
 200428c:	00000206 	br	2004298 <__udivsi3+0x20>
 2004290:	10000e26 	beq	r2,zero,20042cc <__udivsi3+0x54>
 2004294:	28000516 	blt	r5,zero,20042ac <__udivsi3+0x34>
 2004298:	294b883a 	add	r5,r5,r5
 200429c:	10bfffc4 	addi	r2,r2,-1
 20042a0:	18c7883a 	add	r3,r3,r3
 20042a4:	293ffa36 	bltu	r5,r4,2004290 <__alt_mem_flash+0xfdff3290>
 20042a8:	18000826 	beq	r3,zero,20042cc <__udivsi3+0x54>
 20042ac:	0005883a 	mov	r2,zero
 20042b0:	31400236 	bltu	r6,r5,20042bc <__udivsi3+0x44>
 20042b4:	314dc83a 	sub	r6,r6,r5
 20042b8:	10c4b03a 	or	r2,r2,r3
 20042bc:	1806d07a 	srli	r3,r3,1
 20042c0:	280ad07a 	srli	r5,r5,1
 20042c4:	183ffa1e 	bne	r3,zero,20042b0 <__alt_mem_flash+0xfdff32b0>
 20042c8:	f800283a 	ret
 20042cc:	0005883a 	mov	r2,zero
 20042d0:	f800283a 	ret
 20042d4:	00c00044 	movi	r3,1
 20042d8:	003ff406 	br	20042ac <__alt_mem_flash+0xfdff32ac>

020042dc <__umodsi3>:
 20042dc:	2005883a 	mov	r2,r4
 20042e0:	2900122e 	bgeu	r5,r4,200432c <__umodsi3+0x50>
 20042e4:	28001116 	blt	r5,zero,200432c <__umodsi3+0x50>
 20042e8:	01800804 	movi	r6,32
 20042ec:	00c00044 	movi	r3,1
 20042f0:	00000206 	br	20042fc <__umodsi3+0x20>
 20042f4:	30000c26 	beq	r6,zero,2004328 <__umodsi3+0x4c>
 20042f8:	28000516 	blt	r5,zero,2004310 <__umodsi3+0x34>
 20042fc:	294b883a 	add	r5,r5,r5
 2004300:	31bfffc4 	addi	r6,r6,-1
 2004304:	18c7883a 	add	r3,r3,r3
 2004308:	293ffa36 	bltu	r5,r4,20042f4 <__alt_mem_flash+0xfdff32f4>
 200430c:	18000626 	beq	r3,zero,2004328 <__umodsi3+0x4c>
 2004310:	1806d07a 	srli	r3,r3,1
 2004314:	11400136 	bltu	r2,r5,200431c <__umodsi3+0x40>
 2004318:	1145c83a 	sub	r2,r2,r5
 200431c:	280ad07a 	srli	r5,r5,1
 2004320:	183ffb1e 	bne	r3,zero,2004310 <__alt_mem_flash+0xfdff3310>
 2004324:	f800283a 	ret
 2004328:	f800283a 	ret
 200432c:	00c00044 	movi	r3,1
 2004330:	003ff706 	br	2004310 <__alt_mem_flash+0xfdff3310>

02004334 <__errno>:
 2004334:	00808074 	movhi	r2,513
 2004338:	10a79d04 	addi	r2,r2,-24972
 200433c:	10800017 	ldw	r2,0(r2)
 2004340:	f800283a 	ret

02004344 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2004344:	defffc04 	addi	sp,sp,-16
 2004348:	df000315 	stw	fp,12(sp)
 200434c:	df000304 	addi	fp,sp,12
 2004350:	e13ffd15 	stw	r4,-12(fp)
 2004354:	e17ffe15 	stw	r5,-8(fp)
 2004358:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200435c:	e0fffe17 	ldw	r3,-8(fp)
 2004360:	e0bffd17 	ldw	r2,-12(fp)
 2004364:	18800c26 	beq	r3,r2,2004398 <alt_load_section+0x54>
  {
    while( to != end )
 2004368:	00000806 	br	200438c <alt_load_section+0x48>
    {
      *to++ = *from++;
 200436c:	e0bffe17 	ldw	r2,-8(fp)
 2004370:	10c00104 	addi	r3,r2,4
 2004374:	e0fffe15 	stw	r3,-8(fp)
 2004378:	e0fffd17 	ldw	r3,-12(fp)
 200437c:	19000104 	addi	r4,r3,4
 2004380:	e13ffd15 	stw	r4,-12(fp)
 2004384:	18c00017 	ldw	r3,0(r3)
 2004388:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200438c:	e0fffe17 	ldw	r3,-8(fp)
 2004390:	e0bfff17 	ldw	r2,-4(fp)
 2004394:	18bff51e 	bne	r3,r2,200436c <__alt_mem_flash+0xfdff336c>
    {
      *to++ = *from++;
    }
  }
}
 2004398:	0001883a 	nop
 200439c:	e037883a 	mov	sp,fp
 20043a0:	df000017 	ldw	fp,0(sp)
 20043a4:	dec00104 	addi	sp,sp,4
 20043a8:	f800283a 	ret

020043ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 20043ac:	defffe04 	addi	sp,sp,-8
 20043b0:	dfc00115 	stw	ra,4(sp)
 20043b4:	df000015 	stw	fp,0(sp)
 20043b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20043bc:	01808074 	movhi	r6,513
 20043c0:	31a7a904 	addi	r6,r6,-24924
 20043c4:	01408074 	movhi	r5,513
 20043c8:	2961a104 	addi	r5,r5,-31100
 20043cc:	01008074 	movhi	r4,513
 20043d0:	2127a904 	addi	r4,r4,-24924
 20043d4:	20043440 	call	2004344 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 20043d8:	01800074 	movhi	r6,1
 20043dc:	31a0c404 	addi	r6,r6,-31984
 20043e0:	01400074 	movhi	r5,1
 20043e4:	29604004 	addi	r5,r5,-32512
 20043e8:	01000074 	movhi	r4,1
 20043ec:	21204004 	addi	r4,r4,-32512
 20043f0:	20043440 	call	2004344 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20043f4:	01808074 	movhi	r6,513
 20043f8:	31a1a104 	addi	r6,r6,-31100
 20043fc:	01408074 	movhi	r5,513
 2004400:	29614504 	addi	r5,r5,-31468
 2004404:	01008074 	movhi	r4,513
 2004408:	21214504 	addi	r4,r4,-31468
 200440c:	20043440 	call	2004344 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2004410:	20071100 	call	2007110 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2004414:	20074480 	call	2007448 <alt_icache_flush_all>
}
 2004418:	0001883a 	nop
 200441c:	e037883a 	mov	sp,fp
 2004420:	dfc00117 	ldw	ra,4(sp)
 2004424:	df000017 	ldw	fp,0(sp)
 2004428:	dec00204 	addi	sp,sp,8
 200442c:	f800283a 	ret

02004430 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2004430:	defffd04 	addi	sp,sp,-12
 2004434:	dfc00215 	stw	ra,8(sp)
 2004438:	df000115 	stw	fp,4(sp)
 200443c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2004440:	0009883a 	mov	r4,zero
 2004444:	20045100 	call	2004510 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2004448:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200444c:	20045480 	call	2004548 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2004450:	01808074 	movhi	r6,513
 2004454:	31a18b04 	addi	r6,r6,-31188
 2004458:	01408074 	movhi	r5,513
 200445c:	29618b04 	addi	r5,r5,-31188
 2004460:	01008074 	movhi	r4,513
 2004464:	21218b04 	addi	r4,r4,-31188
 2004468:	20077ec0 	call	20077ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200446c:	200723c0 	call	200723c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2004470:	01008034 	movhi	r4,512
 2004474:	211ca704 	addi	r4,r4,29340
 2004478:	2007fa00 	call	2007fa0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200447c:	d0a61617 	ldw	r2,-26536(gp)
 2004480:	d0e61717 	ldw	r3,-26532(gp)
 2004484:	d1261817 	ldw	r4,-26528(gp)
 2004488:	200d883a 	mov	r6,r4
 200448c:	180b883a 	mov	r5,r3
 2004490:	1009883a 	mov	r4,r2
 2004494:	200003c0 	call	200003c <main>
 2004498:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200449c:	01000044 	movi	r4,1
 20044a0:	20070380 	call	2007038 <close>
  exit (result);
 20044a4:	e13fff17 	ldw	r4,-4(fp)
 20044a8:	2007fb40 	call	2007fb4 <exit>

020044ac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 20044ac:	defffd04 	addi	sp,sp,-12
 20044b0:	dfc00215 	stw	ra,8(sp)
 20044b4:	df000115 	stw	fp,4(sp)
 20044b8:	df000104 	addi	fp,sp,4
 20044bc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 20044c0:	e13fff17 	ldw	r4,-4(fp)
 20044c4:	2006ea40 	call	2006ea4 <alt_busy_sleep>
}
 20044c8:	e037883a 	mov	sp,fp
 20044cc:	dfc00117 	ldw	ra,4(sp)
 20044d0:	df000017 	ldw	fp,0(sp)
 20044d4:	dec00204 	addi	sp,sp,8
 20044d8:	f800283a 	ret

020044dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20044dc:	defffd04 	addi	sp,sp,-12
 20044e0:	dfc00215 	stw	ra,8(sp)
 20044e4:	df000115 	stw	fp,4(sp)
 20044e8:	df000104 	addi	fp,sp,4
 20044ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20044f0:	d1600504 	addi	r5,gp,-32748
 20044f4:	e13fff17 	ldw	r4,-4(fp)
 20044f8:	20071980 	call	2007198 <alt_dev_llist_insert>
}
 20044fc:	e037883a 	mov	sp,fp
 2004500:	dfc00117 	ldw	ra,4(sp)
 2004504:	df000017 	ldw	fp,0(sp)
 2004508:	dec00204 	addi	sp,sp,8
 200450c:	f800283a 	ret

02004510 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2004510:	defffd04 	addi	sp,sp,-12
 2004514:	dfc00215 	stw	ra,8(sp)
 2004518:	df000115 	stw	fp,4(sp)
 200451c:	df000104 	addi	fp,sp,4
 2004520:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_2, nios_2);
 2004524:	2007d140 	call	2007d14 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2004528:	00800044 	movi	r2,1
 200452c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2004530:	0001883a 	nop
 2004534:	e037883a 	mov	sp,fp
 2004538:	dfc00117 	ldw	ra,4(sp)
 200453c:	df000017 	ldw	fp,0(sp)
 2004540:	dec00204 	addi	sp,sp,8
 2004544:	f800283a 	ret

02004548 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2004548:	defffe04 	addi	sp,sp,-8
 200454c:	dfc00115 	stw	ra,4(sp)
 2004550:	df000015 	stw	fp,0(sp)
 2004554:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( FLASH, flash);
 2004558:	01008074 	movhi	r4,513
 200455c:	2122aa04 	addi	r4,r4,-30040
 2004560:	20045e40 	call	20045e4 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 2004564:	000d883a 	mov	r6,zero
 2004568:	000b883a 	mov	r5,zero
 200456c:	01008074 	movhi	r4,513
 2004570:	2122e704 	addi	r4,r4,-29796
 2004574:	20052100 	call	2005210 <altera_avalon_jtag_uart_init>
 2004578:	01008074 	movhi	r4,513
 200457c:	2122dd04 	addi	r4,r4,-29836
 2004580:	20044dc0 	call	20044dc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 2004584:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_1, sysid_qsys_1);
 2004588:	0001883a 	nop
//    ALTERA_AVALON_UART_INIT ( UART, uart);
    ALTERA_UP_AVALON_ADC_INIT ( ADC, adc);
 200458c:	01008074 	movhi	r4,513
 2004590:	21272604 	addi	r4,r4,-25448
 2004594:	20044dc0 	call	20044dc <alt_dev_reg>
}
 2004598:	0001883a 	nop
 200459c:	e037883a 	mov	sp,fp
 20045a0:	dfc00117 	ldw	ra,4(sp)
 20045a4:	df000017 	ldw	fp,0(sp)
 20045a8:	dec00204 	addi	sp,sp,8
 20045ac:	f800283a 	ret

020045b0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 20045b0:	defffd04 	addi	sp,sp,-12
 20045b4:	dfc00215 	stw	ra,8(sp)
 20045b8:	df000115 	stw	fp,4(sp)
 20045bc:	df000104 	addi	fp,sp,4
 20045c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 20045c4:	d1600904 	addi	r5,gp,-32732
 20045c8:	e13fff17 	ldw	r4,-4(fp)
 20045cc:	20071980 	call	2007198 <alt_dev_llist_insert>
}
 20045d0:	e037883a 	mov	sp,fp
 20045d4:	dfc00117 	ldw	ra,4(sp)
 20045d8:	df000017 	ldw	fp,0(sp)
 20045dc:	dec00204 	addi	sp,sp,8
 20045e0:	f800283a 	ret

020045e4 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 20045e4:	defffc04 	addi	sp,sp,-16
 20045e8:	dfc00315 	stw	ra,12(sp)
 20045ec:	df000215 	stw	fp,8(sp)
 20045f0:	df000204 	addi	fp,sp,8
 20045f4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20045f8:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 20045fc:	e13fff17 	ldw	r4,-4(fp)
 2004600:	20046380 	call	2004638 <alt_epcs_flash_query>
 2004604:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2004608:	e0bffe17 	ldw	r2,-8(fp)
 200460c:	1000041e 	bne	r2,zero,2004620 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2004610:	e0bfff17 	ldw	r2,-4(fp)
 2004614:	1009883a 	mov	r4,r2
 2004618:	20045b00 	call	20045b0 <alt_flash_device_register>
 200461c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2004620:	e0bffe17 	ldw	r2,-8(fp)
}
 2004624:	e037883a 	mov	sp,fp
 2004628:	dfc00117 	ldw	ra,4(sp)
 200462c:	df000017 	ldw	fp,0(sp)
 2004630:	dec00204 	addi	sp,sp,8
 2004634:	f800283a 	ret

02004638 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2004638:	defffc04 	addi	sp,sp,-16
 200463c:	dfc00315 	stw	ra,12(sp)
 2004640:	df000215 	stw	fp,8(sp)
 2004644:	df000204 	addi	fp,sp,8
 2004648:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200464c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2004650:	e0bfff17 	ldw	r2,-4(fp)
 2004654:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 2004658:	e0bfff17 	ldw	r2,-4(fp)
 200465c:	10802e17 	ldw	r2,184(r2)
 2004660:	1009883a 	mov	r4,r2
 2004664:	2006bd80 	call	2006bd8 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2004668:	10c03fcc 	andi	r3,r2,255
 200466c:	e0bfff17 	ldw	r2,-4(fp)
 2004670:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2004674:	e0bfff17 	ldw	r2,-4(fp)
 2004678:	10803017 	ldw	r2,192(r2)
 200467c:	10800598 	cmpnei	r2,r2,22
 2004680:	10000a1e 	bne	r2,zero,20046ac <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2004684:	e0bfff17 	ldw	r2,-4(fp)
 2004688:	00c02034 	movhi	r3,128
 200468c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 2004690:	e0bfff17 	ldw	r2,-4(fp)
 2004694:	00c02004 	movi	r3,128
 2004698:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200469c:	e0bfff17 	ldw	r2,-4(fp)
 20046a0:	00c00074 	movhi	r3,1
 20046a4:	10c01015 	stw	r3,64(r2)
 20046a8:	0000ce06 	br	20049e4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 20046ac:	e0bfff17 	ldw	r2,-4(fp)
 20046b0:	10803017 	ldw	r2,192(r2)
 20046b4:	10800518 	cmpnei	r2,r2,20
 20046b8:	10000a1e 	bne	r2,zero,20046e4 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 20046bc:	e0bfff17 	ldw	r2,-4(fp)
 20046c0:	00c00834 	movhi	r3,32
 20046c4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 20046c8:	e0bfff17 	ldw	r2,-4(fp)
 20046cc:	00c00804 	movi	r3,32
 20046d0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20046d4:	e0bfff17 	ldw	r2,-4(fp)
 20046d8:	00c00074 	movhi	r3,1
 20046dc:	10c01015 	stw	r3,64(r2)
 20046e0:	0000c006 	br	20049e4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 20046e4:	e0bfff17 	ldw	r2,-4(fp)
 20046e8:	10803017 	ldw	r2,192(r2)
 20046ec:	108004d8 	cmpnei	r2,r2,19
 20046f0:	10000a1e 	bne	r2,zero,200471c <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 20046f4:	e0bfff17 	ldw	r2,-4(fp)
 20046f8:	00c00434 	movhi	r3,16
 20046fc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 2004700:	e0bfff17 	ldw	r2,-4(fp)
 2004704:	00c00404 	movi	r3,16
 2004708:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200470c:	e0bfff17 	ldw	r2,-4(fp)
 2004710:	00c00074 	movhi	r3,1
 2004714:	10c01015 	stw	r3,64(r2)
 2004718:	0000b206 	br	20049e4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 200471c:	e0bfff17 	ldw	r2,-4(fp)
 2004720:	10803017 	ldw	r2,192(r2)
 2004724:	10800498 	cmpnei	r2,r2,18
 2004728:	10000a1e 	bne	r2,zero,2004754 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 200472c:	e0bfff17 	ldw	r2,-4(fp)
 2004730:	00c00234 	movhi	r3,8
 2004734:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 2004738:	e0bfff17 	ldw	r2,-4(fp)
 200473c:	00c00204 	movi	r3,8
 2004740:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2004744:	e0bfff17 	ldw	r2,-4(fp)
 2004748:	00c00074 	movhi	r3,1
 200474c:	10c01015 	stw	r3,64(r2)
 2004750:	0000a406 	br	20049e4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2004754:	e0bfff17 	ldw	r2,-4(fp)
 2004758:	10803017 	ldw	r2,192(r2)
 200475c:	10800418 	cmpnei	r2,r2,16
 2004760:	10000a1e 	bne	r2,zero,200478c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2004764:	e0bfff17 	ldw	r2,-4(fp)
 2004768:	00c000b4 	movhi	r3,2
 200476c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 2004770:	e0bfff17 	ldw	r2,-4(fp)
 2004774:	00c00104 	movi	r3,4
 2004778:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 200477c:	e0bfff17 	ldw	r2,-4(fp)
 2004780:	00e00014 	movui	r3,32768
 2004784:	10c01015 	stw	r3,64(r2)
 2004788:	00009606 	br	20049e4 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 200478c:	e0bfff17 	ldw	r2,-4(fp)
 2004790:	10802e17 	ldw	r2,184(r2)
 2004794:	1009883a 	mov	r4,r2
 2004798:	2006c400 	call	2006c40 <epcs_read_device_id>
 200479c:	1007883a 	mov	r3,r2
 20047a0:	e0bfff17 	ldw	r2,-4(fp)
 20047a4:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 20047a8:	e0bfff17 	ldw	r2,-4(fp)
 20047ac:	10c03017 	ldw	r3,192(r2)
 20047b0:	00804034 	movhi	r2,256
 20047b4:	10bfffc4 	addi	r2,r2,-1
 20047b8:	1886703a 	and	r3,r3,r2
 20047bc:	00800874 	movhi	r2,33
 20047c0:	10ae8544 	addi	r2,r2,-17899
 20047c4:	18800a1e 	bne	r3,r2,20047f0 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 20047c8:	e0bfff17 	ldw	r2,-4(fp)
 20047cc:	00c00834 	movhi	r3,32
 20047d0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 20047d4:	e0bfff17 	ldw	r2,-4(fp)
 20047d8:	00c00804 	movi	r3,32
 20047dc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20047e0:	e0bfff17 	ldw	r2,-4(fp)
 20047e4:	00c00074 	movhi	r3,1
 20047e8:	10c01015 	stw	r3,64(r2)
 20047ec:	00007d06 	br	20049e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 20047f0:	e0bfff17 	ldw	r2,-4(fp)
 20047f4:	10c03017 	ldw	r3,192(r2)
 20047f8:	00804034 	movhi	r2,256
 20047fc:	10bfffc4 	addi	r2,r2,-1
 2004800:	1886703a 	and	r3,r3,r2
 2004804:	00800874 	movhi	r2,33
 2004808:	10ae8584 	addi	r2,r2,-17898
 200480c:	18800a1e 	bne	r3,r2,2004838 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 2004810:	e0bfff17 	ldw	r2,-4(fp)
 2004814:	00c01034 	movhi	r3,64
 2004818:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 200481c:	e0bfff17 	ldw	r2,-4(fp)
 2004820:	00c01004 	movi	r3,64
 2004824:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2004828:	e0bfff17 	ldw	r2,-4(fp)
 200482c:	00c00074 	movhi	r3,1
 2004830:	10c01015 	stw	r3,64(r2)
 2004834:	00006b06 	br	20049e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 2004838:	e0bfff17 	ldw	r2,-4(fp)
 200483c:	10c03017 	ldw	r3,192(r2)
 2004840:	00804034 	movhi	r2,256
 2004844:	10bfffc4 	addi	r2,r2,-1
 2004848:	1886703a 	and	r3,r3,r2
 200484c:	00800874 	movhi	r2,33
 2004850:	10ae85c4 	addi	r2,r2,-17897
 2004854:	18800a1e 	bne	r3,r2,2004880 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2004858:	e0bfff17 	ldw	r2,-4(fp)
 200485c:	00c02034 	movhi	r3,128
 2004860:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 2004864:	e0bfff17 	ldw	r2,-4(fp)
 2004868:	00c02004 	movi	r3,128
 200486c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2004870:	e0bfff17 	ldw	r2,-4(fp)
 2004874:	00c00074 	movhi	r3,1
 2004878:	10c01015 	stw	r3,64(r2)
 200487c:	00005906 	br	20049e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2004880:	e0bfff17 	ldw	r2,-4(fp)
 2004884:	10c03017 	ldw	r3,192(r2)
 2004888:	00804034 	movhi	r2,256
 200488c:	10bfffc4 	addi	r2,r2,-1
 2004890:	1886703a 	and	r3,r3,r2
 2004894:	00800874 	movhi	r2,33
 2004898:	10ae8604 	addi	r2,r2,-17896
 200489c:	18800a1e 	bne	r3,r2,20048c8 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 20048a0:	e0bfff17 	ldw	r2,-4(fp)
 20048a4:	00c04034 	movhi	r3,256
 20048a8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 20048ac:	e0bfff17 	ldw	r2,-4(fp)
 20048b0:	00c04004 	movi	r3,256
 20048b4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20048b8:	e0bfff17 	ldw	r2,-4(fp)
 20048bc:	00c00074 	movhi	r3,1
 20048c0:	10c01015 	stw	r3,64(r2)
 20048c4:	00004706 	br	20049e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 20048c8:	e0bfff17 	ldw	r2,-4(fp)
 20048cc:	10803017 	ldw	r2,192(r2)
 20048d0:	10803fcc 	andi	r2,r2,255
 20048d4:	10800618 	cmpnei	r2,r2,24
 20048d8:	10000a1e 	bne	r2,zero,2004904 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 20048dc:	e0bfff17 	ldw	r2,-4(fp)
 20048e0:	00c04034 	movhi	r3,256
 20048e4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 20048e8:	e0bfff17 	ldw	r2,-4(fp)
 20048ec:	00c01004 	movi	r3,64
 20048f0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 20048f4:	e0bfff17 	ldw	r2,-4(fp)
 20048f8:	00c00134 	movhi	r3,4
 20048fc:	10c01015 	stw	r3,64(r2)
 2004900:	00003806 	br	20049e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2004904:	e0bfff17 	ldw	r2,-4(fp)
 2004908:	10803017 	ldw	r2,192(r2)
 200490c:	10803fcc 	andi	r2,r2,255
 2004910:	10800658 	cmpnei	r2,r2,25
 2004914:	10000d1e 	bne	r2,zero,200494c <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2004918:	e0bfff17 	ldw	r2,-4(fp)
 200491c:	00c08034 	movhi	r3,512
 2004920:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2004924:	e0bfff17 	ldw	r2,-4(fp)
 2004928:	00c08004 	movi	r3,512
 200492c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2004930:	e0bfff17 	ldw	r2,-4(fp)
 2004934:	00c00074 	movhi	r3,1
 2004938:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 200493c:	e0bfff17 	ldw	r2,-4(fp)
 2004940:	00c00044 	movi	r3,1
 2004944:	10c03215 	stw	r3,200(r2)
 2004948:	00002606 	br	20049e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 200494c:	e0bfff17 	ldw	r2,-4(fp)
 2004950:	10803017 	ldw	r2,192(r2)
 2004954:	10803fcc 	andi	r2,r2,255
 2004958:	10800818 	cmpnei	r2,r2,32
 200495c:	10000d1e 	bne	r2,zero,2004994 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 2004960:	e0bfff17 	ldw	r2,-4(fp)
 2004964:	00c10034 	movhi	r3,1024
 2004968:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 200496c:	e0bfff17 	ldw	r2,-4(fp)
 2004970:	00c10004 	movi	r3,1024
 2004974:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2004978:	e0bfff17 	ldw	r2,-4(fp)
 200497c:	00c00074 	movhi	r3,1
 2004980:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2004984:	e0bfff17 	ldw	r2,-4(fp)
 2004988:	00c00044 	movi	r3,1
 200498c:	10c03215 	stw	r3,200(r2)
 2004990:	00001406 	br	20049e4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 2004994:	e0bfff17 	ldw	r2,-4(fp)
 2004998:	10803017 	ldw	r2,192(r2)
 200499c:	10803fcc 	andi	r2,r2,255
 20049a0:	10800858 	cmpnei	r2,r2,33
 20049a4:	10000d1e 	bne	r2,zero,20049dc <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 20049a8:	e0bfff17 	ldw	r2,-4(fp)
 20049ac:	00c20034 	movhi	r3,2048
 20049b0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 20049b4:	e0bfff17 	ldw	r2,-4(fp)
 20049b8:	00c20004 	movi	r3,2048
 20049bc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20049c0:	e0bfff17 	ldw	r2,-4(fp)
 20049c4:	00c00074 	movhi	r3,1
 20049c8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 20049cc:	e0bfff17 	ldw	r2,-4(fp)
 20049d0:	00c00044 	movi	r3,1
 20049d4:	10c03215 	stw	r3,200(r2)
 20049d8:	00000206 	br	20049e4 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 20049dc:	00bffb44 	movi	r2,-19
 20049e0:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 20049e4:	e0bfff17 	ldw	r2,-4(fp)
 20049e8:	10800e17 	ldw	r2,56(r2)
 20049ec:	1007883a 	mov	r3,r2
 20049f0:	e0bfff17 	ldw	r2,-4(fp)
 20049f4:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 20049f8:	e0bfff17 	ldw	r2,-4(fp)
 20049fc:	00c00044 	movi	r3,1
 2004a00:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 2004a04:	e0bfff17 	ldw	r2,-4(fp)
 2004a08:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2004a0c:	e0bfff17 	ldw	r2,-4(fp)
 2004a10:	00c04004 	movi	r3,256
 2004a14:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2004a18:	e0bffe17 	ldw	r2,-8(fp)
}
 2004a1c:	e037883a 	mov	sp,fp
 2004a20:	dfc00117 	ldw	ra,4(sp)
 2004a24:	df000017 	ldw	fp,0(sp)
 2004a28:	dec00204 	addi	sp,sp,8
 2004a2c:	f800283a 	ret

02004a30 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2004a30:	deffee04 	addi	sp,sp,-72
 2004a34:	dfc01115 	stw	ra,68(sp)
 2004a38:	df001015 	stw	fp,64(sp)
 2004a3c:	df001004 	addi	fp,sp,64
 2004a40:	e13ffc15 	stw	r4,-16(fp)
 2004a44:	e17ffd15 	stw	r5,-12(fp)
 2004a48:	e1bffe15 	stw	r6,-8(fp)
 2004a4c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2004a50:	00800804 	movi	r2,32
 2004a54:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2004a58:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2004a5c:	00002706 	br	2004afc <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2004a60:	e0fff117 	ldw	r3,-60(fp)
 2004a64:	e0bfff17 	ldw	r2,-4(fp)
 2004a68:	1880012e 	bgeu	r3,r2,2004a70 <alt_epcs_flash_memcmp+0x40>
 2004a6c:	1805883a 	mov	r2,r3
 2004a70:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2004a74:	e0fffe17 	ldw	r3,-8(fp)
 2004a78:	e0bff017 	ldw	r2,-64(fp)
 2004a7c:	1885883a 	add	r2,r3,r2
 2004a80:	e0fff404 	addi	r3,fp,-48
 2004a84:	e1fff217 	ldw	r7,-56(fp)
 2004a88:	180d883a 	mov	r6,r3
 2004a8c:	100b883a 	mov	r5,r2
 2004a90:	e13ffc17 	ldw	r4,-16(fp)
 2004a94:	20050140 	call	2005014 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2004a98:	1000020e 	bge	r2,zero,2004aa4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2004a9c:	00bfffc4 	movi	r2,-1
 2004aa0:	00001906 	br	2004b08 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2004aa4:	e0bff017 	ldw	r2,-64(fp)
 2004aa8:	e0fffd17 	ldw	r3,-12(fp)
 2004aac:	1885883a 	add	r2,r3,r2
 2004ab0:	e13ff217 	ldw	r4,-56(fp)
 2004ab4:	e0fff404 	addi	r3,fp,-48
 2004ab8:	200d883a 	mov	r6,r4
 2004abc:	180b883a 	mov	r5,r3
 2004ac0:	1009883a 	mov	r4,r2
 2004ac4:	2007fec0 	call	2007fec <memcmp>
 2004ac8:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2004acc:	e0bff317 	ldw	r2,-52(fp)
 2004ad0:	10000226 	beq	r2,zero,2004adc <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 2004ad4:	e0bff317 	ldw	r2,-52(fp)
 2004ad8:	00000b06 	br	2004b08 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 2004adc:	e0bff217 	ldw	r2,-56(fp)
 2004ae0:	e0ffff17 	ldw	r3,-4(fp)
 2004ae4:	1885c83a 	sub	r2,r3,r2
 2004ae8:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2004aec:	e0fff017 	ldw	r3,-64(fp)
 2004af0:	e0bff217 	ldw	r2,-56(fp)
 2004af4:	1885883a 	add	r2,r3,r2
 2004af8:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2004afc:	e0bfff17 	ldw	r2,-4(fp)
 2004b00:	103fd71e 	bne	r2,zero,2004a60 <__alt_mem_flash+0xfdff3a60>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2004b04:	0005883a 	mov	r2,zero
}
 2004b08:	e037883a 	mov	sp,fp
 2004b0c:	dfc00117 	ldw	ra,4(sp)
 2004b10:	df000017 	ldw	fp,0(sp)
 2004b14:	dec00204 	addi	sp,sp,8
 2004b18:	f800283a 	ret

02004b1c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2004b1c:	defff404 	addi	sp,sp,-48
 2004b20:	dfc00b15 	stw	ra,44(sp)
 2004b24:	df000a15 	stw	fp,40(sp)
 2004b28:	df000a04 	addi	fp,sp,40
 2004b2c:	e13ffc15 	stw	r4,-16(fp)
 2004b30:	e17ffd15 	stw	r5,-12(fp)
 2004b34:	e1bffe15 	stw	r6,-8(fp)
 2004b38:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2004b3c:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2004b40:	e03ff815 	stw	zero,-32(fp)
 2004b44:	00008306 	br	2004d54 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2004b48:	e0fffc17 	ldw	r3,-16(fp)
 2004b4c:	e0bff817 	ldw	r2,-32(fp)
 2004b50:	1004913a 	slli	r2,r2,4
 2004b54:	1885883a 	add	r2,r3,r2
 2004b58:	10800d04 	addi	r2,r2,52
 2004b5c:	10800017 	ldw	r2,0(r2)
 2004b60:	e0fffd17 	ldw	r3,-12(fp)
 2004b64:	18807816 	blt	r3,r2,2004d48 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2004b68:	e0fffc17 	ldw	r3,-16(fp)
 2004b6c:	e0bff817 	ldw	r2,-32(fp)
 2004b70:	1004913a 	slli	r2,r2,4
 2004b74:	1885883a 	add	r2,r3,r2
 2004b78:	10800d04 	addi	r2,r2,52
 2004b7c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 2004b80:	e13ffc17 	ldw	r4,-16(fp)
 2004b84:	e0bff817 	ldw	r2,-32(fp)
 2004b88:	1004913a 	slli	r2,r2,4
 2004b8c:	2085883a 	add	r2,r4,r2
 2004b90:	10800e04 	addi	r2,r2,56
 2004b94:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2004b98:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2004b9c:	e0fffd17 	ldw	r3,-12(fp)
 2004ba0:	1880690e 	bge	r3,r2,2004d48 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2004ba4:	e0fffc17 	ldw	r3,-16(fp)
 2004ba8:	e0bff817 	ldw	r2,-32(fp)
 2004bac:	1004913a 	slli	r2,r2,4
 2004bb0:	1885883a 	add	r2,r3,r2
 2004bb4:	10800d04 	addi	r2,r2,52
 2004bb8:	10800017 	ldw	r2,0(r2)
 2004bbc:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2004bc0:	e03ff915 	stw	zero,-28(fp)
 2004bc4:	00005806 	br	2004d28 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2004bc8:	e0fffd17 	ldw	r3,-12(fp)
 2004bcc:	e0bffa17 	ldw	r2,-24(fp)
 2004bd0:	18804916 	blt	r3,r2,2004cf8 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2004bd4:	e0fffc17 	ldw	r3,-16(fp)
 2004bd8:	e0bff817 	ldw	r2,-32(fp)
 2004bdc:	10800104 	addi	r2,r2,4
 2004be0:	1004913a 	slli	r2,r2,4
 2004be4:	1885883a 	add	r2,r3,r2
 2004be8:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2004bec:	e0bffa17 	ldw	r2,-24(fp)
 2004bf0:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2004bf4:	e0fffd17 	ldw	r3,-12(fp)
 2004bf8:	18803f0e 	bge	r3,r2,2004cf8 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2004bfc:	e0fffc17 	ldw	r3,-16(fp)
 2004c00:	e0bff817 	ldw	r2,-32(fp)
 2004c04:	10800104 	addi	r2,r2,4
 2004c08:	1004913a 	slli	r2,r2,4
 2004c0c:	1885883a 	add	r2,r3,r2
 2004c10:	10c00017 	ldw	r3,0(r2)
 2004c14:	e0bffa17 	ldw	r2,-24(fp)
 2004c18:	1887883a 	add	r3,r3,r2
 2004c1c:	e0bffd17 	ldw	r2,-12(fp)
 2004c20:	1885c83a 	sub	r2,r3,r2
 2004c24:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2004c28:	e0fffb17 	ldw	r3,-20(fp)
 2004c2c:	e0bfff17 	ldw	r2,-4(fp)
 2004c30:	1880010e 	bge	r3,r2,2004c38 <alt_epcs_flash_write+0x11c>
 2004c34:	1805883a 	mov	r2,r3
 2004c38:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2004c3c:	e0bffb17 	ldw	r2,-20(fp)
 2004c40:	100f883a 	mov	r7,r2
 2004c44:	e1bffd17 	ldw	r6,-12(fp)
 2004c48:	e17ffe17 	ldw	r5,-8(fp)
 2004c4c:	e13ffc17 	ldw	r4,-16(fp)
 2004c50:	2004a300 	call	2004a30 <alt_epcs_flash_memcmp>
 2004c54:	10001226 	beq	r2,zero,2004ca0 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2004c58:	e0bffc17 	ldw	r2,-16(fp)
 2004c5c:	10800817 	ldw	r2,32(r2)
 2004c60:	e17ffa17 	ldw	r5,-24(fp)
 2004c64:	e13ffc17 	ldw	r4,-16(fp)
 2004c68:	103ee83a 	callr	r2
 2004c6c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 2004c70:	e0bff717 	ldw	r2,-36(fp)
 2004c74:	10000a1e 	bne	r2,zero,2004ca0 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2004c78:	e0bffc17 	ldw	r2,-16(fp)
 2004c7c:	10800917 	ldw	r2,36(r2)
 2004c80:	e0fffb17 	ldw	r3,-20(fp)
 2004c84:	d8c00015 	stw	r3,0(sp)
 2004c88:	e1fffe17 	ldw	r7,-8(fp)
 2004c8c:	e1bffd17 	ldw	r6,-12(fp)
 2004c90:	e17ffa17 	ldw	r5,-24(fp)
 2004c94:	e13ffc17 	ldw	r4,-16(fp)
 2004c98:	103ee83a 	callr	r2
 2004c9c:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2004ca0:	e0ffff17 	ldw	r3,-4(fp)
 2004ca4:	e0bffb17 	ldw	r2,-20(fp)
 2004ca8:	18802e26 	beq	r3,r2,2004d64 <alt_epcs_flash_write+0x248>
 2004cac:	e0bff717 	ldw	r2,-36(fp)
 2004cb0:	10002c1e 	bne	r2,zero,2004d64 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 2004cb4:	e0ffff17 	ldw	r3,-4(fp)
 2004cb8:	e0bffb17 	ldw	r2,-20(fp)
 2004cbc:	1885c83a 	sub	r2,r3,r2
 2004cc0:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2004cc4:	e0fffc17 	ldw	r3,-16(fp)
 2004cc8:	e0bff817 	ldw	r2,-32(fp)
 2004ccc:	10800104 	addi	r2,r2,4
 2004cd0:	1004913a 	slli	r2,r2,4
 2004cd4:	1885883a 	add	r2,r3,r2
 2004cd8:	10c00017 	ldw	r3,0(r2)
 2004cdc:	e0bffa17 	ldw	r2,-24(fp)
 2004ce0:	1885883a 	add	r2,r3,r2
 2004ce4:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2004ce8:	e0bffb17 	ldw	r2,-20(fp)
 2004cec:	e0fffe17 	ldw	r3,-8(fp)
 2004cf0:	1885883a 	add	r2,r3,r2
 2004cf4:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2004cf8:	e0fffc17 	ldw	r3,-16(fp)
 2004cfc:	e0bff817 	ldw	r2,-32(fp)
 2004d00:	10800104 	addi	r2,r2,4
 2004d04:	1004913a 	slli	r2,r2,4
 2004d08:	1885883a 	add	r2,r3,r2
 2004d0c:	10800017 	ldw	r2,0(r2)
 2004d10:	e0fffa17 	ldw	r3,-24(fp)
 2004d14:	1885883a 	add	r2,r3,r2
 2004d18:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2004d1c:	e0bff917 	ldw	r2,-28(fp)
 2004d20:	10800044 	addi	r2,r2,1
 2004d24:	e0bff915 	stw	r2,-28(fp)
 2004d28:	e0fffc17 	ldw	r3,-16(fp)
 2004d2c:	e0bff817 	ldw	r2,-32(fp)
 2004d30:	1004913a 	slli	r2,r2,4
 2004d34:	1885883a 	add	r2,r3,r2
 2004d38:	10800f04 	addi	r2,r2,60
 2004d3c:	10800017 	ldw	r2,0(r2)
 2004d40:	e0fff917 	ldw	r3,-28(fp)
 2004d44:	18bfa016 	blt	r3,r2,2004bc8 <__alt_mem_flash+0xfdff3bc8>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2004d48:	e0bff817 	ldw	r2,-32(fp)
 2004d4c:	10800044 	addi	r2,r2,1
 2004d50:	e0bff815 	stw	r2,-32(fp)
 2004d54:	e0bffc17 	ldw	r2,-16(fp)
 2004d58:	10800c17 	ldw	r2,48(r2)
 2004d5c:	e0fff817 	ldw	r3,-32(fp)
 2004d60:	18bf7916 	blt	r3,r2,2004b48 <__alt_mem_flash+0xfdff3b48>
      }
    }
  }

finished:
  return ret_code;
 2004d64:	e0bff717 	ldw	r2,-36(fp)
}
 2004d68:	e037883a 	mov	sp,fp
 2004d6c:	dfc00117 	ldw	ra,4(sp)
 2004d70:	df000017 	ldw	fp,0(sp)
 2004d74:	dec00204 	addi	sp,sp,8
 2004d78:	f800283a 	ret

02004d7c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2004d7c:	defffa04 	addi	sp,sp,-24
 2004d80:	df000515 	stw	fp,20(sp)
 2004d84:	df000504 	addi	fp,sp,20
 2004d88:	e13ffd15 	stw	r4,-12(fp)
 2004d8c:	e17ffe15 	stw	r5,-8(fp)
 2004d90:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2004d94:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2004d98:	e0bffd17 	ldw	r2,-12(fp)
 2004d9c:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 2004da0:	e0bffc17 	ldw	r2,-16(fp)
 2004da4:	10c00c17 	ldw	r3,48(r2)
 2004da8:	e0bfff17 	ldw	r2,-4(fp)
 2004dac:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2004db0:	e0bffc17 	ldw	r2,-16(fp)
 2004db4:	10800c17 	ldw	r2,48(r2)
 2004db8:	1000031e 	bne	r2,zero,2004dc8 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2004dbc:	00bffec4 	movi	r2,-5
 2004dc0:	e0bffb15 	stw	r2,-20(fp)
 2004dc4:	00000b06 	br	2004df4 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2004dc8:	e0bffc17 	ldw	r2,-16(fp)
 2004dcc:	10800c17 	ldw	r2,48(r2)
 2004dd0:	10800250 	cmplti	r2,r2,9
 2004dd4:	1000031e 	bne	r2,zero,2004de4 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 2004dd8:	00bffd04 	movi	r2,-12
 2004ddc:	e0bffb15 	stw	r2,-20(fp)
 2004de0:	00000406 	br	2004df4 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 2004de4:	e0bffc17 	ldw	r2,-16(fp)
 2004de8:	10c00d04 	addi	r3,r2,52
 2004dec:	e0bffe17 	ldw	r2,-8(fp)
 2004df0:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2004df4:	e0bffb17 	ldw	r2,-20(fp)
}
 2004df8:	e037883a 	mov	sp,fp
 2004dfc:	df000017 	ldw	fp,0(sp)
 2004e00:	dec00104 	addi	sp,sp,4
 2004e04:	f800283a 	ret

02004e08 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2004e08:	defff904 	addi	sp,sp,-28
 2004e0c:	df000615 	stw	fp,24(sp)
 2004e10:	df000604 	addi	fp,sp,24
 2004e14:	e13ffe15 	stw	r4,-8(fp)
 2004e18:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2004e1c:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2004e20:	e0bffe17 	ldw	r2,-8(fp)
 2004e24:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2004e28:	e0bffb17 	ldw	r2,-20(fp)
 2004e2c:	10800c17 	ldw	r2,48(r2)
 2004e30:	10bfffc4 	addi	r2,r2,-1
 2004e34:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2004e38:	e0fffb17 	ldw	r3,-20(fp)
 2004e3c:	e0bffc17 	ldw	r2,-16(fp)
 2004e40:	1004913a 	slli	r2,r2,4
 2004e44:	1885883a 	add	r2,r3,r2
 2004e48:	10800d04 	addi	r2,r2,52
 2004e4c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 2004e50:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2004e54:	e13ffb17 	ldw	r4,-20(fp)
 2004e58:	e0bffc17 	ldw	r2,-16(fp)
 2004e5c:	1004913a 	slli	r2,r2,4
 2004e60:	2085883a 	add	r2,r4,r2
 2004e64:	10800e04 	addi	r2,r2,56
 2004e68:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2004e6c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 2004e70:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 2004e74:	e0bfff17 	ldw	r2,-4(fp)
 2004e78:	e0fffd17 	ldw	r3,-12(fp)
 2004e7c:	1880022e 	bgeu	r3,r2,2004e88 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2004e80:	00bffec4 	movi	r2,-5
 2004e84:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 2004e88:	e0bffa17 	ldw	r2,-24(fp)
}
 2004e8c:	e037883a 	mov	sp,fp
 2004e90:	df000017 	ldw	fp,0(sp)
 2004e94:	dec00104 	addi	sp,sp,4
 2004e98:	f800283a 	ret

02004e9c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2004e9c:	defffa04 	addi	sp,sp,-24
 2004ea0:	dfc00515 	stw	ra,20(sp)
 2004ea4:	df000415 	stw	fp,16(sp)
 2004ea8:	df000404 	addi	fp,sp,16
 2004eac:	e13ffe15 	stw	r4,-8(fp)
 2004eb0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2004eb4:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2004eb8:	e0bffe17 	ldw	r2,-8(fp)
 2004ebc:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2004ec0:	e17fff17 	ldw	r5,-4(fp)
 2004ec4:	e13ffe17 	ldw	r4,-8(fp)
 2004ec8:	2004e080 	call	2004e08 <alt_epcs_test_address>
 2004ecc:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 2004ed0:	e0bffc17 	ldw	r2,-16(fp)
 2004ed4:	10000916 	blt	r2,zero,2004efc <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2004ed8:	e0bffd17 	ldw	r2,-12(fp)
 2004edc:	10c02e17 	ldw	r3,184(r2)
 2004ee0:	e13fff17 	ldw	r4,-4(fp)
 2004ee4:	e0bffd17 	ldw	r2,-12(fp)
 2004ee8:	10803217 	ldw	r2,200(r2)
 2004eec:	100d883a 	mov	r6,r2
 2004ef0:	200b883a 	mov	r5,r4
 2004ef4:	1809883a 	mov	r4,r3
 2004ef8:	200680c0 	call	200680c <epcs_sector_erase>
  }
  return ret_code;
 2004efc:	e0bffc17 	ldw	r2,-16(fp)
}
 2004f00:	e037883a 	mov	sp,fp
 2004f04:	dfc00117 	ldw	ra,4(sp)
 2004f08:	df000017 	ldw	fp,0(sp)
 2004f0c:	dec00204 	addi	sp,sp,8
 2004f10:	f800283a 	ret

02004f14 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2004f14:	defff404 	addi	sp,sp,-48
 2004f18:	dfc00b15 	stw	ra,44(sp)
 2004f1c:	df000a15 	stw	fp,40(sp)
 2004f20:	df000a04 	addi	fp,sp,40
 2004f24:	e13ffc15 	stw	r4,-16(fp)
 2004f28:	e17ffd15 	stw	r5,-12(fp)
 2004f2c:	e1bffe15 	stw	r6,-8(fp)
 2004f30:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2004f34:	e0bffc17 	ldw	r2,-16(fp)
 2004f38:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2004f3c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2004f40:	e17ffe17 	ldw	r5,-8(fp)
 2004f44:	e13ffc17 	ldw	r4,-16(fp)
 2004f48:	2004e080 	call	2004e08 <alt_epcs_test_address>
 2004f4c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2004f50:	e0bff917 	ldw	r2,-28(fp)
 2004f54:	10002916 	blt	r2,zero,2004ffc <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2004f58:	00002606 	br	2004ff4 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2004f5c:	e0bff817 	ldw	r2,-32(fp)
 2004f60:	10c03117 	ldw	r3,196(r2)
 2004f64:	e0bffe17 	ldw	r2,-8(fp)
 2004f68:	1887883a 	add	r3,r3,r2
 2004f6c:	e0bff817 	ldw	r2,-32(fp)
 2004f70:	10803117 	ldw	r2,196(r2)
 2004f74:	0085c83a 	sub	r2,zero,r2
 2004f78:	1884703a 	and	r2,r3,r2
 2004f7c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2004f80:	e0fffa17 	ldw	r3,-24(fp)
 2004f84:	e0bffe17 	ldw	r2,-8(fp)
 2004f88:	1885c83a 	sub	r2,r3,r2
 2004f8c:	e0c00217 	ldw	r3,8(fp)
 2004f90:	1880010e 	bge	r3,r2,2004f98 <alt_epcs_flash_write_block+0x84>
 2004f94:	1805883a 	mov	r2,r3
 2004f98:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2004f9c:	e0bff817 	ldw	r2,-32(fp)
 2004fa0:	11002e17 	ldw	r4,184(r2)
 2004fa4:	e0bff717 	ldw	r2,-36(fp)
 2004fa8:	e0ffff17 	ldw	r3,-4(fp)
 2004fac:	1887883a 	add	r3,r3,r2
 2004fb0:	e0bff817 	ldw	r2,-32(fp)
 2004fb4:	10803217 	ldw	r2,200(r2)
 2004fb8:	d8800015 	stw	r2,0(sp)
 2004fbc:	e1fffb17 	ldw	r7,-20(fp)
 2004fc0:	180d883a 	mov	r6,r3
 2004fc4:	e17ffe17 	ldw	r5,-8(fp)
 2004fc8:	2006abc0 	call	2006abc <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2004fcc:	e0c00217 	ldw	r3,8(fp)
 2004fd0:	e0bffb17 	ldw	r2,-20(fp)
 2004fd4:	1885c83a 	sub	r2,r3,r2
 2004fd8:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2004fdc:	e0fff717 	ldw	r3,-36(fp)
 2004fe0:	e0bffb17 	ldw	r2,-20(fp)
 2004fe4:	1885883a 	add	r2,r3,r2
 2004fe8:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2004fec:	e0bffa17 	ldw	r2,-24(fp)
 2004ff0:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2004ff4:	e0800217 	ldw	r2,8(fp)
 2004ff8:	103fd81e 	bne	r2,zero,2004f5c <__alt_mem_flash+0xfdff3f5c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2004ffc:	e0bff917 	ldw	r2,-28(fp)
}
 2005000:	e037883a 	mov	sp,fp
 2005004:	dfc00117 	ldw	ra,4(sp)
 2005008:	df000017 	ldw	fp,0(sp)
 200500c:	dec00204 	addi	sp,sp,8
 2005010:	f800283a 	ret

02005014 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 2005014:	defff704 	addi	sp,sp,-36
 2005018:	dfc00815 	stw	ra,32(sp)
 200501c:	df000715 	stw	fp,28(sp)
 2005020:	df000704 	addi	fp,sp,28
 2005024:	e13ffc15 	stw	r4,-16(fp)
 2005028:	e17ffd15 	stw	r5,-12(fp)
 200502c:	e1bffe15 	stw	r6,-8(fp)
 2005030:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 2005034:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2005038:	e0bffc17 	ldw	r2,-16(fp)
 200503c:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2005040:	e17ffd17 	ldw	r5,-12(fp)
 2005044:	e13ffc17 	ldw	r4,-16(fp)
 2005048:	2004e080 	call	2004e08 <alt_epcs_test_address>
 200504c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 2005050:	e0bffa17 	ldw	r2,-24(fp)
 2005054:	10000f16 	blt	r2,zero,2005094 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2005058:	e0bffb17 	ldw	r2,-20(fp)
 200505c:	10c02e17 	ldw	r3,184(r2)
 2005060:	e0bffb17 	ldw	r2,-20(fp)
 2005064:	10803217 	ldw	r2,200(r2)
 2005068:	d8800015 	stw	r2,0(sp)
 200506c:	e1ffff17 	ldw	r7,-4(fp)
 2005070:	e1bffe17 	ldw	r6,-8(fp)
 2005074:	e17ffd17 	ldw	r5,-12(fp)
 2005078:	1809883a 	mov	r4,r3
 200507c:	20069080 	call	2006908 <epcs_read_buffer>
 2005080:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2005084:	e0fffa17 	ldw	r3,-24(fp)
 2005088:	e0bfff17 	ldw	r2,-4(fp)
 200508c:	1880011e 	bne	r3,r2,2005094 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2005090:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 2005094:	e0bffa17 	ldw	r2,-24(fp)
}
 2005098:	e037883a 	mov	sp,fp
 200509c:	dfc00117 	ldw	ra,4(sp)
 20050a0:	df000017 	ldw	fp,0(sp)
 20050a4:	dec00204 	addi	sp,sp,8
 20050a8:	f800283a 	ret

020050ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20050ac:	defffa04 	addi	sp,sp,-24
 20050b0:	dfc00515 	stw	ra,20(sp)
 20050b4:	df000415 	stw	fp,16(sp)
 20050b8:	df000404 	addi	fp,sp,16
 20050bc:	e13ffd15 	stw	r4,-12(fp)
 20050c0:	e17ffe15 	stw	r5,-8(fp)
 20050c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20050c8:	e0bffd17 	ldw	r2,-12(fp)
 20050cc:	10800017 	ldw	r2,0(r2)
 20050d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20050d4:	e0bffc17 	ldw	r2,-16(fp)
 20050d8:	10c00a04 	addi	r3,r2,40
 20050dc:	e0bffd17 	ldw	r2,-12(fp)
 20050e0:	10800217 	ldw	r2,8(r2)
 20050e4:	100f883a 	mov	r7,r2
 20050e8:	e1bfff17 	ldw	r6,-4(fp)
 20050ec:	e17ffe17 	ldw	r5,-8(fp)
 20050f0:	1809883a 	mov	r4,r3
 20050f4:	20056d40 	call	20056d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20050f8:	e037883a 	mov	sp,fp
 20050fc:	dfc00117 	ldw	ra,4(sp)
 2005100:	df000017 	ldw	fp,0(sp)
 2005104:	dec00204 	addi	sp,sp,8
 2005108:	f800283a 	ret

0200510c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200510c:	defffa04 	addi	sp,sp,-24
 2005110:	dfc00515 	stw	ra,20(sp)
 2005114:	df000415 	stw	fp,16(sp)
 2005118:	df000404 	addi	fp,sp,16
 200511c:	e13ffd15 	stw	r4,-12(fp)
 2005120:	e17ffe15 	stw	r5,-8(fp)
 2005124:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2005128:	e0bffd17 	ldw	r2,-12(fp)
 200512c:	10800017 	ldw	r2,0(r2)
 2005130:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2005134:	e0bffc17 	ldw	r2,-16(fp)
 2005138:	10c00a04 	addi	r3,r2,40
 200513c:	e0bffd17 	ldw	r2,-12(fp)
 2005140:	10800217 	ldw	r2,8(r2)
 2005144:	100f883a 	mov	r7,r2
 2005148:	e1bfff17 	ldw	r6,-4(fp)
 200514c:	e17ffe17 	ldw	r5,-8(fp)
 2005150:	1809883a 	mov	r4,r3
 2005154:	20058f00 	call	20058f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2005158:	e037883a 	mov	sp,fp
 200515c:	dfc00117 	ldw	ra,4(sp)
 2005160:	df000017 	ldw	fp,0(sp)
 2005164:	dec00204 	addi	sp,sp,8
 2005168:	f800283a 	ret

0200516c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200516c:	defffc04 	addi	sp,sp,-16
 2005170:	dfc00315 	stw	ra,12(sp)
 2005174:	df000215 	stw	fp,8(sp)
 2005178:	df000204 	addi	fp,sp,8
 200517c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2005180:	e0bfff17 	ldw	r2,-4(fp)
 2005184:	10800017 	ldw	r2,0(r2)
 2005188:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200518c:	e0bffe17 	ldw	r2,-8(fp)
 2005190:	10c00a04 	addi	r3,r2,40
 2005194:	e0bfff17 	ldw	r2,-4(fp)
 2005198:	10800217 	ldw	r2,8(r2)
 200519c:	100b883a 	mov	r5,r2
 20051a0:	1809883a 	mov	r4,r3
 20051a4:	200557c0 	call	200557c <altera_avalon_jtag_uart_close>
}
 20051a8:	e037883a 	mov	sp,fp
 20051ac:	dfc00117 	ldw	ra,4(sp)
 20051b0:	df000017 	ldw	fp,0(sp)
 20051b4:	dec00204 	addi	sp,sp,8
 20051b8:	f800283a 	ret

020051bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20051bc:	defffa04 	addi	sp,sp,-24
 20051c0:	dfc00515 	stw	ra,20(sp)
 20051c4:	df000415 	stw	fp,16(sp)
 20051c8:	df000404 	addi	fp,sp,16
 20051cc:	e13ffd15 	stw	r4,-12(fp)
 20051d0:	e17ffe15 	stw	r5,-8(fp)
 20051d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20051d8:	e0bffd17 	ldw	r2,-12(fp)
 20051dc:	10800017 	ldw	r2,0(r2)
 20051e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20051e4:	e0bffc17 	ldw	r2,-16(fp)
 20051e8:	10800a04 	addi	r2,r2,40
 20051ec:	e1bfff17 	ldw	r6,-4(fp)
 20051f0:	e17ffe17 	ldw	r5,-8(fp)
 20051f4:	1009883a 	mov	r4,r2
 20051f8:	20055e40 	call	20055e4 <altera_avalon_jtag_uart_ioctl>
}
 20051fc:	e037883a 	mov	sp,fp
 2005200:	dfc00117 	ldw	ra,4(sp)
 2005204:	df000017 	ldw	fp,0(sp)
 2005208:	dec00204 	addi	sp,sp,8
 200520c:	f800283a 	ret

02005210 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2005210:	defffa04 	addi	sp,sp,-24
 2005214:	dfc00515 	stw	ra,20(sp)
 2005218:	df000415 	stw	fp,16(sp)
 200521c:	df000404 	addi	fp,sp,16
 2005220:	e13ffd15 	stw	r4,-12(fp)
 2005224:	e17ffe15 	stw	r5,-8(fp)
 2005228:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200522c:	e0bffd17 	ldw	r2,-12(fp)
 2005230:	00c00044 	movi	r3,1
 2005234:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2005238:	e0bffd17 	ldw	r2,-12(fp)
 200523c:	10800017 	ldw	r2,0(r2)
 2005240:	10800104 	addi	r2,r2,4
 2005244:	1007883a 	mov	r3,r2
 2005248:	e0bffd17 	ldw	r2,-12(fp)
 200524c:	10800817 	ldw	r2,32(r2)
 2005250:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2005254:	e0bffe17 	ldw	r2,-8(fp)
 2005258:	e0ffff17 	ldw	r3,-4(fp)
 200525c:	d8000015 	stw	zero,0(sp)
 2005260:	e1fffd17 	ldw	r7,-12(fp)
 2005264:	01808034 	movhi	r6,512
 2005268:	3194b404 	addi	r6,r6,21200
 200526c:	180b883a 	mov	r5,r3
 2005270:	1009883a 	mov	r4,r2
 2005274:	20074680 	call	2007468 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2005278:	e0bffd17 	ldw	r2,-12(fp)
 200527c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2005280:	e0bffd17 	ldw	r2,-12(fp)
 2005284:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2005288:	d0e61a17 	ldw	r3,-26520(gp)
 200528c:	e1fffd17 	ldw	r7,-12(fp)
 2005290:	01808034 	movhi	r6,512
 2005294:	31953704 	addi	r6,r6,21724
 2005298:	180b883a 	mov	r5,r3
 200529c:	1009883a 	mov	r4,r2
 20052a0:	2006d780 	call	2006d78 <alt_alarm_start>
 20052a4:	1000040e 	bge	r2,zero,20052b8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 20052a8:	e0fffd17 	ldw	r3,-12(fp)
 20052ac:	00a00034 	movhi	r2,32768
 20052b0:	10bfffc4 	addi	r2,r2,-1
 20052b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 20052b8:	0001883a 	nop
 20052bc:	e037883a 	mov	sp,fp
 20052c0:	dfc00117 	ldw	ra,4(sp)
 20052c4:	df000017 	ldw	fp,0(sp)
 20052c8:	dec00204 	addi	sp,sp,8
 20052cc:	f800283a 	ret

020052d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 20052d0:	defff804 	addi	sp,sp,-32
 20052d4:	df000715 	stw	fp,28(sp)
 20052d8:	df000704 	addi	fp,sp,28
 20052dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20052e0:	e0bfff17 	ldw	r2,-4(fp)
 20052e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 20052e8:	e0bffb17 	ldw	r2,-20(fp)
 20052ec:	10800017 	ldw	r2,0(r2)
 20052f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20052f4:	e0bffc17 	ldw	r2,-16(fp)
 20052f8:	10800104 	addi	r2,r2,4
 20052fc:	10800037 	ldwio	r2,0(r2)
 2005300:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2005304:	e0bffd17 	ldw	r2,-12(fp)
 2005308:	1080c00c 	andi	r2,r2,768
 200530c:	10006d26 	beq	r2,zero,20054c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2005310:	e0bffd17 	ldw	r2,-12(fp)
 2005314:	1080400c 	andi	r2,r2,256
 2005318:	10003526 	beq	r2,zero,20053f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200531c:	00800074 	movhi	r2,1
 2005320:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2005324:	e0bffb17 	ldw	r2,-20(fp)
 2005328:	10800a17 	ldw	r2,40(r2)
 200532c:	10800044 	addi	r2,r2,1
 2005330:	1081ffcc 	andi	r2,r2,2047
 2005334:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2005338:	e0bffb17 	ldw	r2,-20(fp)
 200533c:	10c00b17 	ldw	r3,44(r2)
 2005340:	e0bffe17 	ldw	r2,-8(fp)
 2005344:	18801526 	beq	r3,r2,200539c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2005348:	e0bffc17 	ldw	r2,-16(fp)
 200534c:	10800037 	ldwio	r2,0(r2)
 2005350:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2005354:	e0bff917 	ldw	r2,-28(fp)
 2005358:	10a0000c 	andi	r2,r2,32768
 200535c:	10001126 	beq	r2,zero,20053a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2005360:	e0bffb17 	ldw	r2,-20(fp)
 2005364:	10800a17 	ldw	r2,40(r2)
 2005368:	e0fff917 	ldw	r3,-28(fp)
 200536c:	1809883a 	mov	r4,r3
 2005370:	e0fffb17 	ldw	r3,-20(fp)
 2005374:	1885883a 	add	r2,r3,r2
 2005378:	10800e04 	addi	r2,r2,56
 200537c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2005380:	e0bffb17 	ldw	r2,-20(fp)
 2005384:	10800a17 	ldw	r2,40(r2)
 2005388:	10800044 	addi	r2,r2,1
 200538c:	10c1ffcc 	andi	r3,r2,2047
 2005390:	e0bffb17 	ldw	r2,-20(fp)
 2005394:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2005398:	003fe206 	br	2005324 <__alt_mem_flash+0xfdff4324>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200539c:	0001883a 	nop
 20053a0:	00000106 	br	20053a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 20053a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 20053a8:	e0bff917 	ldw	r2,-28(fp)
 20053ac:	10bfffec 	andhi	r2,r2,65535
 20053b0:	10000f26 	beq	r2,zero,20053f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20053b4:	e0bffb17 	ldw	r2,-20(fp)
 20053b8:	10c00817 	ldw	r3,32(r2)
 20053bc:	00bfff84 	movi	r2,-2
 20053c0:	1886703a 	and	r3,r3,r2
 20053c4:	e0bffb17 	ldw	r2,-20(fp)
 20053c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 20053cc:	e0bffc17 	ldw	r2,-16(fp)
 20053d0:	10800104 	addi	r2,r2,4
 20053d4:	1007883a 	mov	r3,r2
 20053d8:	e0bffb17 	ldw	r2,-20(fp)
 20053dc:	10800817 	ldw	r2,32(r2)
 20053e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20053e4:	e0bffc17 	ldw	r2,-16(fp)
 20053e8:	10800104 	addi	r2,r2,4
 20053ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20053f0:	e0bffd17 	ldw	r2,-12(fp)
 20053f4:	1080800c 	andi	r2,r2,512
 20053f8:	103fbe26 	beq	r2,zero,20052f4 <__alt_mem_flash+0xfdff42f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20053fc:	e0bffd17 	ldw	r2,-12(fp)
 2005400:	1004d43a 	srli	r2,r2,16
 2005404:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2005408:	00001406 	br	200545c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200540c:	e0bffc17 	ldw	r2,-16(fp)
 2005410:	e0fffb17 	ldw	r3,-20(fp)
 2005414:	18c00d17 	ldw	r3,52(r3)
 2005418:	e13ffb17 	ldw	r4,-20(fp)
 200541c:	20c7883a 	add	r3,r4,r3
 2005420:	18c20e04 	addi	r3,r3,2104
 2005424:	18c00003 	ldbu	r3,0(r3)
 2005428:	18c03fcc 	andi	r3,r3,255
 200542c:	18c0201c 	xori	r3,r3,128
 2005430:	18ffe004 	addi	r3,r3,-128
 2005434:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2005438:	e0bffb17 	ldw	r2,-20(fp)
 200543c:	10800d17 	ldw	r2,52(r2)
 2005440:	10800044 	addi	r2,r2,1
 2005444:	10c1ffcc 	andi	r3,r2,2047
 2005448:	e0bffb17 	ldw	r2,-20(fp)
 200544c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2005450:	e0bffa17 	ldw	r2,-24(fp)
 2005454:	10bfffc4 	addi	r2,r2,-1
 2005458:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200545c:	e0bffa17 	ldw	r2,-24(fp)
 2005460:	10000526 	beq	r2,zero,2005478 <altera_avalon_jtag_uart_irq+0x1a8>
 2005464:	e0bffb17 	ldw	r2,-20(fp)
 2005468:	10c00d17 	ldw	r3,52(r2)
 200546c:	e0bffb17 	ldw	r2,-20(fp)
 2005470:	10800c17 	ldw	r2,48(r2)
 2005474:	18bfe51e 	bne	r3,r2,200540c <__alt_mem_flash+0xfdff440c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2005478:	e0bffa17 	ldw	r2,-24(fp)
 200547c:	103f9d26 	beq	r2,zero,20052f4 <__alt_mem_flash+0xfdff42f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2005480:	e0bffb17 	ldw	r2,-20(fp)
 2005484:	10c00817 	ldw	r3,32(r2)
 2005488:	00bfff44 	movi	r2,-3
 200548c:	1886703a 	and	r3,r3,r2
 2005490:	e0bffb17 	ldw	r2,-20(fp)
 2005494:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2005498:	e0bffb17 	ldw	r2,-20(fp)
 200549c:	10800017 	ldw	r2,0(r2)
 20054a0:	10800104 	addi	r2,r2,4
 20054a4:	1007883a 	mov	r3,r2
 20054a8:	e0bffb17 	ldw	r2,-20(fp)
 20054ac:	10800817 	ldw	r2,32(r2)
 20054b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20054b4:	e0bffc17 	ldw	r2,-16(fp)
 20054b8:	10800104 	addi	r2,r2,4
 20054bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20054c0:	003f8c06 	br	20052f4 <__alt_mem_flash+0xfdff42f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 20054c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 20054c8:	0001883a 	nop
 20054cc:	e037883a 	mov	sp,fp
 20054d0:	df000017 	ldw	fp,0(sp)
 20054d4:	dec00104 	addi	sp,sp,4
 20054d8:	f800283a 	ret

020054dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20054dc:	defff804 	addi	sp,sp,-32
 20054e0:	df000715 	stw	fp,28(sp)
 20054e4:	df000704 	addi	fp,sp,28
 20054e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 20054ec:	e0bffb17 	ldw	r2,-20(fp)
 20054f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 20054f4:	e0bff917 	ldw	r2,-28(fp)
 20054f8:	10800017 	ldw	r2,0(r2)
 20054fc:	10800104 	addi	r2,r2,4
 2005500:	10800037 	ldwio	r2,0(r2)
 2005504:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2005508:	e0bffa17 	ldw	r2,-24(fp)
 200550c:	1081000c 	andi	r2,r2,1024
 2005510:	10000b26 	beq	r2,zero,2005540 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2005514:	e0bff917 	ldw	r2,-28(fp)
 2005518:	10800017 	ldw	r2,0(r2)
 200551c:	10800104 	addi	r2,r2,4
 2005520:	1007883a 	mov	r3,r2
 2005524:	e0bff917 	ldw	r2,-28(fp)
 2005528:	10800817 	ldw	r2,32(r2)
 200552c:	10810014 	ori	r2,r2,1024
 2005530:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2005534:	e0bff917 	ldw	r2,-28(fp)
 2005538:	10000915 	stw	zero,36(r2)
 200553c:	00000a06 	br	2005568 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2005540:	e0bff917 	ldw	r2,-28(fp)
 2005544:	10c00917 	ldw	r3,36(r2)
 2005548:	00a00034 	movhi	r2,32768
 200554c:	10bfff04 	addi	r2,r2,-4
 2005550:	10c00536 	bltu	r2,r3,2005568 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2005554:	e0bff917 	ldw	r2,-28(fp)
 2005558:	10800917 	ldw	r2,36(r2)
 200555c:	10c00044 	addi	r3,r2,1
 2005560:	e0bff917 	ldw	r2,-28(fp)
 2005564:	10c00915 	stw	r3,36(r2)
 2005568:	d0a61a17 	ldw	r2,-26520(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200556c:	e037883a 	mov	sp,fp
 2005570:	df000017 	ldw	fp,0(sp)
 2005574:	dec00104 	addi	sp,sp,4
 2005578:	f800283a 	ret

0200557c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200557c:	defffd04 	addi	sp,sp,-12
 2005580:	df000215 	stw	fp,8(sp)
 2005584:	df000204 	addi	fp,sp,8
 2005588:	e13ffe15 	stw	r4,-8(fp)
 200558c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2005590:	00000506 	br	20055a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2005594:	e0bfff17 	ldw	r2,-4(fp)
 2005598:	1090000c 	andi	r2,r2,16384
 200559c:	10000226 	beq	r2,zero,20055a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 20055a0:	00bffd44 	movi	r2,-11
 20055a4:	00000b06 	br	20055d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20055a8:	e0bffe17 	ldw	r2,-8(fp)
 20055ac:	10c00d17 	ldw	r3,52(r2)
 20055b0:	e0bffe17 	ldw	r2,-8(fp)
 20055b4:	10800c17 	ldw	r2,48(r2)
 20055b8:	18800526 	beq	r3,r2,20055d0 <altera_avalon_jtag_uart_close+0x54>
 20055bc:	e0bffe17 	ldw	r2,-8(fp)
 20055c0:	10c00917 	ldw	r3,36(r2)
 20055c4:	e0bffe17 	ldw	r2,-8(fp)
 20055c8:	10800117 	ldw	r2,4(r2)
 20055cc:	18bff136 	bltu	r3,r2,2005594 <__alt_mem_flash+0xfdff4594>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20055d0:	0005883a 	mov	r2,zero
}
 20055d4:	e037883a 	mov	sp,fp
 20055d8:	df000017 	ldw	fp,0(sp)
 20055dc:	dec00104 	addi	sp,sp,4
 20055e0:	f800283a 	ret

020055e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20055e4:	defffa04 	addi	sp,sp,-24
 20055e8:	df000515 	stw	fp,20(sp)
 20055ec:	df000504 	addi	fp,sp,20
 20055f0:	e13ffd15 	stw	r4,-12(fp)
 20055f4:	e17ffe15 	stw	r5,-8(fp)
 20055f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 20055fc:	00bff9c4 	movi	r2,-25
 2005600:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2005604:	e0bffe17 	ldw	r2,-8(fp)
 2005608:	10da8060 	cmpeqi	r3,r2,27137
 200560c:	1800031e 	bne	r3,zero,200561c <altera_avalon_jtag_uart_ioctl+0x38>
 2005610:	109a80a0 	cmpeqi	r2,r2,27138
 2005614:	1000181e 	bne	r2,zero,2005678 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 2005618:	00002906 	br	20056c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200561c:	e0bffd17 	ldw	r2,-12(fp)
 2005620:	10c00117 	ldw	r3,4(r2)
 2005624:	00a00034 	movhi	r2,32768
 2005628:	10bfffc4 	addi	r2,r2,-1
 200562c:	18802126 	beq	r3,r2,20056b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 2005630:	e0bfff17 	ldw	r2,-4(fp)
 2005634:	10800017 	ldw	r2,0(r2)
 2005638:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200563c:	e0bffc17 	ldw	r2,-16(fp)
 2005640:	10800090 	cmplti	r2,r2,2
 2005644:	1000061e 	bne	r2,zero,2005660 <altera_avalon_jtag_uart_ioctl+0x7c>
 2005648:	e0fffc17 	ldw	r3,-16(fp)
 200564c:	00a00034 	movhi	r2,32768
 2005650:	10bfffc4 	addi	r2,r2,-1
 2005654:	18800226 	beq	r3,r2,2005660 <altera_avalon_jtag_uart_ioctl+0x7c>
 2005658:	e0bffc17 	ldw	r2,-16(fp)
 200565c:	00000206 	br	2005668 <altera_avalon_jtag_uart_ioctl+0x84>
 2005660:	00a00034 	movhi	r2,32768
 2005664:	10bfff84 	addi	r2,r2,-2
 2005668:	e0fffd17 	ldw	r3,-12(fp)
 200566c:	18800115 	stw	r2,4(r3)
      rc = 0;
 2005670:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2005674:	00000f06 	br	20056b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2005678:	e0bffd17 	ldw	r2,-12(fp)
 200567c:	10c00117 	ldw	r3,4(r2)
 2005680:	00a00034 	movhi	r2,32768
 2005684:	10bfffc4 	addi	r2,r2,-1
 2005688:	18800c26 	beq	r3,r2,20056bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200568c:	e0bffd17 	ldw	r2,-12(fp)
 2005690:	10c00917 	ldw	r3,36(r2)
 2005694:	e0bffd17 	ldw	r2,-12(fp)
 2005698:	10800117 	ldw	r2,4(r2)
 200569c:	1885803a 	cmpltu	r2,r3,r2
 20056a0:	10c03fcc 	andi	r3,r2,255
 20056a4:	e0bfff17 	ldw	r2,-4(fp)
 20056a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 20056ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 20056b0:	00000206 	br	20056bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 20056b4:	0001883a 	nop
 20056b8:	00000106 	br	20056c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 20056bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 20056c0:	e0bffb17 	ldw	r2,-20(fp)
}
 20056c4:	e037883a 	mov	sp,fp
 20056c8:	df000017 	ldw	fp,0(sp)
 20056cc:	dec00104 	addi	sp,sp,4
 20056d0:	f800283a 	ret

020056d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20056d4:	defff304 	addi	sp,sp,-52
 20056d8:	dfc00c15 	stw	ra,48(sp)
 20056dc:	df000b15 	stw	fp,44(sp)
 20056e0:	df000b04 	addi	fp,sp,44
 20056e4:	e13ffc15 	stw	r4,-16(fp)
 20056e8:	e17ffd15 	stw	r5,-12(fp)
 20056ec:	e1bffe15 	stw	r6,-8(fp)
 20056f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20056f4:	e0bffd17 	ldw	r2,-12(fp)
 20056f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20056fc:	00004706 	br	200581c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2005700:	e0bffc17 	ldw	r2,-16(fp)
 2005704:	10800a17 	ldw	r2,40(r2)
 2005708:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200570c:	e0bffc17 	ldw	r2,-16(fp)
 2005710:	10800b17 	ldw	r2,44(r2)
 2005714:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2005718:	e0fff717 	ldw	r3,-36(fp)
 200571c:	e0bff817 	ldw	r2,-32(fp)
 2005720:	18800536 	bltu	r3,r2,2005738 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2005724:	e0fff717 	ldw	r3,-36(fp)
 2005728:	e0bff817 	ldw	r2,-32(fp)
 200572c:	1885c83a 	sub	r2,r3,r2
 2005730:	e0bff615 	stw	r2,-40(fp)
 2005734:	00000406 	br	2005748 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2005738:	00c20004 	movi	r3,2048
 200573c:	e0bff817 	ldw	r2,-32(fp)
 2005740:	1885c83a 	sub	r2,r3,r2
 2005744:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2005748:	e0bff617 	ldw	r2,-40(fp)
 200574c:	10001e26 	beq	r2,zero,20057c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2005750:	e0fffe17 	ldw	r3,-8(fp)
 2005754:	e0bff617 	ldw	r2,-40(fp)
 2005758:	1880022e 	bgeu	r3,r2,2005764 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200575c:	e0bffe17 	ldw	r2,-8(fp)
 2005760:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2005764:	e0bffc17 	ldw	r2,-16(fp)
 2005768:	10c00e04 	addi	r3,r2,56
 200576c:	e0bff817 	ldw	r2,-32(fp)
 2005770:	1885883a 	add	r2,r3,r2
 2005774:	e1bff617 	ldw	r6,-40(fp)
 2005778:	100b883a 	mov	r5,r2
 200577c:	e13ff517 	ldw	r4,-44(fp)
 2005780:	20080680 	call	2008068 <memcpy>
      ptr   += n;
 2005784:	e0fff517 	ldw	r3,-44(fp)
 2005788:	e0bff617 	ldw	r2,-40(fp)
 200578c:	1885883a 	add	r2,r3,r2
 2005790:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2005794:	e0fffe17 	ldw	r3,-8(fp)
 2005798:	e0bff617 	ldw	r2,-40(fp)
 200579c:	1885c83a 	sub	r2,r3,r2
 20057a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20057a4:	e0fff817 	ldw	r3,-32(fp)
 20057a8:	e0bff617 	ldw	r2,-40(fp)
 20057ac:	1885883a 	add	r2,r3,r2
 20057b0:	10c1ffcc 	andi	r3,r2,2047
 20057b4:	e0bffc17 	ldw	r2,-16(fp)
 20057b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 20057bc:	e0bffe17 	ldw	r2,-8(fp)
 20057c0:	00bfcf16 	blt	zero,r2,2005700 <__alt_mem_flash+0xfdff4700>
 20057c4:	00000106 	br	20057cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 20057c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 20057cc:	e0fff517 	ldw	r3,-44(fp)
 20057d0:	e0bffd17 	ldw	r2,-12(fp)
 20057d4:	1880141e 	bne	r3,r2,2005828 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20057d8:	e0bfff17 	ldw	r2,-4(fp)
 20057dc:	1090000c 	andi	r2,r2,16384
 20057e0:	1000131e 	bne	r2,zero,2005830 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20057e4:	0001883a 	nop
 20057e8:	e0bffc17 	ldw	r2,-16(fp)
 20057ec:	10c00a17 	ldw	r3,40(r2)
 20057f0:	e0bff717 	ldw	r2,-36(fp)
 20057f4:	1880051e 	bne	r3,r2,200580c <altera_avalon_jtag_uart_read+0x138>
 20057f8:	e0bffc17 	ldw	r2,-16(fp)
 20057fc:	10c00917 	ldw	r3,36(r2)
 2005800:	e0bffc17 	ldw	r2,-16(fp)
 2005804:	10800117 	ldw	r2,4(r2)
 2005808:	18bff736 	bltu	r3,r2,20057e8 <__alt_mem_flash+0xfdff47e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200580c:	e0bffc17 	ldw	r2,-16(fp)
 2005810:	10c00a17 	ldw	r3,40(r2)
 2005814:	e0bff717 	ldw	r2,-36(fp)
 2005818:	18800726 	beq	r3,r2,2005838 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200581c:	e0bffe17 	ldw	r2,-8(fp)
 2005820:	00bfb716 	blt	zero,r2,2005700 <__alt_mem_flash+0xfdff4700>
 2005824:	00000506 	br	200583c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2005828:	0001883a 	nop
 200582c:	00000306 	br	200583c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2005830:	0001883a 	nop
 2005834:	00000106 	br	200583c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2005838:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200583c:	e0fff517 	ldw	r3,-44(fp)
 2005840:	e0bffd17 	ldw	r2,-12(fp)
 2005844:	18801826 	beq	r3,r2,20058a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005848:	0005303a 	rdctl	r2,status
 200584c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005850:	e0fffb17 	ldw	r3,-20(fp)
 2005854:	00bfff84 	movi	r2,-2
 2005858:	1884703a 	and	r2,r3,r2
 200585c:	1001703a 	wrctl	status,r2
  
  return context;
 2005860:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2005864:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2005868:	e0bffc17 	ldw	r2,-16(fp)
 200586c:	10800817 	ldw	r2,32(r2)
 2005870:	10c00054 	ori	r3,r2,1
 2005874:	e0bffc17 	ldw	r2,-16(fp)
 2005878:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200587c:	e0bffc17 	ldw	r2,-16(fp)
 2005880:	10800017 	ldw	r2,0(r2)
 2005884:	10800104 	addi	r2,r2,4
 2005888:	1007883a 	mov	r3,r2
 200588c:	e0bffc17 	ldw	r2,-16(fp)
 2005890:	10800817 	ldw	r2,32(r2)
 2005894:	18800035 	stwio	r2,0(r3)
 2005898:	e0bffa17 	ldw	r2,-24(fp)
 200589c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20058a0:	e0bff917 	ldw	r2,-28(fp)
 20058a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 20058a8:	e0fff517 	ldw	r3,-44(fp)
 20058ac:	e0bffd17 	ldw	r2,-12(fp)
 20058b0:	18800426 	beq	r3,r2,20058c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 20058b4:	e0fff517 	ldw	r3,-44(fp)
 20058b8:	e0bffd17 	ldw	r2,-12(fp)
 20058bc:	1885c83a 	sub	r2,r3,r2
 20058c0:	00000606 	br	20058dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 20058c4:	e0bfff17 	ldw	r2,-4(fp)
 20058c8:	1090000c 	andi	r2,r2,16384
 20058cc:	10000226 	beq	r2,zero,20058d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 20058d0:	00bffd44 	movi	r2,-11
 20058d4:	00000106 	br	20058dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 20058d8:	00bffec4 	movi	r2,-5
}
 20058dc:	e037883a 	mov	sp,fp
 20058e0:	dfc00117 	ldw	ra,4(sp)
 20058e4:	df000017 	ldw	fp,0(sp)
 20058e8:	dec00204 	addi	sp,sp,8
 20058ec:	f800283a 	ret

020058f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20058f0:	defff304 	addi	sp,sp,-52
 20058f4:	dfc00c15 	stw	ra,48(sp)
 20058f8:	df000b15 	stw	fp,44(sp)
 20058fc:	df000b04 	addi	fp,sp,44
 2005900:	e13ffc15 	stw	r4,-16(fp)
 2005904:	e17ffd15 	stw	r5,-12(fp)
 2005908:	e1bffe15 	stw	r6,-8(fp)
 200590c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2005910:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2005914:	e0bffd17 	ldw	r2,-12(fp)
 2005918:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200591c:	00003706 	br	20059fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2005920:	e0bffc17 	ldw	r2,-16(fp)
 2005924:	10800c17 	ldw	r2,48(r2)
 2005928:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 200592c:	e0bffc17 	ldw	r2,-16(fp)
 2005930:	10800d17 	ldw	r2,52(r2)
 2005934:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2005938:	e0fff917 	ldw	r3,-28(fp)
 200593c:	e0bff517 	ldw	r2,-44(fp)
 2005940:	1880062e 	bgeu	r3,r2,200595c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2005944:	e0fff517 	ldw	r3,-44(fp)
 2005948:	e0bff917 	ldw	r2,-28(fp)
 200594c:	1885c83a 	sub	r2,r3,r2
 2005950:	10bfffc4 	addi	r2,r2,-1
 2005954:	e0bff615 	stw	r2,-40(fp)
 2005958:	00000b06 	br	2005988 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200595c:	e0bff517 	ldw	r2,-44(fp)
 2005960:	10000526 	beq	r2,zero,2005978 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2005964:	00c20004 	movi	r3,2048
 2005968:	e0bff917 	ldw	r2,-28(fp)
 200596c:	1885c83a 	sub	r2,r3,r2
 2005970:	e0bff615 	stw	r2,-40(fp)
 2005974:	00000406 	br	2005988 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2005978:	00c1ffc4 	movi	r3,2047
 200597c:	e0bff917 	ldw	r2,-28(fp)
 2005980:	1885c83a 	sub	r2,r3,r2
 2005984:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2005988:	e0bff617 	ldw	r2,-40(fp)
 200598c:	10001e26 	beq	r2,zero,2005a08 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2005990:	e0fffe17 	ldw	r3,-8(fp)
 2005994:	e0bff617 	ldw	r2,-40(fp)
 2005998:	1880022e 	bgeu	r3,r2,20059a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200599c:	e0bffe17 	ldw	r2,-8(fp)
 20059a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 20059a4:	e0bffc17 	ldw	r2,-16(fp)
 20059a8:	10c20e04 	addi	r3,r2,2104
 20059ac:	e0bff917 	ldw	r2,-28(fp)
 20059b0:	1885883a 	add	r2,r3,r2
 20059b4:	e1bff617 	ldw	r6,-40(fp)
 20059b8:	e17ffd17 	ldw	r5,-12(fp)
 20059bc:	1009883a 	mov	r4,r2
 20059c0:	20080680 	call	2008068 <memcpy>
      ptr   += n;
 20059c4:	e0fffd17 	ldw	r3,-12(fp)
 20059c8:	e0bff617 	ldw	r2,-40(fp)
 20059cc:	1885883a 	add	r2,r3,r2
 20059d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 20059d4:	e0fffe17 	ldw	r3,-8(fp)
 20059d8:	e0bff617 	ldw	r2,-40(fp)
 20059dc:	1885c83a 	sub	r2,r3,r2
 20059e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20059e4:	e0fff917 	ldw	r3,-28(fp)
 20059e8:	e0bff617 	ldw	r2,-40(fp)
 20059ec:	1885883a 	add	r2,r3,r2
 20059f0:	10c1ffcc 	andi	r3,r2,2047
 20059f4:	e0bffc17 	ldw	r2,-16(fp)
 20059f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20059fc:	e0bffe17 	ldw	r2,-8(fp)
 2005a00:	00bfc716 	blt	zero,r2,2005920 <__alt_mem_flash+0xfdff4920>
 2005a04:	00000106 	br	2005a0c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2005a08:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005a0c:	0005303a 	rdctl	r2,status
 2005a10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005a14:	e0fffb17 	ldw	r3,-20(fp)
 2005a18:	00bfff84 	movi	r2,-2
 2005a1c:	1884703a 	and	r2,r3,r2
 2005a20:	1001703a 	wrctl	status,r2
  
  return context;
 2005a24:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2005a28:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2005a2c:	e0bffc17 	ldw	r2,-16(fp)
 2005a30:	10800817 	ldw	r2,32(r2)
 2005a34:	10c00094 	ori	r3,r2,2
 2005a38:	e0bffc17 	ldw	r2,-16(fp)
 2005a3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2005a40:	e0bffc17 	ldw	r2,-16(fp)
 2005a44:	10800017 	ldw	r2,0(r2)
 2005a48:	10800104 	addi	r2,r2,4
 2005a4c:	1007883a 	mov	r3,r2
 2005a50:	e0bffc17 	ldw	r2,-16(fp)
 2005a54:	10800817 	ldw	r2,32(r2)
 2005a58:	18800035 	stwio	r2,0(r3)
 2005a5c:	e0bffa17 	ldw	r2,-24(fp)
 2005a60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005a64:	e0bff817 	ldw	r2,-32(fp)
 2005a68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2005a6c:	e0bffe17 	ldw	r2,-8(fp)
 2005a70:	0080100e 	bge	zero,r2,2005ab4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 2005a74:	e0bfff17 	ldw	r2,-4(fp)
 2005a78:	1090000c 	andi	r2,r2,16384
 2005a7c:	1000101e 	bne	r2,zero,2005ac0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2005a80:	0001883a 	nop
 2005a84:	e0bffc17 	ldw	r2,-16(fp)
 2005a88:	10c00d17 	ldw	r3,52(r2)
 2005a8c:	e0bff517 	ldw	r2,-44(fp)
 2005a90:	1880051e 	bne	r3,r2,2005aa8 <altera_avalon_jtag_uart_write+0x1b8>
 2005a94:	e0bffc17 	ldw	r2,-16(fp)
 2005a98:	10c00917 	ldw	r3,36(r2)
 2005a9c:	e0bffc17 	ldw	r2,-16(fp)
 2005aa0:	10800117 	ldw	r2,4(r2)
 2005aa4:	18bff736 	bltu	r3,r2,2005a84 <__alt_mem_flash+0xfdff4a84>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2005aa8:	e0bffc17 	ldw	r2,-16(fp)
 2005aac:	10800917 	ldw	r2,36(r2)
 2005ab0:	1000051e 	bne	r2,zero,2005ac8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 2005ab4:	e0bffe17 	ldw	r2,-8(fp)
 2005ab8:	00bfd016 	blt	zero,r2,20059fc <__alt_mem_flash+0xfdff49fc>
 2005abc:	00000306 	br	2005acc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2005ac0:	0001883a 	nop
 2005ac4:	00000106 	br	2005acc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2005ac8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2005acc:	e0fffd17 	ldw	r3,-12(fp)
 2005ad0:	e0bff717 	ldw	r2,-36(fp)
 2005ad4:	18800426 	beq	r3,r2,2005ae8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2005ad8:	e0fffd17 	ldw	r3,-12(fp)
 2005adc:	e0bff717 	ldw	r2,-36(fp)
 2005ae0:	1885c83a 	sub	r2,r3,r2
 2005ae4:	00000606 	br	2005b00 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2005ae8:	e0bfff17 	ldw	r2,-4(fp)
 2005aec:	1090000c 	andi	r2,r2,16384
 2005af0:	10000226 	beq	r2,zero,2005afc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 2005af4:	00bffd44 	movi	r2,-11
 2005af8:	00000106 	br	2005b00 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2005afc:	00bffec4 	movi	r2,-5
}
 2005b00:	e037883a 	mov	sp,fp
 2005b04:	dfc00117 	ldw	ra,4(sp)
 2005b08:	df000017 	ldw	fp,0(sp)
 2005b0c:	dec00204 	addi	sp,sp,8
 2005b10:	f800283a 	ret

02005b14 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2005b14:	defff404 	addi	sp,sp,-48
 2005b18:	df000b15 	stw	fp,44(sp)
 2005b1c:	df000b04 	addi	fp,sp,44
 2005b20:	e13ffc15 	stw	r4,-16(fp)
 2005b24:	e17ffd15 	stw	r5,-12(fp)
 2005b28:	e1bffe15 	stw	r6,-8(fp)
 2005b2c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2005b30:	e0ffff17 	ldw	r3,-4(fp)
 2005b34:	e0bffe17 	ldw	r2,-8(fp)
 2005b38:	1885883a 	add	r2,r3,r2
 2005b3c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 2005b40:	e0c00217 	ldw	r3,8(fp)
 2005b44:	e0800117 	ldw	r2,4(fp)
 2005b48:	1885883a 	add	r2,r3,r2
 2005b4c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2005b50:	e0800117 	ldw	r2,4(fp)
 2005b54:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2005b58:	e0bffe17 	ldw	r2,-8(fp)
 2005b5c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2005b60:	00800044 	movi	r2,1
 2005b64:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2005b68:	e0bffc17 	ldw	r2,-16(fp)
 2005b6c:	10800504 	addi	r2,r2,20
 2005b70:	1009883a 	mov	r4,r2
 2005b74:	00c00044 	movi	r3,1
 2005b78:	e0bffd17 	ldw	r2,-12(fp)
 2005b7c:	1884983a 	sll	r2,r3,r2
 2005b80:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2005b84:	e0800317 	ldw	r2,12(fp)
 2005b88:	1080008c 	andi	r2,r2,2
 2005b8c:	1000051e 	bne	r2,zero,2005ba4 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2005b90:	e0bffc17 	ldw	r2,-16(fp)
 2005b94:	10800304 	addi	r2,r2,12
 2005b98:	1007883a 	mov	r3,r2
 2005b9c:	00810004 	movi	r2,1024
 2005ba0:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2005ba4:	e0bffc17 	ldw	r2,-16(fp)
 2005ba8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2005bac:	e0bffc17 	ldw	r2,-16(fp)
 2005bb0:	10800204 	addi	r2,r2,8
 2005bb4:	10800037 	ldwio	r2,0(r2)
 2005bb8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2005bbc:	e0bffa17 	ldw	r2,-24(fp)
 2005bc0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2005bc4:	10000226 	beq	r2,zero,2005bd0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2005bc8:	e0bff717 	ldw	r2,-36(fp)
 2005bcc:	1000031e 	bne	r2,zero,2005bdc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2005bd0:	e0bffa17 	ldw	r2,-24(fp)
 2005bd4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2005bd8:	103ff426 	beq	r2,zero,2005bac <__alt_mem_flash+0xfdff4bac>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2005bdc:	e0bffa17 	ldw	r2,-24(fp)
 2005be0:	1080100c 	andi	r2,r2,64
 2005be4:	10001e26 	beq	r2,zero,2005c60 <alt_avalon_spi_command+0x14c>
 2005be8:	e0bff717 	ldw	r2,-36(fp)
 2005bec:	00801c0e 	bge	zero,r2,2005c60 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 2005bf0:	e0bff717 	ldw	r2,-36(fp)
 2005bf4:	10bfffc4 	addi	r2,r2,-1
 2005bf8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 2005bfc:	e0ffff17 	ldw	r3,-4(fp)
 2005c00:	e0bff817 	ldw	r2,-32(fp)
 2005c04:	18800a2e 	bgeu	r3,r2,2005c30 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2005c08:	e0bffc17 	ldw	r2,-16(fp)
 2005c0c:	10800104 	addi	r2,r2,4
 2005c10:	1009883a 	mov	r4,r2
 2005c14:	e0bfff17 	ldw	r2,-4(fp)
 2005c18:	10c00044 	addi	r3,r2,1
 2005c1c:	e0ffff15 	stw	r3,-4(fp)
 2005c20:	10800003 	ldbu	r2,0(r2)
 2005c24:	10803fcc 	andi	r2,r2,255
 2005c28:	20800035 	stwio	r2,0(r4)
 2005c2c:	00000c06 	br	2005c60 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 2005c30:	e0bff517 	ldw	r2,-44(fp)
 2005c34:	10000826 	beq	r2,zero,2005c58 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 2005c38:	e0bff517 	ldw	r2,-44(fp)
 2005c3c:	10bfffc4 	addi	r2,r2,-1
 2005c40:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2005c44:	e0bffc17 	ldw	r2,-16(fp)
 2005c48:	10800104 	addi	r2,r2,4
 2005c4c:	0007883a 	mov	r3,zero
 2005c50:	10c00035 	stwio	r3,0(r2)
 2005c54:	00000206 	br	2005c60 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2005c58:	00bf0004 	movi	r2,-1024
 2005c5c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2005c60:	e0bffa17 	ldw	r2,-24(fp)
 2005c64:	1080200c 	andi	r2,r2,128
 2005c68:	103fd026 	beq	r2,zero,2005bac <__alt_mem_flash+0xfdff4bac>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2005c6c:	e0bffc17 	ldw	r2,-16(fp)
 2005c70:	10800037 	ldwio	r2,0(r2)
 2005c74:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2005c78:	e0bff617 	ldw	r2,-40(fp)
 2005c7c:	10000426 	beq	r2,zero,2005c90 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 2005c80:	e0bff617 	ldw	r2,-40(fp)
 2005c84:	10bfffc4 	addi	r2,r2,-1
 2005c88:	e0bff615 	stw	r2,-40(fp)
 2005c8c:	00000506 	br	2005ca4 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 2005c90:	e0800217 	ldw	r2,8(fp)
 2005c94:	10c00044 	addi	r3,r2,1
 2005c98:	e0c00215 	stw	r3,8(fp)
 2005c9c:	e0fffb17 	ldw	r3,-20(fp)
 2005ca0:	10c00005 	stb	r3,0(r2)
      credits++;
 2005ca4:	e0bff717 	ldw	r2,-36(fp)
 2005ca8:	10800044 	addi	r2,r2,1
 2005cac:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 2005cb0:	e0bff617 	ldw	r2,-40(fp)
 2005cb4:	103fbd1e 	bne	r2,zero,2005bac <__alt_mem_flash+0xfdff4bac>
 2005cb8:	e0c00217 	ldw	r3,8(fp)
 2005cbc:	e0bff917 	ldw	r2,-28(fp)
 2005cc0:	18bfba1e 	bne	r3,r2,2005bac <__alt_mem_flash+0xfdff4bac>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2005cc4:	e0bffc17 	ldw	r2,-16(fp)
 2005cc8:	10800204 	addi	r2,r2,8
 2005ccc:	10800037 	ldwio	r2,0(r2)
 2005cd0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2005cd4:	e0bffa17 	ldw	r2,-24(fp)
 2005cd8:	1080080c 	andi	r2,r2,32
 2005cdc:	103ff926 	beq	r2,zero,2005cc4 <__alt_mem_flash+0xfdff4cc4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2005ce0:	e0800317 	ldw	r2,12(fp)
 2005ce4:	1080004c 	andi	r2,r2,1
 2005ce8:	1000041e 	bne	r2,zero,2005cfc <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2005cec:	e0bffc17 	ldw	r2,-16(fp)
 2005cf0:	10800304 	addi	r2,r2,12
 2005cf4:	0007883a 	mov	r3,zero
 2005cf8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 2005cfc:	e0800117 	ldw	r2,4(fp)
}
 2005d00:	e037883a 	mov	sp,fp
 2005d04:	df000017 	ldw	fp,0(sp)
 2005d08:	dec00104 	addi	sp,sp,4
 2005d0c:	f800283a 	ret

02005d10 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2005d10:	defffa04 	addi	sp,sp,-24
 2005d14:	dfc00515 	stw	ra,20(sp)
 2005d18:	df000415 	stw	fp,16(sp)
 2005d1c:	df000404 	addi	fp,sp,16
 2005d20:	e13ffd15 	stw	r4,-12(fp)
 2005d24:	e17ffe15 	stw	r5,-8(fp)
 2005d28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2005d2c:	e0bffd17 	ldw	r2,-12(fp)
 2005d30:	10800017 	ldw	r2,0(r2)
 2005d34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2005d38:	e0bffc17 	ldw	r2,-16(fp)
 2005d3c:	10c00a04 	addi	r3,r2,40
 2005d40:	e0bffd17 	ldw	r2,-12(fp)
 2005d44:	10800217 	ldw	r2,8(r2)
 2005d48:	100f883a 	mov	r7,r2
 2005d4c:	e1bfff17 	ldw	r6,-4(fp)
 2005d50:	e17ffe17 	ldw	r5,-8(fp)
 2005d54:	1809883a 	mov	r4,r3
 2005d58:	20062240 	call	2006224 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2005d5c:	e037883a 	mov	sp,fp
 2005d60:	dfc00117 	ldw	ra,4(sp)
 2005d64:	df000017 	ldw	fp,0(sp)
 2005d68:	dec00204 	addi	sp,sp,8
 2005d6c:	f800283a 	ret

02005d70 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2005d70:	defffa04 	addi	sp,sp,-24
 2005d74:	dfc00515 	stw	ra,20(sp)
 2005d78:	df000415 	stw	fp,16(sp)
 2005d7c:	df000404 	addi	fp,sp,16
 2005d80:	e13ffd15 	stw	r4,-12(fp)
 2005d84:	e17ffe15 	stw	r5,-8(fp)
 2005d88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2005d8c:	e0bffd17 	ldw	r2,-12(fp)
 2005d90:	10800017 	ldw	r2,0(r2)
 2005d94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 2005d98:	e0bffc17 	ldw	r2,-16(fp)
 2005d9c:	10c00a04 	addi	r3,r2,40
 2005da0:	e0bffd17 	ldw	r2,-12(fp)
 2005da4:	10800217 	ldw	r2,8(r2)
 2005da8:	100f883a 	mov	r7,r2
 2005dac:	e1bfff17 	ldw	r6,-4(fp)
 2005db0:	e17ffe17 	ldw	r5,-8(fp)
 2005db4:	1809883a 	mov	r4,r3
 2005db8:	200643c0 	call	200643c <altera_avalon_uart_write>
      fd->fd_flags);
}
 2005dbc:	e037883a 	mov	sp,fp
 2005dc0:	dfc00117 	ldw	ra,4(sp)
 2005dc4:	df000017 	ldw	fp,0(sp)
 2005dc8:	dec00204 	addi	sp,sp,8
 2005dcc:	f800283a 	ret

02005dd0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2005dd0:	defffc04 	addi	sp,sp,-16
 2005dd4:	dfc00315 	stw	ra,12(sp)
 2005dd8:	df000215 	stw	fp,8(sp)
 2005ddc:	df000204 	addi	fp,sp,8
 2005de0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2005de4:	e0bfff17 	ldw	r2,-4(fp)
 2005de8:	10800017 	ldw	r2,0(r2)
 2005dec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 2005df0:	e0bffe17 	ldw	r2,-8(fp)
 2005df4:	10c00a04 	addi	r3,r2,40
 2005df8:	e0bfff17 	ldw	r2,-4(fp)
 2005dfc:	10800217 	ldw	r2,8(r2)
 2005e00:	100b883a 	mov	r5,r2
 2005e04:	1809883a 	mov	r4,r3
 2005e08:	20061940 	call	2006194 <altera_avalon_uart_close>
}
 2005e0c:	e037883a 	mov	sp,fp
 2005e10:	dfc00117 	ldw	ra,4(sp)
 2005e14:	df000017 	ldw	fp,0(sp)
 2005e18:	dec00204 	addi	sp,sp,8
 2005e1c:	f800283a 	ret

02005e20 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 2005e20:	defff804 	addi	sp,sp,-32
 2005e24:	dfc00715 	stw	ra,28(sp)
 2005e28:	df000615 	stw	fp,24(sp)
 2005e2c:	df000604 	addi	fp,sp,24
 2005e30:	e13ffd15 	stw	r4,-12(fp)
 2005e34:	e17ffe15 	stw	r5,-8(fp)
 2005e38:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 2005e3c:	e0bffd17 	ldw	r2,-12(fp)
 2005e40:	10800017 	ldw	r2,0(r2)
 2005e44:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 2005e48:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2005e4c:	1000041e 	bne	r2,zero,2005e60 <altera_avalon_uart_init+0x40>
 2005e50:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2005e54:	1000021e 	bne	r2,zero,2005e60 <altera_avalon_uart_init+0x40>
 2005e58:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2005e5c:	10000226 	beq	r2,zero,2005e68 <altera_avalon_uart_init+0x48>
 2005e60:	00800044 	movi	r2,1
 2005e64:	00000106 	br	2005e6c <altera_avalon_uart_init+0x4c>
 2005e68:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2005e6c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 2005e70:	e0bffc17 	ldw	r2,-16(fp)
 2005e74:	10000f1e 	bne	r2,zero,2005eb4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 2005e78:	e0bffd17 	ldw	r2,-12(fp)
 2005e7c:	00c32004 	movi	r3,3200
 2005e80:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2005e84:	e0bffb17 	ldw	r2,-20(fp)
 2005e88:	10800304 	addi	r2,r2,12
 2005e8c:	e0fffd17 	ldw	r3,-12(fp)
 2005e90:	18c00117 	ldw	r3,4(r3)
 2005e94:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 2005e98:	d8000015 	stw	zero,0(sp)
 2005e9c:	e1fffd17 	ldw	r7,-12(fp)
 2005ea0:	01808034 	movhi	r6,512
 2005ea4:	3197b304 	addi	r6,r6,24268
 2005ea8:	e17fff17 	ldw	r5,-4(fp)
 2005eac:	e13ffe17 	ldw	r4,-8(fp)
 2005eb0:	20074680 	call	2007468 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 2005eb4:	0001883a 	nop
 2005eb8:	e037883a 	mov	sp,fp
 2005ebc:	dfc00117 	ldw	ra,4(sp)
 2005ec0:	df000017 	ldw	fp,0(sp)
 2005ec4:	dec00204 	addi	sp,sp,8
 2005ec8:	f800283a 	ret

02005ecc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 2005ecc:	defffa04 	addi	sp,sp,-24
 2005ed0:	dfc00515 	stw	ra,20(sp)
 2005ed4:	df000415 	stw	fp,16(sp)
 2005ed8:	df000404 	addi	fp,sp,16
 2005edc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 2005ee0:	e0bfff17 	ldw	r2,-4(fp)
 2005ee4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 2005ee8:	e0bffc17 	ldw	r2,-16(fp)
 2005eec:	10800017 	ldw	r2,0(r2)
 2005ef0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 2005ef4:	e0bffd17 	ldw	r2,-12(fp)
 2005ef8:	10800204 	addi	r2,r2,8
 2005efc:	10800037 	ldwio	r2,0(r2)
 2005f00:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 2005f04:	e0bffd17 	ldw	r2,-12(fp)
 2005f08:	10800204 	addi	r2,r2,8
 2005f0c:	0007883a 	mov	r3,zero
 2005f10:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 2005f14:	e0bffd17 	ldw	r2,-12(fp)
 2005f18:	10800204 	addi	r2,r2,8
 2005f1c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 2005f20:	e0bffe17 	ldw	r2,-8(fp)
 2005f24:	1080200c 	andi	r2,r2,128
 2005f28:	10000326 	beq	r2,zero,2005f38 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 2005f2c:	e17ffe17 	ldw	r5,-8(fp)
 2005f30:	e13ffc17 	ldw	r4,-16(fp)
 2005f34:	2005f680 	call	2005f68 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 2005f38:	e0bffe17 	ldw	r2,-8(fp)
 2005f3c:	1081100c 	andi	r2,r2,1088
 2005f40:	10000326 	beq	r2,zero,2005f50 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 2005f44:	e17ffe17 	ldw	r5,-8(fp)
 2005f48:	e13ffc17 	ldw	r4,-16(fp)
 2005f4c:	200604c0 	call	200604c <altera_avalon_uart_txirq>
  }
  

}
 2005f50:	0001883a 	nop
 2005f54:	e037883a 	mov	sp,fp
 2005f58:	dfc00117 	ldw	ra,4(sp)
 2005f5c:	df000017 	ldw	fp,0(sp)
 2005f60:	dec00204 	addi	sp,sp,8
 2005f64:	f800283a 	ret

02005f68 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2005f68:	defffc04 	addi	sp,sp,-16
 2005f6c:	df000315 	stw	fp,12(sp)
 2005f70:	df000304 	addi	fp,sp,12
 2005f74:	e13ffe15 	stw	r4,-8(fp)
 2005f78:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 2005f7c:	e0bfff17 	ldw	r2,-4(fp)
 2005f80:	108000cc 	andi	r2,r2,3
 2005f84:	10002c1e 	bne	r2,zero,2006038 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 2005f88:	e0bffe17 	ldw	r2,-8(fp)
 2005f8c:	10800317 	ldw	r2,12(r2)
 2005f90:	e0bffe17 	ldw	r2,-8(fp)
 2005f94:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2005f98:	e0bffe17 	ldw	r2,-8(fp)
 2005f9c:	10800317 	ldw	r2,12(r2)
 2005fa0:	10800044 	addi	r2,r2,1
 2005fa4:	10800fcc 	andi	r2,r2,63
 2005fa8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 2005fac:	e0bffe17 	ldw	r2,-8(fp)
 2005fb0:	10800317 	ldw	r2,12(r2)
 2005fb4:	e0fffe17 	ldw	r3,-8(fp)
 2005fb8:	18c00017 	ldw	r3,0(r3)
 2005fbc:	18c00037 	ldwio	r3,0(r3)
 2005fc0:	1809883a 	mov	r4,r3
 2005fc4:	e0fffe17 	ldw	r3,-8(fp)
 2005fc8:	1885883a 	add	r2,r3,r2
 2005fcc:	10800704 	addi	r2,r2,28
 2005fd0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 2005fd4:	e0bffe17 	ldw	r2,-8(fp)
 2005fd8:	e0fffd17 	ldw	r3,-12(fp)
 2005fdc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2005fe0:	e0bffe17 	ldw	r2,-8(fp)
 2005fe4:	10800317 	ldw	r2,12(r2)
 2005fe8:	10800044 	addi	r2,r2,1
 2005fec:	10800fcc 	andi	r2,r2,63
 2005ff0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 2005ff4:	e0bffe17 	ldw	r2,-8(fp)
 2005ff8:	10c00217 	ldw	r3,8(r2)
 2005ffc:	e0bffd17 	ldw	r2,-12(fp)
 2006000:	18800e1e 	bne	r3,r2,200603c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2006004:	e0bffe17 	ldw	r2,-8(fp)
 2006008:	10c00117 	ldw	r3,4(r2)
 200600c:	00bfdfc4 	movi	r2,-129
 2006010:	1886703a 	and	r3,r3,r2
 2006014:	e0bffe17 	ldw	r2,-8(fp)
 2006018:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 200601c:	e0bffe17 	ldw	r2,-8(fp)
 2006020:	10800017 	ldw	r2,0(r2)
 2006024:	10800304 	addi	r2,r2,12
 2006028:	e0fffe17 	ldw	r3,-8(fp)
 200602c:	18c00117 	ldw	r3,4(r3)
 2006030:	10c00035 	stwio	r3,0(r2)
 2006034:	00000106 	br	200603c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 2006038:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 200603c:	e037883a 	mov	sp,fp
 2006040:	df000017 	ldw	fp,0(sp)
 2006044:	dec00104 	addi	sp,sp,4
 2006048:	f800283a 	ret

0200604c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200604c:	defffb04 	addi	sp,sp,-20
 2006050:	df000415 	stw	fp,16(sp)
 2006054:	df000404 	addi	fp,sp,16
 2006058:	e13ffc15 	stw	r4,-16(fp)
 200605c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2006060:	e0bffc17 	ldw	r2,-16(fp)
 2006064:	10c00417 	ldw	r3,16(r2)
 2006068:	e0bffc17 	ldw	r2,-16(fp)
 200606c:	10800517 	ldw	r2,20(r2)
 2006070:	18803226 	beq	r3,r2,200613c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2006074:	e0bffc17 	ldw	r2,-16(fp)
 2006078:	10800617 	ldw	r2,24(r2)
 200607c:	1080008c 	andi	r2,r2,2
 2006080:	10000326 	beq	r2,zero,2006090 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2006084:	e0bffd17 	ldw	r2,-12(fp)
 2006088:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 200608c:	10001d26 	beq	r2,zero,2006104 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2006090:	e0bffc17 	ldw	r2,-16(fp)
 2006094:	10800417 	ldw	r2,16(r2)
 2006098:	e0bffc17 	ldw	r2,-16(fp)
 200609c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 20060a0:	e0bffc17 	ldw	r2,-16(fp)
 20060a4:	10800017 	ldw	r2,0(r2)
 20060a8:	10800104 	addi	r2,r2,4
 20060ac:	e0fffc17 	ldw	r3,-16(fp)
 20060b0:	18c00417 	ldw	r3,16(r3)
 20060b4:	e13ffc17 	ldw	r4,-16(fp)
 20060b8:	20c7883a 	add	r3,r4,r3
 20060bc:	18c01704 	addi	r3,r3,92
 20060c0:	18c00003 	ldbu	r3,0(r3)
 20060c4:	18c03fcc 	andi	r3,r3,255
 20060c8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 20060cc:	e0bffc17 	ldw	r2,-16(fp)
 20060d0:	10800417 	ldw	r2,16(r2)
 20060d4:	10800044 	addi	r2,r2,1
 20060d8:	e0fffc17 	ldw	r3,-16(fp)
 20060dc:	18800415 	stw	r2,16(r3)
 20060e0:	10c00fcc 	andi	r3,r2,63
 20060e4:	e0bffc17 	ldw	r2,-16(fp)
 20060e8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 20060ec:	e0bffc17 	ldw	r2,-16(fp)
 20060f0:	10800117 	ldw	r2,4(r2)
 20060f4:	10c01014 	ori	r3,r2,64
 20060f8:	e0bffc17 	ldw	r2,-16(fp)
 20060fc:	10c00115 	stw	r3,4(r2)
 2006100:	00000e06 	br	200613c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 2006104:	e0bffc17 	ldw	r2,-16(fp)
 2006108:	10800017 	ldw	r2,0(r2)
 200610c:	10800204 	addi	r2,r2,8
 2006110:	10800037 	ldwio	r2,0(r2)
 2006114:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2006118:	e0bffd17 	ldw	r2,-12(fp)
 200611c:	1082000c 	andi	r2,r2,2048
 2006120:	1000061e 	bne	r2,zero,200613c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2006124:	e0bffc17 	ldw	r2,-16(fp)
 2006128:	10c00117 	ldw	r3,4(r2)
 200612c:	00bfefc4 	movi	r2,-65
 2006130:	1886703a 	and	r3,r3,r2
 2006134:	e0bffc17 	ldw	r2,-16(fp)
 2006138:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 200613c:	e0bffc17 	ldw	r2,-16(fp)
 2006140:	10c00417 	ldw	r3,16(r2)
 2006144:	e0bffc17 	ldw	r2,-16(fp)
 2006148:	10800517 	ldw	r2,20(r2)
 200614c:	1880061e 	bne	r3,r2,2006168 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2006150:	e0bffc17 	ldw	r2,-16(fp)
 2006154:	10c00117 	ldw	r3,4(r2)
 2006158:	00beefc4 	movi	r2,-1089
 200615c:	1886703a 	and	r3,r3,r2
 2006160:	e0bffc17 	ldw	r2,-16(fp)
 2006164:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2006168:	e0bffc17 	ldw	r2,-16(fp)
 200616c:	10800017 	ldw	r2,0(r2)
 2006170:	10800304 	addi	r2,r2,12
 2006174:	e0fffc17 	ldw	r3,-16(fp)
 2006178:	18c00117 	ldw	r3,4(r3)
 200617c:	10c00035 	stwio	r3,0(r2)
}
 2006180:	0001883a 	nop
 2006184:	e037883a 	mov	sp,fp
 2006188:	df000017 	ldw	fp,0(sp)
 200618c:	dec00104 	addi	sp,sp,4
 2006190:	f800283a 	ret

02006194 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2006194:	defffd04 	addi	sp,sp,-12
 2006198:	df000215 	stw	fp,8(sp)
 200619c:	df000204 	addi	fp,sp,8
 20061a0:	e13ffe15 	stw	r4,-8(fp)
 20061a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 20061a8:	00000506 	br	20061c0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 20061ac:	e0bfff17 	ldw	r2,-4(fp)
 20061b0:	1090000c 	andi	r2,r2,16384
 20061b4:	10000226 	beq	r2,zero,20061c0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 20061b8:	00bffd44 	movi	r2,-11
 20061bc:	00000606 	br	20061d8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 20061c0:	e0bffe17 	ldw	r2,-8(fp)
 20061c4:	10c00417 	ldw	r3,16(r2)
 20061c8:	e0bffe17 	ldw	r2,-8(fp)
 20061cc:	10800517 	ldw	r2,20(r2)
 20061d0:	18bff61e 	bne	r3,r2,20061ac <__alt_mem_flash+0xfdff51ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20061d4:	0005883a 	mov	r2,zero
}
 20061d8:	e037883a 	mov	sp,fp
 20061dc:	df000017 	ldw	fp,0(sp)
 20061e0:	dec00104 	addi	sp,sp,4
 20061e4:	f800283a 	ret

020061e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20061e8:	defffe04 	addi	sp,sp,-8
 20061ec:	dfc00115 	stw	ra,4(sp)
 20061f0:	df000015 	stw	fp,0(sp)
 20061f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20061f8:	d0a00817 	ldw	r2,-32736(gp)
 20061fc:	10000326 	beq	r2,zero,200620c <alt_get_errno+0x24>
 2006200:	d0a00817 	ldw	r2,-32736(gp)
 2006204:	103ee83a 	callr	r2
 2006208:	00000106 	br	2006210 <alt_get_errno+0x28>
 200620c:	d0a61d04 	addi	r2,gp,-26508
}
 2006210:	e037883a 	mov	sp,fp
 2006214:	dfc00117 	ldw	ra,4(sp)
 2006218:	df000017 	ldw	fp,0(sp)
 200621c:	dec00204 	addi	sp,sp,8
 2006220:	f800283a 	ret

02006224 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 2006224:	defff204 	addi	sp,sp,-56
 2006228:	dfc00d15 	stw	ra,52(sp)
 200622c:	df000c15 	stw	fp,48(sp)
 2006230:	df000c04 	addi	fp,sp,48
 2006234:	e13ffc15 	stw	r4,-16(fp)
 2006238:	e17ffd15 	stw	r5,-12(fp)
 200623c:	e1bffe15 	stw	r6,-8(fp)
 2006240:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 2006244:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 2006248:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 200624c:	e0bfff17 	ldw	r2,-4(fp)
 2006250:	1090000c 	andi	r2,r2,16384
 2006254:	1005003a 	cmpeq	r2,r2,zero
 2006258:	10803fcc 	andi	r2,r2,255
 200625c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2006260:	00001306 	br	20062b0 <altera_avalon_uart_read+0x8c>
    {
      count++;
 2006264:	e0bff517 	ldw	r2,-44(fp)
 2006268:	10800044 	addi	r2,r2,1
 200626c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 2006270:	e0bffd17 	ldw	r2,-12(fp)
 2006274:	10c00044 	addi	r3,r2,1
 2006278:	e0fffd15 	stw	r3,-12(fp)
 200627c:	e0fffc17 	ldw	r3,-16(fp)
 2006280:	18c00217 	ldw	r3,8(r3)
 2006284:	e13ffc17 	ldw	r4,-16(fp)
 2006288:	20c7883a 	add	r3,r4,r3
 200628c:	18c00704 	addi	r3,r3,28
 2006290:	18c00003 	ldbu	r3,0(r3)
 2006294:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 2006298:	e0bffc17 	ldw	r2,-16(fp)
 200629c:	10800217 	ldw	r2,8(r2)
 20062a0:	10800044 	addi	r2,r2,1
 20062a4:	10c00fcc 	andi	r3,r2,63
 20062a8:	e0bffc17 	ldw	r2,-16(fp)
 20062ac:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 20062b0:	e0fff517 	ldw	r3,-44(fp)
 20062b4:	e0bffe17 	ldw	r2,-8(fp)
 20062b8:	1880050e 	bge	r3,r2,20062d0 <altera_avalon_uart_read+0xac>
 20062bc:	e0bffc17 	ldw	r2,-16(fp)
 20062c0:	10c00217 	ldw	r3,8(r2)
 20062c4:	e0bffc17 	ldw	r2,-16(fp)
 20062c8:	10800317 	ldw	r2,12(r2)
 20062cc:	18bfe51e 	bne	r3,r2,2006264 <__alt_mem_flash+0xfdff5264>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 20062d0:	e0bff517 	ldw	r2,-44(fp)
 20062d4:	1000251e 	bne	r2,zero,200636c <altera_avalon_uart_read+0x148>
 20062d8:	e0bffc17 	ldw	r2,-16(fp)
 20062dc:	10c00217 	ldw	r3,8(r2)
 20062e0:	e0bffc17 	ldw	r2,-16(fp)
 20062e4:	10800317 	ldw	r2,12(r2)
 20062e8:	1880201e 	bne	r3,r2,200636c <altera_avalon_uart_read+0x148>
    {
      if (!block)
 20062ec:	e0bff617 	ldw	r2,-40(fp)
 20062f0:	1000071e 	bne	r2,zero,2006310 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 20062f4:	20061e80 	call	20061e8 <alt_get_errno>
 20062f8:	1007883a 	mov	r3,r2
 20062fc:	008002c4 	movi	r2,11
 2006300:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 2006304:	00800044 	movi	r2,1
 2006308:	e0bff405 	stb	r2,-48(fp)
        break;
 200630c:	00001b06 	br	200637c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006310:	0005303a 	rdctl	r2,status
 2006314:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006318:	e0fff917 	ldw	r3,-28(fp)
 200631c:	00bfff84 	movi	r2,-2
 2006320:	1884703a 	and	r2,r3,r2
 2006324:	1001703a 	wrctl	status,r2
  
  return context;
 2006328:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 200632c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2006330:	e0bffc17 	ldw	r2,-16(fp)
 2006334:	10800117 	ldw	r2,4(r2)
 2006338:	10c02014 	ori	r3,r2,128
 200633c:	e0bffc17 	ldw	r2,-16(fp)
 2006340:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2006344:	e0bffc17 	ldw	r2,-16(fp)
 2006348:	10800017 	ldw	r2,0(r2)
 200634c:	10800304 	addi	r2,r2,12
 2006350:	e0fffc17 	ldw	r3,-16(fp)
 2006354:	18c00117 	ldw	r3,4(r3)
 2006358:	10c00035 	stwio	r3,0(r2)
 200635c:	e0bff817 	ldw	r2,-32(fp)
 2006360:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006364:	e0bffa17 	ldw	r2,-24(fp)
 2006368:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 200636c:	e0bff517 	ldw	r2,-44(fp)
 2006370:	1000021e 	bne	r2,zero,200637c <altera_avalon_uart_read+0x158>
 2006374:	e0bffe17 	ldw	r2,-8(fp)
 2006378:	103fcd1e 	bne	r2,zero,20062b0 <__alt_mem_flash+0xfdff52b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200637c:	0005303a 	rdctl	r2,status
 2006380:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006384:	e0fffb17 	ldw	r3,-20(fp)
 2006388:	00bfff84 	movi	r2,-2
 200638c:	1884703a 	and	r2,r3,r2
 2006390:	1001703a 	wrctl	status,r2
  
  return context;
 2006394:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 2006398:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200639c:	e0bffc17 	ldw	r2,-16(fp)
 20063a0:	10800117 	ldw	r2,4(r2)
 20063a4:	10c02014 	ori	r3,r2,128
 20063a8:	e0bffc17 	ldw	r2,-16(fp)
 20063ac:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20063b0:	e0bffc17 	ldw	r2,-16(fp)
 20063b4:	10800017 	ldw	r2,0(r2)
 20063b8:	10800304 	addi	r2,r2,12
 20063bc:	e0fffc17 	ldw	r3,-16(fp)
 20063c0:	18c00117 	ldw	r3,4(r3)
 20063c4:	10c00035 	stwio	r3,0(r2)
 20063c8:	e0bff817 	ldw	r2,-32(fp)
 20063cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20063d0:	e0bff717 	ldw	r2,-36(fp)
 20063d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 20063d8:	e0bff403 	ldbu	r2,-48(fp)
 20063dc:	10000226 	beq	r2,zero,20063e8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 20063e0:	00bffd44 	movi	r2,-11
 20063e4:	00000106 	br	20063ec <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 20063e8:	e0bff517 	ldw	r2,-44(fp)
  }
}
 20063ec:	e037883a 	mov	sp,fp
 20063f0:	dfc00117 	ldw	ra,4(sp)
 20063f4:	df000017 	ldw	fp,0(sp)
 20063f8:	dec00204 	addi	sp,sp,8
 20063fc:	f800283a 	ret

02006400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2006400:	defffe04 	addi	sp,sp,-8
 2006404:	dfc00115 	stw	ra,4(sp)
 2006408:	df000015 	stw	fp,0(sp)
 200640c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2006410:	d0a00817 	ldw	r2,-32736(gp)
 2006414:	10000326 	beq	r2,zero,2006424 <alt_get_errno+0x24>
 2006418:	d0a00817 	ldw	r2,-32736(gp)
 200641c:	103ee83a 	callr	r2
 2006420:	00000106 	br	2006428 <alt_get_errno+0x28>
 2006424:	d0a61d04 	addi	r2,gp,-26508
}
 2006428:	e037883a 	mov	sp,fp
 200642c:	dfc00117 	ldw	ra,4(sp)
 2006430:	df000017 	ldw	fp,0(sp)
 2006434:	dec00204 	addi	sp,sp,8
 2006438:	f800283a 	ret

0200643c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 200643c:	defff204 	addi	sp,sp,-56
 2006440:	dfc00d15 	stw	ra,52(sp)
 2006444:	df000c15 	stw	fp,48(sp)
 2006448:	df000c04 	addi	fp,sp,48
 200644c:	e13ffc15 	stw	r4,-16(fp)
 2006450:	e17ffd15 	stw	r5,-12(fp)
 2006454:	e1bffe15 	stw	r6,-8(fp)
 2006458:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 200645c:	e0bffe17 	ldw	r2,-8(fp)
 2006460:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 2006464:	e0bfff17 	ldw	r2,-4(fp)
 2006468:	1090000c 	andi	r2,r2,16384
 200646c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2006470:	00003c06 	br	2006564 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2006474:	e0bffc17 	ldw	r2,-16(fp)
 2006478:	10800517 	ldw	r2,20(r2)
 200647c:	10800044 	addi	r2,r2,1
 2006480:	10800fcc 	andi	r2,r2,63
 2006484:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 2006488:	e0bffc17 	ldw	r2,-16(fp)
 200648c:	10c00417 	ldw	r3,16(r2)
 2006490:	e0bff717 	ldw	r2,-36(fp)
 2006494:	1880221e 	bne	r3,r2,2006520 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 2006498:	e0bff517 	ldw	r2,-44(fp)
 200649c:	10000526 	beq	r2,zero,20064b4 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 20064a0:	20064000 	call	2006400 <alt_get_errno>
 20064a4:	1007883a 	mov	r3,r2
 20064a8:	008002c4 	movi	r2,11
 20064ac:	18800015 	stw	r2,0(r3)
        break;
 20064b0:	00002e06 	br	200656c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20064b4:	0005303a 	rdctl	r2,status
 20064b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20064bc:	e0fff917 	ldw	r3,-28(fp)
 20064c0:	00bfff84 	movi	r2,-2
 20064c4:	1884703a 	and	r2,r3,r2
 20064c8:	1001703a 	wrctl	status,r2
  
  return context;
 20064cc:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 20064d0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20064d4:	e0bffc17 	ldw	r2,-16(fp)
 20064d8:	10800117 	ldw	r2,4(r2)
 20064dc:	10c11014 	ori	r3,r2,1088
 20064e0:	e0bffc17 	ldw	r2,-16(fp)
 20064e4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20064e8:	e0bffc17 	ldw	r2,-16(fp)
 20064ec:	10800017 	ldw	r2,0(r2)
 20064f0:	10800304 	addi	r2,r2,12
 20064f4:	e0fffc17 	ldw	r3,-16(fp)
 20064f8:	18c00117 	ldw	r3,4(r3)
 20064fc:	10c00035 	stwio	r3,0(r2)
 2006500:	e0bff817 	ldw	r2,-32(fp)
 2006504:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006508:	e0bff617 	ldw	r2,-40(fp)
 200650c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 2006510:	e0bffc17 	ldw	r2,-16(fp)
 2006514:	10c00417 	ldw	r3,16(r2)
 2006518:	e0bff717 	ldw	r2,-36(fp)
 200651c:	18bffc26 	beq	r3,r2,2006510 <__alt_mem_flash+0xfdff5510>
      }
    }

    count--;
 2006520:	e0bff417 	ldw	r2,-48(fp)
 2006524:	10bfffc4 	addi	r2,r2,-1
 2006528:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 200652c:	e0bffc17 	ldw	r2,-16(fp)
 2006530:	10c00517 	ldw	r3,20(r2)
 2006534:	e0bffd17 	ldw	r2,-12(fp)
 2006538:	11000044 	addi	r4,r2,1
 200653c:	e13ffd15 	stw	r4,-12(fp)
 2006540:	10800003 	ldbu	r2,0(r2)
 2006544:	1009883a 	mov	r4,r2
 2006548:	e0bffc17 	ldw	r2,-16(fp)
 200654c:	10c5883a 	add	r2,r2,r3
 2006550:	10801704 	addi	r2,r2,92
 2006554:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 2006558:	e0bffc17 	ldw	r2,-16(fp)
 200655c:	e0fff717 	ldw	r3,-36(fp)
 2006560:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2006564:	e0bff417 	ldw	r2,-48(fp)
 2006568:	103fc21e 	bne	r2,zero,2006474 <__alt_mem_flash+0xfdff5474>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200656c:	0005303a 	rdctl	r2,status
 2006570:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006574:	e0fffb17 	ldw	r3,-20(fp)
 2006578:	00bfff84 	movi	r2,-2
 200657c:	1884703a 	and	r2,r3,r2
 2006580:	1001703a 	wrctl	status,r2
  
  return context;
 2006584:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 2006588:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 200658c:	e0bffc17 	ldw	r2,-16(fp)
 2006590:	10800117 	ldw	r2,4(r2)
 2006594:	10c11014 	ori	r3,r2,1088
 2006598:	e0bffc17 	ldw	r2,-16(fp)
 200659c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20065a0:	e0bffc17 	ldw	r2,-16(fp)
 20065a4:	10800017 	ldw	r2,0(r2)
 20065a8:	10800304 	addi	r2,r2,12
 20065ac:	e0fffc17 	ldw	r3,-16(fp)
 20065b0:	18c00117 	ldw	r3,4(r3)
 20065b4:	10c00035 	stwio	r3,0(r2)
 20065b8:	e0bff817 	ldw	r2,-32(fp)
 20065bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20065c0:	e0bffa17 	ldw	r2,-24(fp)
 20065c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 20065c8:	e0fffe17 	ldw	r3,-8(fp)
 20065cc:	e0bff417 	ldw	r2,-48(fp)
 20065d0:	1885c83a 	sub	r2,r3,r2
}
 20065d4:	e037883a 	mov	sp,fp
 20065d8:	dfc00117 	ldw	ra,4(sp)
 20065dc:	df000017 	ldw	fp,0(sp)
 20065e0:	dec00204 	addi	sp,sp,8
 20065e4:	f800283a 	ret

020065e8 <alt_up_adc_open_dev>:
#define read_ch4(adc)  IORD_ALT_UP_ADC_CH_4(((adc)->base))
#define read_ch5(adc)  IORD_ALT_UP_ADC_CH_5(((adc)->base))
#define read_ch6(adc)  IORD_ALT_UP_ADC_CH_6(((adc)->base))
#define read_ch7(adc)  IORD_ALT_UP_ADC_CH_7(((adc)->base))

alt_up_adc_dev* alt_up_adc_open_dev (const char* name){
 20065e8:	defffc04 	addi	sp,sp,-16
 20065ec:	dfc00315 	stw	ra,12(sp)
 20065f0:	df000215 	stw	fp,8(sp)
 20065f4:	df000204 	addi	fp,sp,8
 20065f8:	e13fff15 	stw	r4,-4(fp)

	alt_up_adc_dev* dev = (alt_up_adc_dev*) alt_find_dev(name, &alt_dev_list);
 20065fc:	d1600504 	addi	r5,gp,-32748
 2006600:	e13fff17 	ldw	r4,-4(fp)
 2006604:	20072fc0 	call	20072fc <alt_find_dev>
 2006608:	e0bffe15 	stw	r2,-8(fp)
	
	return dev;
 200660c:	e0bffe17 	ldw	r2,-8(fp)
}
 2006610:	e037883a 	mov	sp,fp
 2006614:	dfc00117 	ldw	ra,4(sp)
 2006618:	df000017 	ldw	fp,0(sp)
 200661c:	dec00204 	addi	sp,sp,8
 2006620:	f800283a 	ret

02006624 <alt_up_adc_read>:

unsigned int alt_up_adc_read (alt_up_adc_dev * adc, unsigned channel){
 2006624:	defffc04 	addi	sp,sp,-16
 2006628:	df000315 	stw	fp,12(sp)
 200662c:	df000304 	addi	fp,sp,12
 2006630:	e13ffe15 	stw	r4,-8(fp)
 2006634:	e17fff15 	stw	r5,-4(fp)

	unsigned int ch = channel % 8;
 2006638:	e0bfff17 	ldw	r2,-4(fp)
 200663c:	108001cc 	andi	r2,r2,7
 2006640:	e0bffd15 	stw	r2,-12(fp)
	
	switch (ch){
 2006644:	e0bffd17 	ldw	r2,-12(fp)
 2006648:	10800228 	cmpgeui	r2,r2,8
 200664c:	1000361e 	bne	r2,zero,2006728 <alt_up_adc_read+0x104>
 2006650:	e0bffd17 	ldw	r2,-12(fp)
 2006654:	100690ba 	slli	r3,r2,2
 2006658:	00808034 	movhi	r2,512
 200665c:	10999b04 	addi	r2,r2,26220
 2006660:	1885883a 	add	r2,r3,r2
 2006664:	10800017 	ldw	r2,0(r2)
 2006668:	1000683a 	jmp	r2
 200666c:	0200668c 	andi	r8,zero,410
 2006670:	0200669c 	xori	r8,zero,410
 2006674:	020066b0 	cmpltui	r8,zero,410
 2006678:	020066c4 	movi	r8,411
 200667c:	020066d8 	cmpnei	r8,zero,411
 2006680:	020066ec 	andhi	r8,zero,411
 2006684:	02006700 	call	200670 <__ram_exceptions_end+0x1f8360>
 2006688:	02006714 	movui	r8,412
		case 0:
			return read_ch0(adc);
 200668c:	e0bffe17 	ldw	r2,-8(fp)
 2006690:	10800a17 	ldw	r2,40(r2)
 2006694:	10800037 	ldwio	r2,0(r2)
 2006698:	00002406 	br	200672c <alt_up_adc_read+0x108>
		case 1:
			return read_ch1(adc);
 200669c:	e0bffe17 	ldw	r2,-8(fp)
 20066a0:	10800a17 	ldw	r2,40(r2)
 20066a4:	10800104 	addi	r2,r2,4
 20066a8:	10800037 	ldwio	r2,0(r2)
 20066ac:	00001f06 	br	200672c <alt_up_adc_read+0x108>
		case 2:
			return read_ch2(adc);
 20066b0:	e0bffe17 	ldw	r2,-8(fp)
 20066b4:	10800a17 	ldw	r2,40(r2)
 20066b8:	10800204 	addi	r2,r2,8
 20066bc:	10800037 	ldwio	r2,0(r2)
 20066c0:	00001a06 	br	200672c <alt_up_adc_read+0x108>
		case 3:
			return read_ch3(adc);
 20066c4:	e0bffe17 	ldw	r2,-8(fp)
 20066c8:	10800a17 	ldw	r2,40(r2)
 20066cc:	10800304 	addi	r2,r2,12
 20066d0:	10800037 	ldwio	r2,0(r2)
 20066d4:	00001506 	br	200672c <alt_up_adc_read+0x108>
		case 4:
			return read_ch4(adc);
 20066d8:	e0bffe17 	ldw	r2,-8(fp)
 20066dc:	10800a17 	ldw	r2,40(r2)
 20066e0:	10800404 	addi	r2,r2,16
 20066e4:	10800037 	ldwio	r2,0(r2)
 20066e8:	00001006 	br	200672c <alt_up_adc_read+0x108>
		case 5:
			return read_ch5(adc);
 20066ec:	e0bffe17 	ldw	r2,-8(fp)
 20066f0:	10800a17 	ldw	r2,40(r2)
 20066f4:	10800504 	addi	r2,r2,20
 20066f8:	10800037 	ldwio	r2,0(r2)
 20066fc:	00000b06 	br	200672c <alt_up_adc_read+0x108>
		case 6:
			return read_ch6(adc);
 2006700:	e0bffe17 	ldw	r2,-8(fp)
 2006704:	10800a17 	ldw	r2,40(r2)
 2006708:	10800604 	addi	r2,r2,24
 200670c:	10800037 	ldwio	r2,0(r2)
 2006710:	00000606 	br	200672c <alt_up_adc_read+0x108>
		case 7:
			return read_ch7(adc);
 2006714:	e0bffe17 	ldw	r2,-8(fp)
 2006718:	10800a17 	ldw	r2,40(r2)
 200671c:	10800704 	addi	r2,r2,28
 2006720:	10800037 	ldwio	r2,0(r2)
 2006724:	00000106 	br	200672c <alt_up_adc_read+0x108>
		default:
			return 0;
 2006728:	0005883a 	mov	r2,zero
	}
}
 200672c:	e037883a 	mov	sp,fp
 2006730:	df000017 	ldw	fp,0(sp)
 2006734:	dec00104 	addi	sp,sp,4
 2006738:	f800283a 	ret

0200673c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 200673c:	defff904 	addi	sp,sp,-28
 2006740:	dfc00615 	stw	ra,24(sp)
 2006744:	df000515 	stw	fp,20(sp)
 2006748:	df000504 	addi	fp,sp,20
 200674c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2006750:	00800144 	movi	r2,5
 2006754:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2006758:	d8000215 	stw	zero,8(sp)
 200675c:	e0bffe44 	addi	r2,fp,-7
 2006760:	d8800115 	stw	r2,4(sp)
 2006764:	00800044 	movi	r2,1
 2006768:	d8800015 	stw	r2,0(sp)
 200676c:	e1fffe04 	addi	r7,fp,-8
 2006770:	01800044 	movi	r6,1
 2006774:	000b883a 	mov	r5,zero
 2006778:	e13fff17 	ldw	r4,-4(fp)
 200677c:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2006780:	e0bffe43 	ldbu	r2,-7(fp)
}
 2006784:	e037883a 	mov	sp,fp
 2006788:	dfc00117 	ldw	ra,4(sp)
 200678c:	df000017 	ldw	fp,0(sp)
 2006790:	dec00204 	addi	sp,sp,8
 2006794:	f800283a 	ret

02006798 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2006798:	defffd04 	addi	sp,sp,-12
 200679c:	dfc00215 	stw	ra,8(sp)
 20067a0:	df000115 	stw	fp,4(sp)
 20067a4:	df000104 	addi	fp,sp,4
 20067a8:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 20067ac:	e13fff17 	ldw	r4,-4(fp)
 20067b0:	200673c0 	call	200673c <epcs_read_status_register>
 20067b4:	10803fcc 	andi	r2,r2,255
 20067b8:	1080004c 	andi	r2,r2,1
}
 20067bc:	e037883a 	mov	sp,fp
 20067c0:	dfc00117 	ldw	ra,4(sp)
 20067c4:	df000017 	ldw	fp,0(sp)
 20067c8:	dec00204 	addi	sp,sp,8
 20067cc:	f800283a 	ret

020067d0 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 20067d0:	defffd04 	addi	sp,sp,-12
 20067d4:	dfc00215 	stw	ra,8(sp)
 20067d8:	df000115 	stw	fp,4(sp)
 20067dc:	df000104 	addi	fp,sp,4
 20067e0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 20067e4:	0001883a 	nop
 20067e8:	e13fff17 	ldw	r4,-4(fp)
 20067ec:	20067980 	call	2006798 <epcs_test_wip>
 20067f0:	103ffd1e 	bne	r2,zero,20067e8 <__alt_mem_flash+0xfdff57e8>
  {
  }
}
 20067f4:	0001883a 	nop
 20067f8:	e037883a 	mov	sp,fp
 20067fc:	dfc00117 	ldw	ra,4(sp)
 2006800:	df000017 	ldw	fp,0(sp)
 2006804:	dec00204 	addi	sp,sp,8
 2006808:	f800283a 	ret

0200680c <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 200680c:	defff604 	addi	sp,sp,-40
 2006810:	dfc00915 	stw	ra,36(sp)
 2006814:	df000815 	stw	fp,32(sp)
 2006818:	df000804 	addi	fp,sp,32
 200681c:	e13ffd15 	stw	r4,-12(fp)
 2006820:	e17ffe15 	stw	r5,-8(fp)
 2006824:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2006828:	e0bfff17 	ldw	r2,-4(fp)
 200682c:	10001226 	beq	r2,zero,2006878 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2006830:	00bff604 	movi	r2,-40
 2006834:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2006838:	e0bffe17 	ldw	r2,-8(fp)
 200683c:	1004d63a 	srli	r2,r2,24
 2006840:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2006844:	e0bffe17 	ldw	r2,-8(fp)
 2006848:	1004d43a 	srli	r2,r2,16
 200684c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2006850:	e0bffe17 	ldw	r2,-8(fp)
 2006854:	1004d23a 	srli	r2,r2,8
 2006858:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 200685c:	e0bffe17 	ldw	r2,-8(fp)
 2006860:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2006864:	00800144 	movi	r2,5
 2006868:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 200686c:	e13ffd17 	ldw	r4,-12(fp)
 2006870:	2006cc00 	call	2006cc0 <epcs_enter_4_bytes_mode>
 2006874:	00000c06 	br	20068a8 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2006878:	00bff604 	movi	r2,-40
 200687c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2006880:	e0bffe17 	ldw	r2,-8(fp)
 2006884:	1004d43a 	srli	r2,r2,16
 2006888:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 200688c:	e0bffe17 	ldw	r2,-8(fp)
 2006890:	1004d23a 	srli	r2,r2,8
 2006894:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2006898:	e0bffe17 	ldw	r2,-8(fp)
 200689c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 20068a0:	00800104 	movi	r2,4
 20068a4:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 20068a8:	e13ffd17 	ldw	r4,-12(fp)
 20068ac:	20069fc0 	call	20069fc <epcs_write_enable>

  alt_avalon_spi_command(
 20068b0:	e0bffb03 	ldbu	r2,-20(fp)
 20068b4:	e0fffb44 	addi	r3,fp,-19
 20068b8:	d8000215 	stw	zero,8(sp)
 20068bc:	d8000115 	stw	zero,4(sp)
 20068c0:	d8000015 	stw	zero,0(sp)
 20068c4:	180f883a 	mov	r7,r3
 20068c8:	100d883a 	mov	r6,r2
 20068cc:	000b883a 	mov	r5,zero
 20068d0:	e13ffd17 	ldw	r4,-12(fp)
 20068d4:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 20068d8:	e13ffd17 	ldw	r4,-12(fp)
 20068dc:	20067d00 	call	20067d0 <epcs_await_wip_released>

  if(four_bytes_mode)
 20068e0:	e0bfff17 	ldw	r2,-4(fp)
 20068e4:	10000226 	beq	r2,zero,20068f0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 20068e8:	e13ffd17 	ldw	r4,-12(fp)
 20068ec:	2006d1c0 	call	2006d1c <epcs_exit_4_bytes_mode>
  }
}
 20068f0:	0001883a 	nop
 20068f4:	e037883a 	mov	sp,fp
 20068f8:	dfc00117 	ldw	ra,4(sp)
 20068fc:	df000017 	ldw	fp,0(sp)
 2006900:	dec00204 	addi	sp,sp,8
 2006904:	f800283a 	ret

02006908 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2006908:	defff404 	addi	sp,sp,-48
 200690c:	dfc00b15 	stw	ra,44(sp)
 2006910:	df000a15 	stw	fp,40(sp)
 2006914:	df000a04 	addi	fp,sp,40
 2006918:	e13ffc15 	stw	r4,-16(fp)
 200691c:	e17ffd15 	stw	r5,-12(fp)
 2006920:	e1bffe15 	stw	r6,-8(fp)
 2006924:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2006928:	008000c4 	movi	r2,3
 200692c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2006930:	e0800217 	ldw	r2,8(fp)
 2006934:	10001026 	beq	r2,zero,2006978 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2006938:	e0bffd17 	ldw	r2,-12(fp)
 200693c:	1004d63a 	srli	r2,r2,24
 2006940:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2006944:	e0bffd17 	ldw	r2,-12(fp)
 2006948:	1005d43a 	srai	r2,r2,16
 200694c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2006950:	e0bffd17 	ldw	r2,-12(fp)
 2006954:	1005d23a 	srai	r2,r2,8
 2006958:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 200695c:	e0bffd17 	ldw	r2,-12(fp)
 2006960:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2006964:	00800144 	movi	r2,5
 2006968:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 200696c:	e13ffc17 	ldw	r4,-16(fp)
 2006970:	2006cc00 	call	2006cc0 <epcs_enter_4_bytes_mode>
 2006974:	00000a06 	br	20069a0 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2006978:	e0bffd17 	ldw	r2,-12(fp)
 200697c:	1005d43a 	srai	r2,r2,16
 2006980:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2006984:	e0bffd17 	ldw	r2,-12(fp)
 2006988:	1005d23a 	srai	r2,r2,8
 200698c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2006990:	e0bffd17 	ldw	r2,-12(fp)
 2006994:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2006998:	00800104 	movi	r2,4
 200699c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 20069a0:	e13ffc17 	ldw	r4,-16(fp)
 20069a4:	20067d00 	call	20067d0 <epcs_await_wip_released>

  alt_avalon_spi_command(
 20069a8:	e0bfff17 	ldw	r2,-4(fp)
 20069ac:	e13ffa04 	addi	r4,fp,-24
 20069b0:	d8000215 	stw	zero,8(sp)
 20069b4:	e0fffe17 	ldw	r3,-8(fp)
 20069b8:	d8c00115 	stw	r3,4(sp)
 20069bc:	d8800015 	stw	r2,0(sp)
 20069c0:	200f883a 	mov	r7,r4
 20069c4:	e1bff917 	ldw	r6,-28(fp)
 20069c8:	000b883a 	mov	r5,zero
 20069cc:	e13ffc17 	ldw	r4,-16(fp)
 20069d0:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 20069d4:	e0800217 	ldw	r2,8(fp)
 20069d8:	10000226 	beq	r2,zero,20069e4 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 20069dc:	e13ffc17 	ldw	r4,-16(fp)
 20069e0:	2006d1c0 	call	2006d1c <epcs_exit_4_bytes_mode>
  }

  return length;
 20069e4:	e0bfff17 	ldw	r2,-4(fp)
}
 20069e8:	e037883a 	mov	sp,fp
 20069ec:	dfc00117 	ldw	ra,4(sp)
 20069f0:	df000017 	ldw	fp,0(sp)
 20069f4:	dec00204 	addi	sp,sp,8
 20069f8:	f800283a 	ret

020069fc <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 20069fc:	defff904 	addi	sp,sp,-28
 2006a00:	dfc00615 	stw	ra,24(sp)
 2006a04:	df000515 	stw	fp,20(sp)
 2006a08:	df000504 	addi	fp,sp,20
 2006a0c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2006a10:	00800184 	movi	r2,6
 2006a14:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2006a18:	d8000215 	stw	zero,8(sp)
 2006a1c:	d8000115 	stw	zero,4(sp)
 2006a20:	d8000015 	stw	zero,0(sp)
 2006a24:	e1fffe04 	addi	r7,fp,-8
 2006a28:	01800044 	movi	r6,1
 2006a2c:	000b883a 	mov	r5,zero
 2006a30:	e13fff17 	ldw	r4,-4(fp)
 2006a34:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2006a38:	0001883a 	nop
 2006a3c:	e037883a 	mov	sp,fp
 2006a40:	dfc00117 	ldw	ra,4(sp)
 2006a44:	df000017 	ldw	fp,0(sp)
 2006a48:	dec00204 	addi	sp,sp,8
 2006a4c:	f800283a 	ret

02006a50 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2006a50:	defff804 	addi	sp,sp,-32
 2006a54:	dfc00715 	stw	ra,28(sp)
 2006a58:	df000615 	stw	fp,24(sp)
 2006a5c:	df000604 	addi	fp,sp,24
 2006a60:	e13ffe15 	stw	r4,-8(fp)
 2006a64:	2805883a 	mov	r2,r5
 2006a68:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2006a6c:	00800044 	movi	r2,1
 2006a70:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2006a74:	e0bfff03 	ldbu	r2,-4(fp)
 2006a78:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2006a7c:	d8000215 	stw	zero,8(sp)
 2006a80:	d8000115 	stw	zero,4(sp)
 2006a84:	d8000015 	stw	zero,0(sp)
 2006a88:	e1fffd04 	addi	r7,fp,-12
 2006a8c:	01800084 	movi	r6,2
 2006a90:	000b883a 	mov	r5,zero
 2006a94:	e13ffe17 	ldw	r4,-8(fp)
 2006a98:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2006a9c:	e13ffe17 	ldw	r4,-8(fp)
 2006aa0:	20067d00 	call	20067d0 <epcs_await_wip_released>
}
 2006aa4:	0001883a 	nop
 2006aa8:	e037883a 	mov	sp,fp
 2006aac:	dfc00117 	ldw	ra,4(sp)
 2006ab0:	df000017 	ldw	fp,0(sp)
 2006ab4:	dec00204 	addi	sp,sp,8
 2006ab8:	f800283a 	ret

02006abc <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2006abc:	defff404 	addi	sp,sp,-48
 2006ac0:	dfc00b15 	stw	ra,44(sp)
 2006ac4:	df000a15 	stw	fp,40(sp)
 2006ac8:	df000a04 	addi	fp,sp,40
 2006acc:	e13ffc15 	stw	r4,-16(fp)
 2006ad0:	e17ffd15 	stw	r5,-12(fp)
 2006ad4:	e1bffe15 	stw	r6,-8(fp)
 2006ad8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2006adc:	00800084 	movi	r2,2
 2006ae0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2006ae4:	e0800217 	ldw	r2,8(fp)
 2006ae8:	10001026 	beq	r2,zero,2006b2c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2006aec:	e0bffd17 	ldw	r2,-12(fp)
 2006af0:	1004d63a 	srli	r2,r2,24
 2006af4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2006af8:	e0bffd17 	ldw	r2,-12(fp)
 2006afc:	1005d43a 	srai	r2,r2,16
 2006b00:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2006b04:	e0bffd17 	ldw	r2,-12(fp)
 2006b08:	1005d23a 	srai	r2,r2,8
 2006b0c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2006b10:	e0bffd17 	ldw	r2,-12(fp)
 2006b14:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2006b18:	00800144 	movi	r2,5
 2006b1c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2006b20:	e13ffc17 	ldw	r4,-16(fp)
 2006b24:	2006cc00 	call	2006cc0 <epcs_enter_4_bytes_mode>
 2006b28:	00000a06 	br	2006b54 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2006b2c:	e0bffd17 	ldw	r2,-12(fp)
 2006b30:	1005d43a 	srai	r2,r2,16
 2006b34:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2006b38:	e0bffd17 	ldw	r2,-12(fp)
 2006b3c:	1005d23a 	srai	r2,r2,8
 2006b40:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2006b44:	e0bffd17 	ldw	r2,-12(fp)
 2006b48:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2006b4c:	00800104 	movi	r2,4
 2006b50:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2006b54:	e13ffc17 	ldw	r4,-16(fp)
 2006b58:	20069fc0 	call	20069fc <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2006b5c:	e0fffa04 	addi	r3,fp,-24
 2006b60:	00800044 	movi	r2,1
 2006b64:	d8800215 	stw	r2,8(sp)
 2006b68:	d8000115 	stw	zero,4(sp)
 2006b6c:	d8000015 	stw	zero,0(sp)
 2006b70:	180f883a 	mov	r7,r3
 2006b74:	e1bff917 	ldw	r6,-28(fp)
 2006b78:	000b883a 	mov	r5,zero
 2006b7c:	e13ffc17 	ldw	r4,-16(fp)
 2006b80:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2006b84:	e0bfff17 	ldw	r2,-4(fp)
 2006b88:	d8000215 	stw	zero,8(sp)
 2006b8c:	d8000115 	stw	zero,4(sp)
 2006b90:	d8000015 	stw	zero,0(sp)
 2006b94:	e1fffe17 	ldw	r7,-8(fp)
 2006b98:	100d883a 	mov	r6,r2
 2006b9c:	000b883a 	mov	r5,zero
 2006ba0:	e13ffc17 	ldw	r4,-16(fp)
 2006ba4:	2005b140 	call	2005b14 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2006ba8:	e13ffc17 	ldw	r4,-16(fp)
 2006bac:	20067d00 	call	20067d0 <epcs_await_wip_released>

  if(four_bytes_mode)
 2006bb0:	e0800217 	ldw	r2,8(fp)
 2006bb4:	10000226 	beq	r2,zero,2006bc0 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2006bb8:	e13ffc17 	ldw	r4,-16(fp)
 2006bbc:	2006d1c0 	call	2006d1c <epcs_exit_4_bytes_mode>
  }

  return length;
 2006bc0:	e0bfff17 	ldw	r2,-4(fp)
}
 2006bc4:	e037883a 	mov	sp,fp
 2006bc8:	dfc00117 	ldw	ra,4(sp)
 2006bcc:	df000017 	ldw	fp,0(sp)
 2006bd0:	dec00204 	addi	sp,sp,8
 2006bd4:	f800283a 	ret

02006bd8 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2006bd8:	defff804 	addi	sp,sp,-32
 2006bdc:	dfc00715 	stw	ra,28(sp)
 2006be0:	df000615 	stw	fp,24(sp)
 2006be4:	df000604 	addi	fp,sp,24
 2006be8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2006bec:	00bfeac4 	movi	r2,-85
 2006bf0:	e0bffd05 	stb	r2,-12(fp)
 2006bf4:	e03ffd45 	stb	zero,-11(fp)
 2006bf8:	e03ffd85 	stb	zero,-10(fp)
 2006bfc:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2006c00:	d8000215 	stw	zero,8(sp)
 2006c04:	e0bffe04 	addi	r2,fp,-8
 2006c08:	d8800115 	stw	r2,4(sp)
 2006c0c:	00800044 	movi	r2,1
 2006c10:	d8800015 	stw	r2,0(sp)
 2006c14:	e1fffd04 	addi	r7,fp,-12
 2006c18:	01800104 	movi	r6,4
 2006c1c:	000b883a 	mov	r5,zero
 2006c20:	e13fff17 	ldw	r4,-4(fp)
 2006c24:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2006c28:	e0bffe03 	ldbu	r2,-8(fp)
}
 2006c2c:	e037883a 	mov	sp,fp
 2006c30:	dfc00117 	ldw	ra,4(sp)
 2006c34:	df000017 	ldw	fp,0(sp)
 2006c38:	dec00204 	addi	sp,sp,8
 2006c3c:	f800283a 	ret

02006c40 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 2006c40:	defff904 	addi	sp,sp,-28
 2006c44:	dfc00615 	stw	ra,24(sp)
 2006c48:	df000515 	stw	fp,20(sp)
 2006c4c:	df000504 	addi	fp,sp,20
 2006c50:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2006c54:	00bfe7c4 	movi	r2,-97
 2006c58:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 2006c5c:	d8000215 	stw	zero,8(sp)
 2006c60:	e0bffe44 	addi	r2,fp,-7
 2006c64:	d8800115 	stw	r2,4(sp)
 2006c68:	008000c4 	movi	r2,3
 2006c6c:	d8800015 	stw	r2,0(sp)
 2006c70:	e1fffe04 	addi	r7,fp,-8
 2006c74:	01800044 	movi	r6,1
 2006c78:	000b883a 	mov	r5,zero
 2006c7c:	e13fff17 	ldw	r4,-4(fp)
 2006c80:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2006c84:	e0bffe43 	ldbu	r2,-7(fp)
 2006c88:	10803fcc 	andi	r2,r2,255
 2006c8c:	1006943a 	slli	r3,r2,16
 2006c90:	e0bffe83 	ldbu	r2,-6(fp)
 2006c94:	10803fcc 	andi	r2,r2,255
 2006c98:	1004923a 	slli	r2,r2,8
 2006c9c:	1886b03a 	or	r3,r3,r2
 2006ca0:	e0bffec3 	ldbu	r2,-5(fp)
 2006ca4:	10803fcc 	andi	r2,r2,255
 2006ca8:	1884b03a 	or	r2,r3,r2
}
 2006cac:	e037883a 	mov	sp,fp
 2006cb0:	dfc00117 	ldw	ra,4(sp)
 2006cb4:	df000017 	ldw	fp,0(sp)
 2006cb8:	dec00204 	addi	sp,sp,8
 2006cbc:	f800283a 	ret

02006cc0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2006cc0:	defff904 	addi	sp,sp,-28
 2006cc4:	dfc00615 	stw	ra,24(sp)
 2006cc8:	df000515 	stw	fp,20(sp)
 2006ccc:	df000504 	addi	fp,sp,20
 2006cd0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2006cd4:	00bfedc4 	movi	r2,-73
 2006cd8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2006cdc:	e13fff17 	ldw	r4,-4(fp)
 2006ce0:	20069fc0 	call	20069fc <epcs_write_enable>

  alt_avalon_spi_command(
 2006ce4:	d8000215 	stw	zero,8(sp)
 2006ce8:	d8000115 	stw	zero,4(sp)
 2006cec:	d8000015 	stw	zero,0(sp)
 2006cf0:	e1fffe04 	addi	r7,fp,-8
 2006cf4:	01800044 	movi	r6,1
 2006cf8:	000b883a 	mov	r5,zero
 2006cfc:	e13fff17 	ldw	r4,-4(fp)
 2006d00:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2006d04:	0001883a 	nop
}
 2006d08:	e037883a 	mov	sp,fp
 2006d0c:	dfc00117 	ldw	ra,4(sp)
 2006d10:	df000017 	ldw	fp,0(sp)
 2006d14:	dec00204 	addi	sp,sp,8
 2006d18:	f800283a 	ret

02006d1c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2006d1c:	defff904 	addi	sp,sp,-28
 2006d20:	dfc00615 	stw	ra,24(sp)
 2006d24:	df000515 	stw	fp,20(sp)
 2006d28:	df000504 	addi	fp,sp,20
 2006d2c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 2006d30:	00bffa44 	movi	r2,-23
 2006d34:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2006d38:	e13fff17 	ldw	r4,-4(fp)
 2006d3c:	20069fc0 	call	20069fc <epcs_write_enable>

  alt_avalon_spi_command(
 2006d40:	d8000215 	stw	zero,8(sp)
 2006d44:	d8000115 	stw	zero,4(sp)
 2006d48:	d8000015 	stw	zero,0(sp)
 2006d4c:	e1fffe04 	addi	r7,fp,-8
 2006d50:	01800044 	movi	r6,1
 2006d54:	000b883a 	mov	r5,zero
 2006d58:	e13fff17 	ldw	r4,-4(fp)
 2006d5c:	2005b140 	call	2005b14 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2006d60:	0001883a 	nop
}
 2006d64:	e037883a 	mov	sp,fp
 2006d68:	dfc00117 	ldw	ra,4(sp)
 2006d6c:	df000017 	ldw	fp,0(sp)
 2006d70:	dec00204 	addi	sp,sp,8
 2006d74:	f800283a 	ret

02006d78 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2006d78:	defff504 	addi	sp,sp,-44
 2006d7c:	df000a15 	stw	fp,40(sp)
 2006d80:	df000a04 	addi	fp,sp,40
 2006d84:	e13ffc15 	stw	r4,-16(fp)
 2006d88:	e17ffd15 	stw	r5,-12(fp)
 2006d8c:	e1bffe15 	stw	r6,-8(fp)
 2006d90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2006d94:	e03ff615 	stw	zero,-40(fp)
 2006d98:	d0a61a17 	ldw	r2,-26520(gp)
  
  if (alt_ticks_per_second ())
 2006d9c:	10003c26 	beq	r2,zero,2006e90 <alt_alarm_start+0x118>
  {
    if (alarm)
 2006da0:	e0bffc17 	ldw	r2,-16(fp)
 2006da4:	10003826 	beq	r2,zero,2006e88 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2006da8:	e0bffc17 	ldw	r2,-16(fp)
 2006dac:	e0fffe17 	ldw	r3,-8(fp)
 2006db0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2006db4:	e0bffc17 	ldw	r2,-16(fp)
 2006db8:	e0ffff17 	ldw	r3,-4(fp)
 2006dbc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006dc0:	0005303a 	rdctl	r2,status
 2006dc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006dc8:	e0fff917 	ldw	r3,-28(fp)
 2006dcc:	00bfff84 	movi	r2,-2
 2006dd0:	1884703a 	and	r2,r3,r2
 2006dd4:	1001703a 	wrctl	status,r2
  
  return context;
 2006dd8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2006ddc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2006de0:	d0a61b17 	ldw	r2,-26516(gp)
      
      current_nticks = alt_nticks();
 2006de4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2006de8:	e0fffd17 	ldw	r3,-12(fp)
 2006dec:	e0bff617 	ldw	r2,-40(fp)
 2006df0:	1885883a 	add	r2,r3,r2
 2006df4:	10c00044 	addi	r3,r2,1
 2006df8:	e0bffc17 	ldw	r2,-16(fp)
 2006dfc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2006e00:	e0bffc17 	ldw	r2,-16(fp)
 2006e04:	10c00217 	ldw	r3,8(r2)
 2006e08:	e0bff617 	ldw	r2,-40(fp)
 2006e0c:	1880042e 	bgeu	r3,r2,2006e20 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2006e10:	e0bffc17 	ldw	r2,-16(fp)
 2006e14:	00c00044 	movi	r3,1
 2006e18:	10c00405 	stb	r3,16(r2)
 2006e1c:	00000206 	br	2006e28 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2006e20:	e0bffc17 	ldw	r2,-16(fp)
 2006e24:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2006e28:	e0bffc17 	ldw	r2,-16(fp)
 2006e2c:	d0e00c04 	addi	r3,gp,-32720
 2006e30:	e0fffa15 	stw	r3,-24(fp)
 2006e34:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2006e38:	e0bffb17 	ldw	r2,-20(fp)
 2006e3c:	e0fffa17 	ldw	r3,-24(fp)
 2006e40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2006e44:	e0bffa17 	ldw	r2,-24(fp)
 2006e48:	10c00017 	ldw	r3,0(r2)
 2006e4c:	e0bffb17 	ldw	r2,-20(fp)
 2006e50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2006e54:	e0bffa17 	ldw	r2,-24(fp)
 2006e58:	10800017 	ldw	r2,0(r2)
 2006e5c:	e0fffb17 	ldw	r3,-20(fp)
 2006e60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2006e64:	e0bffa17 	ldw	r2,-24(fp)
 2006e68:	e0fffb17 	ldw	r3,-20(fp)
 2006e6c:	10c00015 	stw	r3,0(r2)
 2006e70:	e0bff817 	ldw	r2,-32(fp)
 2006e74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006e78:	e0bff717 	ldw	r2,-36(fp)
 2006e7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2006e80:	0005883a 	mov	r2,zero
 2006e84:	00000306 	br	2006e94 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2006e88:	00bffa84 	movi	r2,-22
 2006e8c:	00000106 	br	2006e94 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2006e90:	00bfde84 	movi	r2,-134
  }
}
 2006e94:	e037883a 	mov	sp,fp
 2006e98:	df000017 	ldw	fp,0(sp)
 2006e9c:	dec00104 	addi	sp,sp,4
 2006ea0:	f800283a 	ret

02006ea4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2006ea4:	defffa04 	addi	sp,sp,-24
 2006ea8:	dfc00515 	stw	ra,20(sp)
 2006eac:	df000415 	stw	fp,16(sp)
 2006eb0:	df000404 	addi	fp,sp,16
 2006eb4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 2006eb8:	00800244 	movi	r2,9
 2006ebc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 2006ec0:	014003f4 	movhi	r5,15
 2006ec4:	29509004 	addi	r5,r5,16960
 2006ec8:	e13ffd17 	ldw	r4,-12(fp)
 2006ecc:	20013d80 	call	20013d8 <__mulsi3>
 2006ed0:	100b883a 	mov	r5,r2
 2006ed4:	01017db4 	movhi	r4,1526
 2006ed8:	21384004 	addi	r4,r4,-7936
 2006edc:	20042780 	call	2004278 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2006ee0:	100b883a 	mov	r5,r2
 2006ee4:	01200034 	movhi	r4,32768
 2006ee8:	213fffc4 	addi	r4,r4,-1
 2006eec:	20042780 	call	2004278 <__udivsi3>
 2006ef0:	100b883a 	mov	r5,r2
 2006ef4:	e13fff17 	ldw	r4,-4(fp)
 2006ef8:	20042780 	call	2004278 <__udivsi3>
 2006efc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2006f00:	e0bffe17 	ldw	r2,-8(fp)
 2006f04:	10002a26 	beq	r2,zero,2006fb0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 2006f08:	e03ffc15 	stw	zero,-16(fp)
 2006f0c:	00001706 	br	2006f6c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2006f10:	00a00034 	movhi	r2,32768
 2006f14:	10bfffc4 	addi	r2,r2,-1
 2006f18:	10bfffc4 	addi	r2,r2,-1
 2006f1c:	103ffe1e 	bne	r2,zero,2006f18 <__alt_mem_flash+0xfdff5f18>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 2006f20:	014003f4 	movhi	r5,15
 2006f24:	29509004 	addi	r5,r5,16960
 2006f28:	e13ffd17 	ldw	r4,-12(fp)
 2006f2c:	20013d80 	call	20013d8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2006f30:	100b883a 	mov	r5,r2
 2006f34:	01017db4 	movhi	r4,1526
 2006f38:	21384004 	addi	r4,r4,-7936
 2006f3c:	20042780 	call	2004278 <__udivsi3>
 2006f40:	100b883a 	mov	r5,r2
 2006f44:	01200034 	movhi	r4,32768
 2006f48:	213fffc4 	addi	r4,r4,-1
 2006f4c:	20042780 	call	2004278 <__udivsi3>
 2006f50:	1007883a 	mov	r3,r2
 2006f54:	e0bfff17 	ldw	r2,-4(fp)
 2006f58:	10c5c83a 	sub	r2,r2,r3
 2006f5c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2006f60:	e0bffc17 	ldw	r2,-16(fp)
 2006f64:	10800044 	addi	r2,r2,1
 2006f68:	e0bffc15 	stw	r2,-16(fp)
 2006f6c:	e0fffc17 	ldw	r3,-16(fp)
 2006f70:	e0bffe17 	ldw	r2,-8(fp)
 2006f74:	18bfe616 	blt	r3,r2,2006f10 <__alt_mem_flash+0xfdff5f10>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2006f78:	014003f4 	movhi	r5,15
 2006f7c:	29509004 	addi	r5,r5,16960
 2006f80:	e13ffd17 	ldw	r4,-12(fp)
 2006f84:	20013d80 	call	20013d8 <__mulsi3>
 2006f88:	100b883a 	mov	r5,r2
 2006f8c:	01017db4 	movhi	r4,1526
 2006f90:	21384004 	addi	r4,r4,-7936
 2006f94:	20042780 	call	2004278 <__udivsi3>
 2006f98:	e17fff17 	ldw	r5,-4(fp)
 2006f9c:	1009883a 	mov	r4,r2
 2006fa0:	20013d80 	call	20013d8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2006fa4:	10bfffc4 	addi	r2,r2,-1
 2006fa8:	103ffe1e 	bne	r2,zero,2006fa4 <__alt_mem_flash+0xfdff5fa4>
 2006fac:	00000d06 	br	2006fe4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2006fb0:	014003f4 	movhi	r5,15
 2006fb4:	29509004 	addi	r5,r5,16960
 2006fb8:	e13ffd17 	ldw	r4,-12(fp)
 2006fbc:	20013d80 	call	20013d8 <__mulsi3>
 2006fc0:	100b883a 	mov	r5,r2
 2006fc4:	01017db4 	movhi	r4,1526
 2006fc8:	21384004 	addi	r4,r4,-7936
 2006fcc:	20042780 	call	2004278 <__udivsi3>
 2006fd0:	e17fff17 	ldw	r5,-4(fp)
 2006fd4:	1009883a 	mov	r4,r2
 2006fd8:	20013d80 	call	20013d8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2006fdc:	10bfffc4 	addi	r2,r2,-1
 2006fe0:	00bffe16 	blt	zero,r2,2006fdc <__alt_mem_flash+0xfdff5fdc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 2006fe4:	0005883a 	mov	r2,zero
}
 2006fe8:	e037883a 	mov	sp,fp
 2006fec:	dfc00117 	ldw	ra,4(sp)
 2006ff0:	df000017 	ldw	fp,0(sp)
 2006ff4:	dec00204 	addi	sp,sp,8
 2006ff8:	f800283a 	ret

02006ffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2006ffc:	defffe04 	addi	sp,sp,-8
 2007000:	dfc00115 	stw	ra,4(sp)
 2007004:	df000015 	stw	fp,0(sp)
 2007008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200700c:	d0a00817 	ldw	r2,-32736(gp)
 2007010:	10000326 	beq	r2,zero,2007020 <alt_get_errno+0x24>
 2007014:	d0a00817 	ldw	r2,-32736(gp)
 2007018:	103ee83a 	callr	r2
 200701c:	00000106 	br	2007024 <alt_get_errno+0x28>
 2007020:	d0a61d04 	addi	r2,gp,-26508
}
 2007024:	e037883a 	mov	sp,fp
 2007028:	dfc00117 	ldw	ra,4(sp)
 200702c:	df000017 	ldw	fp,0(sp)
 2007030:	dec00204 	addi	sp,sp,8
 2007034:	f800283a 	ret

02007038 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2007038:	defffb04 	addi	sp,sp,-20
 200703c:	dfc00415 	stw	ra,16(sp)
 2007040:	df000315 	stw	fp,12(sp)
 2007044:	df000304 	addi	fp,sp,12
 2007048:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200704c:	e0bfff17 	ldw	r2,-4(fp)
 2007050:	10000816 	blt	r2,zero,2007074 <close+0x3c>
 2007054:	01400304 	movi	r5,12
 2007058:	e13fff17 	ldw	r4,-4(fp)
 200705c:	20013d80 	call	20013d8 <__mulsi3>
 2007060:	1007883a 	mov	r3,r2
 2007064:	00808074 	movhi	r2,513
 2007068:	10a73b04 	addi	r2,r2,-25364
 200706c:	1885883a 	add	r2,r3,r2
 2007070:	00000106 	br	2007078 <close+0x40>
 2007074:	0005883a 	mov	r2,zero
 2007078:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200707c:	e0bffd17 	ldw	r2,-12(fp)
 2007080:	10001926 	beq	r2,zero,20070e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2007084:	e0bffd17 	ldw	r2,-12(fp)
 2007088:	10800017 	ldw	r2,0(r2)
 200708c:	10800417 	ldw	r2,16(r2)
 2007090:	10000626 	beq	r2,zero,20070ac <close+0x74>
 2007094:	e0bffd17 	ldw	r2,-12(fp)
 2007098:	10800017 	ldw	r2,0(r2)
 200709c:	10800417 	ldw	r2,16(r2)
 20070a0:	e13ffd17 	ldw	r4,-12(fp)
 20070a4:	103ee83a 	callr	r2
 20070a8:	00000106 	br	20070b0 <close+0x78>
 20070ac:	0005883a 	mov	r2,zero
 20070b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20070b4:	e13fff17 	ldw	r4,-4(fp)
 20070b8:	2007aec0 	call	2007aec <alt_release_fd>
    if (rval < 0)
 20070bc:	e0bffe17 	ldw	r2,-8(fp)
 20070c0:	1000070e 	bge	r2,zero,20070e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 20070c4:	2006ffc0 	call	2006ffc <alt_get_errno>
 20070c8:	1007883a 	mov	r3,r2
 20070cc:	e0bffe17 	ldw	r2,-8(fp)
 20070d0:	0085c83a 	sub	r2,zero,r2
 20070d4:	18800015 	stw	r2,0(r3)
      return -1;
 20070d8:	00bfffc4 	movi	r2,-1
 20070dc:	00000706 	br	20070fc <close+0xc4>
    }
    return 0;
 20070e0:	0005883a 	mov	r2,zero
 20070e4:	00000506 	br	20070fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20070e8:	2006ffc0 	call	2006ffc <alt_get_errno>
 20070ec:	1007883a 	mov	r3,r2
 20070f0:	00801444 	movi	r2,81
 20070f4:	18800015 	stw	r2,0(r3)
    return -1;
 20070f8:	00bfffc4 	movi	r2,-1
  }
}
 20070fc:	e037883a 	mov	sp,fp
 2007100:	dfc00117 	ldw	ra,4(sp)
 2007104:	df000017 	ldw	fp,0(sp)
 2007108:	dec00204 	addi	sp,sp,8
 200710c:	f800283a 	ret

02007110 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2007110:	deffff04 	addi	sp,sp,-4
 2007114:	df000015 	stw	fp,0(sp)
 2007118:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200711c:	0001883a 	nop
 2007120:	e037883a 	mov	sp,fp
 2007124:	df000017 	ldw	fp,0(sp)
 2007128:	dec00104 	addi	sp,sp,4
 200712c:	f800283a 	ret

02007130 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2007130:	defffc04 	addi	sp,sp,-16
 2007134:	df000315 	stw	fp,12(sp)
 2007138:	df000304 	addi	fp,sp,12
 200713c:	e13ffd15 	stw	r4,-12(fp)
 2007140:	e17ffe15 	stw	r5,-8(fp)
 2007144:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2007148:	e0bfff17 	ldw	r2,-4(fp)
}
 200714c:	e037883a 	mov	sp,fp
 2007150:	df000017 	ldw	fp,0(sp)
 2007154:	dec00104 	addi	sp,sp,4
 2007158:	f800283a 	ret

0200715c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200715c:	defffe04 	addi	sp,sp,-8
 2007160:	dfc00115 	stw	ra,4(sp)
 2007164:	df000015 	stw	fp,0(sp)
 2007168:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200716c:	d0a00817 	ldw	r2,-32736(gp)
 2007170:	10000326 	beq	r2,zero,2007180 <alt_get_errno+0x24>
 2007174:	d0a00817 	ldw	r2,-32736(gp)
 2007178:	103ee83a 	callr	r2
 200717c:	00000106 	br	2007184 <alt_get_errno+0x28>
 2007180:	d0a61d04 	addi	r2,gp,-26508
}
 2007184:	e037883a 	mov	sp,fp
 2007188:	dfc00117 	ldw	ra,4(sp)
 200718c:	df000017 	ldw	fp,0(sp)
 2007190:	dec00204 	addi	sp,sp,8
 2007194:	f800283a 	ret

02007198 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2007198:	defffa04 	addi	sp,sp,-24
 200719c:	dfc00515 	stw	ra,20(sp)
 20071a0:	df000415 	stw	fp,16(sp)
 20071a4:	df000404 	addi	fp,sp,16
 20071a8:	e13ffe15 	stw	r4,-8(fp)
 20071ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20071b0:	e0bffe17 	ldw	r2,-8(fp)
 20071b4:	10000326 	beq	r2,zero,20071c4 <alt_dev_llist_insert+0x2c>
 20071b8:	e0bffe17 	ldw	r2,-8(fp)
 20071bc:	10800217 	ldw	r2,8(r2)
 20071c0:	1000061e 	bne	r2,zero,20071dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 20071c4:	200715c0 	call	200715c <alt_get_errno>
 20071c8:	1007883a 	mov	r3,r2
 20071cc:	00800584 	movi	r2,22
 20071d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20071d4:	00bffa84 	movi	r2,-22
 20071d8:	00001306 	br	2007228 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20071dc:	e0bffe17 	ldw	r2,-8(fp)
 20071e0:	e0ffff17 	ldw	r3,-4(fp)
 20071e4:	e0fffc15 	stw	r3,-16(fp)
 20071e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20071ec:	e0bffd17 	ldw	r2,-12(fp)
 20071f0:	e0fffc17 	ldw	r3,-16(fp)
 20071f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20071f8:	e0bffc17 	ldw	r2,-16(fp)
 20071fc:	10c00017 	ldw	r3,0(r2)
 2007200:	e0bffd17 	ldw	r2,-12(fp)
 2007204:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2007208:	e0bffc17 	ldw	r2,-16(fp)
 200720c:	10800017 	ldw	r2,0(r2)
 2007210:	e0fffd17 	ldw	r3,-12(fp)
 2007214:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2007218:	e0bffc17 	ldw	r2,-16(fp)
 200721c:	e0fffd17 	ldw	r3,-12(fp)
 2007220:	10c00015 	stw	r3,0(r2)

  return 0;  
 2007224:	0005883a 	mov	r2,zero
}
 2007228:	e037883a 	mov	sp,fp
 200722c:	dfc00117 	ldw	ra,4(sp)
 2007230:	df000017 	ldw	fp,0(sp)
 2007234:	dec00204 	addi	sp,sp,8
 2007238:	f800283a 	ret

0200723c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200723c:	defffd04 	addi	sp,sp,-12
 2007240:	dfc00215 	stw	ra,8(sp)
 2007244:	df000115 	stw	fp,4(sp)
 2007248:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200724c:	00808074 	movhi	r2,513
 2007250:	10a14404 	addi	r2,r2,-31472
 2007254:	e0bfff15 	stw	r2,-4(fp)
 2007258:	00000606 	br	2007274 <_do_ctors+0x38>
        (*ctor) (); 
 200725c:	e0bfff17 	ldw	r2,-4(fp)
 2007260:	10800017 	ldw	r2,0(r2)
 2007264:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2007268:	e0bfff17 	ldw	r2,-4(fp)
 200726c:	10bfff04 	addi	r2,r2,-4
 2007270:	e0bfff15 	stw	r2,-4(fp)
 2007274:	e0ffff17 	ldw	r3,-4(fp)
 2007278:	00808074 	movhi	r2,513
 200727c:	10a14504 	addi	r2,r2,-31468
 2007280:	18bff62e 	bgeu	r3,r2,200725c <__alt_mem_flash+0xfdff625c>
        (*ctor) (); 
}
 2007284:	0001883a 	nop
 2007288:	e037883a 	mov	sp,fp
 200728c:	dfc00117 	ldw	ra,4(sp)
 2007290:	df000017 	ldw	fp,0(sp)
 2007294:	dec00204 	addi	sp,sp,8
 2007298:	f800283a 	ret

0200729c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200729c:	defffd04 	addi	sp,sp,-12
 20072a0:	dfc00215 	stw	ra,8(sp)
 20072a4:	df000115 	stw	fp,4(sp)
 20072a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20072ac:	00808074 	movhi	r2,513
 20072b0:	10a14404 	addi	r2,r2,-31472
 20072b4:	e0bfff15 	stw	r2,-4(fp)
 20072b8:	00000606 	br	20072d4 <_do_dtors+0x38>
        (*dtor) (); 
 20072bc:	e0bfff17 	ldw	r2,-4(fp)
 20072c0:	10800017 	ldw	r2,0(r2)
 20072c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20072c8:	e0bfff17 	ldw	r2,-4(fp)
 20072cc:	10bfff04 	addi	r2,r2,-4
 20072d0:	e0bfff15 	stw	r2,-4(fp)
 20072d4:	e0ffff17 	ldw	r3,-4(fp)
 20072d8:	00808074 	movhi	r2,513
 20072dc:	10a14504 	addi	r2,r2,-31468
 20072e0:	18bff62e 	bgeu	r3,r2,20072bc <__alt_mem_flash+0xfdff62bc>
        (*dtor) (); 
}
 20072e4:	0001883a 	nop
 20072e8:	e037883a 	mov	sp,fp
 20072ec:	dfc00117 	ldw	ra,4(sp)
 20072f0:	df000017 	ldw	fp,0(sp)
 20072f4:	dec00204 	addi	sp,sp,8
 20072f8:	f800283a 	ret

020072fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20072fc:	defffa04 	addi	sp,sp,-24
 2007300:	dfc00515 	stw	ra,20(sp)
 2007304:	df000415 	stw	fp,16(sp)
 2007308:	df000404 	addi	fp,sp,16
 200730c:	e13ffe15 	stw	r4,-8(fp)
 2007310:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2007314:	e0bfff17 	ldw	r2,-4(fp)
 2007318:	10800017 	ldw	r2,0(r2)
 200731c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2007320:	e13ffe17 	ldw	r4,-8(fp)
 2007324:	20081b00 	call	20081b0 <strlen>
 2007328:	10800044 	addi	r2,r2,1
 200732c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2007330:	00000d06 	br	2007368 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2007334:	e0bffc17 	ldw	r2,-16(fp)
 2007338:	10800217 	ldw	r2,8(r2)
 200733c:	e0fffd17 	ldw	r3,-12(fp)
 2007340:	180d883a 	mov	r6,r3
 2007344:	e17ffe17 	ldw	r5,-8(fp)
 2007348:	1009883a 	mov	r4,r2
 200734c:	2007fec0 	call	2007fec <memcmp>
 2007350:	1000021e 	bne	r2,zero,200735c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2007354:	e0bffc17 	ldw	r2,-16(fp)
 2007358:	00000706 	br	2007378 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200735c:	e0bffc17 	ldw	r2,-16(fp)
 2007360:	10800017 	ldw	r2,0(r2)
 2007364:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2007368:	e0fffc17 	ldw	r3,-16(fp)
 200736c:	e0bfff17 	ldw	r2,-4(fp)
 2007370:	18bff01e 	bne	r3,r2,2007334 <__alt_mem_flash+0xfdff6334>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2007374:	0005883a 	mov	r2,zero
}
 2007378:	e037883a 	mov	sp,fp
 200737c:	dfc00117 	ldw	ra,4(sp)
 2007380:	df000017 	ldw	fp,0(sp)
 2007384:	dec00204 	addi	sp,sp,8
 2007388:	f800283a 	ret

0200738c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 200738c:	defffc04 	addi	sp,sp,-16
 2007390:	dfc00315 	stw	ra,12(sp)
 2007394:	df000215 	stw	fp,8(sp)
 2007398:	df000204 	addi	fp,sp,8
 200739c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 20073a0:	d1600904 	addi	r5,gp,-32732
 20073a4:	e13fff17 	ldw	r4,-4(fp)
 20073a8:	20072fc0 	call	20072fc <alt_find_dev>
 20073ac:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 20073b0:	e0bffe17 	ldw	r2,-8(fp)
 20073b4:	10000926 	beq	r2,zero,20073dc <alt_flash_open_dev+0x50>
 20073b8:	e0bffe17 	ldw	r2,-8(fp)
 20073bc:	10800317 	ldw	r2,12(r2)
 20073c0:	10000626 	beq	r2,zero,20073dc <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 20073c4:	e0bffe17 	ldw	r2,-8(fp)
 20073c8:	10800317 	ldw	r2,12(r2)
 20073cc:	e17fff17 	ldw	r5,-4(fp)
 20073d0:	e13ffe17 	ldw	r4,-8(fp)
 20073d4:	103ee83a 	callr	r2
 20073d8:	00000106 	br	20073e0 <alt_flash_open_dev+0x54>
  }

  return dev;
 20073dc:	e0bffe17 	ldw	r2,-8(fp)
}
 20073e0:	e037883a 	mov	sp,fp
 20073e4:	dfc00117 	ldw	ra,4(sp)
 20073e8:	df000017 	ldw	fp,0(sp)
 20073ec:	dec00204 	addi	sp,sp,8
 20073f0:	f800283a 	ret

020073f4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 20073f4:	defffd04 	addi	sp,sp,-12
 20073f8:	dfc00215 	stw	ra,8(sp)
 20073fc:	df000115 	stw	fp,4(sp)
 2007400:	df000104 	addi	fp,sp,4
 2007404:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2007408:	e0bfff17 	ldw	r2,-4(fp)
 200740c:	10000826 	beq	r2,zero,2007430 <alt_flash_close_dev+0x3c>
 2007410:	e0bfff17 	ldw	r2,-4(fp)
 2007414:	10800417 	ldw	r2,16(r2)
 2007418:	10000526 	beq	r2,zero,2007430 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 200741c:	e0bfff17 	ldw	r2,-4(fp)
 2007420:	10800417 	ldw	r2,16(r2)
 2007424:	e13fff17 	ldw	r4,-4(fp)
 2007428:	103ee83a 	callr	r2
  }
  return;
 200742c:	0001883a 	nop
 2007430:	0001883a 	nop
}
 2007434:	e037883a 	mov	sp,fp
 2007438:	dfc00117 	ldw	ra,4(sp)
 200743c:	df000017 	ldw	fp,0(sp)
 2007440:	dec00204 	addi	sp,sp,8
 2007444:	f800283a 	ret

02007448 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2007448:	deffff04 	addi	sp,sp,-4
 200744c:	df000015 	stw	fp,0(sp)
 2007450:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 2007454:	0001883a 	nop
 2007458:	e037883a 	mov	sp,fp
 200745c:	df000017 	ldw	fp,0(sp)
 2007460:	dec00104 	addi	sp,sp,4
 2007464:	f800283a 	ret

02007468 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2007468:	defff904 	addi	sp,sp,-28
 200746c:	dfc00615 	stw	ra,24(sp)
 2007470:	df000515 	stw	fp,20(sp)
 2007474:	df000504 	addi	fp,sp,20
 2007478:	e13ffc15 	stw	r4,-16(fp)
 200747c:	e17ffd15 	stw	r5,-12(fp)
 2007480:	e1bffe15 	stw	r6,-8(fp)
 2007484:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2007488:	e0800217 	ldw	r2,8(fp)
 200748c:	d8800015 	stw	r2,0(sp)
 2007490:	e1ffff17 	ldw	r7,-4(fp)
 2007494:	e1bffe17 	ldw	r6,-8(fp)
 2007498:	e17ffd17 	ldw	r5,-12(fp)
 200749c:	e13ffc17 	ldw	r4,-16(fp)
 20074a0:	20076180 	call	2007618 <alt_iic_isr_register>
}  
 20074a4:	e037883a 	mov	sp,fp
 20074a8:	dfc00117 	ldw	ra,4(sp)
 20074ac:	df000017 	ldw	fp,0(sp)
 20074b0:	dec00204 	addi	sp,sp,8
 20074b4:	f800283a 	ret

020074b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 20074b8:	defff904 	addi	sp,sp,-28
 20074bc:	df000615 	stw	fp,24(sp)
 20074c0:	df000604 	addi	fp,sp,24
 20074c4:	e13ffe15 	stw	r4,-8(fp)
 20074c8:	e17fff15 	stw	r5,-4(fp)
 20074cc:	e0bfff17 	ldw	r2,-4(fp)
 20074d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20074d4:	0005303a 	rdctl	r2,status
 20074d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20074dc:	e0fffb17 	ldw	r3,-20(fp)
 20074e0:	00bfff84 	movi	r2,-2
 20074e4:	1884703a 	and	r2,r3,r2
 20074e8:	1001703a 	wrctl	status,r2
  
  return context;
 20074ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20074f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 20074f4:	00c00044 	movi	r3,1
 20074f8:	e0bffa17 	ldw	r2,-24(fp)
 20074fc:	1884983a 	sll	r2,r3,r2
 2007500:	1007883a 	mov	r3,r2
 2007504:	d0a61917 	ldw	r2,-26524(gp)
 2007508:	1884b03a 	or	r2,r3,r2
 200750c:	d0a61915 	stw	r2,-26524(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2007510:	d0a61917 	ldw	r2,-26524(gp)
 2007514:	100170fa 	wrctl	ienable,r2
 2007518:	e0bffc17 	ldw	r2,-16(fp)
 200751c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007520:	e0bffd17 	ldw	r2,-12(fp)
 2007524:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2007528:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 200752c:	0001883a 	nop
}
 2007530:	e037883a 	mov	sp,fp
 2007534:	df000017 	ldw	fp,0(sp)
 2007538:	dec00104 	addi	sp,sp,4
 200753c:	f800283a 	ret

02007540 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2007540:	defff904 	addi	sp,sp,-28
 2007544:	df000615 	stw	fp,24(sp)
 2007548:	df000604 	addi	fp,sp,24
 200754c:	e13ffe15 	stw	r4,-8(fp)
 2007550:	e17fff15 	stw	r5,-4(fp)
 2007554:	e0bfff17 	ldw	r2,-4(fp)
 2007558:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200755c:	0005303a 	rdctl	r2,status
 2007560:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007564:	e0fffb17 	ldw	r3,-20(fp)
 2007568:	00bfff84 	movi	r2,-2
 200756c:	1884703a 	and	r2,r3,r2
 2007570:	1001703a 	wrctl	status,r2
  
  return context;
 2007574:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2007578:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 200757c:	00c00044 	movi	r3,1
 2007580:	e0bffa17 	ldw	r2,-24(fp)
 2007584:	1884983a 	sll	r2,r3,r2
 2007588:	0084303a 	nor	r2,zero,r2
 200758c:	1007883a 	mov	r3,r2
 2007590:	d0a61917 	ldw	r2,-26524(gp)
 2007594:	1884703a 	and	r2,r3,r2
 2007598:	d0a61915 	stw	r2,-26524(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200759c:	d0a61917 	ldw	r2,-26524(gp)
 20075a0:	100170fa 	wrctl	ienable,r2
 20075a4:	e0bffc17 	ldw	r2,-16(fp)
 20075a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20075ac:	e0bffd17 	ldw	r2,-12(fp)
 20075b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20075b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 20075b8:	0001883a 	nop
}
 20075bc:	e037883a 	mov	sp,fp
 20075c0:	df000017 	ldw	fp,0(sp)
 20075c4:	dec00104 	addi	sp,sp,4
 20075c8:	f800283a 	ret

020075cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 20075cc:	defffc04 	addi	sp,sp,-16
 20075d0:	df000315 	stw	fp,12(sp)
 20075d4:	df000304 	addi	fp,sp,12
 20075d8:	e13ffe15 	stw	r4,-8(fp)
 20075dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20075e0:	000530fa 	rdctl	r2,ienable
 20075e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20075e8:	00c00044 	movi	r3,1
 20075ec:	e0bfff17 	ldw	r2,-4(fp)
 20075f0:	1884983a 	sll	r2,r3,r2
 20075f4:	1007883a 	mov	r3,r2
 20075f8:	e0bffd17 	ldw	r2,-12(fp)
 20075fc:	1884703a 	and	r2,r3,r2
 2007600:	1004c03a 	cmpne	r2,r2,zero
 2007604:	10803fcc 	andi	r2,r2,255
}
 2007608:	e037883a 	mov	sp,fp
 200760c:	df000017 	ldw	fp,0(sp)
 2007610:	dec00104 	addi	sp,sp,4
 2007614:	f800283a 	ret

02007618 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2007618:	defff504 	addi	sp,sp,-44
 200761c:	dfc00a15 	stw	ra,40(sp)
 2007620:	df000915 	stw	fp,36(sp)
 2007624:	df000904 	addi	fp,sp,36
 2007628:	e13ffc15 	stw	r4,-16(fp)
 200762c:	e17ffd15 	stw	r5,-12(fp)
 2007630:	e1bffe15 	stw	r6,-8(fp)
 2007634:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2007638:	00bffa84 	movi	r2,-22
 200763c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2007640:	e0bffd17 	ldw	r2,-12(fp)
 2007644:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2007648:	e0bff817 	ldw	r2,-32(fp)
 200764c:	10800808 	cmpgei	r2,r2,32
 2007650:	1000271e 	bne	r2,zero,20076f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007654:	0005303a 	rdctl	r2,status
 2007658:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200765c:	e0fffb17 	ldw	r3,-20(fp)
 2007660:	00bfff84 	movi	r2,-2
 2007664:	1884703a 	and	r2,r3,r2
 2007668:	1001703a 	wrctl	status,r2
  
  return context;
 200766c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2007670:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2007674:	00808074 	movhi	r2,513
 2007678:	10adbe04 	addi	r2,r2,-18696
 200767c:	e0fff817 	ldw	r3,-32(fp)
 2007680:	180690fa 	slli	r3,r3,3
 2007684:	10c5883a 	add	r2,r2,r3
 2007688:	e0fffe17 	ldw	r3,-8(fp)
 200768c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2007690:	00808074 	movhi	r2,513
 2007694:	10adbe04 	addi	r2,r2,-18696
 2007698:	e0fff817 	ldw	r3,-32(fp)
 200769c:	180690fa 	slli	r3,r3,3
 20076a0:	10c5883a 	add	r2,r2,r3
 20076a4:	10800104 	addi	r2,r2,4
 20076a8:	e0ffff17 	ldw	r3,-4(fp)
 20076ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20076b0:	e0bffe17 	ldw	r2,-8(fp)
 20076b4:	10000526 	beq	r2,zero,20076cc <alt_iic_isr_register+0xb4>
 20076b8:	e0bff817 	ldw	r2,-32(fp)
 20076bc:	100b883a 	mov	r5,r2
 20076c0:	e13ffc17 	ldw	r4,-16(fp)
 20076c4:	20074b80 	call	20074b8 <alt_ic_irq_enable>
 20076c8:	00000406 	br	20076dc <alt_iic_isr_register+0xc4>
 20076cc:	e0bff817 	ldw	r2,-32(fp)
 20076d0:	100b883a 	mov	r5,r2
 20076d4:	e13ffc17 	ldw	r4,-16(fp)
 20076d8:	20075400 	call	2007540 <alt_ic_irq_disable>
 20076dc:	e0bff715 	stw	r2,-36(fp)
 20076e0:	e0bffa17 	ldw	r2,-24(fp)
 20076e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20076e8:	e0bff917 	ldw	r2,-28(fp)
 20076ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20076f0:	e0bff717 	ldw	r2,-36(fp)
}
 20076f4:	e037883a 	mov	sp,fp
 20076f8:	dfc00117 	ldw	ra,4(sp)
 20076fc:	df000017 	ldw	fp,0(sp)
 2007700:	dec00204 	addi	sp,sp,8
 2007704:	f800283a 	ret

02007708 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2007708:	defff804 	addi	sp,sp,-32
 200770c:	dfc00715 	stw	ra,28(sp)
 2007710:	df000615 	stw	fp,24(sp)
 2007714:	dc000515 	stw	r16,20(sp)
 2007718:	df000604 	addi	fp,sp,24
 200771c:	e13ffb15 	stw	r4,-20(fp)
 2007720:	e17ffc15 	stw	r5,-16(fp)
 2007724:	e1bffd15 	stw	r6,-12(fp)
 2007728:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 200772c:	e1bffe17 	ldw	r6,-8(fp)
 2007730:	e17ffd17 	ldw	r5,-12(fp)
 2007734:	e13ffc17 	ldw	r4,-16(fp)
 2007738:	20079900 	call	2007990 <open>
 200773c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2007740:	e0bffa17 	ldw	r2,-24(fp)
 2007744:	10002216 	blt	r2,zero,20077d0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2007748:	04008074 	movhi	r16,513
 200774c:	84273b04 	addi	r16,r16,-25364
 2007750:	e0bffa17 	ldw	r2,-24(fp)
 2007754:	01400304 	movi	r5,12
 2007758:	1009883a 	mov	r4,r2
 200775c:	20013d80 	call	20013d8 <__mulsi3>
 2007760:	8085883a 	add	r2,r16,r2
 2007764:	10c00017 	ldw	r3,0(r2)
 2007768:	e0bffb17 	ldw	r2,-20(fp)
 200776c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2007770:	04008074 	movhi	r16,513
 2007774:	84273b04 	addi	r16,r16,-25364
 2007778:	e0bffa17 	ldw	r2,-24(fp)
 200777c:	01400304 	movi	r5,12
 2007780:	1009883a 	mov	r4,r2
 2007784:	20013d80 	call	20013d8 <__mulsi3>
 2007788:	8085883a 	add	r2,r16,r2
 200778c:	10800104 	addi	r2,r2,4
 2007790:	10c00017 	ldw	r3,0(r2)
 2007794:	e0bffb17 	ldw	r2,-20(fp)
 2007798:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200779c:	04008074 	movhi	r16,513
 20077a0:	84273b04 	addi	r16,r16,-25364
 20077a4:	e0bffa17 	ldw	r2,-24(fp)
 20077a8:	01400304 	movi	r5,12
 20077ac:	1009883a 	mov	r4,r2
 20077b0:	20013d80 	call	20013d8 <__mulsi3>
 20077b4:	8085883a 	add	r2,r16,r2
 20077b8:	10800204 	addi	r2,r2,8
 20077bc:	10c00017 	ldw	r3,0(r2)
 20077c0:	e0bffb17 	ldw	r2,-20(fp)
 20077c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20077c8:	e13ffa17 	ldw	r4,-24(fp)
 20077cc:	2007aec0 	call	2007aec <alt_release_fd>
  }
} 
 20077d0:	0001883a 	nop
 20077d4:	e6ffff04 	addi	sp,fp,-4
 20077d8:	dfc00217 	ldw	ra,8(sp)
 20077dc:	df000117 	ldw	fp,4(sp)
 20077e0:	dc000017 	ldw	r16,0(sp)
 20077e4:	dec00304 	addi	sp,sp,12
 20077e8:	f800283a 	ret

020077ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20077ec:	defffb04 	addi	sp,sp,-20
 20077f0:	dfc00415 	stw	ra,16(sp)
 20077f4:	df000315 	stw	fp,12(sp)
 20077f8:	df000304 	addi	fp,sp,12
 20077fc:	e13ffd15 	stw	r4,-12(fp)
 2007800:	e17ffe15 	stw	r5,-8(fp)
 2007804:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2007808:	01c07fc4 	movi	r7,511
 200780c:	01800044 	movi	r6,1
 2007810:	e17ffd17 	ldw	r5,-12(fp)
 2007814:	01008074 	movhi	r4,513
 2007818:	21273e04 	addi	r4,r4,-25352
 200781c:	20077080 	call	2007708 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2007820:	01c07fc4 	movi	r7,511
 2007824:	000d883a 	mov	r6,zero
 2007828:	e17ffe17 	ldw	r5,-8(fp)
 200782c:	01008074 	movhi	r4,513
 2007830:	21273b04 	addi	r4,r4,-25364
 2007834:	20077080 	call	2007708 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2007838:	01c07fc4 	movi	r7,511
 200783c:	01800044 	movi	r6,1
 2007840:	e17fff17 	ldw	r5,-4(fp)
 2007844:	01008074 	movhi	r4,513
 2007848:	21274104 	addi	r4,r4,-25340
 200784c:	20077080 	call	2007708 <alt_open_fd>
}  
 2007850:	0001883a 	nop
 2007854:	e037883a 	mov	sp,fp
 2007858:	dfc00117 	ldw	ra,4(sp)
 200785c:	df000017 	ldw	fp,0(sp)
 2007860:	dec00204 	addi	sp,sp,8
 2007864:	f800283a 	ret

02007868 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2007868:	defffe04 	addi	sp,sp,-8
 200786c:	dfc00115 	stw	ra,4(sp)
 2007870:	df000015 	stw	fp,0(sp)
 2007874:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2007878:	d0a00817 	ldw	r2,-32736(gp)
 200787c:	10000326 	beq	r2,zero,200788c <alt_get_errno+0x24>
 2007880:	d0a00817 	ldw	r2,-32736(gp)
 2007884:	103ee83a 	callr	r2
 2007888:	00000106 	br	2007890 <alt_get_errno+0x28>
 200788c:	d0a61d04 	addi	r2,gp,-26508
}
 2007890:	e037883a 	mov	sp,fp
 2007894:	dfc00117 	ldw	ra,4(sp)
 2007898:	df000017 	ldw	fp,0(sp)
 200789c:	dec00204 	addi	sp,sp,8
 20078a0:	f800283a 	ret

020078a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 20078a4:	defffb04 	addi	sp,sp,-20
 20078a8:	dfc00415 	stw	ra,16(sp)
 20078ac:	df000315 	stw	fp,12(sp)
 20078b0:	dc000215 	stw	r16,8(sp)
 20078b4:	df000304 	addi	fp,sp,12
 20078b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 20078bc:	e0bffe17 	ldw	r2,-8(fp)
 20078c0:	10800217 	ldw	r2,8(r2)
 20078c4:	10d00034 	orhi	r3,r2,16384
 20078c8:	e0bffe17 	ldw	r2,-8(fp)
 20078cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20078d0:	e03ffd15 	stw	zero,-12(fp)
 20078d4:	00002306 	br	2007964 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20078d8:	04008074 	movhi	r16,513
 20078dc:	84273b04 	addi	r16,r16,-25364
 20078e0:	e0bffd17 	ldw	r2,-12(fp)
 20078e4:	01400304 	movi	r5,12
 20078e8:	1009883a 	mov	r4,r2
 20078ec:	20013d80 	call	20013d8 <__mulsi3>
 20078f0:	8085883a 	add	r2,r16,r2
 20078f4:	10c00017 	ldw	r3,0(r2)
 20078f8:	e0bffe17 	ldw	r2,-8(fp)
 20078fc:	10800017 	ldw	r2,0(r2)
 2007900:	1880151e 	bne	r3,r2,2007958 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2007904:	04008074 	movhi	r16,513
 2007908:	84273b04 	addi	r16,r16,-25364
 200790c:	e0bffd17 	ldw	r2,-12(fp)
 2007910:	01400304 	movi	r5,12
 2007914:	1009883a 	mov	r4,r2
 2007918:	20013d80 	call	20013d8 <__mulsi3>
 200791c:	8085883a 	add	r2,r16,r2
 2007920:	10800204 	addi	r2,r2,8
 2007924:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2007928:	10000b0e 	bge	r2,zero,2007958 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 200792c:	01400304 	movi	r5,12
 2007930:	e13ffd17 	ldw	r4,-12(fp)
 2007934:	20013d80 	call	20013d8 <__mulsi3>
 2007938:	1007883a 	mov	r3,r2
 200793c:	00808074 	movhi	r2,513
 2007940:	10a73b04 	addi	r2,r2,-25364
 2007944:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2007948:	e0bffe17 	ldw	r2,-8(fp)
 200794c:	18800226 	beq	r3,r2,2007958 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2007950:	00bffcc4 	movi	r2,-13
 2007954:	00000806 	br	2007978 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2007958:	e0bffd17 	ldw	r2,-12(fp)
 200795c:	10800044 	addi	r2,r2,1
 2007960:	e0bffd15 	stw	r2,-12(fp)
 2007964:	d0a00717 	ldw	r2,-32740(gp)
 2007968:	1007883a 	mov	r3,r2
 200796c:	e0bffd17 	ldw	r2,-12(fp)
 2007970:	18bfd92e 	bgeu	r3,r2,20078d8 <__alt_mem_flash+0xfdff68d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2007974:	0005883a 	mov	r2,zero
}
 2007978:	e6ffff04 	addi	sp,fp,-4
 200797c:	dfc00217 	ldw	ra,8(sp)
 2007980:	df000117 	ldw	fp,4(sp)
 2007984:	dc000017 	ldw	r16,0(sp)
 2007988:	dec00304 	addi	sp,sp,12
 200798c:	f800283a 	ret

02007990 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2007990:	defff604 	addi	sp,sp,-40
 2007994:	dfc00915 	stw	ra,36(sp)
 2007998:	df000815 	stw	fp,32(sp)
 200799c:	df000804 	addi	fp,sp,32
 20079a0:	e13ffd15 	stw	r4,-12(fp)
 20079a4:	e17ffe15 	stw	r5,-8(fp)
 20079a8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 20079ac:	00bfffc4 	movi	r2,-1
 20079b0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 20079b4:	00bffb44 	movi	r2,-19
 20079b8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 20079bc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 20079c0:	d1600504 	addi	r5,gp,-32748
 20079c4:	e13ffd17 	ldw	r4,-12(fp)
 20079c8:	20072fc0 	call	20072fc <alt_find_dev>
 20079cc:	e0bff815 	stw	r2,-32(fp)
 20079d0:	e0bff817 	ldw	r2,-32(fp)
 20079d4:	1000051e 	bne	r2,zero,20079ec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 20079d8:	e13ffd17 	ldw	r4,-12(fp)
 20079dc:	2007d380 	call	2007d38 <alt_find_file>
 20079e0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 20079e4:	00800044 	movi	r2,1
 20079e8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 20079ec:	e0bff817 	ldw	r2,-32(fp)
 20079f0:	10002b26 	beq	r2,zero,2007aa0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 20079f4:	e13ff817 	ldw	r4,-32(fp)
 20079f8:	2007e400 	call	2007e40 <alt_get_fd>
 20079fc:	e0bff915 	stw	r2,-28(fp)
 2007a00:	e0bff917 	ldw	r2,-28(fp)
 2007a04:	1000030e 	bge	r2,zero,2007a14 <open+0x84>
    {
      status = index;
 2007a08:	e0bff917 	ldw	r2,-28(fp)
 2007a0c:	e0bffa15 	stw	r2,-24(fp)
 2007a10:	00002506 	br	2007aa8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 2007a14:	01400304 	movi	r5,12
 2007a18:	e13ff917 	ldw	r4,-28(fp)
 2007a1c:	20013d80 	call	20013d8 <__mulsi3>
 2007a20:	1007883a 	mov	r3,r2
 2007a24:	00808074 	movhi	r2,513
 2007a28:	10a73b04 	addi	r2,r2,-25364
 2007a2c:	1885883a 	add	r2,r3,r2
 2007a30:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2007a34:	e0fffe17 	ldw	r3,-8(fp)
 2007a38:	00900034 	movhi	r2,16384
 2007a3c:	10bfffc4 	addi	r2,r2,-1
 2007a40:	1886703a 	and	r3,r3,r2
 2007a44:	e0bffc17 	ldw	r2,-16(fp)
 2007a48:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2007a4c:	e0bffb17 	ldw	r2,-20(fp)
 2007a50:	1000051e 	bne	r2,zero,2007a68 <open+0xd8>
 2007a54:	e13ffc17 	ldw	r4,-16(fp)
 2007a58:	20078a40 	call	20078a4 <alt_file_locked>
 2007a5c:	e0bffa15 	stw	r2,-24(fp)
 2007a60:	e0bffa17 	ldw	r2,-24(fp)
 2007a64:	10001016 	blt	r2,zero,2007aa8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2007a68:	e0bff817 	ldw	r2,-32(fp)
 2007a6c:	10800317 	ldw	r2,12(r2)
 2007a70:	10000826 	beq	r2,zero,2007a94 <open+0x104>
 2007a74:	e0bff817 	ldw	r2,-32(fp)
 2007a78:	10800317 	ldw	r2,12(r2)
 2007a7c:	e1ffff17 	ldw	r7,-4(fp)
 2007a80:	e1bffe17 	ldw	r6,-8(fp)
 2007a84:	e17ffd17 	ldw	r5,-12(fp)
 2007a88:	e13ffc17 	ldw	r4,-16(fp)
 2007a8c:	103ee83a 	callr	r2
 2007a90:	00000106 	br	2007a98 <open+0x108>
 2007a94:	0005883a 	mov	r2,zero
 2007a98:	e0bffa15 	stw	r2,-24(fp)
 2007a9c:	00000206 	br	2007aa8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2007aa0:	00bffb44 	movi	r2,-19
 2007aa4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2007aa8:	e0bffa17 	ldw	r2,-24(fp)
 2007aac:	1000090e 	bge	r2,zero,2007ad4 <open+0x144>
  {
    alt_release_fd (index);  
 2007ab0:	e13ff917 	ldw	r4,-28(fp)
 2007ab4:	2007aec0 	call	2007aec <alt_release_fd>
    ALT_ERRNO = -status;
 2007ab8:	20078680 	call	2007868 <alt_get_errno>
 2007abc:	1007883a 	mov	r3,r2
 2007ac0:	e0bffa17 	ldw	r2,-24(fp)
 2007ac4:	0085c83a 	sub	r2,zero,r2
 2007ac8:	18800015 	stw	r2,0(r3)
    return -1;
 2007acc:	00bfffc4 	movi	r2,-1
 2007ad0:	00000106 	br	2007ad8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 2007ad4:	e0bff917 	ldw	r2,-28(fp)
}
 2007ad8:	e037883a 	mov	sp,fp
 2007adc:	dfc00117 	ldw	ra,4(sp)
 2007ae0:	df000017 	ldw	fp,0(sp)
 2007ae4:	dec00204 	addi	sp,sp,8
 2007ae8:	f800283a 	ret

02007aec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2007aec:	defffc04 	addi	sp,sp,-16
 2007af0:	dfc00315 	stw	ra,12(sp)
 2007af4:	df000215 	stw	fp,8(sp)
 2007af8:	dc000115 	stw	r16,4(sp)
 2007afc:	df000204 	addi	fp,sp,8
 2007b00:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 2007b04:	e0bffe17 	ldw	r2,-8(fp)
 2007b08:	108000d0 	cmplti	r2,r2,3
 2007b0c:	1000111e 	bne	r2,zero,2007b54 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 2007b10:	04008074 	movhi	r16,513
 2007b14:	84273b04 	addi	r16,r16,-25364
 2007b18:	e0bffe17 	ldw	r2,-8(fp)
 2007b1c:	01400304 	movi	r5,12
 2007b20:	1009883a 	mov	r4,r2
 2007b24:	20013d80 	call	20013d8 <__mulsi3>
 2007b28:	8085883a 	add	r2,r16,r2
 2007b2c:	10800204 	addi	r2,r2,8
 2007b30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2007b34:	04008074 	movhi	r16,513
 2007b38:	84273b04 	addi	r16,r16,-25364
 2007b3c:	e0bffe17 	ldw	r2,-8(fp)
 2007b40:	01400304 	movi	r5,12
 2007b44:	1009883a 	mov	r4,r2
 2007b48:	20013d80 	call	20013d8 <__mulsi3>
 2007b4c:	8085883a 	add	r2,r16,r2
 2007b50:	10000015 	stw	zero,0(r2)
  }
}
 2007b54:	0001883a 	nop
 2007b58:	e6ffff04 	addi	sp,fp,-4
 2007b5c:	dfc00217 	ldw	ra,8(sp)
 2007b60:	df000117 	ldw	fp,4(sp)
 2007b64:	dc000017 	ldw	r16,0(sp)
 2007b68:	dec00304 	addi	sp,sp,12
 2007b6c:	f800283a 	ret

02007b70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2007b70:	defffa04 	addi	sp,sp,-24
 2007b74:	df000515 	stw	fp,20(sp)
 2007b78:	df000504 	addi	fp,sp,20
 2007b7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007b80:	0005303a 	rdctl	r2,status
 2007b84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007b88:	e0fffc17 	ldw	r3,-16(fp)
 2007b8c:	00bfff84 	movi	r2,-2
 2007b90:	1884703a 	and	r2,r3,r2
 2007b94:	1001703a 	wrctl	status,r2
  
  return context;
 2007b98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2007b9c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2007ba0:	e0bfff17 	ldw	r2,-4(fp)
 2007ba4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2007ba8:	e0bffd17 	ldw	r2,-12(fp)
 2007bac:	10800017 	ldw	r2,0(r2)
 2007bb0:	e0fffd17 	ldw	r3,-12(fp)
 2007bb4:	18c00117 	ldw	r3,4(r3)
 2007bb8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2007bbc:	e0bffd17 	ldw	r2,-12(fp)
 2007bc0:	10800117 	ldw	r2,4(r2)
 2007bc4:	e0fffd17 	ldw	r3,-12(fp)
 2007bc8:	18c00017 	ldw	r3,0(r3)
 2007bcc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2007bd0:	e0bffd17 	ldw	r2,-12(fp)
 2007bd4:	e0fffd17 	ldw	r3,-12(fp)
 2007bd8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2007bdc:	e0bffd17 	ldw	r2,-12(fp)
 2007be0:	e0fffd17 	ldw	r3,-12(fp)
 2007be4:	10c00015 	stw	r3,0(r2)
 2007be8:	e0bffb17 	ldw	r2,-20(fp)
 2007bec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007bf0:	e0bffe17 	ldw	r2,-8(fp)
 2007bf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2007bf8:	0001883a 	nop
 2007bfc:	e037883a 	mov	sp,fp
 2007c00:	df000017 	ldw	fp,0(sp)
 2007c04:	dec00104 	addi	sp,sp,4
 2007c08:	f800283a 	ret

02007c0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2007c0c:	defffb04 	addi	sp,sp,-20
 2007c10:	dfc00415 	stw	ra,16(sp)
 2007c14:	df000315 	stw	fp,12(sp)
 2007c18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2007c1c:	d0a00c17 	ldw	r2,-32720(gp)
 2007c20:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2007c24:	d0a61b17 	ldw	r2,-26516(gp)
 2007c28:	10800044 	addi	r2,r2,1
 2007c2c:	d0a61b15 	stw	r2,-26516(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2007c30:	00002e06 	br	2007cec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2007c34:	e0bffd17 	ldw	r2,-12(fp)
 2007c38:	10800017 	ldw	r2,0(r2)
 2007c3c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2007c40:	e0bffd17 	ldw	r2,-12(fp)
 2007c44:	10800403 	ldbu	r2,16(r2)
 2007c48:	10803fcc 	andi	r2,r2,255
 2007c4c:	10000426 	beq	r2,zero,2007c60 <alt_tick+0x54>
 2007c50:	d0a61b17 	ldw	r2,-26516(gp)
 2007c54:	1000021e 	bne	r2,zero,2007c60 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2007c58:	e0bffd17 	ldw	r2,-12(fp)
 2007c5c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2007c60:	e0bffd17 	ldw	r2,-12(fp)
 2007c64:	10800217 	ldw	r2,8(r2)
 2007c68:	d0e61b17 	ldw	r3,-26516(gp)
 2007c6c:	18801d36 	bltu	r3,r2,2007ce4 <alt_tick+0xd8>
 2007c70:	e0bffd17 	ldw	r2,-12(fp)
 2007c74:	10800403 	ldbu	r2,16(r2)
 2007c78:	10803fcc 	andi	r2,r2,255
 2007c7c:	1000191e 	bne	r2,zero,2007ce4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2007c80:	e0bffd17 	ldw	r2,-12(fp)
 2007c84:	10800317 	ldw	r2,12(r2)
 2007c88:	e0fffd17 	ldw	r3,-12(fp)
 2007c8c:	18c00517 	ldw	r3,20(r3)
 2007c90:	1809883a 	mov	r4,r3
 2007c94:	103ee83a 	callr	r2
 2007c98:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2007c9c:	e0bfff17 	ldw	r2,-4(fp)
 2007ca0:	1000031e 	bne	r2,zero,2007cb0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2007ca4:	e13ffd17 	ldw	r4,-12(fp)
 2007ca8:	2007b700 	call	2007b70 <alt_alarm_stop>
 2007cac:	00000d06 	br	2007ce4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2007cb0:	e0bffd17 	ldw	r2,-12(fp)
 2007cb4:	10c00217 	ldw	r3,8(r2)
 2007cb8:	e0bfff17 	ldw	r2,-4(fp)
 2007cbc:	1887883a 	add	r3,r3,r2
 2007cc0:	e0bffd17 	ldw	r2,-12(fp)
 2007cc4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2007cc8:	e0bffd17 	ldw	r2,-12(fp)
 2007ccc:	10c00217 	ldw	r3,8(r2)
 2007cd0:	d0a61b17 	ldw	r2,-26516(gp)
 2007cd4:	1880032e 	bgeu	r3,r2,2007ce4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2007cd8:	e0bffd17 	ldw	r2,-12(fp)
 2007cdc:	00c00044 	movi	r3,1
 2007ce0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2007ce4:	e0bffe17 	ldw	r2,-8(fp)
 2007ce8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2007cec:	e0fffd17 	ldw	r3,-12(fp)
 2007cf0:	d0a00c04 	addi	r2,gp,-32720
 2007cf4:	18bfcf1e 	bne	r3,r2,2007c34 <__alt_mem_flash+0xfdff6c34>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2007cf8:	0001883a 	nop
}
 2007cfc:	0001883a 	nop
 2007d00:	e037883a 	mov	sp,fp
 2007d04:	dfc00117 	ldw	ra,4(sp)
 2007d08:	df000017 	ldw	fp,0(sp)
 2007d0c:	dec00204 	addi	sp,sp,8
 2007d10:	f800283a 	ret

02007d14 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2007d14:	deffff04 	addi	sp,sp,-4
 2007d18:	df000015 	stw	fp,0(sp)
 2007d1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2007d20:	000170fa 	wrctl	ienable,zero
}
 2007d24:	0001883a 	nop
 2007d28:	e037883a 	mov	sp,fp
 2007d2c:	df000017 	ldw	fp,0(sp)
 2007d30:	dec00104 	addi	sp,sp,4
 2007d34:	f800283a 	ret

02007d38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2007d38:	defffb04 	addi	sp,sp,-20
 2007d3c:	dfc00415 	stw	ra,16(sp)
 2007d40:	df000315 	stw	fp,12(sp)
 2007d44:	df000304 	addi	fp,sp,12
 2007d48:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2007d4c:	d0a00317 	ldw	r2,-32756(gp)
 2007d50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2007d54:	00003106 	br	2007e1c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2007d58:	e0bffd17 	ldw	r2,-12(fp)
 2007d5c:	10800217 	ldw	r2,8(r2)
 2007d60:	1009883a 	mov	r4,r2
 2007d64:	20081b00 	call	20081b0 <strlen>
 2007d68:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2007d6c:	e0bffd17 	ldw	r2,-12(fp)
 2007d70:	10c00217 	ldw	r3,8(r2)
 2007d74:	e0bffe17 	ldw	r2,-8(fp)
 2007d78:	10bfffc4 	addi	r2,r2,-1
 2007d7c:	1885883a 	add	r2,r3,r2
 2007d80:	10800003 	ldbu	r2,0(r2)
 2007d84:	10803fcc 	andi	r2,r2,255
 2007d88:	1080201c 	xori	r2,r2,128
 2007d8c:	10bfe004 	addi	r2,r2,-128
 2007d90:	10800bd8 	cmpnei	r2,r2,47
 2007d94:	1000031e 	bne	r2,zero,2007da4 <alt_find_file+0x6c>
    {
      len -= 1;
 2007d98:	e0bffe17 	ldw	r2,-8(fp)
 2007d9c:	10bfffc4 	addi	r2,r2,-1
 2007da0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2007da4:	e0bffe17 	ldw	r2,-8(fp)
 2007da8:	e0ffff17 	ldw	r3,-4(fp)
 2007dac:	1885883a 	add	r2,r3,r2
 2007db0:	10800003 	ldbu	r2,0(r2)
 2007db4:	10803fcc 	andi	r2,r2,255
 2007db8:	1080201c 	xori	r2,r2,128
 2007dbc:	10bfe004 	addi	r2,r2,-128
 2007dc0:	10800be0 	cmpeqi	r2,r2,47
 2007dc4:	1000081e 	bne	r2,zero,2007de8 <alt_find_file+0xb0>
 2007dc8:	e0bffe17 	ldw	r2,-8(fp)
 2007dcc:	e0ffff17 	ldw	r3,-4(fp)
 2007dd0:	1885883a 	add	r2,r3,r2
 2007dd4:	10800003 	ldbu	r2,0(r2)
 2007dd8:	10803fcc 	andi	r2,r2,255
 2007ddc:	1080201c 	xori	r2,r2,128
 2007de0:	10bfe004 	addi	r2,r2,-128
 2007de4:	10000a1e 	bne	r2,zero,2007e10 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2007de8:	e0bffd17 	ldw	r2,-12(fp)
 2007dec:	10800217 	ldw	r2,8(r2)
 2007df0:	e0fffe17 	ldw	r3,-8(fp)
 2007df4:	180d883a 	mov	r6,r3
 2007df8:	e17fff17 	ldw	r5,-4(fp)
 2007dfc:	1009883a 	mov	r4,r2
 2007e00:	2007fec0 	call	2007fec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2007e04:	1000021e 	bne	r2,zero,2007e10 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2007e08:	e0bffd17 	ldw	r2,-12(fp)
 2007e0c:	00000706 	br	2007e2c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2007e10:	e0bffd17 	ldw	r2,-12(fp)
 2007e14:	10800017 	ldw	r2,0(r2)
 2007e18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2007e1c:	e0fffd17 	ldw	r3,-12(fp)
 2007e20:	d0a00304 	addi	r2,gp,-32756
 2007e24:	18bfcc1e 	bne	r3,r2,2007d58 <__alt_mem_flash+0xfdff6d58>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2007e28:	0005883a 	mov	r2,zero
}
 2007e2c:	e037883a 	mov	sp,fp
 2007e30:	dfc00117 	ldw	ra,4(sp)
 2007e34:	df000017 	ldw	fp,0(sp)
 2007e38:	dec00204 	addi	sp,sp,8
 2007e3c:	f800283a 	ret

02007e40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2007e40:	defffa04 	addi	sp,sp,-24
 2007e44:	dfc00515 	stw	ra,20(sp)
 2007e48:	df000415 	stw	fp,16(sp)
 2007e4c:	dc000315 	stw	r16,12(sp)
 2007e50:	df000404 	addi	fp,sp,16
 2007e54:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 2007e58:	00bffa04 	movi	r2,-24
 2007e5c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2007e60:	e03ffc15 	stw	zero,-16(fp)
 2007e64:	00001d06 	br	2007edc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 2007e68:	04008074 	movhi	r16,513
 2007e6c:	84273b04 	addi	r16,r16,-25364
 2007e70:	e0bffc17 	ldw	r2,-16(fp)
 2007e74:	01400304 	movi	r5,12
 2007e78:	1009883a 	mov	r4,r2
 2007e7c:	20013d80 	call	20013d8 <__mulsi3>
 2007e80:	8085883a 	add	r2,r16,r2
 2007e84:	10800017 	ldw	r2,0(r2)
 2007e88:	1000111e 	bne	r2,zero,2007ed0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 2007e8c:	04008074 	movhi	r16,513
 2007e90:	84273b04 	addi	r16,r16,-25364
 2007e94:	e0bffc17 	ldw	r2,-16(fp)
 2007e98:	01400304 	movi	r5,12
 2007e9c:	1009883a 	mov	r4,r2
 2007ea0:	20013d80 	call	20013d8 <__mulsi3>
 2007ea4:	8085883a 	add	r2,r16,r2
 2007ea8:	e0fffe17 	ldw	r3,-8(fp)
 2007eac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2007eb0:	d0e00717 	ldw	r3,-32740(gp)
 2007eb4:	e0bffc17 	ldw	r2,-16(fp)
 2007eb8:	1880020e 	bge	r3,r2,2007ec4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 2007ebc:	e0bffc17 	ldw	r2,-16(fp)
 2007ec0:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
 2007ec4:	e0bffc17 	ldw	r2,-16(fp)
 2007ec8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2007ecc:	00000606 	br	2007ee8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2007ed0:	e0bffc17 	ldw	r2,-16(fp)
 2007ed4:	10800044 	addi	r2,r2,1
 2007ed8:	e0bffc15 	stw	r2,-16(fp)
 2007edc:	e0bffc17 	ldw	r2,-16(fp)
 2007ee0:	10800810 	cmplti	r2,r2,32
 2007ee4:	103fe01e 	bne	r2,zero,2007e68 <__alt_mem_flash+0xfdff6e68>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2007ee8:	e0bffd17 	ldw	r2,-12(fp)
}
 2007eec:	e6ffff04 	addi	sp,fp,-4
 2007ef0:	dfc00217 	ldw	ra,8(sp)
 2007ef4:	df000117 	ldw	fp,4(sp)
 2007ef8:	dc000017 	ldw	r16,0(sp)
 2007efc:	dec00304 	addi	sp,sp,12
 2007f00:	f800283a 	ret

02007f04 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2007f04:	defffe04 	addi	sp,sp,-8
 2007f08:	df000115 	stw	fp,4(sp)
 2007f0c:	df000104 	addi	fp,sp,4
 2007f10:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2007f14:	e0bfff17 	ldw	r2,-4(fp)
 2007f18:	10bffe84 	addi	r2,r2,-6
 2007f1c:	10c00428 	cmpgeui	r3,r2,16
 2007f20:	18001a1e 	bne	r3,zero,2007f8c <alt_exception_cause_generated_bad_addr+0x88>
 2007f24:	100690ba 	slli	r3,r2,2
 2007f28:	00808034 	movhi	r2,512
 2007f2c:	109fcf04 	addi	r2,r2,32572
 2007f30:	1885883a 	add	r2,r3,r2
 2007f34:	10800017 	ldw	r2,0(r2)
 2007f38:	1000683a 	jmp	r2
 2007f3c:	02007f7c 	xorhi	r8,zero,509
 2007f40:	02007f7c 	xorhi	r8,zero,509
 2007f44:	02007f8c 	andi	r8,zero,510
 2007f48:	02007f8c 	andi	r8,zero,510
 2007f4c:	02007f8c 	andi	r8,zero,510
 2007f50:	02007f7c 	xorhi	r8,zero,509
 2007f54:	02007f84 	movi	r8,510
 2007f58:	02007f8c 	andi	r8,zero,510
 2007f5c:	02007f7c 	xorhi	r8,zero,509
 2007f60:	02007f7c 	xorhi	r8,zero,509
 2007f64:	02007f8c 	andi	r8,zero,510
 2007f68:	02007f7c 	xorhi	r8,zero,509
 2007f6c:	02007f84 	movi	r8,510
 2007f70:	02007f8c 	andi	r8,zero,510
 2007f74:	02007f8c 	andi	r8,zero,510
 2007f78:	02007f7c 	xorhi	r8,zero,509
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2007f7c:	00800044 	movi	r2,1
 2007f80:	00000306 	br	2007f90 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2007f84:	0005883a 	mov	r2,zero
 2007f88:	00000106 	br	2007f90 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2007f8c:	0005883a 	mov	r2,zero
  }
}
 2007f90:	e037883a 	mov	sp,fp
 2007f94:	df000017 	ldw	fp,0(sp)
 2007f98:	dec00104 	addi	sp,sp,4
 2007f9c:	f800283a 	ret

02007fa0 <atexit>:
 2007fa0:	200b883a 	mov	r5,r4
 2007fa4:	000f883a 	mov	r7,zero
 2007fa8:	000d883a 	mov	r6,zero
 2007fac:	0009883a 	mov	r4,zero
 2007fb0:	20082481 	jmpi	2008248 <__register_exitproc>

02007fb4 <exit>:
 2007fb4:	defffe04 	addi	sp,sp,-8
 2007fb8:	000b883a 	mov	r5,zero
 2007fbc:	dc000015 	stw	r16,0(sp)
 2007fc0:	dfc00115 	stw	ra,4(sp)
 2007fc4:	2021883a 	mov	r16,r4
 2007fc8:	20083600 	call	2008360 <__call_exitprocs>
 2007fcc:	00808074 	movhi	r2,513
 2007fd0:	10a79c04 	addi	r2,r2,-24976
 2007fd4:	11000017 	ldw	r4,0(r2)
 2007fd8:	20800f17 	ldw	r2,60(r4)
 2007fdc:	10000126 	beq	r2,zero,2007fe4 <exit+0x30>
 2007fe0:	103ee83a 	callr	r2
 2007fe4:	8009883a 	mov	r4,r16
 2007fe8:	20084e00 	call	20084e0 <_exit>

02007fec <memcmp>:
 2007fec:	01c000c4 	movi	r7,3
 2007ff0:	3980192e 	bgeu	r7,r6,2008058 <memcmp+0x6c>
 2007ff4:	2144b03a 	or	r2,r4,r5
 2007ff8:	11c4703a 	and	r2,r2,r7
 2007ffc:	10000f26 	beq	r2,zero,200803c <memcmp+0x50>
 2008000:	20800003 	ldbu	r2,0(r4)
 2008004:	28c00003 	ldbu	r3,0(r5)
 2008008:	10c0151e 	bne	r2,r3,2008060 <memcmp+0x74>
 200800c:	31bfff84 	addi	r6,r6,-2
 2008010:	01ffffc4 	movi	r7,-1
 2008014:	00000406 	br	2008028 <memcmp+0x3c>
 2008018:	20800003 	ldbu	r2,0(r4)
 200801c:	28c00003 	ldbu	r3,0(r5)
 2008020:	31bfffc4 	addi	r6,r6,-1
 2008024:	10c00e1e 	bne	r2,r3,2008060 <memcmp+0x74>
 2008028:	21000044 	addi	r4,r4,1
 200802c:	29400044 	addi	r5,r5,1
 2008030:	31fff91e 	bne	r6,r7,2008018 <__alt_mem_flash+0xfdff7018>
 2008034:	0005883a 	mov	r2,zero
 2008038:	f800283a 	ret
 200803c:	20c00017 	ldw	r3,0(r4)
 2008040:	28800017 	ldw	r2,0(r5)
 2008044:	18bfee1e 	bne	r3,r2,2008000 <__alt_mem_flash+0xfdff7000>
 2008048:	31bfff04 	addi	r6,r6,-4
 200804c:	21000104 	addi	r4,r4,4
 2008050:	29400104 	addi	r5,r5,4
 2008054:	39bff936 	bltu	r7,r6,200803c <__alt_mem_flash+0xfdff703c>
 2008058:	303fe91e 	bne	r6,zero,2008000 <__alt_mem_flash+0xfdff7000>
 200805c:	003ff506 	br	2008034 <__alt_mem_flash+0xfdff7034>
 2008060:	10c5c83a 	sub	r2,r2,r3
 2008064:	f800283a 	ret

02008068 <memcpy>:
 2008068:	defffd04 	addi	sp,sp,-12
 200806c:	dfc00215 	stw	ra,8(sp)
 2008070:	dc400115 	stw	r17,4(sp)
 2008074:	dc000015 	stw	r16,0(sp)
 2008078:	00c003c4 	movi	r3,15
 200807c:	2005883a 	mov	r2,r4
 2008080:	1980452e 	bgeu	r3,r6,2008198 <memcpy+0x130>
 2008084:	2906b03a 	or	r3,r5,r4
 2008088:	18c000cc 	andi	r3,r3,3
 200808c:	1800441e 	bne	r3,zero,20081a0 <memcpy+0x138>
 2008090:	347ffc04 	addi	r17,r6,-16
 2008094:	8822d13a 	srli	r17,r17,4
 2008098:	28c00104 	addi	r3,r5,4
 200809c:	23400104 	addi	r13,r4,4
 20080a0:	8820913a 	slli	r16,r17,4
 20080a4:	2b000204 	addi	r12,r5,8
 20080a8:	22c00204 	addi	r11,r4,8
 20080ac:	84000504 	addi	r16,r16,20
 20080b0:	2a800304 	addi	r10,r5,12
 20080b4:	22400304 	addi	r9,r4,12
 20080b8:	2c21883a 	add	r16,r5,r16
 20080bc:	2811883a 	mov	r8,r5
 20080c0:	200f883a 	mov	r7,r4
 20080c4:	41000017 	ldw	r4,0(r8)
 20080c8:	1fc00017 	ldw	ra,0(r3)
 20080cc:	63c00017 	ldw	r15,0(r12)
 20080d0:	39000015 	stw	r4,0(r7)
 20080d4:	53800017 	ldw	r14,0(r10)
 20080d8:	6fc00015 	stw	ra,0(r13)
 20080dc:	5bc00015 	stw	r15,0(r11)
 20080e0:	4b800015 	stw	r14,0(r9)
 20080e4:	18c00404 	addi	r3,r3,16
 20080e8:	39c00404 	addi	r7,r7,16
 20080ec:	42000404 	addi	r8,r8,16
 20080f0:	6b400404 	addi	r13,r13,16
 20080f4:	63000404 	addi	r12,r12,16
 20080f8:	5ac00404 	addi	r11,r11,16
 20080fc:	52800404 	addi	r10,r10,16
 2008100:	4a400404 	addi	r9,r9,16
 2008104:	1c3fef1e 	bne	r3,r16,20080c4 <__alt_mem_flash+0xfdff70c4>
 2008108:	89c00044 	addi	r7,r17,1
 200810c:	380e913a 	slli	r7,r7,4
 2008110:	310003cc 	andi	r4,r6,15
 2008114:	02c000c4 	movi	r11,3
 2008118:	11c7883a 	add	r3,r2,r7
 200811c:	29cb883a 	add	r5,r5,r7
 2008120:	5900212e 	bgeu	r11,r4,20081a8 <memcpy+0x140>
 2008124:	1813883a 	mov	r9,r3
 2008128:	2811883a 	mov	r8,r5
 200812c:	200f883a 	mov	r7,r4
 2008130:	42800017 	ldw	r10,0(r8)
 2008134:	4a400104 	addi	r9,r9,4
 2008138:	39ffff04 	addi	r7,r7,-4
 200813c:	4abfff15 	stw	r10,-4(r9)
 2008140:	42000104 	addi	r8,r8,4
 2008144:	59fffa36 	bltu	r11,r7,2008130 <__alt_mem_flash+0xfdff7130>
 2008148:	213fff04 	addi	r4,r4,-4
 200814c:	2008d0ba 	srli	r4,r4,2
 2008150:	318000cc 	andi	r6,r6,3
 2008154:	21000044 	addi	r4,r4,1
 2008158:	2109883a 	add	r4,r4,r4
 200815c:	2109883a 	add	r4,r4,r4
 2008160:	1907883a 	add	r3,r3,r4
 2008164:	290b883a 	add	r5,r5,r4
 2008168:	30000626 	beq	r6,zero,2008184 <memcpy+0x11c>
 200816c:	198d883a 	add	r6,r3,r6
 2008170:	29c00003 	ldbu	r7,0(r5)
 2008174:	18c00044 	addi	r3,r3,1
 2008178:	29400044 	addi	r5,r5,1
 200817c:	19ffffc5 	stb	r7,-1(r3)
 2008180:	19bffb1e 	bne	r3,r6,2008170 <__alt_mem_flash+0xfdff7170>
 2008184:	dfc00217 	ldw	ra,8(sp)
 2008188:	dc400117 	ldw	r17,4(sp)
 200818c:	dc000017 	ldw	r16,0(sp)
 2008190:	dec00304 	addi	sp,sp,12
 2008194:	f800283a 	ret
 2008198:	2007883a 	mov	r3,r4
 200819c:	003ff206 	br	2008168 <__alt_mem_flash+0xfdff7168>
 20081a0:	2007883a 	mov	r3,r4
 20081a4:	003ff106 	br	200816c <__alt_mem_flash+0xfdff716c>
 20081a8:	200d883a 	mov	r6,r4
 20081ac:	003fee06 	br	2008168 <__alt_mem_flash+0xfdff7168>

020081b0 <strlen>:
 20081b0:	208000cc 	andi	r2,r4,3
 20081b4:	10002026 	beq	r2,zero,2008238 <strlen+0x88>
 20081b8:	20800007 	ldb	r2,0(r4)
 20081bc:	10002026 	beq	r2,zero,2008240 <strlen+0x90>
 20081c0:	2005883a 	mov	r2,r4
 20081c4:	00000206 	br	20081d0 <strlen+0x20>
 20081c8:	10c00007 	ldb	r3,0(r2)
 20081cc:	18001826 	beq	r3,zero,2008230 <strlen+0x80>
 20081d0:	10800044 	addi	r2,r2,1
 20081d4:	10c000cc 	andi	r3,r2,3
 20081d8:	183ffb1e 	bne	r3,zero,20081c8 <__alt_mem_flash+0xfdff71c8>
 20081dc:	10c00017 	ldw	r3,0(r2)
 20081e0:	01ffbff4 	movhi	r7,65279
 20081e4:	39ffbfc4 	addi	r7,r7,-257
 20081e8:	00ca303a 	nor	r5,zero,r3
 20081ec:	01a02074 	movhi	r6,32897
 20081f0:	19c7883a 	add	r3,r3,r7
 20081f4:	31a02004 	addi	r6,r6,-32640
 20081f8:	1946703a 	and	r3,r3,r5
 20081fc:	1986703a 	and	r3,r3,r6
 2008200:	1800091e 	bne	r3,zero,2008228 <strlen+0x78>
 2008204:	10800104 	addi	r2,r2,4
 2008208:	10c00017 	ldw	r3,0(r2)
 200820c:	19cb883a 	add	r5,r3,r7
 2008210:	00c6303a 	nor	r3,zero,r3
 2008214:	28c6703a 	and	r3,r5,r3
 2008218:	1986703a 	and	r3,r3,r6
 200821c:	183ff926 	beq	r3,zero,2008204 <__alt_mem_flash+0xfdff7204>
 2008220:	00000106 	br	2008228 <strlen+0x78>
 2008224:	10800044 	addi	r2,r2,1
 2008228:	10c00007 	ldb	r3,0(r2)
 200822c:	183ffd1e 	bne	r3,zero,2008224 <__alt_mem_flash+0xfdff7224>
 2008230:	1105c83a 	sub	r2,r2,r4
 2008234:	f800283a 	ret
 2008238:	2005883a 	mov	r2,r4
 200823c:	003fe706 	br	20081dc <__alt_mem_flash+0xfdff71dc>
 2008240:	0005883a 	mov	r2,zero
 2008244:	f800283a 	ret

02008248 <__register_exitproc>:
 2008248:	defffa04 	addi	sp,sp,-24
 200824c:	dc000315 	stw	r16,12(sp)
 2008250:	04008074 	movhi	r16,513
 2008254:	84279c04 	addi	r16,r16,-24976
 2008258:	80c00017 	ldw	r3,0(r16)
 200825c:	dc400415 	stw	r17,16(sp)
 2008260:	dfc00515 	stw	ra,20(sp)
 2008264:	18805217 	ldw	r2,328(r3)
 2008268:	2023883a 	mov	r17,r4
 200826c:	10003726 	beq	r2,zero,200834c <__register_exitproc+0x104>
 2008270:	10c00117 	ldw	r3,4(r2)
 2008274:	010007c4 	movi	r4,31
 2008278:	20c00e16 	blt	r4,r3,20082b4 <__register_exitproc+0x6c>
 200827c:	1a000044 	addi	r8,r3,1
 2008280:	8800221e 	bne	r17,zero,200830c <__register_exitproc+0xc4>
 2008284:	18c00084 	addi	r3,r3,2
 2008288:	18c7883a 	add	r3,r3,r3
 200828c:	18c7883a 	add	r3,r3,r3
 2008290:	12000115 	stw	r8,4(r2)
 2008294:	10c7883a 	add	r3,r2,r3
 2008298:	19400015 	stw	r5,0(r3)
 200829c:	0005883a 	mov	r2,zero
 20082a0:	dfc00517 	ldw	ra,20(sp)
 20082a4:	dc400417 	ldw	r17,16(sp)
 20082a8:	dc000317 	ldw	r16,12(sp)
 20082ac:	dec00604 	addi	sp,sp,24
 20082b0:	f800283a 	ret
 20082b4:	00800034 	movhi	r2,0
 20082b8:	10800004 	addi	r2,r2,0
 20082bc:	10002626 	beq	r2,zero,2008358 <__register_exitproc+0x110>
 20082c0:	01006404 	movi	r4,400
 20082c4:	d9400015 	stw	r5,0(sp)
 20082c8:	d9800115 	stw	r6,4(sp)
 20082cc:	d9c00215 	stw	r7,8(sp)
 20082d0:	00000000 	call	0 <__alt_mem_onchip_2-0x8000>
 20082d4:	d9400017 	ldw	r5,0(sp)
 20082d8:	d9800117 	ldw	r6,4(sp)
 20082dc:	d9c00217 	ldw	r7,8(sp)
 20082e0:	10001d26 	beq	r2,zero,2008358 <__register_exitproc+0x110>
 20082e4:	81000017 	ldw	r4,0(r16)
 20082e8:	10000115 	stw	zero,4(r2)
 20082ec:	02000044 	movi	r8,1
 20082f0:	22405217 	ldw	r9,328(r4)
 20082f4:	0007883a 	mov	r3,zero
 20082f8:	12400015 	stw	r9,0(r2)
 20082fc:	20805215 	stw	r2,328(r4)
 2008300:	10006215 	stw	zero,392(r2)
 2008304:	10006315 	stw	zero,396(r2)
 2008308:	883fde26 	beq	r17,zero,2008284 <__alt_mem_flash+0xfdff7284>
 200830c:	18c9883a 	add	r4,r3,r3
 2008310:	2109883a 	add	r4,r4,r4
 2008314:	1109883a 	add	r4,r2,r4
 2008318:	21802215 	stw	r6,136(r4)
 200831c:	01800044 	movi	r6,1
 2008320:	12406217 	ldw	r9,392(r2)
 2008324:	30cc983a 	sll	r6,r6,r3
 2008328:	4992b03a 	or	r9,r9,r6
 200832c:	12406215 	stw	r9,392(r2)
 2008330:	21c04215 	stw	r7,264(r4)
 2008334:	01000084 	movi	r4,2
 2008338:	893fd21e 	bne	r17,r4,2008284 <__alt_mem_flash+0xfdff7284>
 200833c:	11006317 	ldw	r4,396(r2)
 2008340:	218cb03a 	or	r6,r4,r6
 2008344:	11806315 	stw	r6,396(r2)
 2008348:	003fce06 	br	2008284 <__alt_mem_flash+0xfdff7284>
 200834c:	18805304 	addi	r2,r3,332
 2008350:	18805215 	stw	r2,328(r3)
 2008354:	003fc606 	br	2008270 <__alt_mem_flash+0xfdff7270>
 2008358:	00bfffc4 	movi	r2,-1
 200835c:	003fd006 	br	20082a0 <__alt_mem_flash+0xfdff72a0>

02008360 <__call_exitprocs>:
 2008360:	defff504 	addi	sp,sp,-44
 2008364:	df000915 	stw	fp,36(sp)
 2008368:	dd400615 	stw	r21,24(sp)
 200836c:	dc800315 	stw	r18,12(sp)
 2008370:	dfc00a15 	stw	ra,40(sp)
 2008374:	ddc00815 	stw	r23,32(sp)
 2008378:	dd800715 	stw	r22,28(sp)
 200837c:	dd000515 	stw	r20,20(sp)
 2008380:	dcc00415 	stw	r19,16(sp)
 2008384:	dc400215 	stw	r17,8(sp)
 2008388:	dc000115 	stw	r16,4(sp)
 200838c:	d9000015 	stw	r4,0(sp)
 2008390:	2839883a 	mov	fp,r5
 2008394:	04800044 	movi	r18,1
 2008398:	057fffc4 	movi	r21,-1
 200839c:	00808074 	movhi	r2,513
 20083a0:	10a79c04 	addi	r2,r2,-24976
 20083a4:	12000017 	ldw	r8,0(r2)
 20083a8:	45005217 	ldw	r20,328(r8)
 20083ac:	44c05204 	addi	r19,r8,328
 20083b0:	a0001c26 	beq	r20,zero,2008424 <__call_exitprocs+0xc4>
 20083b4:	a0800117 	ldw	r2,4(r20)
 20083b8:	15ffffc4 	addi	r23,r2,-1
 20083bc:	b8000d16 	blt	r23,zero,20083f4 <__call_exitprocs+0x94>
 20083c0:	14000044 	addi	r16,r2,1
 20083c4:	8421883a 	add	r16,r16,r16
 20083c8:	8421883a 	add	r16,r16,r16
 20083cc:	84402004 	addi	r17,r16,128
 20083d0:	a463883a 	add	r17,r20,r17
 20083d4:	a421883a 	add	r16,r20,r16
 20083d8:	e0001e26 	beq	fp,zero,2008454 <__call_exitprocs+0xf4>
 20083dc:	80804017 	ldw	r2,256(r16)
 20083e0:	e0801c26 	beq	fp,r2,2008454 <__call_exitprocs+0xf4>
 20083e4:	bdffffc4 	addi	r23,r23,-1
 20083e8:	843fff04 	addi	r16,r16,-4
 20083ec:	8c7fff04 	addi	r17,r17,-4
 20083f0:	bd7ff91e 	bne	r23,r21,20083d8 <__alt_mem_flash+0xfdff73d8>
 20083f4:	00800034 	movhi	r2,0
 20083f8:	10800004 	addi	r2,r2,0
 20083fc:	10000926 	beq	r2,zero,2008424 <__call_exitprocs+0xc4>
 2008400:	a0800117 	ldw	r2,4(r20)
 2008404:	1000301e 	bne	r2,zero,20084c8 <__call_exitprocs+0x168>
 2008408:	a0800017 	ldw	r2,0(r20)
 200840c:	10003226 	beq	r2,zero,20084d8 <__call_exitprocs+0x178>
 2008410:	a009883a 	mov	r4,r20
 2008414:	98800015 	stw	r2,0(r19)
 2008418:	00000000 	call	0 <__alt_mem_onchip_2-0x8000>
 200841c:	9d000017 	ldw	r20,0(r19)
 2008420:	a03fe41e 	bne	r20,zero,20083b4 <__alt_mem_flash+0xfdff73b4>
 2008424:	dfc00a17 	ldw	ra,40(sp)
 2008428:	df000917 	ldw	fp,36(sp)
 200842c:	ddc00817 	ldw	r23,32(sp)
 2008430:	dd800717 	ldw	r22,28(sp)
 2008434:	dd400617 	ldw	r21,24(sp)
 2008438:	dd000517 	ldw	r20,20(sp)
 200843c:	dcc00417 	ldw	r19,16(sp)
 2008440:	dc800317 	ldw	r18,12(sp)
 2008444:	dc400217 	ldw	r17,8(sp)
 2008448:	dc000117 	ldw	r16,4(sp)
 200844c:	dec00b04 	addi	sp,sp,44
 2008450:	f800283a 	ret
 2008454:	a0800117 	ldw	r2,4(r20)
 2008458:	80c00017 	ldw	r3,0(r16)
 200845c:	10bfffc4 	addi	r2,r2,-1
 2008460:	15c01426 	beq	r2,r23,20084b4 <__call_exitprocs+0x154>
 2008464:	80000015 	stw	zero,0(r16)
 2008468:	183fde26 	beq	r3,zero,20083e4 <__alt_mem_flash+0xfdff73e4>
 200846c:	95c8983a 	sll	r4,r18,r23
 2008470:	a0806217 	ldw	r2,392(r20)
 2008474:	a5800117 	ldw	r22,4(r20)
 2008478:	2084703a 	and	r2,r4,r2
 200847c:	10000b26 	beq	r2,zero,20084ac <__call_exitprocs+0x14c>
 2008480:	a0806317 	ldw	r2,396(r20)
 2008484:	2088703a 	and	r4,r4,r2
 2008488:	20000c1e 	bne	r4,zero,20084bc <__call_exitprocs+0x15c>
 200848c:	89400017 	ldw	r5,0(r17)
 2008490:	d9000017 	ldw	r4,0(sp)
 2008494:	183ee83a 	callr	r3
 2008498:	a0800117 	ldw	r2,4(r20)
 200849c:	15bfbf1e 	bne	r2,r22,200839c <__alt_mem_flash+0xfdff739c>
 20084a0:	98800017 	ldw	r2,0(r19)
 20084a4:	153fcf26 	beq	r2,r20,20083e4 <__alt_mem_flash+0xfdff73e4>
 20084a8:	003fbc06 	br	200839c <__alt_mem_flash+0xfdff739c>
 20084ac:	183ee83a 	callr	r3
 20084b0:	003ff906 	br	2008498 <__alt_mem_flash+0xfdff7498>
 20084b4:	a5c00115 	stw	r23,4(r20)
 20084b8:	003feb06 	br	2008468 <__alt_mem_flash+0xfdff7468>
 20084bc:	89000017 	ldw	r4,0(r17)
 20084c0:	183ee83a 	callr	r3
 20084c4:	003ff406 	br	2008498 <__alt_mem_flash+0xfdff7498>
 20084c8:	a0800017 	ldw	r2,0(r20)
 20084cc:	a027883a 	mov	r19,r20
 20084d0:	1029883a 	mov	r20,r2
 20084d4:	003fb606 	br	20083b0 <__alt_mem_flash+0xfdff73b0>
 20084d8:	0005883a 	mov	r2,zero
 20084dc:	003ffb06 	br	20084cc <__alt_mem_flash+0xfdff74cc>

020084e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20084e0:	defffd04 	addi	sp,sp,-12
 20084e4:	df000215 	stw	fp,8(sp)
 20084e8:	df000204 	addi	fp,sp,8
 20084ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20084f0:	0001883a 	nop
 20084f4:	e0bfff17 	ldw	r2,-4(fp)
 20084f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 20084fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2008500:	10000226 	beq	r2,zero,200850c <_exit+0x2c>
    ALT_SIM_FAIL();
 2008504:	002af070 	cmpltui	zero,zero,43969
 2008508:	00000106 	br	2008510 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 200850c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2008510:	003fff06 	br	2008510 <__alt_mem_flash+0xfdff7510>
