
nios_1.elf:     file format elf32-littlenios2
nios_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0a000210

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002000 vaddr 0x0a000000 paddr 0x0a000000 align 2**12
         filesz 0x00011e14 memsz 0x00011e14 flags r-x
    LOAD off    0x00013e14 vaddr 0x0a011e14 paddr 0x0a013ac4 align 2**12
         filesz 0x00001cb0 memsz 0x00001cb0 flags rw-
    LOAD off    0x00016774 vaddr 0x0a015774 paddr 0x0a015774 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-
    LOAD off    0x000163b0 vaddr 0x0bff63b0 paddr 0x0bff63b0 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000163b8 vaddr 0x0bff63b8 paddr 0x0bff63b8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0a000000  0a000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 RadMemory     00000000  0bff63c0  0bff63c0  000163bc  2**0
                  CONTENTS
  3 TempMemory    00000004  0bff63b8  0bff63b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 PressureMemory 00000004  0bff63b0  0bff63b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .text         000118ac  0a000210  0a000210  00002210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000358  0a011abc  0a011abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rwdata       00001cb0  0a011e14  0a013ac4  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  8 .bss          00000160  0a015774  0a015774  00016774  2**2
                  ALLOC, SMALL_DATA
  9 .onchip       00000000  04000020  04000020  000163bc  2**0
                  CONTENTS
 10 .sdram        00000000  0a0158d4  0a0158d4  000163bc  2**0
                  CONTENTS
 11 .flash        00000000  0c001000  0c001000  000163bc  2**0
                  CONTENTS
 12 .comment      00000023  00000000  00000000  000163bc  2**0
                  CONTENTS, READONLY
 13 .debug_aranges 00001010  00000000  00000000  000163e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   00025bb6  00000000  00000000  000173f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00009c07  00000000  00000000  0003cfa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c102  00000000  00000000  00046bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00002704  00000000  00000000  00052cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000415f  00000000  00000000  000553b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00017e0b  00000000  00000000  00059513  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_alt_sim_info 00000040  00000000  00000000  00071320  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00001968  00000000  00000000  00071360  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .thread_model 00000003  00000000  00000000  000766c6  2**0
                  CONTENTS, READONLY
 23 .cpu          00000006  00000000  00000000  000766c9  2**0
                  CONTENTS, READONLY
 24 .qsys         00000001  00000000  00000000  000766cf  2**0
                  CONTENTS, READONLY
 25 .simulation_enabled 00000001  00000000  00000000  000766d0  2**0
                  CONTENTS, READONLY
 26 .sysid_hash   00000004  00000000  00000000  000766d1  2**0
                  CONTENTS, READONLY
 27 .sysid_base   00000004  00000000  00000000  000766d5  2**0
                  CONTENTS, READONLY
 28 .sysid_time   00000004  00000000  00000000  000766d9  2**0
                  CONTENTS, READONLY
 29 .stderr_dev   00000004  00000000  00000000  000766dd  2**0
                  CONTENTS, READONLY
 30 .stdin_dev    0000000b  00000000  00000000  000766e1  2**0
                  CONTENTS, READONLY
 31 .stdout_dev   0000000b  00000000  00000000  000766ec  2**0
                  CONTENTS, READONLY
 32 .sopc_system_name 00000005  00000000  00000000  000766f7  2**0
                  CONTENTS, READONLY
 33 .quartus_project_dir 0000002d  00000000  00000000  000766fc  2**0
                  CONTENTS, READONLY
 34 .jdi          00007c1c  00000000  00000000  00076729  2**0
                  CONTENTS, READONLY
 35 .sopcinfo     0008a1be  00000000  00000000  0007e345  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
0a000000 l    d  .exceptions	00000000 .exceptions
0bff63c0 l    d  RadMemory	00000000 RadMemory
0bff63b8 l    d  TempMemory	00000000 TempMemory
0bff63b0 l    d  PressureMemory	00000000 PressureMemory
0a000210 l    d  .text	00000000 .text
0a011abc l    d  .rodata	00000000 .rodata
0a011e14 l    d  .rwdata	00000000 .rwdata
0a015774 l    d  .bss	00000000 .bss
04000020 l    d  .onchip	00000000 .onchip
0a0158d4 l    d  .sdram	00000000 .sdram
0c001000 l    d  .flash	00000000 .flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_1_bsp//obj/HAL/src/crt0.o
0a000248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0a011e14 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
0a011c2e l     O .rodata	00000010 zeroes.4404
0a003d10 l     F .text	000000bc __sbprintf
0a011c3e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0a003f20 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0a005a78 l     F .text	00000008 __fp_unlock
0a005a8c l     F .text	0000019c __sinit.part.1
0a005c28 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0a012258 l     O .rwdata	00000020 lc_ctype_charset
0a012238 l     O .rwdata	00000020 lc_message_charset
0a012278 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0a011c6c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0a00860c l     F .text	000000fc __sprint_r.part.0
0a011d90 l     O .rodata	00000010 zeroes.4349
0a009c48 l     F .text	000000bc __sbprintf
0a011da0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0a00d598 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0a00d6ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0a00d6d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0a00d7cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0a00d8b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0a00d9a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0a00db7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0a013aac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0a00de20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0a00df5c l     F .text	00000034 alt_dev_reg
0a012860 l     O .rwdata	000000cc flash
0a01292c l     O .rwdata	00001060 jtag_uart_0
0a01398c l     O .rwdata	000000c4 uart
0a013a50 l     O .rwdata	0000002c adc
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0a00e050 l     F .text	00000034 alt_flash_device_register
0a00e0d8 l     F .text	000003f8 alt_epcs_flash_query
0a00e4d0 l     F .text	000000ec alt_epcs_flash_memcmp
0a00e8a8 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0a00ed70 l     F .text	0000020c altera_avalon_jtag_uart_irq
0a00ef7c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0a00f770 l     F .text	0000009c altera_avalon_uart_irq
0a00f80c l     F .text	000000e4 altera_avalon_uart_rxirq
0a00f8f0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0a00fa8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0a00fca4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0a00fee8 l     F .text	00000038 epcs_test_wip
0a00ff20 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0a01076c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0a010c88 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0a010de8 l     F .text	0000003c alt_get_errno
0a010e24 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0a0157a8 g     O .bss	00000004 alt_instruction_exception_handler
0a00811c g     F .text	00000074 _mprec_log10
0a00e81c g     F .text	0000008c alt_epcs_flash_get_info
0a008208 g     F .text	0000008c __any_on
0a00a6c4 g     F .text	00000054 _isatty_r
0a011c78 g     O .rodata	00000028 __mprec_tinytens
0a00dab8 g     F .text	0000007c alt_main
0a0157d4 g     O .bss	00000100 alt_irq
0a00a718 g     F .text	00000060 _lseek_r
0a013ac4 g       *ABS*	00000000 __flash_rwdata_start
0a00c91c g     F .text	00000088 .hidden __eqdf2
0a0158d4 g       *ABS*	00000000 __alt_heap_start
0a00aff0 g     F .text	0000009c _wcrtomb_r
0a008434 g     F .text	0000005c __sseek
0a005dd8 g     F .text	00000010 __sinit
0a00ae98 g     F .text	00000140 __swbuf_r
0a0063e4 g     F .text	0000007c _setlocale_r
0a005c30 g     F .text	00000078 __sfmoreglue
0c001000 g       *ABS*	00000000 __alt_mem_flash
0a00db58 g     F .text	00000024 __malloc_unlock
0a00a778 g     F .text	0000015c memmove
0a005dc0 g     F .text	00000018 _cleanup
0a0071dc g     F .text	000000a8 _Balloc
0a00c9a4 g     F .text	000000dc .hidden __gtdf2
0a011210 g     F .text	00000024 altera_nios2_gen2_irq_init
0a00ff5c g     F .text	000000fc epcs_sector_erase
04000000 g     F .entry	0000000c __reset
0a000000 g       *ABS*	00000000 __flash_exceptions_start
0a00a1a0 g     F .text	0000005c _fstat_r
0a01578c g     O .bss	00000004 errno
0a0083b0 g     F .text	00000008 __seofread
0a015794 g     O .bss	00000004 alt_argv
0a01ba7c g       *ABS*	00000000 _gp
0a00ddf0 g     F .text	00000030 usleep
0a0126e0 g     O .rwdata	00000180 alt_fd_list
0a0101a0 g     F .text	0000006c epcs_write_status_register
0a011430 g     F .text	00000090 alt_find_dev
0a006f6c g     F .text	00000148 memcpy
0a005a80 g     F .text	0000000c _cleanup_r
0a0015ac g     F .text	000000dc .hidden __floatsidf
0a010d6c g     F .text	0000007c alt_io_redirect
0a00ca80 g     F .text	000000f4 .hidden __ltdf2
0a011abc g       *ABS*	00000000 __DTOR_END__
0a01168c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0a00e9b4 g     F .text	00000100 alt_epcs_flash_write_block
0a008294 g     F .text	00000074 __fpclassifyd
0a008078 g     F .text	000000a4 __ratio
0a009c2c g     F .text	0000001c __vfiprintf_internal
0a00f174 g     F .text	0000021c altera_avalon_jtag_uart_read
0a00be90 g     F .text	00000064 .hidden __udivsi3
0a00d808 g     F .text	000000ac isatty
0a011cc8 g     O .rodata	000000c8 __mprec_tens
0a006460 g     F .text	0000000c __locale_charset
0a015788 g     O .bss	00000004 __malloc_top_pad
0a013a84 g     O .rwdata	00000004 __mb_cur_max
0a006490 g     F .text	0000000c _localeconv_r
0a00a1fc g     F .text	000004c8 __sfvwrite_r
0a007610 g     F .text	0000003c __i2b
0a008308 g     F .text	00000054 _sbrk_r
0a00a8d4 g     F .text	00000060 _read_r
0a013aa4 g     O .rwdata	00000004 alt_max_fd
0a009e94 g     F .text	000000f0 _fclose_r
0a005a48 g     F .text	00000030 fflush
0a015784 g     O .bss	00000004 __malloc_max_sbrked_mem
0a001688 g     F .text	00000110 .hidden __extendsfdf2
0bff63b8 g     O TempMemory	00000004 temp
0a000494 g     F .text	000008ac .hidden __adddf3
0a00041c g     F .text	00000078 .hidden __nesf2
0a00e93c g     F .text	00000078 alt_epcs_flash_erase_block
0a007e20 g     F .text	0000010c __b2d
0a00b7d4 g     F .text	000005c4 .hidden __umoddi3
0a00d9dc g     F .text	000000dc lseek
0a013a7c g     O .rwdata	00000004 _global_impure_ptr
0a01046c g     F .text	0000005c epcs_exit_4_bytes_mode
0a00a934 g     F .text	00000564 _realloc_r
0a0158d4 g       *ABS*	00000000 __bss_end
0a010b98 g     F .text	000000f0 alt_iic_isr_register
0a011108 g     F .text	00000108 alt_tick
0a00b1d8 g     F .text	000005fc .hidden __udivdi3
0a00a0fc g     F .text	00000024 _fputwc_r
0a011ca0 g     O .rodata	00000028 __mprec_bigtens
0a0073f4 g     F .text	00000104 __s2b
0a00d4f0 g     F .text	000000a8 .hidden __floatunsidf
0a007b60 g     F .text	00000060 __mcmp
0a00f6c4 g     F .text	000000ac altera_avalon_uart_init
0a005df8 g     F .text	00000018 __fp_lock_all
0a010b4c g     F .text	0000004c alt_ic_irq_enabled
0a01106c g     F .text	0000009c alt_alarm_stop
0a01579c g     O .bss	00000004 alt_irq_active
0a0000dc g     F .exceptions	000000d4 alt_irq_handler
0a0126b8 g     O .rwdata	00000028 alt_dev_null
0a01074c g     F .text	00000020 alt_dcache_flush_all
0a0074f8 g     F .text	00000068 __hi0bits
0a00d470 g     F .text	00000080 .hidden __fixdfsi
0bff63b0 g     O PressureMemory	00000004 pressure
0a013ac4 g       *ABS*	00000000 __ram_rwdata_end
0a013a9c g     O .rwdata	00000008 alt_dev_list
0a00de5c g     F .text	00000100 write
0a011e14 g       *ABS*	00000000 __ram_rodata_end
0a00d714 g     F .text	000000b8 fstat
0a0019f4 g     F .text	00000024 fprintf
0a00ca80 g     F .text	000000f4 .hidden __ledf2
0a0078d8 g     F .text	00000140 __pow5mult
0a008720 g     F .text	0000150c ___vfiprintf_internal_r
0a01577c g     O .bss	00000004 __nlocale_changed
0a00bef4 g     F .text	00000058 .hidden __umodsi3
0a010328 g     F .text	00000068 epcs_read_electronic_signature
0a0158d4 g       *ABS*	00000000 end
0a00fce0 g     F .text	000001ac altera_avalon_uart_write
0a00ecb0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0a0001b0 g     F .exceptions	00000060 alt_instruction_exception_entry
0a011abc g       *ABS*	00000000 __CTOR_LIST__
0b000000 g       *ABS*	00000000 __alt_stack_pointer
0a00f614 g     F .text	00000060 altera_avalon_uart_write_fd
0a001940 g     F .text	00000064 .hidden __clzsi2
0a00f674 g     F .text	00000050 altera_avalon_uart_close_fd
0a00f390 g     F .text	00000224 altera_avalon_jtag_uart_write
0a005de8 g     F .text	00000004 __sfp_lock_acquire
0a006e88 g     F .text	000000e4 memchr
0a001a18 g     F .text	000022dc ___vfprintf_internal_r
0a005f4c g     F .text	00000310 _free_r
0a00646c g     F .text	00000010 __locale_mb_cur_max
0a011908 g     F .text	00000180 __call_exitprocs
0a015778 g     O .bss	00000004 __mlocale_changed
0a013a88 g     O .rwdata	00000004 __malloc_sbrk_base
0a000210 g     F .text	0000003c _start
0a0157a0 g     O .bss	00000004 _alt_tick_rate
0a007a18 g     F .text	00000148 __lshift
0a011234 g     F .text	000001fc alt_avalon_spi_command
0a0157a4 g     O .bss	00000004 _alt_nticks
0a00dbb8 g     F .text	00000104 read
0a00dfc8 g     F .text	00000088 alt_sys_init
0a0117f0 g     F .text	00000118 __register_exitproc
0a00764c g     F .text	0000028c __multiply
0a00f01c g     F .text	00000068 altera_avalon_jtag_uart_close
0a0019a4 g     F .text	00000028 .hidden __mulsi3
0a011e14 g       *ABS*	00000000 __ram_rwdata_start
0a011abc g       *ABS*	00000000 __ram_rodata_start
0a0157ac g     O .bss	00000028 __malloc_current_mallinfo
0a00041c g     F .text	00000078 .hidden __eqsf2
0a007f2c g     F .text	0000014c __d2b
0a00fe8c g     F .text	0000005c epcs_read_status_register
0a00eb4c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0a0115c8 g     F .text	000000c4 alt_get_fd
0a0105f4 g     F .text	00000158 alt_busy_sleep
0a009d64 g     F .text	00000054 _close_r
0a010390 g     F .text	00000080 epcs_read_device_id
0a011774 g     F .text	0000007c memcmp
0a00ec0c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0a0158d4 g       *ABS*	00000000 __alt_stack_base
0a00ec5c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0a003dcc g     F .text	00000154 __swsetup_r
0a00bf4c g     F .text	000009d0 .hidden __divdf3
0a005ca8 g     F .text	00000118 __sfp
0a008190 g     F .text	00000078 __copybits
0a0122b0 g     O .rwdata	00000408 __malloc_av_
0a005df4 g     F .text	00000004 __sinit_lock_release
0a000d40 g     F .text	0000086c .hidden __muldf3
0a00835c g     F .text	00000054 __sread
0a0114c0 g     F .text	00000108 alt_find_file
0a0107a8 g     F .text	000000a4 alt_dev_llist_insert
0a00db34 g     F .text	00000024 __malloc_lock
0a0019cc g     F .text	00000028 _fprintf_r
0a00dd40 g     F .text	000000b0 sbrk
0a0059ec g     F .text	0000005c _fflush_r
0a009db8 g     F .text	000000dc _calloc_r
0a013ab0 g     O .rwdata	00000008 alt_flash_dev_list
0a015774 g       *ABS*	00000000 __bss_start
0a0070b4 g     F .text	00000128 memset
0a00024c g     F .text	000001d0 main
0a015798 g     O .bss	00000004 alt_envp
0a015780 g     O .bss	00000004 __malloc_max_total_mem
0a00ebac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0a00afd8 g     F .text	00000018 __swbuf
0a008490 g     F .text	00000008 __sclose
0b000000 g       *ABS*	00000000 __alt_heap_limit
0a009f84 g     F .text	00000014 fclose
0a001798 g     F .text	000001a8 .hidden __truncdfsf2
0a004148 g     F .text	00001688 _dtoa_r
0a00667c g     F .text	0000080c _malloc_r
0a00b14c g     F .text	00000030 __ascii_wctomb
0a013aa8 g     O .rwdata	00000004 alt_errno
0a00625c g     F .text	000000c4 _fwalk
0a00bd98 g     F .text	00000084 .hidden __divsi3
0a005e28 g     F .text	00000124 _malloc_trim_r
0a011abc g       *ABS*	00000000 __CTOR_END__
0a00e5bc g     F .text	00000260 alt_epcs_flash_write
0a008498 g     F .text	000000dc strcmp
0a011abc g       *ABS*	00000000 __flash_rodata_start
0a011abc g       *ABS*	00000000 __DTOR_LIST__
0a00c91c g     F .text	00000088 .hidden __nedf2
0a00df90 g     F .text	00000038 alt_irq_init
0a00dcbc g     F .text	00000084 alt_release_fd
0a011ae8 g     O .rodata	00000100 .hidden __clz_tab
0a015774 g     O .bss	00000004 _PathLocale
0a011728 g     F .text	00000014 atexit
0a009d04 g     F .text	00000060 _write_r
0a00649c g     F .text	00000018 setlocale
0a013a80 g     O .rwdata	00000004 _impure_ptr
0a015790 g     O .bss	00000004 alt_argc
0a0057d0 g     F .text	0000021c __sflush_r
0a0108ac g     F .text	00000060 _do_dtors
0a006488 g     F .text	00000008 __locale_cjk_lang
0a000000 g       .exceptions	00000000 alt_irq_entry
0a007dbc g     F .text	00000064 __ulp
0a005e10 g     F .text	00000018 __fp_unlock_all
0a013a94 g     O .rwdata	00000008 alt_fs_list
0a000000 g       *ABS*	00000000 __ram_exceptions_start
0a0064b4 g     F .text	0000000c localeconv
0a010058 g     F .text	000000f4 epcs_read_buffer
0a00e084 g     F .text	00000054 alt_epcs_flash_init
0a0109e8 g     F .text	00000050 alt_ic_isr_register
0a013ac4 g       *ABS*	00000000 _edata
0a00f5b4 g     F .text	00000060 altera_avalon_uart_read_fd
0a0158d4 g       *ABS*	00000000 _end
0a01090c g     F .text	00000068 alt_flash_open_dev
0a009f98 g     F .text	00000164 __fputwc
0a000210 g       *ABS*	00000000 __ram_exceptions_end
0a00f084 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0a010ac0 g     F .text	0000008c alt_ic_irq_disable
0a010410 g     F .text	0000005c epcs_enter_4_bytes_mode
0a0083b8 g     F .text	0000007c __swrite
0a013a8c g     O .rwdata	00000004 __malloc_trim_threshold
0a00647c g     F .text	0000000c __locale_msgcharset
04000000 g       *ABS*	00000000 __alt_mem_onchip
0a01173c g     F .text	00000038 exit
0a006320 g     F .text	000000c4 _fwalk_reent
0a007bc0 g     F .text	000001fc __mdiff
0a010974 g     F .text	00000054 alt_flash_close_dev
0a00be1c g     F .text	00000074 .hidden __modsi3
0b000000 g       *ABS*	00000000 __alt_data_end
0a000000 g     F .exceptions	00000000 alt_exception
0a005dec g     F .text	00000004 __sfp_lock_release
0a000000 g       *ABS*	00000000 __alt_mem_sdram
0a00fa38 g     F .text	00000054 altera_avalon_uart_close
0a011a88 g     F .text	00000034 _exit
0a0104c8 g     F .text	0000012c alt_alarm_start
0a0064c0 g     F .text	000001bc __smakebuf_r
0a008574 g     F .text	00000098 strlen
0a01014c g     F .text	00000054 epcs_write_enable
0a010f10 g     F .text	0000015c open
0a00c9a4 g     F .text	000000dc .hidden __gedf2
0a013a90 g     O .rwdata	00000004 __wctomb
0a008708 g     F .text	00000018 __sprint_r
0a0109c8 g     F .text	00000020 alt_icache_flush_all
0a013ab8 g     O .rwdata	00000004 alt_priority_mask
0a010a38 g     F .text	00000088 alt_ic_irq_enable
0a003cf4 g     F .text	0000001c __vfprintf_internal
0a00fac8 g     F .text	000001dc altera_avalon_uart_read
0a00b17c g     F .text	0000005c _wctomb_r
0a00cb74 g     F .text	000008fc .hidden __subdf3
0a00eab4 g     F .text	00000098 alt_epcs_flash_read
0a007560 g     F .text	000000b0 __lo0bits
0a013abc g     O .rwdata	00000008 alt_alarm_list
0a01084c g     F .text	00000060 _do_ctors
0a00b08c g     F .text	000000c0 wcrtomb
0a00d5d4 g     F .text	000000d8 close
0a00d91c g     F .text	00000084 alt_load
0a00a120 g     F .text	00000080 fputwc
0a005df0 g     F .text	00000004 __sinit_lock_acquire
0a01020c g     F .text	0000011c epcs_write_buffer
0a0072ac g     F .text	00000148 __multadd
0a007284 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00428034 	movhi	at,2560
    ori r1, r1, %lo(_start)
 4000004:	08408414 	ori	at,at,528
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0a000000 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 a000000:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 a000004:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 a000008:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 a00000c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 a000010:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 a000014:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 a000018:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 a00001c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 a000020:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 a000024:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 a000028:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 a00002c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 a000030:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 a000034:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 a000038:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 a00003c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 a000040:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 a000044:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 a000048:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 a00004c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 a000050:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 a000054:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 a000058:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 a00005c:	10000326 	beq	r2,zero,a00006c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 a000060:	20000226 	beq	r4,zero,a00006c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 a000064:	a0000dc0 	call	a0000dc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 a000068:	00000706 	br	a000088 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 a00006c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 a000070:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 a000074:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 a000078:	a0001b00 	call	a0001b0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 a00007c:	1000021e 	bne	r2,zero,a000088 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 a000080:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 a000084:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 a000088:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 a00008c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 a000090:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 a000094:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 a000098:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 a00009c:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 a0000a0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 a0000a4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 a0000a8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 a0000ac:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 a0000b0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 a0000b4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 a0000b8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 a0000bc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 a0000c0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 a0000c4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 a0000c8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 a0000cc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 a0000d0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 a0000d4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 a0000d8:	ef80083a 	eret

0a0000dc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 a0000dc:	defff904 	addi	sp,sp,-28
 a0000e0:	dfc00615 	stw	ra,24(sp)
 a0000e4:	df000515 	stw	fp,20(sp)
 a0000e8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 a0000ec:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 a0000f0:	0005313a 	rdctl	r2,ipending
 a0000f4:	e0bffe15 	stw	r2,-8(fp)

  return active;
 a0000f8:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 a0000fc:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 a000100:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 a000104:	00800044 	movi	r2,1
 a000108:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 a00010c:	e0fffb17 	ldw	r3,-20(fp)
 a000110:	e0bffc17 	ldw	r2,-16(fp)
 a000114:	1884703a 	and	r2,r3,r2
 a000118:	10001426 	beq	r2,zero,a00016c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 a00011c:	00828074 	movhi	r2,2561
 a000120:	1095f504 	addi	r2,r2,22484
 a000124:	e0fffd17 	ldw	r3,-12(fp)
 a000128:	180690fa 	slli	r3,r3,3
 a00012c:	10c5883a 	add	r2,r2,r3
 a000130:	10c00017 	ldw	r3,0(r2)
 a000134:	00828074 	movhi	r2,2561
 a000138:	1095f504 	addi	r2,r2,22484
 a00013c:	e13ffd17 	ldw	r4,-12(fp)
 a000140:	200890fa 	slli	r4,r4,3
 a000144:	1105883a 	add	r2,r2,r4
 a000148:	10800104 	addi	r2,r2,4
 a00014c:	10800017 	ldw	r2,0(r2)
 a000150:	1009883a 	mov	r4,r2
 a000154:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 a000158:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 a00015c:	0005313a 	rdctl	r2,ipending
 a000160:	e0bfff15 	stw	r2,-4(fp)

  return active;
 a000164:	e0bfff17 	ldw	r2,-4(fp)
 a000168:	00000706 	br	a000188 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 a00016c:	e0bffc17 	ldw	r2,-16(fp)
 a000170:	1085883a 	add	r2,r2,r2
 a000174:	e0bffc15 	stw	r2,-16(fp)
      i++;
 a000178:	e0bffd17 	ldw	r2,-12(fp)
 a00017c:	10800044 	addi	r2,r2,1
 a000180:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 a000184:	003fe106 	br	a00010c <__alt_mem_flash+0xfdfff10c>

    active = alt_irq_pending ();
 a000188:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 a00018c:	e0bffb17 	ldw	r2,-20(fp)
 a000190:	103fdb1e 	bne	r2,zero,a000100 <__alt_mem_flash+0xfdfff100>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 a000194:	0001883a 	nop
}
 a000198:	0001883a 	nop
 a00019c:	e037883a 	mov	sp,fp
 a0001a0:	dfc00117 	ldw	ra,4(sp)
 a0001a4:	df000017 	ldw	fp,0(sp)
 a0001a8:	dec00204 	addi	sp,sp,8
 a0001ac:	f800283a 	ret

0a0001b0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 a0001b0:	defffb04 	addi	sp,sp,-20
 a0001b4:	dfc00415 	stw	ra,16(sp)
 a0001b8:	df000315 	stw	fp,12(sp)
 a0001bc:	df000304 	addi	fp,sp,12
 a0001c0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 a0001c4:	00bfffc4 	movi	r2,-1
 a0001c8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 a0001cc:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 a0001d0:	d0a74b17 	ldw	r2,-25300(gp)
 a0001d4:	10000726 	beq	r2,zero,a0001f4 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 a0001d8:	d0a74b17 	ldw	r2,-25300(gp)
 a0001dc:	e0fffd17 	ldw	r3,-12(fp)
 a0001e0:	e1bffe17 	ldw	r6,-8(fp)
 a0001e4:	e17fff17 	ldw	r5,-4(fp)
 a0001e8:	1809883a 	mov	r4,r3
 a0001ec:	103ee83a 	callr	r2
 a0001f0:	00000206 	br	a0001fc <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 a0001f4:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 a0001f8:	0005883a 	mov	r2,zero
}
 a0001fc:	e037883a 	mov	sp,fp
 a000200:	dfc00117 	ldw	ra,4(sp)
 a000204:	df000017 	ldw	fp,0(sp)
 a000208:	dec00204 	addi	sp,sp,8
 a00020c:	f800283a 	ret

Disassembly of section .text:

0a000210 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 a000210:	06c2c034 	movhi	sp,2816
    ori sp, sp, %lo(__alt_stack_pointer)
 a000214:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 a000218:	06828074 	movhi	gp,2561
    ori gp, gp, %lo(_gp)
 a00021c:	d6ae9f14 	ori	gp,gp,47740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 a000220:	00828074 	movhi	r2,2561
    ori r2, r2, %lo(__bss_start)
 a000224:	1095dd14 	ori	r2,r2,22388

    movhi r3, %hi(__bss_end)
 a000228:	00c28074 	movhi	r3,2561
    ori r3, r3, %lo(__bss_end)
 a00022c:	18d63514 	ori	r3,r3,22740

    beq r2, r3, 1f
 a000230:	10c00326 	beq	r2,r3,a000240 <_start+0x30>

0:
    stw zero, (r2)
 a000234:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 a000238:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 a00023c:	10fffd36 	bltu	r2,r3,a000234 <__alt_mem_flash+0xfdfff234>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 a000240:	a00d91c0 	call	a00d91c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 a000244:	a00dab80 	call	a00dab8 <alt_main>

0a000248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 a000248:	003fff06 	br	a000248 <__alt_mem_flash+0xfdfff248>

0a00024c <main>:

float temp __attribute__((section("TempMemory")));
float pressure __attribute__((section("PressureMemory")));

int main()
{
 a00024c:	defffb04 	addi	sp,sp,-20
 a000250:	dfc00415 	stw	ra,16(sp)
 a000254:	df000315 	stw	fp,12(sp)
 a000258:	dc000215 	stw	r16,8(sp)
 a00025c:	df000304 	addi	fp,sp,12
	int *headIndex = (int *)SHARED_RAD_BASE;
 a000260:	0082fff4 	movhi	r2,3071
 a000264:	1098f004 	addi	r2,r2,25536
 a000268:	e0bffd15 	stw	r2,-12(fp)
		usleep (1000);
 a00026c:	0100fa04 	movi	r4,1000
 a000270:	a00ddf00 	call	a00ddf0 <usleep>
		float data;
		while (1) {
			if (*headIndex != FLAG) {
 a000274:	e0bffd17 	ldw	r2,-12(fp)
 a000278:	10c00017 	ldw	r3,0(r2)
 a00027c:	00a00034 	movhi	r2,32768
 a000280:	10bfffc4 	addi	r2,r2,-1
 a000284:	18803b26 	beq	r3,r2,a000374 <main+0x128>
				data = .0129 * *headIndex + .0068;
 a000288:	e0bffd17 	ldw	r2,-12(fp)
 a00028c:	10800017 	ldw	r2,0(r2)
 a000290:	1009883a 	mov	r4,r2
 a000294:	a0015ac0 	call	a0015ac <__floatsidf>
 a000298:	1011883a 	mov	r8,r2
 a00029c:	1813883a 	mov	r9,r3
 a0002a0:	01ac3cb4 	movhi	r6,45298
 a0002a4:	319eecc4 	addi	r6,r6,31667
 a0002a8:	01cfe2b4 	movhi	r7,16266
 a0002ac:	39dad404 	addi	r7,r7,27472
 a0002b0:	4009883a 	mov	r4,r8
 a0002b4:	480b883a 	mov	r5,r9
 a0002b8:	a000d400 	call	a000d40 <__muldf3>
 a0002bc:	1009883a 	mov	r4,r2
 a0002c0:	180b883a 	mov	r5,r3
 a0002c4:	2005883a 	mov	r2,r4
 a0002c8:	2807883a 	mov	r3,r5
 a0002cc:	018673b4 	movhi	r6,6606
 a0002d0:	3181d7c4 	addi	r6,r6,1887
 a0002d4:	01cfdf34 	movhi	r7,16252
 a0002d8:	39f69444 	addi	r7,r7,-9647
 a0002dc:	1009883a 	mov	r4,r2
 a0002e0:	180b883a 	mov	r5,r3
 a0002e4:	a0004940 	call	a000494 <__adddf3>
 a0002e8:	1009883a 	mov	r4,r2
 a0002ec:	180b883a 	mov	r5,r3
 a0002f0:	2005883a 	mov	r2,r4
 a0002f4:	2807883a 	mov	r3,r5
 a0002f8:	1009883a 	mov	r4,r2
 a0002fc:	180b883a 	mov	r5,r3
 a000300:	a0017980 	call	a001798 <__truncdfsf2>
 a000304:	1007883a 	mov	r3,r2
 a000308:	e0fffe15 	stw	r3,-8(fp)
				//fprintf(stdout, "%02d\n", *headIndex);
				fprintf(stdout, "%02f\n", data);
 a00030c:	d0a00117 	ldw	r2,-32764(gp)
 a000310:	14000217 	ldw	r16,8(r2)
 a000314:	e13ffe17 	ldw	r4,-8(fp)
 a000318:	a0016880 	call	a001688 <__extendsfdf2>
 a00031c:	1009883a 	mov	r4,r2
 a000320:	180b883a 	mov	r5,r3
 a000324:	200d883a 	mov	r6,r4
 a000328:	280f883a 	mov	r7,r5
 a00032c:	01428074 	movhi	r5,2561
 a000330:	2946af04 	addi	r5,r5,6844
 a000334:	8009883a 	mov	r4,r16
 a000338:	a0019f40 	call	a0019f4 <fprintf>
				*headIndex = FLAG;
 a00033c:	e0fffd17 	ldw	r3,-12(fp)
 a000340:	00a00034 	movhi	r2,32768
 a000344:	10bfffc4 	addi	r2,r2,-1
 a000348:	18800015 	stw	r2,0(r3)
				headIndex ++;
 a00034c:	e0bffd17 	ldw	r2,-12(fp)
 a000350:	10800104 	addi	r2,r2,4
 a000354:	e0bffd15 	stw	r2,-12(fp)
				if (headIndex < (int *)SHARED_RAD_END) {
 a000358:	e0fffd17 	ldw	r3,-12(fp)
 a00035c:	00830034 	movhi	r2,3072
 a000360:	10bfff84 	addi	r2,r2,-2
 a000364:	10c00336 	bltu	r2,r3,a000374 <main+0x128>
					headIndex = (int *)SHARED_RAD_BASE;
 a000368:	0082fff4 	movhi	r2,3071
 a00036c:	1098f004 	addi	r2,r2,25536
 a000370:	e0bffd15 	stw	r2,-12(fp)
				}
			}
			if (temp != FLAG) {
 a000374:	0082fff4 	movhi	r2,3071
 a000378:	1098ee04 	addi	r2,r2,25528
 a00037c:	10c00017 	ldw	r3,0(r2)
 a000380:	0153c034 	movhi	r5,20224
 a000384:	1809883a 	mov	r4,r3
 a000388:	a00041c0 	call	a00041c <__eqsf2>
 a00038c:	103fb926 	beq	r2,zero,a000274 <__alt_mem_flash+0xfdfff274>
				//need to be able to distinguish between temperature and voltage values in data file
				fprintf(stdout, "Temperature: %02f\n", temp);
 a000390:	d0a00117 	ldw	r2,-32764(gp)
 a000394:	14000217 	ldw	r16,8(r2)
 a000398:	0082fff4 	movhi	r2,3071
 a00039c:	1098ee04 	addi	r2,r2,25528
 a0003a0:	10c00017 	ldw	r3,0(r2)
 a0003a4:	1809883a 	mov	r4,r3
 a0003a8:	a0016880 	call	a001688 <__extendsfdf2>
 a0003ac:	1009883a 	mov	r4,r2
 a0003b0:	180b883a 	mov	r5,r3
 a0003b4:	200d883a 	mov	r6,r4
 a0003b8:	280f883a 	mov	r7,r5
 a0003bc:	01428074 	movhi	r5,2561
 a0003c0:	2946b104 	addi	r5,r5,6852
 a0003c4:	8009883a 	mov	r4,r16
 a0003c8:	a0019f40 	call	a0019f4 <fprintf>
				fprintf(stdout, "Pressure: %02f\n", pressure);
 a0003cc:	d0a00117 	ldw	r2,-32764(gp)
 a0003d0:	14000217 	ldw	r16,8(r2)
 a0003d4:	0082fff4 	movhi	r2,3071
 a0003d8:	1098ec04 	addi	r2,r2,25520
 a0003dc:	10c00017 	ldw	r3,0(r2)
 a0003e0:	1809883a 	mov	r4,r3
 a0003e4:	a0016880 	call	a001688 <__extendsfdf2>
 a0003e8:	1009883a 	mov	r4,r2
 a0003ec:	180b883a 	mov	r5,r3
 a0003f0:	200d883a 	mov	r6,r4
 a0003f4:	280f883a 	mov	r7,r5
 a0003f8:	01428074 	movhi	r5,2561
 a0003fc:	2946b604 	addi	r5,r5,6872
 a000400:	8009883a 	mov	r4,r16
 a000404:	a0019f40 	call	a0019f4 <fprintf>
				temp = FLAG;
 a000408:	0082fff4 	movhi	r2,3071
 a00040c:	1098ee04 	addi	r2,r2,25528
 a000410:	00d3c034 	movhi	r3,20224
 a000414:	10c00015 	stw	r3,0(r2)
			}
		}
 a000418:	003f9606 	br	a000274 <__alt_mem_flash+0xfdfff274>

0a00041c <__eqsf2>:
 a00041c:	2006d5fa 	srli	r3,r4,23
 a000420:	280cd5fa 	srli	r6,r5,23
 a000424:	01c02034 	movhi	r7,128
 a000428:	39ffffc4 	addi	r7,r7,-1
 a00042c:	18c03fcc 	andi	r3,r3,255
 a000430:	02003fc4 	movi	r8,255
 a000434:	3904703a 	and	r2,r7,r4
 a000438:	31803fcc 	andi	r6,r6,255
 a00043c:	394e703a 	and	r7,r7,r5
 a000440:	2008d7fa 	srli	r4,r4,31
 a000444:	280ad7fa 	srli	r5,r5,31
 a000448:	1a000d26 	beq	r3,r8,a000480 <__eqsf2+0x64>
 a00044c:	02003fc4 	movi	r8,255
 a000450:	32000826 	beq	r6,r8,a000474 <__eqsf2+0x58>
 a000454:	19800226 	beq	r3,r6,a000460 <__eqsf2+0x44>
 a000458:	00800044 	movi	r2,1
 a00045c:	f800283a 	ret
 a000460:	11fffd1e 	bne	r2,r7,a000458 <__alt_mem_flash+0xfdfff458>
 a000464:	21400926 	beq	r4,r5,a00048c <__eqsf2+0x70>
 a000468:	183ffb1e 	bne	r3,zero,a000458 <__alt_mem_flash+0xfdfff458>
 a00046c:	1004c03a 	cmpne	r2,r2,zero
 a000470:	f800283a 	ret
 a000474:	383ff726 	beq	r7,zero,a000454 <__alt_mem_flash+0xfdfff454>
 a000478:	00800044 	movi	r2,1
 a00047c:	f800283a 	ret
 a000480:	103ff226 	beq	r2,zero,a00044c <__alt_mem_flash+0xfdfff44c>
 a000484:	00800044 	movi	r2,1
 a000488:	f800283a 	ret
 a00048c:	0005883a 	mov	r2,zero
 a000490:	f800283a 	ret

0a000494 <__adddf3>:
 a000494:	02c00434 	movhi	r11,16
 a000498:	5affffc4 	addi	r11,r11,-1
 a00049c:	2806d7fa 	srli	r3,r5,31
 a0004a0:	2ad4703a 	and	r10,r5,r11
 a0004a4:	3ad2703a 	and	r9,r7,r11
 a0004a8:	3804d53a 	srli	r2,r7,20
 a0004ac:	3018d77a 	srli	r12,r6,29
 a0004b0:	280ad53a 	srli	r5,r5,20
 a0004b4:	501490fa 	slli	r10,r10,3
 a0004b8:	2010d77a 	srli	r8,r4,29
 a0004bc:	481290fa 	slli	r9,r9,3
 a0004c0:	380ed7fa 	srli	r7,r7,31
 a0004c4:	defffb04 	addi	sp,sp,-20
 a0004c8:	dc800215 	stw	r18,8(sp)
 a0004cc:	dc400115 	stw	r17,4(sp)
 a0004d0:	dc000015 	stw	r16,0(sp)
 a0004d4:	dfc00415 	stw	ra,16(sp)
 a0004d8:	dcc00315 	stw	r19,12(sp)
 a0004dc:	1c803fcc 	andi	r18,r3,255
 a0004e0:	2c01ffcc 	andi	r16,r5,2047
 a0004e4:	5210b03a 	or	r8,r10,r8
 a0004e8:	202290fa 	slli	r17,r4,3
 a0004ec:	1081ffcc 	andi	r2,r2,2047
 a0004f0:	4b12b03a 	or	r9,r9,r12
 a0004f4:	300c90fa 	slli	r6,r6,3
 a0004f8:	91c07526 	beq	r18,r7,a0006d0 <__adddf3+0x23c>
 a0004fc:	8087c83a 	sub	r3,r16,r2
 a000500:	00c0ab0e 	bge	zero,r3,a0007b0 <__adddf3+0x31c>
 a000504:	10002a1e 	bne	r2,zero,a0005b0 <__adddf3+0x11c>
 a000508:	4984b03a 	or	r2,r9,r6
 a00050c:	1000961e 	bne	r2,zero,a000768 <__adddf3+0x2d4>
 a000510:	888001cc 	andi	r2,r17,7
 a000514:	10000726 	beq	r2,zero,a000534 <__adddf3+0xa0>
 a000518:	888003cc 	andi	r2,r17,15
 a00051c:	00c00104 	movi	r3,4
 a000520:	10c00426 	beq	r2,r3,a000534 <__adddf3+0xa0>
 a000524:	88c7883a 	add	r3,r17,r3
 a000528:	1c63803a 	cmpltu	r17,r3,r17
 a00052c:	4451883a 	add	r8,r8,r17
 a000530:	1823883a 	mov	r17,r3
 a000534:	4080202c 	andhi	r2,r8,128
 a000538:	10005926 	beq	r2,zero,a0006a0 <__adddf3+0x20c>
 a00053c:	84000044 	addi	r16,r16,1
 a000540:	0081ffc4 	movi	r2,2047
 a000544:	8080ba26 	beq	r16,r2,a000830 <__adddf3+0x39c>
 a000548:	00bfe034 	movhi	r2,65408
 a00054c:	10bfffc4 	addi	r2,r2,-1
 a000550:	4090703a 	and	r8,r8,r2
 a000554:	4004977a 	slli	r2,r8,29
 a000558:	4010927a 	slli	r8,r8,9
 a00055c:	8822d0fa 	srli	r17,r17,3
 a000560:	8401ffcc 	andi	r16,r16,2047
 a000564:	4010d33a 	srli	r8,r8,12
 a000568:	9007883a 	mov	r3,r18
 a00056c:	1444b03a 	or	r2,r2,r17
 a000570:	8401ffcc 	andi	r16,r16,2047
 a000574:	8020953a 	slli	r16,r16,20
 a000578:	18c03fcc 	andi	r3,r3,255
 a00057c:	01000434 	movhi	r4,16
 a000580:	213fffc4 	addi	r4,r4,-1
 a000584:	180697fa 	slli	r3,r3,31
 a000588:	4110703a 	and	r8,r8,r4
 a00058c:	4410b03a 	or	r8,r8,r16
 a000590:	40c6b03a 	or	r3,r8,r3
 a000594:	dfc00417 	ldw	ra,16(sp)
 a000598:	dcc00317 	ldw	r19,12(sp)
 a00059c:	dc800217 	ldw	r18,8(sp)
 a0005a0:	dc400117 	ldw	r17,4(sp)
 a0005a4:	dc000017 	ldw	r16,0(sp)
 a0005a8:	dec00504 	addi	sp,sp,20
 a0005ac:	f800283a 	ret
 a0005b0:	0081ffc4 	movi	r2,2047
 a0005b4:	80bfd626 	beq	r16,r2,a000510 <__alt_mem_flash+0xfdfff510>
 a0005b8:	4a402034 	orhi	r9,r9,128
 a0005bc:	00800e04 	movi	r2,56
 a0005c0:	10c09f16 	blt	r2,r3,a000840 <__adddf3+0x3ac>
 a0005c4:	008007c4 	movi	r2,31
 a0005c8:	10c0c216 	blt	r2,r3,a0008d4 <__adddf3+0x440>
 a0005cc:	00800804 	movi	r2,32
 a0005d0:	10c5c83a 	sub	r2,r2,r3
 a0005d4:	488a983a 	sll	r5,r9,r2
 a0005d8:	30c8d83a 	srl	r4,r6,r3
 a0005dc:	3084983a 	sll	r2,r6,r2
 a0005e0:	48c6d83a 	srl	r3,r9,r3
 a0005e4:	290cb03a 	or	r6,r5,r4
 a0005e8:	1004c03a 	cmpne	r2,r2,zero
 a0005ec:	308cb03a 	or	r6,r6,r2
 a0005f0:	898dc83a 	sub	r6,r17,r6
 a0005f4:	89a3803a 	cmpltu	r17,r17,r6
 a0005f8:	40d1c83a 	sub	r8,r8,r3
 a0005fc:	4451c83a 	sub	r8,r8,r17
 a000600:	3023883a 	mov	r17,r6
 a000604:	4080202c 	andhi	r2,r8,128
 a000608:	10002326 	beq	r2,zero,a000698 <__adddf3+0x204>
 a00060c:	04c02034 	movhi	r19,128
 a000610:	9cffffc4 	addi	r19,r19,-1
 a000614:	44e6703a 	and	r19,r8,r19
 a000618:	98007626 	beq	r19,zero,a0007f4 <__adddf3+0x360>
 a00061c:	9809883a 	mov	r4,r19
 a000620:	a0019400 	call	a001940 <__clzsi2>
 a000624:	10fffe04 	addi	r3,r2,-8
 a000628:	010007c4 	movi	r4,31
 a00062c:	20c07716 	blt	r4,r3,a00080c <__adddf3+0x378>
 a000630:	00800804 	movi	r2,32
 a000634:	10c5c83a 	sub	r2,r2,r3
 a000638:	8884d83a 	srl	r2,r17,r2
 a00063c:	98d0983a 	sll	r8,r19,r3
 a000640:	88e2983a 	sll	r17,r17,r3
 a000644:	1204b03a 	or	r2,r2,r8
 a000648:	1c007416 	blt	r3,r16,a00081c <__adddf3+0x388>
 a00064c:	1c21c83a 	sub	r16,r3,r16
 a000650:	82000044 	addi	r8,r16,1
 a000654:	00c007c4 	movi	r3,31
 a000658:	1a009116 	blt	r3,r8,a0008a0 <__adddf3+0x40c>
 a00065c:	00c00804 	movi	r3,32
 a000660:	1a07c83a 	sub	r3,r3,r8
 a000664:	8a08d83a 	srl	r4,r17,r8
 a000668:	88e2983a 	sll	r17,r17,r3
 a00066c:	10c6983a 	sll	r3,r2,r3
 a000670:	1210d83a 	srl	r8,r2,r8
 a000674:	8804c03a 	cmpne	r2,r17,zero
 a000678:	1906b03a 	or	r3,r3,r4
 a00067c:	18a2b03a 	or	r17,r3,r2
 a000680:	0021883a 	mov	r16,zero
 a000684:	003fa206 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000688:	1890b03a 	or	r8,r3,r2
 a00068c:	40017d26 	beq	r8,zero,a000c84 <__adddf3+0x7f0>
 a000690:	1011883a 	mov	r8,r2
 a000694:	1823883a 	mov	r17,r3
 a000698:	888001cc 	andi	r2,r17,7
 a00069c:	103f9e1e 	bne	r2,zero,a000518 <__alt_mem_flash+0xfdfff518>
 a0006a0:	4004977a 	slli	r2,r8,29
 a0006a4:	8822d0fa 	srli	r17,r17,3
 a0006a8:	4010d0fa 	srli	r8,r8,3
 a0006ac:	9007883a 	mov	r3,r18
 a0006b0:	1444b03a 	or	r2,r2,r17
 a0006b4:	0101ffc4 	movi	r4,2047
 a0006b8:	81002426 	beq	r16,r4,a00074c <__adddf3+0x2b8>
 a0006bc:	8120703a 	and	r16,r16,r4
 a0006c0:	01000434 	movhi	r4,16
 a0006c4:	213fffc4 	addi	r4,r4,-1
 a0006c8:	4110703a 	and	r8,r8,r4
 a0006cc:	003fa806 	br	a000570 <__alt_mem_flash+0xfdfff570>
 a0006d0:	8089c83a 	sub	r4,r16,r2
 a0006d4:	01005e0e 	bge	zero,r4,a000850 <__adddf3+0x3bc>
 a0006d8:	10002b26 	beq	r2,zero,a000788 <__adddf3+0x2f4>
 a0006dc:	0081ffc4 	movi	r2,2047
 a0006e0:	80bf8b26 	beq	r16,r2,a000510 <__alt_mem_flash+0xfdfff510>
 a0006e4:	4a402034 	orhi	r9,r9,128
 a0006e8:	00800e04 	movi	r2,56
 a0006ec:	1100a40e 	bge	r2,r4,a000980 <__adddf3+0x4ec>
 a0006f0:	498cb03a 	or	r6,r9,r6
 a0006f4:	300ac03a 	cmpne	r5,r6,zero
 a0006f8:	0013883a 	mov	r9,zero
 a0006fc:	2c4b883a 	add	r5,r5,r17
 a000700:	2c63803a 	cmpltu	r17,r5,r17
 a000704:	4a11883a 	add	r8,r9,r8
 a000708:	8a11883a 	add	r8,r17,r8
 a00070c:	2823883a 	mov	r17,r5
 a000710:	4080202c 	andhi	r2,r8,128
 a000714:	103fe026 	beq	r2,zero,a000698 <__alt_mem_flash+0xfdfff698>
 a000718:	84000044 	addi	r16,r16,1
 a00071c:	0081ffc4 	movi	r2,2047
 a000720:	8080d226 	beq	r16,r2,a000a6c <__adddf3+0x5d8>
 a000724:	00bfe034 	movhi	r2,65408
 a000728:	10bfffc4 	addi	r2,r2,-1
 a00072c:	4090703a 	and	r8,r8,r2
 a000730:	880ad07a 	srli	r5,r17,1
 a000734:	400897fa 	slli	r4,r8,31
 a000738:	88c0004c 	andi	r3,r17,1
 a00073c:	28e2b03a 	or	r17,r5,r3
 a000740:	4010d07a 	srli	r8,r8,1
 a000744:	2462b03a 	or	r17,r4,r17
 a000748:	003f7106 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a00074c:	4088b03a 	or	r4,r8,r2
 a000750:	20014526 	beq	r4,zero,a000c68 <__adddf3+0x7d4>
 a000754:	01000434 	movhi	r4,16
 a000758:	42000234 	orhi	r8,r8,8
 a00075c:	213fffc4 	addi	r4,r4,-1
 a000760:	4110703a 	and	r8,r8,r4
 a000764:	003f8206 	br	a000570 <__alt_mem_flash+0xfdfff570>
 a000768:	18ffffc4 	addi	r3,r3,-1
 a00076c:	1800491e 	bne	r3,zero,a000894 <__adddf3+0x400>
 a000770:	898bc83a 	sub	r5,r17,r6
 a000774:	8963803a 	cmpltu	r17,r17,r5
 a000778:	4251c83a 	sub	r8,r8,r9
 a00077c:	4451c83a 	sub	r8,r8,r17
 a000780:	2823883a 	mov	r17,r5
 a000784:	003f9f06 	br	a000604 <__alt_mem_flash+0xfdfff604>
 a000788:	4984b03a 	or	r2,r9,r6
 a00078c:	103f6026 	beq	r2,zero,a000510 <__alt_mem_flash+0xfdfff510>
 a000790:	213fffc4 	addi	r4,r4,-1
 a000794:	2000931e 	bne	r4,zero,a0009e4 <__adddf3+0x550>
 a000798:	898d883a 	add	r6,r17,r6
 a00079c:	3463803a 	cmpltu	r17,r6,r17
 a0007a0:	4251883a 	add	r8,r8,r9
 a0007a4:	8a11883a 	add	r8,r17,r8
 a0007a8:	3023883a 	mov	r17,r6
 a0007ac:	003fd806 	br	a000710 <__alt_mem_flash+0xfdfff710>
 a0007b0:	1800541e 	bne	r3,zero,a000904 <__adddf3+0x470>
 a0007b4:	80800044 	addi	r2,r16,1
 a0007b8:	1081ffcc 	andi	r2,r2,2047
 a0007bc:	00c00044 	movi	r3,1
 a0007c0:	1880a00e 	bge	r3,r2,a000a44 <__adddf3+0x5b0>
 a0007c4:	8989c83a 	sub	r4,r17,r6
 a0007c8:	8905803a 	cmpltu	r2,r17,r4
 a0007cc:	4267c83a 	sub	r19,r8,r9
 a0007d0:	98a7c83a 	sub	r19,r19,r2
 a0007d4:	9880202c 	andhi	r2,r19,128
 a0007d8:	10006326 	beq	r2,zero,a000968 <__adddf3+0x4d4>
 a0007dc:	3463c83a 	sub	r17,r6,r17
 a0007e0:	4a07c83a 	sub	r3,r9,r8
 a0007e4:	344d803a 	cmpltu	r6,r6,r17
 a0007e8:	19a7c83a 	sub	r19,r3,r6
 a0007ec:	3825883a 	mov	r18,r7
 a0007f0:	983f8a1e 	bne	r19,zero,a00061c <__alt_mem_flash+0xfdfff61c>
 a0007f4:	8809883a 	mov	r4,r17
 a0007f8:	a0019400 	call	a001940 <__clzsi2>
 a0007fc:	10800804 	addi	r2,r2,32
 a000800:	10fffe04 	addi	r3,r2,-8
 a000804:	010007c4 	movi	r4,31
 a000808:	20ff890e 	bge	r4,r3,a000630 <__alt_mem_flash+0xfdfff630>
 a00080c:	10bff604 	addi	r2,r2,-40
 a000810:	8884983a 	sll	r2,r17,r2
 a000814:	0023883a 	mov	r17,zero
 a000818:	1c3f8c0e 	bge	r3,r16,a00064c <__alt_mem_flash+0xfdfff64c>
 a00081c:	023fe034 	movhi	r8,65408
 a000820:	423fffc4 	addi	r8,r8,-1
 a000824:	80e1c83a 	sub	r16,r16,r3
 a000828:	1210703a 	and	r8,r2,r8
 a00082c:	003f3806 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000830:	9007883a 	mov	r3,r18
 a000834:	0011883a 	mov	r8,zero
 a000838:	0005883a 	mov	r2,zero
 a00083c:	003f4c06 	br	a000570 <__alt_mem_flash+0xfdfff570>
 a000840:	498cb03a 	or	r6,r9,r6
 a000844:	300cc03a 	cmpne	r6,r6,zero
 a000848:	0007883a 	mov	r3,zero
 a00084c:	003f6806 	br	a0005f0 <__alt_mem_flash+0xfdfff5f0>
 a000850:	20009c1e 	bne	r4,zero,a000ac4 <__adddf3+0x630>
 a000854:	80800044 	addi	r2,r16,1
 a000858:	1141ffcc 	andi	r5,r2,2047
 a00085c:	01000044 	movi	r4,1
 a000860:	2140670e 	bge	r4,r5,a000a00 <__adddf3+0x56c>
 a000864:	0101ffc4 	movi	r4,2047
 a000868:	11007f26 	beq	r2,r4,a000a68 <__adddf3+0x5d4>
 a00086c:	898d883a 	add	r6,r17,r6
 a000870:	4247883a 	add	r3,r8,r9
 a000874:	3451803a 	cmpltu	r8,r6,r17
 a000878:	40d1883a 	add	r8,r8,r3
 a00087c:	402297fa 	slli	r17,r8,31
 a000880:	300cd07a 	srli	r6,r6,1
 a000884:	4010d07a 	srli	r8,r8,1
 a000888:	1021883a 	mov	r16,r2
 a00088c:	89a2b03a 	or	r17,r17,r6
 a000890:	003f1f06 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000894:	0081ffc4 	movi	r2,2047
 a000898:	80bf481e 	bne	r16,r2,a0005bc <__alt_mem_flash+0xfdfff5bc>
 a00089c:	003f1c06 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a0008a0:	843ff844 	addi	r16,r16,-31
 a0008a4:	01000804 	movi	r4,32
 a0008a8:	1406d83a 	srl	r3,r2,r16
 a0008ac:	41005026 	beq	r8,r4,a0009f0 <__adddf3+0x55c>
 a0008b0:	01001004 	movi	r4,64
 a0008b4:	2211c83a 	sub	r8,r4,r8
 a0008b8:	1204983a 	sll	r2,r2,r8
 a0008bc:	88a2b03a 	or	r17,r17,r2
 a0008c0:	8822c03a 	cmpne	r17,r17,zero
 a0008c4:	1c62b03a 	or	r17,r3,r17
 a0008c8:	0011883a 	mov	r8,zero
 a0008cc:	0021883a 	mov	r16,zero
 a0008d0:	003f7106 	br	a000698 <__alt_mem_flash+0xfdfff698>
 a0008d4:	193ff804 	addi	r4,r3,-32
 a0008d8:	00800804 	movi	r2,32
 a0008dc:	4908d83a 	srl	r4,r9,r4
 a0008e0:	18804526 	beq	r3,r2,a0009f8 <__adddf3+0x564>
 a0008e4:	00801004 	movi	r2,64
 a0008e8:	10c5c83a 	sub	r2,r2,r3
 a0008ec:	4886983a 	sll	r3,r9,r2
 a0008f0:	198cb03a 	or	r6,r3,r6
 a0008f4:	300cc03a 	cmpne	r6,r6,zero
 a0008f8:	218cb03a 	or	r6,r4,r6
 a0008fc:	0007883a 	mov	r3,zero
 a000900:	003f3b06 	br	a0005f0 <__alt_mem_flash+0xfdfff5f0>
 a000904:	80002a26 	beq	r16,zero,a0009b0 <__adddf3+0x51c>
 a000908:	0101ffc4 	movi	r4,2047
 a00090c:	11006826 	beq	r2,r4,a000ab0 <__adddf3+0x61c>
 a000910:	00c7c83a 	sub	r3,zero,r3
 a000914:	42002034 	orhi	r8,r8,128
 a000918:	01000e04 	movi	r4,56
 a00091c:	20c07c16 	blt	r4,r3,a000b10 <__adddf3+0x67c>
 a000920:	010007c4 	movi	r4,31
 a000924:	20c0da16 	blt	r4,r3,a000c90 <__adddf3+0x7fc>
 a000928:	01000804 	movi	r4,32
 a00092c:	20c9c83a 	sub	r4,r4,r3
 a000930:	4114983a 	sll	r10,r8,r4
 a000934:	88cad83a 	srl	r5,r17,r3
 a000938:	8908983a 	sll	r4,r17,r4
 a00093c:	40c6d83a 	srl	r3,r8,r3
 a000940:	5162b03a 	or	r17,r10,r5
 a000944:	2008c03a 	cmpne	r4,r4,zero
 a000948:	8922b03a 	or	r17,r17,r4
 a00094c:	3463c83a 	sub	r17,r6,r17
 a000950:	48c7c83a 	sub	r3,r9,r3
 a000954:	344d803a 	cmpltu	r6,r6,r17
 a000958:	1991c83a 	sub	r8,r3,r6
 a00095c:	1021883a 	mov	r16,r2
 a000960:	3825883a 	mov	r18,r7
 a000964:	003f2706 	br	a000604 <__alt_mem_flash+0xfdfff604>
 a000968:	24d0b03a 	or	r8,r4,r19
 a00096c:	40001b1e 	bne	r8,zero,a0009dc <__adddf3+0x548>
 a000970:	0005883a 	mov	r2,zero
 a000974:	0007883a 	mov	r3,zero
 a000978:	0021883a 	mov	r16,zero
 a00097c:	003f4d06 	br	a0006b4 <__alt_mem_flash+0xfdfff6b4>
 a000980:	008007c4 	movi	r2,31
 a000984:	11003c16 	blt	r2,r4,a000a78 <__adddf3+0x5e4>
 a000988:	00800804 	movi	r2,32
 a00098c:	1105c83a 	sub	r2,r2,r4
 a000990:	488e983a 	sll	r7,r9,r2
 a000994:	310ad83a 	srl	r5,r6,r4
 a000998:	3084983a 	sll	r2,r6,r2
 a00099c:	4912d83a 	srl	r9,r9,r4
 a0009a0:	394ab03a 	or	r5,r7,r5
 a0009a4:	1004c03a 	cmpne	r2,r2,zero
 a0009a8:	288ab03a 	or	r5,r5,r2
 a0009ac:	003f5306 	br	a0006fc <__alt_mem_flash+0xfdfff6fc>
 a0009b0:	4448b03a 	or	r4,r8,r17
 a0009b4:	20003e26 	beq	r4,zero,a000ab0 <__adddf3+0x61c>
 a0009b8:	00c6303a 	nor	r3,zero,r3
 a0009bc:	18003a1e 	bne	r3,zero,a000aa8 <__adddf3+0x614>
 a0009c0:	3463c83a 	sub	r17,r6,r17
 a0009c4:	4a07c83a 	sub	r3,r9,r8
 a0009c8:	344d803a 	cmpltu	r6,r6,r17
 a0009cc:	1991c83a 	sub	r8,r3,r6
 a0009d0:	1021883a 	mov	r16,r2
 a0009d4:	3825883a 	mov	r18,r7
 a0009d8:	003f0a06 	br	a000604 <__alt_mem_flash+0xfdfff604>
 a0009dc:	2023883a 	mov	r17,r4
 a0009e0:	003f0d06 	br	a000618 <__alt_mem_flash+0xfdfff618>
 a0009e4:	0081ffc4 	movi	r2,2047
 a0009e8:	80bf3f1e 	bne	r16,r2,a0006e8 <__alt_mem_flash+0xfdfff6e8>
 a0009ec:	003ec806 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a0009f0:	0005883a 	mov	r2,zero
 a0009f4:	003fb106 	br	a0008bc <__alt_mem_flash+0xfdfff8bc>
 a0009f8:	0007883a 	mov	r3,zero
 a0009fc:	003fbc06 	br	a0008f0 <__alt_mem_flash+0xfdfff8f0>
 a000a00:	4444b03a 	or	r2,r8,r17
 a000a04:	8000871e 	bne	r16,zero,a000c24 <__adddf3+0x790>
 a000a08:	1000ba26 	beq	r2,zero,a000cf4 <__adddf3+0x860>
 a000a0c:	4984b03a 	or	r2,r9,r6
 a000a10:	103ebf26 	beq	r2,zero,a000510 <__alt_mem_flash+0xfdfff510>
 a000a14:	8985883a 	add	r2,r17,r6
 a000a18:	4247883a 	add	r3,r8,r9
 a000a1c:	1451803a 	cmpltu	r8,r2,r17
 a000a20:	40d1883a 	add	r8,r8,r3
 a000a24:	40c0202c 	andhi	r3,r8,128
 a000a28:	1023883a 	mov	r17,r2
 a000a2c:	183f1a26 	beq	r3,zero,a000698 <__alt_mem_flash+0xfdfff698>
 a000a30:	00bfe034 	movhi	r2,65408
 a000a34:	10bfffc4 	addi	r2,r2,-1
 a000a38:	2021883a 	mov	r16,r4
 a000a3c:	4090703a 	and	r8,r8,r2
 a000a40:	003eb306 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000a44:	4444b03a 	or	r2,r8,r17
 a000a48:	8000291e 	bne	r16,zero,a000af0 <__adddf3+0x65c>
 a000a4c:	10004b1e 	bne	r2,zero,a000b7c <__adddf3+0x6e8>
 a000a50:	4990b03a 	or	r8,r9,r6
 a000a54:	40008b26 	beq	r8,zero,a000c84 <__adddf3+0x7f0>
 a000a58:	4811883a 	mov	r8,r9
 a000a5c:	3023883a 	mov	r17,r6
 a000a60:	3825883a 	mov	r18,r7
 a000a64:	003eaa06 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000a68:	1021883a 	mov	r16,r2
 a000a6c:	0011883a 	mov	r8,zero
 a000a70:	0005883a 	mov	r2,zero
 a000a74:	003f0f06 	br	a0006b4 <__alt_mem_flash+0xfdfff6b4>
 a000a78:	217ff804 	addi	r5,r4,-32
 a000a7c:	00800804 	movi	r2,32
 a000a80:	494ad83a 	srl	r5,r9,r5
 a000a84:	20807d26 	beq	r4,r2,a000c7c <__adddf3+0x7e8>
 a000a88:	00801004 	movi	r2,64
 a000a8c:	1109c83a 	sub	r4,r2,r4
 a000a90:	4912983a 	sll	r9,r9,r4
 a000a94:	498cb03a 	or	r6,r9,r6
 a000a98:	300cc03a 	cmpne	r6,r6,zero
 a000a9c:	298ab03a 	or	r5,r5,r6
 a000aa0:	0013883a 	mov	r9,zero
 a000aa4:	003f1506 	br	a0006fc <__alt_mem_flash+0xfdfff6fc>
 a000aa8:	0101ffc4 	movi	r4,2047
 a000aac:	113f9a1e 	bne	r2,r4,a000918 <__alt_mem_flash+0xfdfff918>
 a000ab0:	4811883a 	mov	r8,r9
 a000ab4:	3023883a 	mov	r17,r6
 a000ab8:	1021883a 	mov	r16,r2
 a000abc:	3825883a 	mov	r18,r7
 a000ac0:	003e9306 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000ac4:	8000161e 	bne	r16,zero,a000b20 <__adddf3+0x68c>
 a000ac8:	444ab03a 	or	r5,r8,r17
 a000acc:	28005126 	beq	r5,zero,a000c14 <__adddf3+0x780>
 a000ad0:	0108303a 	nor	r4,zero,r4
 a000ad4:	20004d1e 	bne	r4,zero,a000c0c <__adddf3+0x778>
 a000ad8:	89a3883a 	add	r17,r17,r6
 a000adc:	4253883a 	add	r9,r8,r9
 a000ae0:	898d803a 	cmpltu	r6,r17,r6
 a000ae4:	3251883a 	add	r8,r6,r9
 a000ae8:	1021883a 	mov	r16,r2
 a000aec:	003f0806 	br	a000710 <__alt_mem_flash+0xfdfff710>
 a000af0:	1000301e 	bne	r2,zero,a000bb4 <__adddf3+0x720>
 a000af4:	4984b03a 	or	r2,r9,r6
 a000af8:	10007126 	beq	r2,zero,a000cc0 <__adddf3+0x82c>
 a000afc:	4811883a 	mov	r8,r9
 a000b00:	3023883a 	mov	r17,r6
 a000b04:	3825883a 	mov	r18,r7
 a000b08:	0401ffc4 	movi	r16,2047
 a000b0c:	003e8006 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000b10:	4462b03a 	or	r17,r8,r17
 a000b14:	8822c03a 	cmpne	r17,r17,zero
 a000b18:	0007883a 	mov	r3,zero
 a000b1c:	003f8b06 	br	a00094c <__alt_mem_flash+0xfdfff94c>
 a000b20:	0141ffc4 	movi	r5,2047
 a000b24:	11403b26 	beq	r2,r5,a000c14 <__adddf3+0x780>
 a000b28:	0109c83a 	sub	r4,zero,r4
 a000b2c:	42002034 	orhi	r8,r8,128
 a000b30:	01400e04 	movi	r5,56
 a000b34:	29006716 	blt	r5,r4,a000cd4 <__adddf3+0x840>
 a000b38:	014007c4 	movi	r5,31
 a000b3c:	29007016 	blt	r5,r4,a000d00 <__adddf3+0x86c>
 a000b40:	01400804 	movi	r5,32
 a000b44:	290bc83a 	sub	r5,r5,r4
 a000b48:	4154983a 	sll	r10,r8,r5
 a000b4c:	890ed83a 	srl	r7,r17,r4
 a000b50:	894a983a 	sll	r5,r17,r5
 a000b54:	4108d83a 	srl	r4,r8,r4
 a000b58:	51e2b03a 	or	r17,r10,r7
 a000b5c:	280ac03a 	cmpne	r5,r5,zero
 a000b60:	8962b03a 	or	r17,r17,r5
 a000b64:	89a3883a 	add	r17,r17,r6
 a000b68:	2253883a 	add	r9,r4,r9
 a000b6c:	898d803a 	cmpltu	r6,r17,r6
 a000b70:	3251883a 	add	r8,r6,r9
 a000b74:	1021883a 	mov	r16,r2
 a000b78:	003ee506 	br	a000710 <__alt_mem_flash+0xfdfff710>
 a000b7c:	4984b03a 	or	r2,r9,r6
 a000b80:	103e6326 	beq	r2,zero,a000510 <__alt_mem_flash+0xfdfff510>
 a000b84:	8987c83a 	sub	r3,r17,r6
 a000b88:	88c9803a 	cmpltu	r4,r17,r3
 a000b8c:	4245c83a 	sub	r2,r8,r9
 a000b90:	1105c83a 	sub	r2,r2,r4
 a000b94:	1100202c 	andhi	r4,r2,128
 a000b98:	203ebb26 	beq	r4,zero,a000688 <__alt_mem_flash+0xfdfff688>
 a000b9c:	3463c83a 	sub	r17,r6,r17
 a000ba0:	4a07c83a 	sub	r3,r9,r8
 a000ba4:	344d803a 	cmpltu	r6,r6,r17
 a000ba8:	1991c83a 	sub	r8,r3,r6
 a000bac:	3825883a 	mov	r18,r7
 a000bb0:	003e5706 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000bb4:	4984b03a 	or	r2,r9,r6
 a000bb8:	10002e26 	beq	r2,zero,a000c74 <__adddf3+0x7e0>
 a000bbc:	4004d0fa 	srli	r2,r8,3
 a000bc0:	8822d0fa 	srli	r17,r17,3
 a000bc4:	4010977a 	slli	r8,r8,29
 a000bc8:	10c0022c 	andhi	r3,r2,8
 a000bcc:	4462b03a 	or	r17,r8,r17
 a000bd0:	18000826 	beq	r3,zero,a000bf4 <__adddf3+0x760>
 a000bd4:	4808d0fa 	srli	r4,r9,3
 a000bd8:	20c0022c 	andhi	r3,r4,8
 a000bdc:	1800051e 	bne	r3,zero,a000bf4 <__adddf3+0x760>
 a000be0:	300cd0fa 	srli	r6,r6,3
 a000be4:	4806977a 	slli	r3,r9,29
 a000be8:	2005883a 	mov	r2,r4
 a000bec:	3825883a 	mov	r18,r7
 a000bf0:	19a2b03a 	or	r17,r3,r6
 a000bf4:	8810d77a 	srli	r8,r17,29
 a000bf8:	100490fa 	slli	r2,r2,3
 a000bfc:	882290fa 	slli	r17,r17,3
 a000c00:	0401ffc4 	movi	r16,2047
 a000c04:	4090b03a 	or	r8,r8,r2
 a000c08:	003e4106 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000c0c:	0141ffc4 	movi	r5,2047
 a000c10:	117fc71e 	bne	r2,r5,a000b30 <__alt_mem_flash+0xfdfffb30>
 a000c14:	4811883a 	mov	r8,r9
 a000c18:	3023883a 	mov	r17,r6
 a000c1c:	1021883a 	mov	r16,r2
 a000c20:	003e3b06 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000c24:	10002f26 	beq	r2,zero,a000ce4 <__adddf3+0x850>
 a000c28:	4984b03a 	or	r2,r9,r6
 a000c2c:	10001126 	beq	r2,zero,a000c74 <__adddf3+0x7e0>
 a000c30:	4004d0fa 	srli	r2,r8,3
 a000c34:	8822d0fa 	srli	r17,r17,3
 a000c38:	4010977a 	slli	r8,r8,29
 a000c3c:	10c0022c 	andhi	r3,r2,8
 a000c40:	4462b03a 	or	r17,r8,r17
 a000c44:	183feb26 	beq	r3,zero,a000bf4 <__alt_mem_flash+0xfdfffbf4>
 a000c48:	4808d0fa 	srli	r4,r9,3
 a000c4c:	20c0022c 	andhi	r3,r4,8
 a000c50:	183fe81e 	bne	r3,zero,a000bf4 <__alt_mem_flash+0xfdfffbf4>
 a000c54:	300cd0fa 	srli	r6,r6,3
 a000c58:	4806977a 	slli	r3,r9,29
 a000c5c:	2005883a 	mov	r2,r4
 a000c60:	19a2b03a 	or	r17,r3,r6
 a000c64:	003fe306 	br	a000bf4 <__alt_mem_flash+0xfdfffbf4>
 a000c68:	0011883a 	mov	r8,zero
 a000c6c:	0005883a 	mov	r2,zero
 a000c70:	003e3f06 	br	a000570 <__alt_mem_flash+0xfdfff570>
 a000c74:	0401ffc4 	movi	r16,2047
 a000c78:	003e2506 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000c7c:	0013883a 	mov	r9,zero
 a000c80:	003f8406 	br	a000a94 <__alt_mem_flash+0xfdfffa94>
 a000c84:	0005883a 	mov	r2,zero
 a000c88:	0007883a 	mov	r3,zero
 a000c8c:	003e8906 	br	a0006b4 <__alt_mem_flash+0xfdfff6b4>
 a000c90:	197ff804 	addi	r5,r3,-32
 a000c94:	01000804 	movi	r4,32
 a000c98:	414ad83a 	srl	r5,r8,r5
 a000c9c:	19002426 	beq	r3,r4,a000d30 <__adddf3+0x89c>
 a000ca0:	01001004 	movi	r4,64
 a000ca4:	20c7c83a 	sub	r3,r4,r3
 a000ca8:	40c6983a 	sll	r3,r8,r3
 a000cac:	1c46b03a 	or	r3,r3,r17
 a000cb0:	1806c03a 	cmpne	r3,r3,zero
 a000cb4:	28e2b03a 	or	r17,r5,r3
 a000cb8:	0007883a 	mov	r3,zero
 a000cbc:	003f2306 	br	a00094c <__alt_mem_flash+0xfdfff94c>
 a000cc0:	0007883a 	mov	r3,zero
 a000cc4:	5811883a 	mov	r8,r11
 a000cc8:	00bfffc4 	movi	r2,-1
 a000ccc:	0401ffc4 	movi	r16,2047
 a000cd0:	003e7806 	br	a0006b4 <__alt_mem_flash+0xfdfff6b4>
 a000cd4:	4462b03a 	or	r17,r8,r17
 a000cd8:	8822c03a 	cmpne	r17,r17,zero
 a000cdc:	0009883a 	mov	r4,zero
 a000ce0:	003fa006 	br	a000b64 <__alt_mem_flash+0xfdfffb64>
 a000ce4:	4811883a 	mov	r8,r9
 a000ce8:	3023883a 	mov	r17,r6
 a000cec:	0401ffc4 	movi	r16,2047
 a000cf0:	003e0706 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000cf4:	4811883a 	mov	r8,r9
 a000cf8:	3023883a 	mov	r17,r6
 a000cfc:	003e0406 	br	a000510 <__alt_mem_flash+0xfdfff510>
 a000d00:	21fff804 	addi	r7,r4,-32
 a000d04:	01400804 	movi	r5,32
 a000d08:	41ced83a 	srl	r7,r8,r7
 a000d0c:	21400a26 	beq	r4,r5,a000d38 <__adddf3+0x8a4>
 a000d10:	01401004 	movi	r5,64
 a000d14:	2909c83a 	sub	r4,r5,r4
 a000d18:	4108983a 	sll	r4,r8,r4
 a000d1c:	2448b03a 	or	r4,r4,r17
 a000d20:	2008c03a 	cmpne	r4,r4,zero
 a000d24:	3922b03a 	or	r17,r7,r4
 a000d28:	0009883a 	mov	r4,zero
 a000d2c:	003f8d06 	br	a000b64 <__alt_mem_flash+0xfdfffb64>
 a000d30:	0007883a 	mov	r3,zero
 a000d34:	003fdd06 	br	a000cac <__alt_mem_flash+0xfdfffcac>
 a000d38:	0009883a 	mov	r4,zero
 a000d3c:	003ff706 	br	a000d1c <__alt_mem_flash+0xfdfffd1c>

0a000d40 <__muldf3>:
 a000d40:	deffee04 	addi	sp,sp,-72
 a000d44:	dd000c15 	stw	r20,48(sp)
 a000d48:	2828d53a 	srli	r20,r5,20
 a000d4c:	ddc00f15 	stw	r23,60(sp)
 a000d50:	282ed7fa 	srli	r23,r5,31
 a000d54:	dc000815 	stw	r16,32(sp)
 a000d58:	04000434 	movhi	r16,16
 a000d5c:	dcc00b15 	stw	r19,44(sp)
 a000d60:	843fffc4 	addi	r16,r16,-1
 a000d64:	dfc01115 	stw	ra,68(sp)
 a000d68:	df001015 	stw	fp,64(sp)
 a000d6c:	dd800e15 	stw	r22,56(sp)
 a000d70:	dd400d15 	stw	r21,52(sp)
 a000d74:	dc800a15 	stw	r18,40(sp)
 a000d78:	dc400915 	stw	r17,36(sp)
 a000d7c:	a501ffcc 	andi	r20,r20,2047
 a000d80:	2c20703a 	and	r16,r5,r16
 a000d84:	b827883a 	mov	r19,r23
 a000d88:	ba403fcc 	andi	r9,r23,255
 a000d8c:	a0006026 	beq	r20,zero,a000f10 <__muldf3+0x1d0>
 a000d90:	0081ffc4 	movi	r2,2047
 a000d94:	202d883a 	mov	r22,r4
 a000d98:	a0803626 	beq	r20,r2,a000e74 <__muldf3+0x134>
 a000d9c:	84000434 	orhi	r16,r16,16
 a000da0:	200ad77a 	srli	r5,r4,29
 a000da4:	800490fa 	slli	r2,r16,3
 a000da8:	202c90fa 	slli	r22,r4,3
 a000dac:	a53f0044 	addi	r20,r20,-1023
 a000db0:	28a0b03a 	or	r16,r5,r2
 a000db4:	002b883a 	mov	r21,zero
 a000db8:	000b883a 	mov	r5,zero
 a000dbc:	3804d53a 	srli	r2,r7,20
 a000dc0:	3838d7fa 	srli	fp,r7,31
 a000dc4:	04400434 	movhi	r17,16
 a000dc8:	8c7fffc4 	addi	r17,r17,-1
 a000dcc:	1081ffcc 	andi	r2,r2,2047
 a000dd0:	3025883a 	mov	r18,r6
 a000dd4:	3c62703a 	and	r17,r7,r17
 a000dd8:	e2803fcc 	andi	r10,fp,255
 a000ddc:	10006d26 	beq	r2,zero,a000f94 <__muldf3+0x254>
 a000de0:	00c1ffc4 	movi	r3,2047
 a000de4:	10c06526 	beq	r2,r3,a000f7c <__muldf3+0x23c>
 a000de8:	8c400434 	orhi	r17,r17,16
 a000dec:	300ed77a 	srli	r7,r6,29
 a000df0:	880690fa 	slli	r3,r17,3
 a000df4:	302490fa 	slli	r18,r6,3
 a000df8:	10bf0044 	addi	r2,r2,-1023
 a000dfc:	38e2b03a 	or	r17,r7,r3
 a000e00:	000f883a 	mov	r7,zero
 a000e04:	a087883a 	add	r3,r20,r2
 a000e08:	010003c4 	movi	r4,15
 a000e0c:	3d44b03a 	or	r2,r7,r21
 a000e10:	e5ccf03a 	xor	r6,fp,r23
 a000e14:	1a000044 	addi	r8,r3,1
 a000e18:	20809b36 	bltu	r4,r2,a001088 <__muldf3+0x348>
 a000e1c:	100490ba 	slli	r2,r2,2
 a000e20:	01028034 	movhi	r4,2560
 a000e24:	21038d04 	addi	r4,r4,3636
 a000e28:	1105883a 	add	r2,r2,r4
 a000e2c:	10800017 	ldw	r2,0(r2)
 a000e30:	1000683a 	jmp	r2
 a000e34:	0a001088 	cmpgei	r8,at,66
 a000e38:	0a000e94 	ori	r8,at,58
 a000e3c:	0a000e94 	ori	r8,at,58
 a000e40:	0a000e90 	cmplti	r8,at,58
 a000e44:	0a001064 	muli	r8,at,65
 a000e48:	0a001064 	muli	r8,at,65
 a000e4c:	0a00104c 	andi	r8,at,65
 a000e50:	0a000e90 	cmplti	r8,at,58
 a000e54:	0a001064 	muli	r8,at,65
 a000e58:	0a00104c 	andi	r8,at,65
 a000e5c:	0a001064 	muli	r8,at,65
 a000e60:	0a000e90 	cmplti	r8,at,58
 a000e64:	0a001074 	orhi	r8,at,65
 a000e68:	0a001074 	orhi	r8,at,65
 a000e6c:	0a001074 	orhi	r8,at,65
 a000e70:	0a0013d4 	ori	r8,at,79
 a000e74:	2404b03a 	or	r2,r4,r16
 a000e78:	1000711e 	bne	r2,zero,a001040 <__muldf3+0x300>
 a000e7c:	05400204 	movi	r21,8
 a000e80:	0021883a 	mov	r16,zero
 a000e84:	002d883a 	mov	r22,zero
 a000e88:	01400084 	movi	r5,2
 a000e8c:	003fcb06 	br	a000dbc <__alt_mem_flash+0xfdfffdbc>
 a000e90:	500d883a 	mov	r6,r10
 a000e94:	00800084 	movi	r2,2
 a000e98:	38805926 	beq	r7,r2,a001000 <__muldf3+0x2c0>
 a000e9c:	008000c4 	movi	r2,3
 a000ea0:	3881bb26 	beq	r7,r2,a001590 <__muldf3+0x850>
 a000ea4:	00800044 	movi	r2,1
 a000ea8:	3881961e 	bne	r7,r2,a001504 <__muldf3+0x7c4>
 a000eac:	3027883a 	mov	r19,r6
 a000eb0:	0005883a 	mov	r2,zero
 a000eb4:	0021883a 	mov	r16,zero
 a000eb8:	002d883a 	mov	r22,zero
 a000ebc:	1004953a 	slli	r2,r2,20
 a000ec0:	98c03fcc 	andi	r3,r19,255
 a000ec4:	04400434 	movhi	r17,16
 a000ec8:	8c7fffc4 	addi	r17,r17,-1
 a000ecc:	180697fa 	slli	r3,r3,31
 a000ed0:	8460703a 	and	r16,r16,r17
 a000ed4:	80a0b03a 	or	r16,r16,r2
 a000ed8:	80c6b03a 	or	r3,r16,r3
 a000edc:	b005883a 	mov	r2,r22
 a000ee0:	dfc01117 	ldw	ra,68(sp)
 a000ee4:	df001017 	ldw	fp,64(sp)
 a000ee8:	ddc00f17 	ldw	r23,60(sp)
 a000eec:	dd800e17 	ldw	r22,56(sp)
 a000ef0:	dd400d17 	ldw	r21,52(sp)
 a000ef4:	dd000c17 	ldw	r20,48(sp)
 a000ef8:	dcc00b17 	ldw	r19,44(sp)
 a000efc:	dc800a17 	ldw	r18,40(sp)
 a000f00:	dc400917 	ldw	r17,36(sp)
 a000f04:	dc000817 	ldw	r16,32(sp)
 a000f08:	dec01204 	addi	sp,sp,72
 a000f0c:	f800283a 	ret
 a000f10:	2404b03a 	or	r2,r4,r16
 a000f14:	202b883a 	mov	r21,r4
 a000f18:	10004426 	beq	r2,zero,a00102c <__muldf3+0x2ec>
 a000f1c:	80015126 	beq	r16,zero,a001464 <__muldf3+0x724>
 a000f20:	8009883a 	mov	r4,r16
 a000f24:	d9800715 	stw	r6,28(sp)
 a000f28:	d9c00215 	stw	r7,8(sp)
 a000f2c:	da400415 	stw	r9,16(sp)
 a000f30:	a0019400 	call	a001940 <__clzsi2>
 a000f34:	d9800717 	ldw	r6,28(sp)
 a000f38:	d9c00217 	ldw	r7,8(sp)
 a000f3c:	da400417 	ldw	r9,16(sp)
 a000f40:	113ffd44 	addi	r4,r2,-11
 a000f44:	00c00704 	movi	r3,28
 a000f48:	19014216 	blt	r3,r4,a001454 <__muldf3+0x714>
 a000f4c:	00c00744 	movi	r3,29
 a000f50:	15bffe04 	addi	r22,r2,-8
 a000f54:	1907c83a 	sub	r3,r3,r4
 a000f58:	85a0983a 	sll	r16,r16,r22
 a000f5c:	a8c6d83a 	srl	r3,r21,r3
 a000f60:	adac983a 	sll	r22,r21,r22
 a000f64:	1c20b03a 	or	r16,r3,r16
 a000f68:	1080fcc4 	addi	r2,r2,1011
 a000f6c:	00a9c83a 	sub	r20,zero,r2
 a000f70:	002b883a 	mov	r21,zero
 a000f74:	000b883a 	mov	r5,zero
 a000f78:	003f9006 	br	a000dbc <__alt_mem_flash+0xfdfffdbc>
 a000f7c:	3446b03a 	or	r3,r6,r17
 a000f80:	1800281e 	bne	r3,zero,a001024 <__muldf3+0x2e4>
 a000f84:	0023883a 	mov	r17,zero
 a000f88:	0025883a 	mov	r18,zero
 a000f8c:	01c00084 	movi	r7,2
 a000f90:	003f9c06 	br	a000e04 <__alt_mem_flash+0xfdfffe04>
 a000f94:	3446b03a 	or	r3,r6,r17
 a000f98:	18001e26 	beq	r3,zero,a001014 <__muldf3+0x2d4>
 a000f9c:	88012126 	beq	r17,zero,a001424 <__muldf3+0x6e4>
 a000fa0:	8809883a 	mov	r4,r17
 a000fa4:	d9400215 	stw	r5,8(sp)
 a000fa8:	d9800715 	stw	r6,28(sp)
 a000fac:	da400415 	stw	r9,16(sp)
 a000fb0:	da800315 	stw	r10,12(sp)
 a000fb4:	a0019400 	call	a001940 <__clzsi2>
 a000fb8:	d9400217 	ldw	r5,8(sp)
 a000fbc:	d9800717 	ldw	r6,28(sp)
 a000fc0:	da400417 	ldw	r9,16(sp)
 a000fc4:	da800317 	ldw	r10,12(sp)
 a000fc8:	113ffd44 	addi	r4,r2,-11
 a000fcc:	00c00704 	movi	r3,28
 a000fd0:	19011016 	blt	r3,r4,a001414 <__muldf3+0x6d4>
 a000fd4:	00c00744 	movi	r3,29
 a000fd8:	14bffe04 	addi	r18,r2,-8
 a000fdc:	1907c83a 	sub	r3,r3,r4
 a000fe0:	8ca2983a 	sll	r17,r17,r18
 a000fe4:	30c6d83a 	srl	r3,r6,r3
 a000fe8:	34a4983a 	sll	r18,r6,r18
 a000fec:	1c62b03a 	or	r17,r3,r17
 a000ff0:	1080fcc4 	addi	r2,r2,1011
 a000ff4:	0085c83a 	sub	r2,zero,r2
 a000ff8:	000f883a 	mov	r7,zero
 a000ffc:	003f8106 	br	a000e04 <__alt_mem_flash+0xfdfffe04>
 a001000:	3027883a 	mov	r19,r6
 a001004:	0081ffc4 	movi	r2,2047
 a001008:	0021883a 	mov	r16,zero
 a00100c:	002d883a 	mov	r22,zero
 a001010:	003faa06 	br	a000ebc <__alt_mem_flash+0xfdfffebc>
 a001014:	0023883a 	mov	r17,zero
 a001018:	0025883a 	mov	r18,zero
 a00101c:	01c00044 	movi	r7,1
 a001020:	003f7806 	br	a000e04 <__alt_mem_flash+0xfdfffe04>
 a001024:	01c000c4 	movi	r7,3
 a001028:	003f7606 	br	a000e04 <__alt_mem_flash+0xfdfffe04>
 a00102c:	05400104 	movi	r21,4
 a001030:	0021883a 	mov	r16,zero
 a001034:	002d883a 	mov	r22,zero
 a001038:	01400044 	movi	r5,1
 a00103c:	003f5f06 	br	a000dbc <__alt_mem_flash+0xfdfffdbc>
 a001040:	05400304 	movi	r21,12
 a001044:	014000c4 	movi	r5,3
 a001048:	003f5c06 	br	a000dbc <__alt_mem_flash+0xfdfffdbc>
 a00104c:	04000434 	movhi	r16,16
 a001050:	0027883a 	mov	r19,zero
 a001054:	843fffc4 	addi	r16,r16,-1
 a001058:	05bfffc4 	movi	r22,-1
 a00105c:	0081ffc4 	movi	r2,2047
 a001060:	003f9606 	br	a000ebc <__alt_mem_flash+0xfdfffebc>
 a001064:	8023883a 	mov	r17,r16
 a001068:	b025883a 	mov	r18,r22
 a00106c:	280f883a 	mov	r7,r5
 a001070:	003f8806 	br	a000e94 <__alt_mem_flash+0xfdfffe94>
 a001074:	8023883a 	mov	r17,r16
 a001078:	b025883a 	mov	r18,r22
 a00107c:	480d883a 	mov	r6,r9
 a001080:	280f883a 	mov	r7,r5
 a001084:	003f8306 	br	a000e94 <__alt_mem_flash+0xfdfffe94>
 a001088:	b026d43a 	srli	r19,r22,16
 a00108c:	902ed43a 	srli	r23,r18,16
 a001090:	b5bfffcc 	andi	r22,r22,65535
 a001094:	94bfffcc 	andi	r18,r18,65535
 a001098:	b00b883a 	mov	r5,r22
 a00109c:	9009883a 	mov	r4,r18
 a0010a0:	d8c00515 	stw	r3,20(sp)
 a0010a4:	d9800715 	stw	r6,28(sp)
 a0010a8:	da000615 	stw	r8,24(sp)
 a0010ac:	a0019a40 	call	a0019a4 <__mulsi3>
 a0010b0:	980b883a 	mov	r5,r19
 a0010b4:	9009883a 	mov	r4,r18
 a0010b8:	1029883a 	mov	r20,r2
 a0010bc:	a0019a40 	call	a0019a4 <__mulsi3>
 a0010c0:	b80b883a 	mov	r5,r23
 a0010c4:	9809883a 	mov	r4,r19
 a0010c8:	102b883a 	mov	r21,r2
 a0010cc:	a0019a40 	call	a0019a4 <__mulsi3>
 a0010d0:	b809883a 	mov	r4,r23
 a0010d4:	b00b883a 	mov	r5,r22
 a0010d8:	1039883a 	mov	fp,r2
 a0010dc:	a0019a40 	call	a0019a4 <__mulsi3>
 a0010e0:	a008d43a 	srli	r4,r20,16
 a0010e4:	1545883a 	add	r2,r2,r21
 a0010e8:	d8c00517 	ldw	r3,20(sp)
 a0010ec:	2085883a 	add	r2,r4,r2
 a0010f0:	d9800717 	ldw	r6,28(sp)
 a0010f4:	da000617 	ldw	r8,24(sp)
 a0010f8:	1540022e 	bgeu	r2,r21,a001104 <__muldf3+0x3c4>
 a0010fc:	01000074 	movhi	r4,1
 a001100:	e139883a 	add	fp,fp,r4
 a001104:	100e943a 	slli	r7,r2,16
 a001108:	1004d43a 	srli	r2,r2,16
 a00110c:	882ad43a 	srli	r21,r17,16
 a001110:	a53fffcc 	andi	r20,r20,65535
 a001114:	8c7fffcc 	andi	r17,r17,65535
 a001118:	3d29883a 	add	r20,r7,r20
 a00111c:	b00b883a 	mov	r5,r22
 a001120:	8809883a 	mov	r4,r17
 a001124:	d8c00515 	stw	r3,20(sp)
 a001128:	d9800715 	stw	r6,28(sp)
 a00112c:	da000615 	stw	r8,24(sp)
 a001130:	dd000115 	stw	r20,4(sp)
 a001134:	d8800015 	stw	r2,0(sp)
 a001138:	a0019a40 	call	a0019a4 <__mulsi3>
 a00113c:	980b883a 	mov	r5,r19
 a001140:	8809883a 	mov	r4,r17
 a001144:	d8800215 	stw	r2,8(sp)
 a001148:	a0019a40 	call	a0019a4 <__mulsi3>
 a00114c:	9809883a 	mov	r4,r19
 a001150:	a80b883a 	mov	r5,r21
 a001154:	1029883a 	mov	r20,r2
 a001158:	a0019a40 	call	a0019a4 <__mulsi3>
 a00115c:	b00b883a 	mov	r5,r22
 a001160:	a809883a 	mov	r4,r21
 a001164:	d8800415 	stw	r2,16(sp)
 a001168:	a0019a40 	call	a0019a4 <__mulsi3>
 a00116c:	d9c00217 	ldw	r7,8(sp)
 a001170:	1505883a 	add	r2,r2,r20
 a001174:	d8c00517 	ldw	r3,20(sp)
 a001178:	3826d43a 	srli	r19,r7,16
 a00117c:	d9800717 	ldw	r6,28(sp)
 a001180:	da000617 	ldw	r8,24(sp)
 a001184:	9885883a 	add	r2,r19,r2
 a001188:	da400417 	ldw	r9,16(sp)
 a00118c:	1500022e 	bgeu	r2,r20,a001198 <__muldf3+0x458>
 a001190:	01000074 	movhi	r4,1
 a001194:	4913883a 	add	r9,r9,r4
 a001198:	1028d43a 	srli	r20,r2,16
 a00119c:	1004943a 	slli	r2,r2,16
 a0011a0:	802cd43a 	srli	r22,r16,16
 a0011a4:	843fffcc 	andi	r16,r16,65535
 a0011a8:	3cffffcc 	andi	r19,r7,65535
 a0011ac:	9009883a 	mov	r4,r18
 a0011b0:	800b883a 	mov	r5,r16
 a0011b4:	a269883a 	add	r20,r20,r9
 a0011b8:	d8c00515 	stw	r3,20(sp)
 a0011bc:	d9800715 	stw	r6,28(sp)
 a0011c0:	da000615 	stw	r8,24(sp)
 a0011c4:	14e7883a 	add	r19,r2,r19
 a0011c8:	a0019a40 	call	a0019a4 <__mulsi3>
 a0011cc:	9009883a 	mov	r4,r18
 a0011d0:	b00b883a 	mov	r5,r22
 a0011d4:	d8800315 	stw	r2,12(sp)
 a0011d8:	a0019a40 	call	a0019a4 <__mulsi3>
 a0011dc:	b809883a 	mov	r4,r23
 a0011e0:	b00b883a 	mov	r5,r22
 a0011e4:	d8800215 	stw	r2,8(sp)
 a0011e8:	a0019a40 	call	a0019a4 <__mulsi3>
 a0011ec:	b80b883a 	mov	r5,r23
 a0011f0:	8009883a 	mov	r4,r16
 a0011f4:	d8800415 	stw	r2,16(sp)
 a0011f8:	a0019a40 	call	a0019a4 <__mulsi3>
 a0011fc:	da800317 	ldw	r10,12(sp)
 a001200:	d9c00217 	ldw	r7,8(sp)
 a001204:	d9000017 	ldw	r4,0(sp)
 a001208:	502ed43a 	srli	r23,r10,16
 a00120c:	11c5883a 	add	r2,r2,r7
 a001210:	24e5883a 	add	r18,r4,r19
 a001214:	b885883a 	add	r2,r23,r2
 a001218:	d8c00517 	ldw	r3,20(sp)
 a00121c:	d9800717 	ldw	r6,28(sp)
 a001220:	da000617 	ldw	r8,24(sp)
 a001224:	da400417 	ldw	r9,16(sp)
 a001228:	11c0022e 	bgeu	r2,r7,a001234 <__muldf3+0x4f4>
 a00122c:	01000074 	movhi	r4,1
 a001230:	4913883a 	add	r9,r9,r4
 a001234:	100ed43a 	srli	r7,r2,16
 a001238:	1004943a 	slli	r2,r2,16
 a00123c:	55ffffcc 	andi	r23,r10,65535
 a001240:	3a53883a 	add	r9,r7,r9
 a001244:	8809883a 	mov	r4,r17
 a001248:	800b883a 	mov	r5,r16
 a00124c:	d8c00515 	stw	r3,20(sp)
 a001250:	d9800715 	stw	r6,28(sp)
 a001254:	da000615 	stw	r8,24(sp)
 a001258:	da400415 	stw	r9,16(sp)
 a00125c:	15ef883a 	add	r23,r2,r23
 a001260:	a0019a40 	call	a0019a4 <__mulsi3>
 a001264:	8809883a 	mov	r4,r17
 a001268:	b00b883a 	mov	r5,r22
 a00126c:	d8800215 	stw	r2,8(sp)
 a001270:	a0019a40 	call	a0019a4 <__mulsi3>
 a001274:	b00b883a 	mov	r5,r22
 a001278:	a809883a 	mov	r4,r21
 a00127c:	d8800315 	stw	r2,12(sp)
 a001280:	a0019a40 	call	a0019a4 <__mulsi3>
 a001284:	8009883a 	mov	r4,r16
 a001288:	a80b883a 	mov	r5,r21
 a00128c:	1023883a 	mov	r17,r2
 a001290:	a0019a40 	call	a0019a4 <__mulsi3>
 a001294:	d9c00217 	ldw	r7,8(sp)
 a001298:	da800317 	ldw	r10,12(sp)
 a00129c:	d8c00517 	ldw	r3,20(sp)
 a0012a0:	3808d43a 	srli	r4,r7,16
 a0012a4:	1285883a 	add	r2,r2,r10
 a0012a8:	d9800717 	ldw	r6,28(sp)
 a0012ac:	2085883a 	add	r2,r4,r2
 a0012b0:	da000617 	ldw	r8,24(sp)
 a0012b4:	da400417 	ldw	r9,16(sp)
 a0012b8:	1280022e 	bgeu	r2,r10,a0012c4 <__muldf3+0x584>
 a0012bc:	01000074 	movhi	r4,1
 a0012c0:	8923883a 	add	r17,r17,r4
 a0012c4:	1008943a 	slli	r4,r2,16
 a0012c8:	39ffffcc 	andi	r7,r7,65535
 a0012cc:	e4b9883a 	add	fp,fp,r18
 a0012d0:	21cf883a 	add	r7,r4,r7
 a0012d4:	e4e7803a 	cmpltu	r19,fp,r19
 a0012d8:	3d0f883a 	add	r7,r7,r20
 a0012dc:	bf39883a 	add	fp,r23,fp
 a0012e0:	99c9883a 	add	r4,r19,r7
 a0012e4:	e5ef803a 	cmpltu	r23,fp,r23
 a0012e8:	490b883a 	add	r5,r9,r4
 a0012ec:	1004d43a 	srli	r2,r2,16
 a0012f0:	b965883a 	add	r18,r23,r5
 a0012f4:	24c9803a 	cmpltu	r4,r4,r19
 a0012f8:	3d29803a 	cmpltu	r20,r7,r20
 a0012fc:	a128b03a 	or	r20,r20,r4
 a001300:	95ef803a 	cmpltu	r23,r18,r23
 a001304:	2a53803a 	cmpltu	r9,r5,r9
 a001308:	a0a9883a 	add	r20,r20,r2
 a00130c:	4deeb03a 	or	r23,r9,r23
 a001310:	a5ef883a 	add	r23,r20,r23
 a001314:	bc63883a 	add	r17,r23,r17
 a001318:	e004927a 	slli	r2,fp,9
 a00131c:	d9000117 	ldw	r4,4(sp)
 a001320:	882e927a 	slli	r23,r17,9
 a001324:	9022d5fa 	srli	r17,r18,23
 a001328:	e038d5fa 	srli	fp,fp,23
 a00132c:	1104b03a 	or	r2,r2,r4
 a001330:	9024927a 	slli	r18,r18,9
 a001334:	1004c03a 	cmpne	r2,r2,zero
 a001338:	bc62b03a 	or	r17,r23,r17
 a00133c:	1738b03a 	or	fp,r2,fp
 a001340:	8880402c 	andhi	r2,r17,256
 a001344:	e4a4b03a 	or	r18,fp,r18
 a001348:	10000726 	beq	r2,zero,a001368 <__muldf3+0x628>
 a00134c:	9006d07a 	srli	r3,r18,1
 a001350:	880497fa 	slli	r2,r17,31
 a001354:	9480004c 	andi	r18,r18,1
 a001358:	8822d07a 	srli	r17,r17,1
 a00135c:	1ca4b03a 	or	r18,r3,r18
 a001360:	14a4b03a 	or	r18,r2,r18
 a001364:	4007883a 	mov	r3,r8
 a001368:	1880ffc4 	addi	r2,r3,1023
 a00136c:	0080460e 	bge	zero,r2,a001488 <__muldf3+0x748>
 a001370:	910001cc 	andi	r4,r18,7
 a001374:	20000726 	beq	r4,zero,a001394 <__muldf3+0x654>
 a001378:	910003cc 	andi	r4,r18,15
 a00137c:	01400104 	movi	r5,4
 a001380:	21400426 	beq	r4,r5,a001394 <__muldf3+0x654>
 a001384:	9149883a 	add	r4,r18,r5
 a001388:	24a5803a 	cmpltu	r18,r4,r18
 a00138c:	8ca3883a 	add	r17,r17,r18
 a001390:	2025883a 	mov	r18,r4
 a001394:	8900402c 	andhi	r4,r17,256
 a001398:	20000426 	beq	r4,zero,a0013ac <__muldf3+0x66c>
 a00139c:	18810004 	addi	r2,r3,1024
 a0013a0:	00ffc034 	movhi	r3,65280
 a0013a4:	18ffffc4 	addi	r3,r3,-1
 a0013a8:	88e2703a 	and	r17,r17,r3
 a0013ac:	00c1ff84 	movi	r3,2046
 a0013b0:	18bf1316 	blt	r3,r2,a001000 <__alt_mem_flash+0xfe000000>
 a0013b4:	882c977a 	slli	r22,r17,29
 a0013b8:	9024d0fa 	srli	r18,r18,3
 a0013bc:	8822927a 	slli	r17,r17,9
 a0013c0:	1081ffcc 	andi	r2,r2,2047
 a0013c4:	b4acb03a 	or	r22,r22,r18
 a0013c8:	8820d33a 	srli	r16,r17,12
 a0013cc:	3027883a 	mov	r19,r6
 a0013d0:	003eba06 	br	a000ebc <__alt_mem_flash+0xfdfffebc>
 a0013d4:	8080022c 	andhi	r2,r16,8
 a0013d8:	10000926 	beq	r2,zero,a001400 <__muldf3+0x6c0>
 a0013dc:	8880022c 	andhi	r2,r17,8
 a0013e0:	1000071e 	bne	r2,zero,a001400 <__muldf3+0x6c0>
 a0013e4:	00800434 	movhi	r2,16
 a0013e8:	8c000234 	orhi	r16,r17,8
 a0013ec:	10bfffc4 	addi	r2,r2,-1
 a0013f0:	e027883a 	mov	r19,fp
 a0013f4:	80a0703a 	and	r16,r16,r2
 a0013f8:	902d883a 	mov	r22,r18
 a0013fc:	003f1706 	br	a00105c <__alt_mem_flash+0xfe00005c>
 a001400:	00800434 	movhi	r2,16
 a001404:	84000234 	orhi	r16,r16,8
 a001408:	10bfffc4 	addi	r2,r2,-1
 a00140c:	80a0703a 	and	r16,r16,r2
 a001410:	003f1206 	br	a00105c <__alt_mem_flash+0xfe00005c>
 a001414:	147ff604 	addi	r17,r2,-40
 a001418:	3462983a 	sll	r17,r6,r17
 a00141c:	0025883a 	mov	r18,zero
 a001420:	003ef306 	br	a000ff0 <__alt_mem_flash+0xfdfffff0>
 a001424:	3009883a 	mov	r4,r6
 a001428:	d9400215 	stw	r5,8(sp)
 a00142c:	d9800715 	stw	r6,28(sp)
 a001430:	da400415 	stw	r9,16(sp)
 a001434:	da800315 	stw	r10,12(sp)
 a001438:	a0019400 	call	a001940 <__clzsi2>
 a00143c:	10800804 	addi	r2,r2,32
 a001440:	da800317 	ldw	r10,12(sp)
 a001444:	da400417 	ldw	r9,16(sp)
 a001448:	d9800717 	ldw	r6,28(sp)
 a00144c:	d9400217 	ldw	r5,8(sp)
 a001450:	003edd06 	br	a000fc8 <__alt_mem_flash+0xfdffffc8>
 a001454:	143ff604 	addi	r16,r2,-40
 a001458:	ac20983a 	sll	r16,r21,r16
 a00145c:	002d883a 	mov	r22,zero
 a001460:	003ec106 	br	a000f68 <__alt_mem_flash+0xfdffff68>
 a001464:	d9800715 	stw	r6,28(sp)
 a001468:	d9c00215 	stw	r7,8(sp)
 a00146c:	da400415 	stw	r9,16(sp)
 a001470:	a0019400 	call	a001940 <__clzsi2>
 a001474:	10800804 	addi	r2,r2,32
 a001478:	da400417 	ldw	r9,16(sp)
 a00147c:	d9c00217 	ldw	r7,8(sp)
 a001480:	d9800717 	ldw	r6,28(sp)
 a001484:	003eae06 	br	a000f40 <__alt_mem_flash+0xfdffff40>
 a001488:	00c00044 	movi	r3,1
 a00148c:	1887c83a 	sub	r3,r3,r2
 a001490:	01000e04 	movi	r4,56
 a001494:	20fe8516 	blt	r4,r3,a000eac <__alt_mem_flash+0xfdfffeac>
 a001498:	010007c4 	movi	r4,31
 a00149c:	20c01b16 	blt	r4,r3,a00150c <__muldf3+0x7cc>
 a0014a0:	00800804 	movi	r2,32
 a0014a4:	10c5c83a 	sub	r2,r2,r3
 a0014a8:	888a983a 	sll	r5,r17,r2
 a0014ac:	90c8d83a 	srl	r4,r18,r3
 a0014b0:	9084983a 	sll	r2,r18,r2
 a0014b4:	88e2d83a 	srl	r17,r17,r3
 a0014b8:	2906b03a 	or	r3,r5,r4
 a0014bc:	1004c03a 	cmpne	r2,r2,zero
 a0014c0:	1886b03a 	or	r3,r3,r2
 a0014c4:	188001cc 	andi	r2,r3,7
 a0014c8:	10000726 	beq	r2,zero,a0014e8 <__muldf3+0x7a8>
 a0014cc:	188003cc 	andi	r2,r3,15
 a0014d0:	01000104 	movi	r4,4
 a0014d4:	11000426 	beq	r2,r4,a0014e8 <__muldf3+0x7a8>
 a0014d8:	1805883a 	mov	r2,r3
 a0014dc:	10c00104 	addi	r3,r2,4
 a0014e0:	1885803a 	cmpltu	r2,r3,r2
 a0014e4:	88a3883a 	add	r17,r17,r2
 a0014e8:	8880202c 	andhi	r2,r17,128
 a0014ec:	10001c26 	beq	r2,zero,a001560 <__muldf3+0x820>
 a0014f0:	3027883a 	mov	r19,r6
 a0014f4:	00800044 	movi	r2,1
 a0014f8:	0021883a 	mov	r16,zero
 a0014fc:	002d883a 	mov	r22,zero
 a001500:	003e6e06 	br	a000ebc <__alt_mem_flash+0xfdfffebc>
 a001504:	4007883a 	mov	r3,r8
 a001508:	003f9706 	br	a001368 <__alt_mem_flash+0xfe000368>
 a00150c:	017ff844 	movi	r5,-31
 a001510:	2885c83a 	sub	r2,r5,r2
 a001514:	888ad83a 	srl	r5,r17,r2
 a001518:	00800804 	movi	r2,32
 a00151c:	18801a26 	beq	r3,r2,a001588 <__muldf3+0x848>
 a001520:	01001004 	movi	r4,64
 a001524:	20c7c83a 	sub	r3,r4,r3
 a001528:	88e2983a 	sll	r17,r17,r3
 a00152c:	8ca4b03a 	or	r18,r17,r18
 a001530:	9004c03a 	cmpne	r2,r18,zero
 a001534:	2884b03a 	or	r2,r5,r2
 a001538:	144001cc 	andi	r17,r2,7
 a00153c:	88000d1e 	bne	r17,zero,a001574 <__muldf3+0x834>
 a001540:	0021883a 	mov	r16,zero
 a001544:	102cd0fa 	srli	r22,r2,3
 a001548:	3027883a 	mov	r19,r6
 a00154c:	0005883a 	mov	r2,zero
 a001550:	b46cb03a 	or	r22,r22,r17
 a001554:	003e5906 	br	a000ebc <__alt_mem_flash+0xfdfffebc>
 a001558:	1007883a 	mov	r3,r2
 a00155c:	0023883a 	mov	r17,zero
 a001560:	8820927a 	slli	r16,r17,9
 a001564:	1805883a 	mov	r2,r3
 a001568:	8822977a 	slli	r17,r17,29
 a00156c:	8020d33a 	srli	r16,r16,12
 a001570:	003ff406 	br	a001544 <__alt_mem_flash+0xfe000544>
 a001574:	10c003cc 	andi	r3,r2,15
 a001578:	01000104 	movi	r4,4
 a00157c:	193ff626 	beq	r3,r4,a001558 <__alt_mem_flash+0xfe000558>
 a001580:	0023883a 	mov	r17,zero
 a001584:	003fd506 	br	a0014dc <__alt_mem_flash+0xfe0004dc>
 a001588:	0023883a 	mov	r17,zero
 a00158c:	003fe706 	br	a00152c <__alt_mem_flash+0xfe00052c>
 a001590:	00800434 	movhi	r2,16
 a001594:	8c000234 	orhi	r16,r17,8
 a001598:	10bfffc4 	addi	r2,r2,-1
 a00159c:	3027883a 	mov	r19,r6
 a0015a0:	80a0703a 	and	r16,r16,r2
 a0015a4:	902d883a 	mov	r22,r18
 a0015a8:	003eac06 	br	a00105c <__alt_mem_flash+0xfe00005c>

0a0015ac <__floatsidf>:
 a0015ac:	defffd04 	addi	sp,sp,-12
 a0015b0:	dfc00215 	stw	ra,8(sp)
 a0015b4:	dc400115 	stw	r17,4(sp)
 a0015b8:	dc000015 	stw	r16,0(sp)
 a0015bc:	20002b26 	beq	r4,zero,a00166c <__floatsidf+0xc0>
 a0015c0:	2023883a 	mov	r17,r4
 a0015c4:	2020d7fa 	srli	r16,r4,31
 a0015c8:	20002d16 	blt	r4,zero,a001680 <__floatsidf+0xd4>
 a0015cc:	8809883a 	mov	r4,r17
 a0015d0:	a0019400 	call	a001940 <__clzsi2>
 a0015d4:	01410784 	movi	r5,1054
 a0015d8:	288bc83a 	sub	r5,r5,r2
 a0015dc:	01010cc4 	movi	r4,1075
 a0015e0:	2149c83a 	sub	r4,r4,r5
 a0015e4:	00c007c4 	movi	r3,31
 a0015e8:	1900160e 	bge	r3,r4,a001644 <__floatsidf+0x98>
 a0015ec:	00c104c4 	movi	r3,1043
 a0015f0:	1947c83a 	sub	r3,r3,r5
 a0015f4:	88c6983a 	sll	r3,r17,r3
 a0015f8:	00800434 	movhi	r2,16
 a0015fc:	10bfffc4 	addi	r2,r2,-1
 a001600:	1886703a 	and	r3,r3,r2
 a001604:	2941ffcc 	andi	r5,r5,2047
 a001608:	800d883a 	mov	r6,r16
 a00160c:	0005883a 	mov	r2,zero
 a001610:	280a953a 	slli	r5,r5,20
 a001614:	31803fcc 	andi	r6,r6,255
 a001618:	01000434 	movhi	r4,16
 a00161c:	300c97fa 	slli	r6,r6,31
 a001620:	213fffc4 	addi	r4,r4,-1
 a001624:	1906703a 	and	r3,r3,r4
 a001628:	1946b03a 	or	r3,r3,r5
 a00162c:	1986b03a 	or	r3,r3,r6
 a001630:	dfc00217 	ldw	ra,8(sp)
 a001634:	dc400117 	ldw	r17,4(sp)
 a001638:	dc000017 	ldw	r16,0(sp)
 a00163c:	dec00304 	addi	sp,sp,12
 a001640:	f800283a 	ret
 a001644:	00c002c4 	movi	r3,11
 a001648:	1887c83a 	sub	r3,r3,r2
 a00164c:	88c6d83a 	srl	r3,r17,r3
 a001650:	8904983a 	sll	r2,r17,r4
 a001654:	01000434 	movhi	r4,16
 a001658:	213fffc4 	addi	r4,r4,-1
 a00165c:	2941ffcc 	andi	r5,r5,2047
 a001660:	1906703a 	and	r3,r3,r4
 a001664:	800d883a 	mov	r6,r16
 a001668:	003fe906 	br	a001610 <__alt_mem_flash+0xfe000610>
 a00166c:	000d883a 	mov	r6,zero
 a001670:	000b883a 	mov	r5,zero
 a001674:	0007883a 	mov	r3,zero
 a001678:	0005883a 	mov	r2,zero
 a00167c:	003fe406 	br	a001610 <__alt_mem_flash+0xfe000610>
 a001680:	0123c83a 	sub	r17,zero,r4
 a001684:	003fd106 	br	a0015cc <__alt_mem_flash+0xfe0005cc>

0a001688 <__extendsfdf2>:
 a001688:	200ad5fa 	srli	r5,r4,23
 a00168c:	defffd04 	addi	sp,sp,-12
 a001690:	dc400115 	stw	r17,4(sp)
 a001694:	29403fcc 	andi	r5,r5,255
 a001698:	29800044 	addi	r6,r5,1
 a00169c:	04402034 	movhi	r17,128
 a0016a0:	dc000015 	stw	r16,0(sp)
 a0016a4:	8c7fffc4 	addi	r17,r17,-1
 a0016a8:	dfc00215 	stw	ra,8(sp)
 a0016ac:	31803fcc 	andi	r6,r6,255
 a0016b0:	00800044 	movi	r2,1
 a0016b4:	8922703a 	and	r17,r17,r4
 a0016b8:	2020d7fa 	srli	r16,r4,31
 a0016bc:	1180110e 	bge	r2,r6,a001704 <__extendsfdf2+0x7c>
 a0016c0:	880cd0fa 	srli	r6,r17,3
 a0016c4:	8822977a 	slli	r17,r17,29
 a0016c8:	2940e004 	addi	r5,r5,896
 a0016cc:	2941ffcc 	andi	r5,r5,2047
 a0016d0:	2804953a 	slli	r2,r5,20
 a0016d4:	01400434 	movhi	r5,16
 a0016d8:	800697fa 	slli	r3,r16,31
 a0016dc:	297fffc4 	addi	r5,r5,-1
 a0016e0:	314a703a 	and	r5,r6,r5
 a0016e4:	288ab03a 	or	r5,r5,r2
 a0016e8:	28c6b03a 	or	r3,r5,r3
 a0016ec:	8805883a 	mov	r2,r17
 a0016f0:	dfc00217 	ldw	ra,8(sp)
 a0016f4:	dc400117 	ldw	r17,4(sp)
 a0016f8:	dc000017 	ldw	r16,0(sp)
 a0016fc:	dec00304 	addi	sp,sp,12
 a001700:	f800283a 	ret
 a001704:	2800111e 	bne	r5,zero,a00174c <__extendsfdf2+0xc4>
 a001708:	88001c26 	beq	r17,zero,a00177c <__extendsfdf2+0xf4>
 a00170c:	8809883a 	mov	r4,r17
 a001710:	a0019400 	call	a001940 <__clzsi2>
 a001714:	00c00284 	movi	r3,10
 a001718:	18801b16 	blt	r3,r2,a001788 <__extendsfdf2+0x100>
 a00171c:	018002c4 	movi	r6,11
 a001720:	308dc83a 	sub	r6,r6,r2
 a001724:	11000544 	addi	r4,r2,21
 a001728:	8986d83a 	srl	r3,r17,r6
 a00172c:	8922983a 	sll	r17,r17,r4
 a001730:	0180e244 	movi	r6,905
 a001734:	01400434 	movhi	r5,16
 a001738:	3085c83a 	sub	r2,r6,r2
 a00173c:	297fffc4 	addi	r5,r5,-1
 a001740:	194c703a 	and	r6,r3,r5
 a001744:	1141ffcc 	andi	r5,r2,2047
 a001748:	003fe006 	br	a0016cc <__alt_mem_flash+0xfe0006cc>
 a00174c:	88000826 	beq	r17,zero,a001770 <__extendsfdf2+0xe8>
 a001750:	880cd0fa 	srli	r6,r17,3
 a001754:	00800434 	movhi	r2,16
 a001758:	10bfffc4 	addi	r2,r2,-1
 a00175c:	31800234 	orhi	r6,r6,8
 a001760:	8822977a 	slli	r17,r17,29
 a001764:	308c703a 	and	r6,r6,r2
 a001768:	0141ffc4 	movi	r5,2047
 a00176c:	003fd706 	br	a0016cc <__alt_mem_flash+0xfe0006cc>
 a001770:	0141ffc4 	movi	r5,2047
 a001774:	000d883a 	mov	r6,zero
 a001778:	003fd406 	br	a0016cc <__alt_mem_flash+0xfe0006cc>
 a00177c:	000b883a 	mov	r5,zero
 a001780:	000d883a 	mov	r6,zero
 a001784:	003fd106 	br	a0016cc <__alt_mem_flash+0xfe0006cc>
 a001788:	11bffd44 	addi	r6,r2,-11
 a00178c:	8986983a 	sll	r3,r17,r6
 a001790:	0023883a 	mov	r17,zero
 a001794:	003fe606 	br	a001730 <__alt_mem_flash+0xfe000730>

0a001798 <__truncdfsf2>:
 a001798:	2810d53a 	srli	r8,r5,20
 a00179c:	01c00434 	movhi	r7,16
 a0017a0:	39ffffc4 	addi	r7,r7,-1
 a0017a4:	29ce703a 	and	r7,r5,r7
 a0017a8:	4201ffcc 	andi	r8,r8,2047
 a0017ac:	380e90fa 	slli	r7,r7,3
 a0017b0:	200cd77a 	srli	r6,r4,29
 a0017b4:	42400044 	addi	r9,r8,1
 a0017b8:	4a41ffcc 	andi	r9,r9,2047
 a0017bc:	00c00044 	movi	r3,1
 a0017c0:	280ad7fa 	srli	r5,r5,31
 a0017c4:	31ceb03a 	or	r7,r6,r7
 a0017c8:	200490fa 	slli	r2,r4,3
 a0017cc:	1a40230e 	bge	r3,r9,a00185c <__truncdfsf2+0xc4>
 a0017d0:	40ff2004 	addi	r3,r8,-896
 a0017d4:	01803f84 	movi	r6,254
 a0017d8:	30c01516 	blt	r6,r3,a001830 <__truncdfsf2+0x98>
 a0017dc:	00c0380e 	bge	zero,r3,a0018c0 <__truncdfsf2+0x128>
 a0017e0:	200c91ba 	slli	r6,r4,6
 a0017e4:	380e90fa 	slli	r7,r7,3
 a0017e8:	1004d77a 	srli	r2,r2,29
 a0017ec:	300cc03a 	cmpne	r6,r6,zero
 a0017f0:	31ccb03a 	or	r6,r6,r7
 a0017f4:	308cb03a 	or	r6,r6,r2
 a0017f8:	308001cc 	andi	r2,r6,7
 a0017fc:	10000426 	beq	r2,zero,a001810 <__truncdfsf2+0x78>
 a001800:	308003cc 	andi	r2,r6,15
 a001804:	01000104 	movi	r4,4
 a001808:	11000126 	beq	r2,r4,a001810 <__truncdfsf2+0x78>
 a00180c:	31800104 	addi	r6,r6,4
 a001810:	3081002c 	andhi	r2,r6,1024
 a001814:	10001626 	beq	r2,zero,a001870 <__truncdfsf2+0xd8>
 a001818:	18c00044 	addi	r3,r3,1
 a00181c:	00803fc4 	movi	r2,255
 a001820:	18800326 	beq	r3,r2,a001830 <__truncdfsf2+0x98>
 a001824:	300c91ba 	slli	r6,r6,6
 a001828:	300cd27a 	srli	r6,r6,9
 a00182c:	00000206 	br	a001838 <__truncdfsf2+0xa0>
 a001830:	00ffffc4 	movi	r3,-1
 a001834:	000d883a 	mov	r6,zero
 a001838:	18c03fcc 	andi	r3,r3,255
 a00183c:	180895fa 	slli	r4,r3,23
 a001840:	00c02034 	movhi	r3,128
 a001844:	280a97fa 	slli	r5,r5,31
 a001848:	18ffffc4 	addi	r3,r3,-1
 a00184c:	30c6703a 	and	r3,r6,r3
 a001850:	1906b03a 	or	r3,r3,r4
 a001854:	1944b03a 	or	r2,r3,r5
 a001858:	f800283a 	ret
 a00185c:	40000b1e 	bne	r8,zero,a00188c <__truncdfsf2+0xf4>
 a001860:	388cb03a 	or	r6,r7,r2
 a001864:	0007883a 	mov	r3,zero
 a001868:	30000426 	beq	r6,zero,a00187c <__truncdfsf2+0xe4>
 a00186c:	01800144 	movi	r6,5
 a001870:	00803fc4 	movi	r2,255
 a001874:	300cd0fa 	srli	r6,r6,3
 a001878:	18800a26 	beq	r3,r2,a0018a4 <__truncdfsf2+0x10c>
 a00187c:	00802034 	movhi	r2,128
 a001880:	10bfffc4 	addi	r2,r2,-1
 a001884:	308c703a 	and	r6,r6,r2
 a001888:	003feb06 	br	a001838 <__alt_mem_flash+0xfe000838>
 a00188c:	3888b03a 	or	r4,r7,r2
 a001890:	203fe726 	beq	r4,zero,a001830 <__alt_mem_flash+0xfe000830>
 a001894:	380c90fa 	slli	r6,r7,3
 a001898:	00c03fc4 	movi	r3,255
 a00189c:	31808034 	orhi	r6,r6,512
 a0018a0:	003fd506 	br	a0017f8 <__alt_mem_flash+0xfe0007f8>
 a0018a4:	303fe226 	beq	r6,zero,a001830 <__alt_mem_flash+0xfe000830>
 a0018a8:	00802034 	movhi	r2,128
 a0018ac:	31801034 	orhi	r6,r6,64
 a0018b0:	10bfffc4 	addi	r2,r2,-1
 a0018b4:	00ffffc4 	movi	r3,-1
 a0018b8:	308c703a 	and	r6,r6,r2
 a0018bc:	003fde06 	br	a001838 <__alt_mem_flash+0xfe000838>
 a0018c0:	013ffa44 	movi	r4,-23
 a0018c4:	19000e16 	blt	r3,r4,a001900 <__truncdfsf2+0x168>
 a0018c8:	01000784 	movi	r4,30
 a0018cc:	20c9c83a 	sub	r4,r4,r3
 a0018d0:	018007c4 	movi	r6,31
 a0018d4:	39c02034 	orhi	r7,r7,128
 a0018d8:	31000b16 	blt	r6,r4,a001908 <__truncdfsf2+0x170>
 a0018dc:	423f2084 	addi	r8,r8,-894
 a0018e0:	120c983a 	sll	r6,r2,r8
 a0018e4:	3a0e983a 	sll	r7,r7,r8
 a0018e8:	1104d83a 	srl	r2,r2,r4
 a0018ec:	300cc03a 	cmpne	r6,r6,zero
 a0018f0:	31ceb03a 	or	r7,r6,r7
 a0018f4:	388cb03a 	or	r6,r7,r2
 a0018f8:	0007883a 	mov	r3,zero
 a0018fc:	003fbe06 	br	a0017f8 <__alt_mem_flash+0xfe0007f8>
 a001900:	0007883a 	mov	r3,zero
 a001904:	003fd906 	br	a00186c <__alt_mem_flash+0xfe00086c>
 a001908:	01bfff84 	movi	r6,-2
 a00190c:	30cdc83a 	sub	r6,r6,r3
 a001910:	00c00804 	movi	r3,32
 a001914:	398cd83a 	srl	r6,r7,r6
 a001918:	20c00726 	beq	r4,r3,a001938 <__truncdfsf2+0x1a0>
 a00191c:	423f2884 	addi	r8,r8,-862
 a001920:	3a0e983a 	sll	r7,r7,r8
 a001924:	3884b03a 	or	r2,r7,r2
 a001928:	1004c03a 	cmpne	r2,r2,zero
 a00192c:	118cb03a 	or	r6,r2,r6
 a001930:	0007883a 	mov	r3,zero
 a001934:	003fb006 	br	a0017f8 <__alt_mem_flash+0xfe0007f8>
 a001938:	000f883a 	mov	r7,zero
 a00193c:	003ff906 	br	a001924 <__alt_mem_flash+0xfe000924>

0a001940 <__clzsi2>:
 a001940:	00bfffd4 	movui	r2,65535
 a001944:	11000536 	bltu	r2,r4,a00195c <__clzsi2+0x1c>
 a001948:	00803fc4 	movi	r2,255
 a00194c:	11000f36 	bltu	r2,r4,a00198c <__clzsi2+0x4c>
 a001950:	00800804 	movi	r2,32
 a001954:	0007883a 	mov	r3,zero
 a001958:	00000506 	br	a001970 <__clzsi2+0x30>
 a00195c:	00804034 	movhi	r2,256
 a001960:	10bfffc4 	addi	r2,r2,-1
 a001964:	11000c2e 	bgeu	r2,r4,a001998 <__clzsi2+0x58>
 a001968:	00800204 	movi	r2,8
 a00196c:	00c00604 	movi	r3,24
 a001970:	20c8d83a 	srl	r4,r4,r3
 a001974:	00c28074 	movhi	r3,2561
 a001978:	18c6ba04 	addi	r3,r3,6888
 a00197c:	1909883a 	add	r4,r3,r4
 a001980:	20c00003 	ldbu	r3,0(r4)
 a001984:	10c5c83a 	sub	r2,r2,r3
 a001988:	f800283a 	ret
 a00198c:	00800604 	movi	r2,24
 a001990:	00c00204 	movi	r3,8
 a001994:	003ff606 	br	a001970 <__alt_mem_flash+0xfe000970>
 a001998:	00800404 	movi	r2,16
 a00199c:	1007883a 	mov	r3,r2
 a0019a0:	003ff306 	br	a001970 <__alt_mem_flash+0xfe000970>

0a0019a4 <__mulsi3>:
 a0019a4:	0005883a 	mov	r2,zero
 a0019a8:	20000726 	beq	r4,zero,a0019c8 <__mulsi3+0x24>
 a0019ac:	20c0004c 	andi	r3,r4,1
 a0019b0:	2008d07a 	srli	r4,r4,1
 a0019b4:	18000126 	beq	r3,zero,a0019bc <__mulsi3+0x18>
 a0019b8:	1145883a 	add	r2,r2,r5
 a0019bc:	294b883a 	add	r5,r5,r5
 a0019c0:	203ffa1e 	bne	r4,zero,a0019ac <__alt_mem_flash+0xfe0009ac>
 a0019c4:	f800283a 	ret
 a0019c8:	f800283a 	ret

0a0019cc <_fprintf_r>:
 a0019cc:	defffe04 	addi	sp,sp,-8
 a0019d0:	2809883a 	mov	r4,r5
 a0019d4:	300b883a 	mov	r5,r6
 a0019d8:	dfc00015 	stw	ra,0(sp)
 a0019dc:	d9c00115 	stw	r7,4(sp)
 a0019e0:	d9800104 	addi	r6,sp,4
 a0019e4:	a003cf40 	call	a003cf4 <__vfprintf_internal>
 a0019e8:	dfc00017 	ldw	ra,0(sp)
 a0019ec:	dec00204 	addi	sp,sp,8
 a0019f0:	f800283a 	ret

0a0019f4 <fprintf>:
 a0019f4:	defffd04 	addi	sp,sp,-12
 a0019f8:	dfc00015 	stw	ra,0(sp)
 a0019fc:	d9800115 	stw	r6,4(sp)
 a001a00:	d9c00215 	stw	r7,8(sp)
 a001a04:	d9800104 	addi	r6,sp,4
 a001a08:	a003cf40 	call	a003cf4 <__vfprintf_internal>
 a001a0c:	dfc00017 	ldw	ra,0(sp)
 a001a10:	dec00304 	addi	sp,sp,12
 a001a14:	f800283a 	ret

0a001a18 <___vfprintf_internal_r>:
 a001a18:	deffb804 	addi	sp,sp,-288
 a001a1c:	dfc04715 	stw	ra,284(sp)
 a001a20:	ddc04515 	stw	r23,276(sp)
 a001a24:	dd404315 	stw	r21,268(sp)
 a001a28:	d9002d15 	stw	r4,180(sp)
 a001a2c:	282f883a 	mov	r23,r5
 a001a30:	302b883a 	mov	r21,r6
 a001a34:	d9c02e15 	stw	r7,184(sp)
 a001a38:	df004615 	stw	fp,280(sp)
 a001a3c:	dd804415 	stw	r22,272(sp)
 a001a40:	dd004215 	stw	r20,264(sp)
 a001a44:	dcc04115 	stw	r19,260(sp)
 a001a48:	dc804015 	stw	r18,256(sp)
 a001a4c:	dc403f15 	stw	r17,252(sp)
 a001a50:	dc003e15 	stw	r16,248(sp)
 a001a54:	a0064900 	call	a006490 <_localeconv_r>
 a001a58:	10800017 	ldw	r2,0(r2)
 a001a5c:	1009883a 	mov	r4,r2
 a001a60:	d8803415 	stw	r2,208(sp)
 a001a64:	a0085740 	call	a008574 <strlen>
 a001a68:	d8803715 	stw	r2,220(sp)
 a001a6c:	d8802d17 	ldw	r2,180(sp)
 a001a70:	10000226 	beq	r2,zero,a001a7c <___vfprintf_internal_r+0x64>
 a001a74:	10800e17 	ldw	r2,56(r2)
 a001a78:	1000fb26 	beq	r2,zero,a001e68 <___vfprintf_internal_r+0x450>
 a001a7c:	b880030b 	ldhu	r2,12(r23)
 a001a80:	10c8000c 	andi	r3,r2,8192
 a001a84:	1800061e 	bne	r3,zero,a001aa0 <___vfprintf_internal_r+0x88>
 a001a88:	b9001917 	ldw	r4,100(r23)
 a001a8c:	00f7ffc4 	movi	r3,-8193
 a001a90:	10880014 	ori	r2,r2,8192
 a001a94:	20c6703a 	and	r3,r4,r3
 a001a98:	b880030d 	sth	r2,12(r23)
 a001a9c:	b8c01915 	stw	r3,100(r23)
 a001aa0:	10c0020c 	andi	r3,r2,8
 a001aa4:	1800c326 	beq	r3,zero,a001db4 <___vfprintf_internal_r+0x39c>
 a001aa8:	b8c00417 	ldw	r3,16(r23)
 a001aac:	1800c126 	beq	r3,zero,a001db4 <___vfprintf_internal_r+0x39c>
 a001ab0:	1080068c 	andi	r2,r2,26
 a001ab4:	00c00284 	movi	r3,10
 a001ab8:	10c0c626 	beq	r2,r3,a001dd4 <___vfprintf_internal_r+0x3bc>
 a001abc:	d8c00404 	addi	r3,sp,16
 a001ac0:	05028074 	movhi	r20,2561
 a001ac4:	d9001e04 	addi	r4,sp,120
 a001ac8:	a5070b84 	addi	r20,r20,7214
 a001acc:	d8c01e15 	stw	r3,120(sp)
 a001ad0:	d8002015 	stw	zero,128(sp)
 a001ad4:	d8001f15 	stw	zero,124(sp)
 a001ad8:	d8003315 	stw	zero,204(sp)
 a001adc:	d8003615 	stw	zero,216(sp)
 a001ae0:	d8003815 	stw	zero,224(sp)
 a001ae4:	1811883a 	mov	r8,r3
 a001ae8:	d8003915 	stw	zero,228(sp)
 a001aec:	d8003a15 	stw	zero,232(sp)
 a001af0:	d8002f15 	stw	zero,188(sp)
 a001af4:	d9002815 	stw	r4,160(sp)
 a001af8:	a8800007 	ldb	r2,0(r21)
 a001afc:	10028b26 	beq	r2,zero,a00252c <___vfprintf_internal_r+0xb14>
 a001b00:	00c00944 	movi	r3,37
 a001b04:	a823883a 	mov	r17,r21
 a001b08:	10c0021e 	bne	r2,r3,a001b14 <___vfprintf_internal_r+0xfc>
 a001b0c:	00001406 	br	a001b60 <___vfprintf_internal_r+0x148>
 a001b10:	10c00326 	beq	r2,r3,a001b20 <___vfprintf_internal_r+0x108>
 a001b14:	8c400044 	addi	r17,r17,1
 a001b18:	88800007 	ldb	r2,0(r17)
 a001b1c:	103ffc1e 	bne	r2,zero,a001b10 <__alt_mem_flash+0xfe000b10>
 a001b20:	8d61c83a 	sub	r16,r17,r21
 a001b24:	80000e26 	beq	r16,zero,a001b60 <___vfprintf_internal_r+0x148>
 a001b28:	d8c02017 	ldw	r3,128(sp)
 a001b2c:	d8801f17 	ldw	r2,124(sp)
 a001b30:	45400015 	stw	r21,0(r8)
 a001b34:	1c07883a 	add	r3,r3,r16
 a001b38:	10800044 	addi	r2,r2,1
 a001b3c:	d8c02015 	stw	r3,128(sp)
 a001b40:	44000115 	stw	r16,4(r8)
 a001b44:	d8801f15 	stw	r2,124(sp)
 a001b48:	00c001c4 	movi	r3,7
 a001b4c:	1880a916 	blt	r3,r2,a001df4 <___vfprintf_internal_r+0x3dc>
 a001b50:	42000204 	addi	r8,r8,8
 a001b54:	d9402f17 	ldw	r5,188(sp)
 a001b58:	2c0b883a 	add	r5,r5,r16
 a001b5c:	d9402f15 	stw	r5,188(sp)
 a001b60:	88800007 	ldb	r2,0(r17)
 a001b64:	1000aa26 	beq	r2,zero,a001e10 <___vfprintf_internal_r+0x3f8>
 a001b68:	8d400044 	addi	r21,r17,1
 a001b6c:	8c400047 	ldb	r17,1(r17)
 a001b70:	0021883a 	mov	r16,zero
 a001b74:	00bfffc4 	movi	r2,-1
 a001b78:	0025883a 	mov	r18,zero
 a001b7c:	dc002905 	stb	r16,164(sp)
 a001b80:	d8002785 	stb	zero,158(sp)
 a001b84:	d8002b05 	stb	zero,172(sp)
 a001b88:	d8802a15 	stw	r2,168(sp)
 a001b8c:	d8003115 	stw	zero,196(sp)
 a001b90:	04c01604 	movi	r19,88
 a001b94:	05800244 	movi	r22,9
 a001b98:	9021883a 	mov	r16,r18
 a001b9c:	4039883a 	mov	fp,r8
 a001ba0:	ad400044 	addi	r21,r21,1
 a001ba4:	88bff804 	addi	r2,r17,-32
 a001ba8:	98833236 	bltu	r19,r2,a002874 <___vfprintf_internal_r+0xe5c>
 a001bac:	100490ba 	slli	r2,r2,2
 a001bb0:	00c28034 	movhi	r3,2560
 a001bb4:	18c6f104 	addi	r3,r3,7108
 a001bb8:	10c5883a 	add	r2,r2,r3
 a001bbc:	10800017 	ldw	r2,0(r2)
 a001bc0:	1000683a 	jmp	r2
 a001bc4:	0a00276c 	andhi	r8,at,157
 a001bc8:	0a002874 	orhi	r8,at,161
 a001bcc:	0a002874 	orhi	r8,at,161
 a001bd0:	0a00278c 	andi	r8,at,158
 a001bd4:	0a002874 	orhi	r8,at,161
 a001bd8:	0a002874 	orhi	r8,at,161
 a001bdc:	0a002874 	orhi	r8,at,161
 a001be0:	0a002874 	orhi	r8,at,161
 a001be4:	0a002874 	orhi	r8,at,161
 a001be8:	0a002874 	orhi	r8,at,161
 a001bec:	0a001e74 	orhi	r8,at,121
 a001bf0:	0a00267c 	xorhi	r8,at,153
 a001bf4:	0a002874 	orhi	r8,at,161
 a001bf8:	0a001d38 	rdprs	r8,at,116
 a001bfc:	0a001e98 	cmpnei	r8,at,122
 a001c00:	0a002874 	orhi	r8,at,161
 a001c04:	0a001ee8 	cmpgeui	r8,at,123
 a001c08:	0a001ef4 	orhi	r8,at,123
 a001c0c:	0a001ef4 	orhi	r8,at,123
 a001c10:	0a001ef4 	orhi	r8,at,123
 a001c14:	0a001ef4 	orhi	r8,at,123
 a001c18:	0a001ef4 	orhi	r8,at,123
 a001c1c:	0a001ef4 	orhi	r8,at,123
 a001c20:	0a001ef4 	orhi	r8,at,123
 a001c24:	0a001ef4 	orhi	r8,at,123
 a001c28:	0a001ef4 	orhi	r8,at,123
 a001c2c:	0a002874 	orhi	r8,at,161
 a001c30:	0a002874 	orhi	r8,at,161
 a001c34:	0a002874 	orhi	r8,at,161
 a001c38:	0a002874 	orhi	r8,at,161
 a001c3c:	0a002874 	orhi	r8,at,161
 a001c40:	0a002874 	orhi	r8,at,161
 a001c44:	0a002874 	orhi	r8,at,161
 a001c48:	0a002874 	orhi	r8,at,161
 a001c4c:	0a002874 	orhi	r8,at,161
 a001c50:	0a002874 	orhi	r8,at,161
 a001c54:	0a001f30 	cmpltui	r8,at,124
 a001c58:	0a001ff8 	rdprs	r8,at,127
 a001c5c:	0a002874 	orhi	r8,at,161
 a001c60:	0a001ff8 	rdprs	r8,at,127
 a001c64:	0a002874 	orhi	r8,at,161
 a001c68:	0a002874 	orhi	r8,at,161
 a001c6c:	0a002874 	orhi	r8,at,161
 a001c70:	0a002874 	orhi	r8,at,161
 a001c74:	0a0020a4 	muli	r8,at,130
 a001c78:	0a002874 	orhi	r8,at,161
 a001c7c:	0a002874 	orhi	r8,at,161
 a001c80:	0a0020b0 	cmpltui	r8,at,130
 a001c84:	0a002874 	orhi	r8,at,161
 a001c88:	0a002874 	orhi	r8,at,161
 a001c8c:	0a002874 	orhi	r8,at,161
 a001c90:	0a002874 	orhi	r8,at,161
 a001c94:	0a002874 	orhi	r8,at,161
 a001c98:	0a002534 	orhi	r8,at,148
 a001c9c:	0a002874 	orhi	r8,at,161
 a001ca0:	0a002874 	orhi	r8,at,161
 a001ca4:	0a0025a0 	cmpeqi	r8,at,150
 a001ca8:	0a002874 	orhi	r8,at,161
 a001cac:	0a002874 	orhi	r8,at,161
 a001cb0:	0a002874 	orhi	r8,at,161
 a001cb4:	0a002874 	orhi	r8,at,161
 a001cb8:	0a002874 	orhi	r8,at,161
 a001cbc:	0a002874 	orhi	r8,at,161
 a001cc0:	0a002874 	orhi	r8,at,161
 a001cc4:	0a002874 	orhi	r8,at,161
 a001cc8:	0a002874 	orhi	r8,at,161
 a001ccc:	0a002874 	orhi	r8,at,161
 a001cd0:	0a002818 	cmpnei	r8,at,160
 a001cd4:	0a002798 	cmpnei	r8,at,158
 a001cd8:	0a001ff8 	rdprs	r8,at,127
 a001cdc:	0a001ff8 	rdprs	r8,at,127
 a001ce0:	0a001ff8 	rdprs	r8,at,127
 a001ce4:	0a0027b8 	rdprs	r8,at,158
 a001ce8:	0a002798 	cmpnei	r8,at,158
 a001cec:	0a002874 	orhi	r8,at,161
 a001cf0:	0a002874 	orhi	r8,at,161
 a001cf4:	0a0027c4 	addi	r8,at,159
 a001cf8:	0a002874 	orhi	r8,at,161
 a001cfc:	0a0027d8 	cmpnei	r8,at,159
 a001d00:	0a00265c 	xori	r8,at,153
 a001d04:	0a001d44 	addi	r8,at,117
 a001d08:	0a002694 	ori	r8,at,154
 a001d0c:	0a002874 	orhi	r8,at,161
 a001d10:	0a0026a0 	cmpeqi	r8,at,154
 a001d14:	0a002874 	orhi	r8,at,161
 a001d18:	0a002704 	addi	r8,at,156
 a001d1c:	0a002874 	orhi	r8,at,161
 a001d20:	0a002874 	orhi	r8,at,161
 a001d24:	0a002724 	muli	r8,at,156
 a001d28:	d8c03117 	ldw	r3,196(sp)
 a001d2c:	d8802e15 	stw	r2,184(sp)
 a001d30:	00c7c83a 	sub	r3,zero,r3
 a001d34:	d8c03115 	stw	r3,196(sp)
 a001d38:	84000114 	ori	r16,r16,4
 a001d3c:	ac400007 	ldb	r17,0(r21)
 a001d40:	003f9706 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a001d44:	00800c04 	movi	r2,48
 a001d48:	d8802705 	stb	r2,156(sp)
 a001d4c:	00801e04 	movi	r2,120
 a001d50:	d8802745 	stb	r2,157(sp)
 a001d54:	d9002a17 	ldw	r4,168(sp)
 a001d58:	d8802e17 	ldw	r2,184(sp)
 a001d5c:	d8002785 	stb	zero,158(sp)
 a001d60:	e011883a 	mov	r8,fp
 a001d64:	10c00104 	addi	r3,r2,4
 a001d68:	14c00017 	ldw	r19,0(r2)
 a001d6c:	002d883a 	mov	r22,zero
 a001d70:	80800094 	ori	r2,r16,2
 a001d74:	2002ca16 	blt	r4,zero,a0028a0 <___vfprintf_internal_r+0xe88>
 a001d78:	00bfdfc4 	movi	r2,-129
 a001d7c:	80a4703a 	and	r18,r16,r2
 a001d80:	d8c02e15 	stw	r3,184(sp)
 a001d84:	94800094 	ori	r18,r18,2
 a001d88:	9802b41e 	bne	r19,zero,a00285c <___vfprintf_internal_r+0xe44>
 a001d8c:	01428074 	movhi	r5,2561
 a001d90:	29470404 	addi	r5,r5,7184
 a001d94:	d9403915 	stw	r5,228(sp)
 a001d98:	04401e04 	movi	r17,120
 a001d9c:	d8802a17 	ldw	r2,168(sp)
 a001da0:	0039883a 	mov	fp,zero
 a001da4:	1001fa26 	beq	r2,zero,a002590 <___vfprintf_internal_r+0xb78>
 a001da8:	0027883a 	mov	r19,zero
 a001dac:	002d883a 	mov	r22,zero
 a001db0:	00021906 	br	a002618 <___vfprintf_internal_r+0xc00>
 a001db4:	d9002d17 	ldw	r4,180(sp)
 a001db8:	b80b883a 	mov	r5,r23
 a001dbc:	a003dcc0 	call	a003dcc <__swsetup_r>
 a001dc0:	1005dc1e 	bne	r2,zero,a003534 <___vfprintf_internal_r+0x1b1c>
 a001dc4:	b880030b 	ldhu	r2,12(r23)
 a001dc8:	00c00284 	movi	r3,10
 a001dcc:	1080068c 	andi	r2,r2,26
 a001dd0:	10ff3a1e 	bne	r2,r3,a001abc <__alt_mem_flash+0xfe000abc>
 a001dd4:	b880038f 	ldh	r2,14(r23)
 a001dd8:	103f3816 	blt	r2,zero,a001abc <__alt_mem_flash+0xfe000abc>
 a001ddc:	d9c02e17 	ldw	r7,184(sp)
 a001de0:	d9002d17 	ldw	r4,180(sp)
 a001de4:	a80d883a 	mov	r6,r21
 a001de8:	b80b883a 	mov	r5,r23
 a001dec:	a003d100 	call	a003d10 <__sbprintf>
 a001df0:	00001106 	br	a001e38 <___vfprintf_internal_r+0x420>
 a001df4:	d9002d17 	ldw	r4,180(sp)
 a001df8:	d9801e04 	addi	r6,sp,120
 a001dfc:	b80b883a 	mov	r5,r23
 a001e00:	a0087080 	call	a008708 <__sprint_r>
 a001e04:	1000081e 	bne	r2,zero,a001e28 <___vfprintf_internal_r+0x410>
 a001e08:	da000404 	addi	r8,sp,16
 a001e0c:	003f5106 	br	a001b54 <__alt_mem_flash+0xfe000b54>
 a001e10:	d8802017 	ldw	r2,128(sp)
 a001e14:	10000426 	beq	r2,zero,a001e28 <___vfprintf_internal_r+0x410>
 a001e18:	d9002d17 	ldw	r4,180(sp)
 a001e1c:	d9801e04 	addi	r6,sp,120
 a001e20:	b80b883a 	mov	r5,r23
 a001e24:	a0087080 	call	a008708 <__sprint_r>
 a001e28:	b880030b 	ldhu	r2,12(r23)
 a001e2c:	1080100c 	andi	r2,r2,64
 a001e30:	1005c01e 	bne	r2,zero,a003534 <___vfprintf_internal_r+0x1b1c>
 a001e34:	d8802f17 	ldw	r2,188(sp)
 a001e38:	dfc04717 	ldw	ra,284(sp)
 a001e3c:	df004617 	ldw	fp,280(sp)
 a001e40:	ddc04517 	ldw	r23,276(sp)
 a001e44:	dd804417 	ldw	r22,272(sp)
 a001e48:	dd404317 	ldw	r21,268(sp)
 a001e4c:	dd004217 	ldw	r20,264(sp)
 a001e50:	dcc04117 	ldw	r19,260(sp)
 a001e54:	dc804017 	ldw	r18,256(sp)
 a001e58:	dc403f17 	ldw	r17,252(sp)
 a001e5c:	dc003e17 	ldw	r16,248(sp)
 a001e60:	dec04804 	addi	sp,sp,288
 a001e64:	f800283a 	ret
 a001e68:	d9002d17 	ldw	r4,180(sp)
 a001e6c:	a005dd80 	call	a005dd8 <__sinit>
 a001e70:	003f0206 	br	a001a7c <__alt_mem_flash+0xfe000a7c>
 a001e74:	d9002e17 	ldw	r4,184(sp)
 a001e78:	d9402e17 	ldw	r5,184(sp)
 a001e7c:	21000017 	ldw	r4,0(r4)
 a001e80:	28800104 	addi	r2,r5,4
 a001e84:	d9003115 	stw	r4,196(sp)
 a001e88:	203fa716 	blt	r4,zero,a001d28 <__alt_mem_flash+0xfe000d28>
 a001e8c:	d8802e15 	stw	r2,184(sp)
 a001e90:	ac400007 	ldb	r17,0(r21)
 a001e94:	003f4206 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a001e98:	ac400007 	ldb	r17,0(r21)
 a001e9c:	01000a84 	movi	r4,42
 a001ea0:	a8c00044 	addi	r3,r21,1
 a001ea4:	89075826 	beq	r17,r4,a003c08 <___vfprintf_internal_r+0x21f0>
 a001ea8:	8cbff404 	addi	r18,r17,-48
 a001eac:	b486ae36 	bltu	r22,r18,a003968 <___vfprintf_internal_r+0x1f50>
 a001eb0:	0009883a 	mov	r4,zero
 a001eb4:	1823883a 	mov	r17,r3
 a001eb8:	01400284 	movi	r5,10
 a001ebc:	a0019a40 	call	a0019a4 <__mulsi3>
 a001ec0:	88c00007 	ldb	r3,0(r17)
 a001ec4:	1489883a 	add	r4,r2,r18
 a001ec8:	8d400044 	addi	r21,r17,1
 a001ecc:	1cbff404 	addi	r18,r3,-48
 a001ed0:	a823883a 	mov	r17,r21
 a001ed4:	b4bff82e 	bgeu	r22,r18,a001eb8 <__alt_mem_flash+0xfe000eb8>
 a001ed8:	1823883a 	mov	r17,r3
 a001edc:	2005f616 	blt	r4,zero,a0036b8 <___vfprintf_internal_r+0x1ca0>
 a001ee0:	d9002a15 	stw	r4,168(sp)
 a001ee4:	003f2f06 	br	a001ba4 <__alt_mem_flash+0xfe000ba4>
 a001ee8:	84002014 	ori	r16,r16,128
 a001eec:	ac400007 	ldb	r17,0(r21)
 a001ef0:	003f2b06 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a001ef4:	8cbff404 	addi	r18,r17,-48
 a001ef8:	d8003115 	stw	zero,196(sp)
 a001efc:	0009883a 	mov	r4,zero
 a001f00:	a823883a 	mov	r17,r21
 a001f04:	01400284 	movi	r5,10
 a001f08:	a0019a40 	call	a0019a4 <__mulsi3>
 a001f0c:	88c00007 	ldb	r3,0(r17)
 a001f10:	9089883a 	add	r4,r18,r2
 a001f14:	ad400044 	addi	r21,r21,1
 a001f18:	1cbff404 	addi	r18,r3,-48
 a001f1c:	a823883a 	mov	r17,r21
 a001f20:	b4bff82e 	bgeu	r22,r18,a001f04 <__alt_mem_flash+0xfe000f04>
 a001f24:	1823883a 	mov	r17,r3
 a001f28:	d9003115 	stw	r4,196(sp)
 a001f2c:	003f1d06 	br	a001ba4 <__alt_mem_flash+0xfe000ba4>
 a001f30:	8025883a 	mov	r18,r16
 a001f34:	dc002903 	ldbu	r16,164(sp)
 a001f38:	e011883a 	mov	r8,fp
 a001f3c:	84003fcc 	andi	r16,r16,255
 a001f40:	8007531e 	bne	r16,zero,a003c90 <___vfprintf_internal_r+0x2278>
 a001f44:	94800414 	ori	r18,r18,16
 a001f48:	9080080c 	andi	r2,r18,32
 a001f4c:	1003a326 	beq	r2,zero,a002ddc <___vfprintf_internal_r+0x13c4>
 a001f50:	d9002e17 	ldw	r4,184(sp)
 a001f54:	20800117 	ldw	r2,4(r4)
 a001f58:	24c00017 	ldw	r19,0(r4)
 a001f5c:	21000204 	addi	r4,r4,8
 a001f60:	d9002e15 	stw	r4,184(sp)
 a001f64:	102d883a 	mov	r22,r2
 a001f68:	10047316 	blt	r2,zero,a003138 <___vfprintf_internal_r+0x1720>
 a001f6c:	d9002a17 	ldw	r4,168(sp)
 a001f70:	df002783 	ldbu	fp,158(sp)
 a001f74:	2003e416 	blt	r4,zero,a002f08 <___vfprintf_internal_r+0x14f0>
 a001f78:	00ffdfc4 	movi	r3,-129
 a001f7c:	9d84b03a 	or	r2,r19,r22
 a001f80:	90e4703a 	and	r18,r18,r3
 a001f84:	10018026 	beq	r2,zero,a002588 <___vfprintf_internal_r+0xb70>
 a001f88:	b003ab26 	beq	r22,zero,a002e38 <___vfprintf_internal_r+0x1420>
 a001f8c:	dc402915 	stw	r17,164(sp)
 a001f90:	dc001e04 	addi	r16,sp,120
 a001f94:	b023883a 	mov	r17,r22
 a001f98:	402d883a 	mov	r22,r8
 a001f9c:	9809883a 	mov	r4,r19
 a001fa0:	880b883a 	mov	r5,r17
 a001fa4:	01800284 	movi	r6,10
 a001fa8:	000f883a 	mov	r7,zero
 a001fac:	a00b7d40 	call	a00b7d4 <__umoddi3>
 a001fb0:	10800c04 	addi	r2,r2,48
 a001fb4:	843fffc4 	addi	r16,r16,-1
 a001fb8:	9809883a 	mov	r4,r19
 a001fbc:	880b883a 	mov	r5,r17
 a001fc0:	80800005 	stb	r2,0(r16)
 a001fc4:	01800284 	movi	r6,10
 a001fc8:	000f883a 	mov	r7,zero
 a001fcc:	a00b1d80 	call	a00b1d8 <__udivdi3>
 a001fd0:	1027883a 	mov	r19,r2
 a001fd4:	10c4b03a 	or	r2,r2,r3
 a001fd8:	1823883a 	mov	r17,r3
 a001fdc:	103fef1e 	bne	r2,zero,a001f9c <__alt_mem_flash+0xfe000f9c>
 a001fe0:	d8c02817 	ldw	r3,160(sp)
 a001fe4:	dc402917 	ldw	r17,164(sp)
 a001fe8:	b011883a 	mov	r8,r22
 a001fec:	1c07c83a 	sub	r3,r3,r16
 a001ff0:	d8c02b15 	stw	r3,172(sp)
 a001ff4:	00005f06 	br	a002174 <___vfprintf_internal_r+0x75c>
 a001ff8:	8025883a 	mov	r18,r16
 a001ffc:	dc002903 	ldbu	r16,164(sp)
 a002000:	e011883a 	mov	r8,fp
 a002004:	84003fcc 	andi	r16,r16,255
 a002008:	80071e1e 	bne	r16,zero,a003c84 <___vfprintf_internal_r+0x226c>
 a00200c:	9080020c 	andi	r2,r18,8
 a002010:	1004af26 	beq	r2,zero,a0032d0 <___vfprintf_internal_r+0x18b8>
 a002014:	d9002e17 	ldw	r4,184(sp)
 a002018:	d9402e17 	ldw	r5,184(sp)
 a00201c:	d8802e17 	ldw	r2,184(sp)
 a002020:	21000017 	ldw	r4,0(r4)
 a002024:	29400117 	ldw	r5,4(r5)
 a002028:	10800204 	addi	r2,r2,8
 a00202c:	d9003615 	stw	r4,216(sp)
 a002030:	d9403815 	stw	r5,224(sp)
 a002034:	d8802e15 	stw	r2,184(sp)
 a002038:	d9003617 	ldw	r4,216(sp)
 a00203c:	d9403817 	ldw	r5,224(sp)
 a002040:	da003d15 	stw	r8,244(sp)
 a002044:	04000044 	movi	r16,1
 a002048:	a0082940 	call	a008294 <__fpclassifyd>
 a00204c:	da003d17 	ldw	r8,244(sp)
 a002050:	1404441e 	bne	r2,r16,a003164 <___vfprintf_internal_r+0x174c>
 a002054:	d9003617 	ldw	r4,216(sp)
 a002058:	d9403817 	ldw	r5,224(sp)
 a00205c:	000d883a 	mov	r6,zero
 a002060:	000f883a 	mov	r7,zero
 a002064:	a00ca800 	call	a00ca80 <__ledf2>
 a002068:	da003d17 	ldw	r8,244(sp)
 a00206c:	1005e316 	blt	r2,zero,a0037fc <___vfprintf_internal_r+0x1de4>
 a002070:	df002783 	ldbu	fp,158(sp)
 a002074:	008011c4 	movi	r2,71
 a002078:	1445580e 	bge	r2,r17,a0035dc <___vfprintf_internal_r+0x1bc4>
 a00207c:	04028074 	movhi	r16,2561
 a002080:	8406fc04 	addi	r16,r16,7152
 a002084:	00c000c4 	movi	r3,3
 a002088:	00bfdfc4 	movi	r2,-129
 a00208c:	d8c02915 	stw	r3,164(sp)
 a002090:	90a4703a 	and	r18,r18,r2
 a002094:	d8c02b15 	stw	r3,172(sp)
 a002098:	d8002a15 	stw	zero,168(sp)
 a00209c:	d8003215 	stw	zero,200(sp)
 a0020a0:	00003a06 	br	a00218c <___vfprintf_internal_r+0x774>
 a0020a4:	84000214 	ori	r16,r16,8
 a0020a8:	ac400007 	ldb	r17,0(r21)
 a0020ac:	003ebc06 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a0020b0:	8025883a 	mov	r18,r16
 a0020b4:	dc002903 	ldbu	r16,164(sp)
 a0020b8:	e011883a 	mov	r8,fp
 a0020bc:	84003fcc 	andi	r16,r16,255
 a0020c0:	8007001e 	bne	r16,zero,a003cc4 <___vfprintf_internal_r+0x22ac>
 a0020c4:	94800414 	ori	r18,r18,16
 a0020c8:	9080080c 	andi	r2,r18,32
 a0020cc:	1002fa26 	beq	r2,zero,a002cb8 <___vfprintf_internal_r+0x12a0>
 a0020d0:	d9002e17 	ldw	r4,184(sp)
 a0020d4:	d9402a17 	ldw	r5,168(sp)
 a0020d8:	d8002785 	stb	zero,158(sp)
 a0020dc:	20800204 	addi	r2,r4,8
 a0020e0:	24c00017 	ldw	r19,0(r4)
 a0020e4:	25800117 	ldw	r22,4(r4)
 a0020e8:	2804b116 	blt	r5,zero,a0033b0 <___vfprintf_internal_r+0x1998>
 a0020ec:	013fdfc4 	movi	r4,-129
 a0020f0:	9d86b03a 	or	r3,r19,r22
 a0020f4:	d8802e15 	stw	r2,184(sp)
 a0020f8:	9124703a 	and	r18,r18,r4
 a0020fc:	1802fb1e 	bne	r3,zero,a002cec <___vfprintf_internal_r+0x12d4>
 a002100:	d8c02a17 	ldw	r3,168(sp)
 a002104:	0039883a 	mov	fp,zero
 a002108:	1805e526 	beq	r3,zero,a0038a0 <___vfprintf_internal_r+0x1e88>
 a00210c:	0027883a 	mov	r19,zero
 a002110:	002d883a 	mov	r22,zero
 a002114:	dc001e04 	addi	r16,sp,120
 a002118:	9806d0fa 	srli	r3,r19,3
 a00211c:	b008977a 	slli	r4,r22,29
 a002120:	b02cd0fa 	srli	r22,r22,3
 a002124:	9cc001cc 	andi	r19,r19,7
 a002128:	98800c04 	addi	r2,r19,48
 a00212c:	843fffc4 	addi	r16,r16,-1
 a002130:	20e6b03a 	or	r19,r4,r3
 a002134:	80800005 	stb	r2,0(r16)
 a002138:	9d86b03a 	or	r3,r19,r22
 a00213c:	183ff61e 	bne	r3,zero,a002118 <__alt_mem_flash+0xfe001118>
 a002140:	90c0004c 	andi	r3,r18,1
 a002144:	18014126 	beq	r3,zero,a00264c <___vfprintf_internal_r+0xc34>
 a002148:	10803fcc 	andi	r2,r2,255
 a00214c:	1080201c 	xori	r2,r2,128
 a002150:	10bfe004 	addi	r2,r2,-128
 a002154:	00c00c04 	movi	r3,48
 a002158:	10c13c26 	beq	r2,r3,a00264c <___vfprintf_internal_r+0xc34>
 a00215c:	80ffffc5 	stb	r3,-1(r16)
 a002160:	d8c02817 	ldw	r3,160(sp)
 a002164:	80bfffc4 	addi	r2,r16,-1
 a002168:	1021883a 	mov	r16,r2
 a00216c:	1887c83a 	sub	r3,r3,r2
 a002170:	d8c02b15 	stw	r3,172(sp)
 a002174:	d8802b17 	ldw	r2,172(sp)
 a002178:	d9002a17 	ldw	r4,168(sp)
 a00217c:	1100010e 	bge	r2,r4,a002184 <___vfprintf_internal_r+0x76c>
 a002180:	2005883a 	mov	r2,r4
 a002184:	d8802915 	stw	r2,164(sp)
 a002188:	d8003215 	stw	zero,200(sp)
 a00218c:	e7003fcc 	andi	fp,fp,255
 a002190:	e700201c 	xori	fp,fp,128
 a002194:	e73fe004 	addi	fp,fp,-128
 a002198:	e0000326 	beq	fp,zero,a0021a8 <___vfprintf_internal_r+0x790>
 a00219c:	d8c02917 	ldw	r3,164(sp)
 a0021a0:	18c00044 	addi	r3,r3,1
 a0021a4:	d8c02915 	stw	r3,164(sp)
 a0021a8:	90c0008c 	andi	r3,r18,2
 a0021ac:	d8c02c15 	stw	r3,176(sp)
 a0021b0:	18000326 	beq	r3,zero,a0021c0 <___vfprintf_internal_r+0x7a8>
 a0021b4:	d8c02917 	ldw	r3,164(sp)
 a0021b8:	18c00084 	addi	r3,r3,2
 a0021bc:	d8c02915 	stw	r3,164(sp)
 a0021c0:	90c0210c 	andi	r3,r18,132
 a0021c4:	d8c03015 	stw	r3,192(sp)
 a0021c8:	1801c51e 	bne	r3,zero,a0028e0 <___vfprintf_internal_r+0xec8>
 a0021cc:	d9003117 	ldw	r4,196(sp)
 a0021d0:	d8c02917 	ldw	r3,164(sp)
 a0021d4:	20e7c83a 	sub	r19,r4,r3
 a0021d8:	04c1c10e 	bge	zero,r19,a0028e0 <___vfprintf_internal_r+0xec8>
 a0021dc:	02400404 	movi	r9,16
 a0021e0:	d8c02017 	ldw	r3,128(sp)
 a0021e4:	d8801f17 	ldw	r2,124(sp)
 a0021e8:	4cc52f0e 	bge	r9,r19,a0036a8 <___vfprintf_internal_r+0x1c90>
 a0021ec:	01428074 	movhi	r5,2561
 a0021f0:	29470f84 	addi	r5,r5,7230
 a0021f4:	dc403b15 	stw	r17,236(sp)
 a0021f8:	d9403515 	stw	r5,212(sp)
 a0021fc:	9823883a 	mov	r17,r19
 a002200:	482d883a 	mov	r22,r9
 a002204:	9027883a 	mov	r19,r18
 a002208:	070001c4 	movi	fp,7
 a00220c:	8025883a 	mov	r18,r16
 a002210:	dc002d17 	ldw	r16,180(sp)
 a002214:	00000306 	br	a002224 <___vfprintf_internal_r+0x80c>
 a002218:	8c7ffc04 	addi	r17,r17,-16
 a00221c:	42000204 	addi	r8,r8,8
 a002220:	b440130e 	bge	r22,r17,a002270 <___vfprintf_internal_r+0x858>
 a002224:	01028074 	movhi	r4,2561
 a002228:	18c00404 	addi	r3,r3,16
 a00222c:	10800044 	addi	r2,r2,1
 a002230:	21070f84 	addi	r4,r4,7230
 a002234:	41000015 	stw	r4,0(r8)
 a002238:	45800115 	stw	r22,4(r8)
 a00223c:	d8c02015 	stw	r3,128(sp)
 a002240:	d8801f15 	stw	r2,124(sp)
 a002244:	e0bff40e 	bge	fp,r2,a002218 <__alt_mem_flash+0xfe001218>
 a002248:	d9801e04 	addi	r6,sp,120
 a00224c:	b80b883a 	mov	r5,r23
 a002250:	8009883a 	mov	r4,r16
 a002254:	a0087080 	call	a008708 <__sprint_r>
 a002258:	103ef31e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a00225c:	8c7ffc04 	addi	r17,r17,-16
 a002260:	d8c02017 	ldw	r3,128(sp)
 a002264:	d8801f17 	ldw	r2,124(sp)
 a002268:	da000404 	addi	r8,sp,16
 a00226c:	b47fed16 	blt	r22,r17,a002224 <__alt_mem_flash+0xfe001224>
 a002270:	9021883a 	mov	r16,r18
 a002274:	9825883a 	mov	r18,r19
 a002278:	8827883a 	mov	r19,r17
 a00227c:	dc403b17 	ldw	r17,236(sp)
 a002280:	d9403517 	ldw	r5,212(sp)
 a002284:	98c7883a 	add	r3,r19,r3
 a002288:	10800044 	addi	r2,r2,1
 a00228c:	41400015 	stw	r5,0(r8)
 a002290:	44c00115 	stw	r19,4(r8)
 a002294:	d8c02015 	stw	r3,128(sp)
 a002298:	d8801f15 	stw	r2,124(sp)
 a00229c:	010001c4 	movi	r4,7
 a0022a0:	2082c516 	blt	r4,r2,a002db8 <___vfprintf_internal_r+0x13a0>
 a0022a4:	df002787 	ldb	fp,158(sp)
 a0022a8:	42000204 	addi	r8,r8,8
 a0022ac:	e0000c26 	beq	fp,zero,a0022e0 <___vfprintf_internal_r+0x8c8>
 a0022b0:	d8801f17 	ldw	r2,124(sp)
 a0022b4:	d9002784 	addi	r4,sp,158
 a0022b8:	18c00044 	addi	r3,r3,1
 a0022bc:	10800044 	addi	r2,r2,1
 a0022c0:	41000015 	stw	r4,0(r8)
 a0022c4:	01000044 	movi	r4,1
 a0022c8:	41000115 	stw	r4,4(r8)
 a0022cc:	d8c02015 	stw	r3,128(sp)
 a0022d0:	d8801f15 	stw	r2,124(sp)
 a0022d4:	010001c4 	movi	r4,7
 a0022d8:	20825e16 	blt	r4,r2,a002c54 <___vfprintf_internal_r+0x123c>
 a0022dc:	42000204 	addi	r8,r8,8
 a0022e0:	d8802c17 	ldw	r2,176(sp)
 a0022e4:	10000c26 	beq	r2,zero,a002318 <___vfprintf_internal_r+0x900>
 a0022e8:	d8801f17 	ldw	r2,124(sp)
 a0022ec:	d9002704 	addi	r4,sp,156
 a0022f0:	18c00084 	addi	r3,r3,2
 a0022f4:	10800044 	addi	r2,r2,1
 a0022f8:	41000015 	stw	r4,0(r8)
 a0022fc:	01000084 	movi	r4,2
 a002300:	41000115 	stw	r4,4(r8)
 a002304:	d8c02015 	stw	r3,128(sp)
 a002308:	d8801f15 	stw	r2,124(sp)
 a00230c:	010001c4 	movi	r4,7
 a002310:	20825816 	blt	r4,r2,a002c74 <___vfprintf_internal_r+0x125c>
 a002314:	42000204 	addi	r8,r8,8
 a002318:	d9003017 	ldw	r4,192(sp)
 a00231c:	00802004 	movi	r2,128
 a002320:	2081bb26 	beq	r4,r2,a002a10 <___vfprintf_internal_r+0xff8>
 a002324:	d9402a17 	ldw	r5,168(sp)
 a002328:	d8802b17 	ldw	r2,172(sp)
 a00232c:	28adc83a 	sub	r22,r5,r2
 a002330:	0580310e 	bge	zero,r22,a0023f8 <___vfprintf_internal_r+0x9e0>
 a002334:	07000404 	movi	fp,16
 a002338:	d8801f17 	ldw	r2,124(sp)
 a00233c:	e584360e 	bge	fp,r22,a003418 <___vfprintf_internal_r+0x1a00>
 a002340:	01428074 	movhi	r5,2561
 a002344:	29470b84 	addi	r5,r5,7214
 a002348:	dc402a15 	stw	r17,168(sp)
 a00234c:	d9402c15 	stw	r5,176(sp)
 a002350:	b023883a 	mov	r17,r22
 a002354:	04c001c4 	movi	r19,7
 a002358:	a82d883a 	mov	r22,r21
 a00235c:	902b883a 	mov	r21,r18
 a002360:	8025883a 	mov	r18,r16
 a002364:	dc002d17 	ldw	r16,180(sp)
 a002368:	00000306 	br	a002378 <___vfprintf_internal_r+0x960>
 a00236c:	8c7ffc04 	addi	r17,r17,-16
 a002370:	42000204 	addi	r8,r8,8
 a002374:	e440110e 	bge	fp,r17,a0023bc <___vfprintf_internal_r+0x9a4>
 a002378:	18c00404 	addi	r3,r3,16
 a00237c:	10800044 	addi	r2,r2,1
 a002380:	45000015 	stw	r20,0(r8)
 a002384:	47000115 	stw	fp,4(r8)
 a002388:	d8c02015 	stw	r3,128(sp)
 a00238c:	d8801f15 	stw	r2,124(sp)
 a002390:	98bff60e 	bge	r19,r2,a00236c <__alt_mem_flash+0xfe00136c>
 a002394:	d9801e04 	addi	r6,sp,120
 a002398:	b80b883a 	mov	r5,r23
 a00239c:	8009883a 	mov	r4,r16
 a0023a0:	a0087080 	call	a008708 <__sprint_r>
 a0023a4:	103ea01e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a0023a8:	8c7ffc04 	addi	r17,r17,-16
 a0023ac:	d8c02017 	ldw	r3,128(sp)
 a0023b0:	d8801f17 	ldw	r2,124(sp)
 a0023b4:	da000404 	addi	r8,sp,16
 a0023b8:	e47fef16 	blt	fp,r17,a002378 <__alt_mem_flash+0xfe001378>
 a0023bc:	9021883a 	mov	r16,r18
 a0023c0:	a825883a 	mov	r18,r21
 a0023c4:	b02b883a 	mov	r21,r22
 a0023c8:	882d883a 	mov	r22,r17
 a0023cc:	dc402a17 	ldw	r17,168(sp)
 a0023d0:	d9002c17 	ldw	r4,176(sp)
 a0023d4:	1d87883a 	add	r3,r3,r22
 a0023d8:	10800044 	addi	r2,r2,1
 a0023dc:	41000015 	stw	r4,0(r8)
 a0023e0:	45800115 	stw	r22,4(r8)
 a0023e4:	d8c02015 	stw	r3,128(sp)
 a0023e8:	d8801f15 	stw	r2,124(sp)
 a0023ec:	010001c4 	movi	r4,7
 a0023f0:	20821016 	blt	r4,r2,a002c34 <___vfprintf_internal_r+0x121c>
 a0023f4:	42000204 	addi	r8,r8,8
 a0023f8:	9080400c 	andi	r2,r18,256
 a0023fc:	10013a1e 	bne	r2,zero,a0028e8 <___vfprintf_internal_r+0xed0>
 a002400:	d9402b17 	ldw	r5,172(sp)
 a002404:	d8801f17 	ldw	r2,124(sp)
 a002408:	44000015 	stw	r16,0(r8)
 a00240c:	1947883a 	add	r3,r3,r5
 a002410:	10800044 	addi	r2,r2,1
 a002414:	41400115 	stw	r5,4(r8)
 a002418:	d8c02015 	stw	r3,128(sp)
 a00241c:	d8801f15 	stw	r2,124(sp)
 a002420:	010001c4 	movi	r4,7
 a002424:	2081f516 	blt	r4,r2,a002bfc <___vfprintf_internal_r+0x11e4>
 a002428:	42000204 	addi	r8,r8,8
 a00242c:	9480010c 	andi	r18,r18,4
 a002430:	90003226 	beq	r18,zero,a0024fc <___vfprintf_internal_r+0xae4>
 a002434:	d9403117 	ldw	r5,196(sp)
 a002438:	d8802917 	ldw	r2,164(sp)
 a00243c:	28a1c83a 	sub	r16,r5,r2
 a002440:	04002e0e 	bge	zero,r16,a0024fc <___vfprintf_internal_r+0xae4>
 a002444:	04400404 	movi	r17,16
 a002448:	d8801f17 	ldw	r2,124(sp)
 a00244c:	8c04c40e 	bge	r17,r16,a003760 <___vfprintf_internal_r+0x1d48>
 a002450:	01428074 	movhi	r5,2561
 a002454:	29470f84 	addi	r5,r5,7230
 a002458:	d9403515 	stw	r5,212(sp)
 a00245c:	048001c4 	movi	r18,7
 a002460:	dcc02d17 	ldw	r19,180(sp)
 a002464:	00000306 	br	a002474 <___vfprintf_internal_r+0xa5c>
 a002468:	843ffc04 	addi	r16,r16,-16
 a00246c:	42000204 	addi	r8,r8,8
 a002470:	8c00130e 	bge	r17,r16,a0024c0 <___vfprintf_internal_r+0xaa8>
 a002474:	01028074 	movhi	r4,2561
 a002478:	18c00404 	addi	r3,r3,16
 a00247c:	10800044 	addi	r2,r2,1
 a002480:	21070f84 	addi	r4,r4,7230
 a002484:	41000015 	stw	r4,0(r8)
 a002488:	44400115 	stw	r17,4(r8)
 a00248c:	d8c02015 	stw	r3,128(sp)
 a002490:	d8801f15 	stw	r2,124(sp)
 a002494:	90bff40e 	bge	r18,r2,a002468 <__alt_mem_flash+0xfe001468>
 a002498:	d9801e04 	addi	r6,sp,120
 a00249c:	b80b883a 	mov	r5,r23
 a0024a0:	9809883a 	mov	r4,r19
 a0024a4:	a0087080 	call	a008708 <__sprint_r>
 a0024a8:	103e5f1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a0024ac:	843ffc04 	addi	r16,r16,-16
 a0024b0:	d8c02017 	ldw	r3,128(sp)
 a0024b4:	d8801f17 	ldw	r2,124(sp)
 a0024b8:	da000404 	addi	r8,sp,16
 a0024bc:	8c3fed16 	blt	r17,r16,a002474 <__alt_mem_flash+0xfe001474>
 a0024c0:	d9403517 	ldw	r5,212(sp)
 a0024c4:	1c07883a 	add	r3,r3,r16
 a0024c8:	10800044 	addi	r2,r2,1
 a0024cc:	41400015 	stw	r5,0(r8)
 a0024d0:	44000115 	stw	r16,4(r8)
 a0024d4:	d8c02015 	stw	r3,128(sp)
 a0024d8:	d8801f15 	stw	r2,124(sp)
 a0024dc:	010001c4 	movi	r4,7
 a0024e0:	2080060e 	bge	r4,r2,a0024fc <___vfprintf_internal_r+0xae4>
 a0024e4:	d9002d17 	ldw	r4,180(sp)
 a0024e8:	d9801e04 	addi	r6,sp,120
 a0024ec:	b80b883a 	mov	r5,r23
 a0024f0:	a0087080 	call	a008708 <__sprint_r>
 a0024f4:	103e4c1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a0024f8:	d8c02017 	ldw	r3,128(sp)
 a0024fc:	d8803117 	ldw	r2,196(sp)
 a002500:	d9002917 	ldw	r4,164(sp)
 a002504:	1100010e 	bge	r2,r4,a00250c <___vfprintf_internal_r+0xaf4>
 a002508:	2005883a 	mov	r2,r4
 a00250c:	d9402f17 	ldw	r5,188(sp)
 a002510:	288b883a 	add	r5,r5,r2
 a002514:	d9402f15 	stw	r5,188(sp)
 a002518:	1801c01e 	bne	r3,zero,a002c1c <___vfprintf_internal_r+0x1204>
 a00251c:	a8800007 	ldb	r2,0(r21)
 a002520:	d8001f15 	stw	zero,124(sp)
 a002524:	da000404 	addi	r8,sp,16
 a002528:	103d751e 	bne	r2,zero,a001b00 <__alt_mem_flash+0xfe000b00>
 a00252c:	a823883a 	mov	r17,r21
 a002530:	003d8b06 	br	a001b60 <__alt_mem_flash+0xfe000b60>
 a002534:	8025883a 	mov	r18,r16
 a002538:	dc002903 	ldbu	r16,164(sp)
 a00253c:	e011883a 	mov	r8,fp
 a002540:	84003fcc 	andi	r16,r16,255
 a002544:	8005e51e 	bne	r16,zero,a003cdc <___vfprintf_internal_r+0x22c4>
 a002548:	94800414 	ori	r18,r18,16
 a00254c:	9080080c 	andi	r2,r18,32
 a002550:	10022b26 	beq	r2,zero,a002e00 <___vfprintf_internal_r+0x13e8>
 a002554:	d9002e17 	ldw	r4,184(sp)
 a002558:	d9402a17 	ldw	r5,168(sp)
 a00255c:	d8002785 	stb	zero,158(sp)
 a002560:	20c00204 	addi	r3,r4,8
 a002564:	24c00017 	ldw	r19,0(r4)
 a002568:	25800117 	ldw	r22,4(r4)
 a00256c:	28042e16 	blt	r5,zero,a003628 <___vfprintf_internal_r+0x1c10>
 a002570:	013fdfc4 	movi	r4,-129
 a002574:	9d84b03a 	or	r2,r19,r22
 a002578:	d8c02e15 	stw	r3,184(sp)
 a00257c:	9124703a 	and	r18,r18,r4
 a002580:	0039883a 	mov	fp,zero
 a002584:	103e801e 	bne	r2,zero,a001f88 <__alt_mem_flash+0xfe000f88>
 a002588:	d9002a17 	ldw	r4,168(sp)
 a00258c:	2002e01e 	bne	r4,zero,a003110 <___vfprintf_internal_r+0x16f8>
 a002590:	d8002a15 	stw	zero,168(sp)
 a002594:	d8002b15 	stw	zero,172(sp)
 a002598:	dc001e04 	addi	r16,sp,120
 a00259c:	003ef506 	br	a002174 <__alt_mem_flash+0xfe001174>
 a0025a0:	8025883a 	mov	r18,r16
 a0025a4:	dc002903 	ldbu	r16,164(sp)
 a0025a8:	e011883a 	mov	r8,fp
 a0025ac:	84003fcc 	andi	r16,r16,255
 a0025b0:	8005ba1e 	bne	r16,zero,a003c9c <___vfprintf_internal_r+0x2284>
 a0025b4:	01028074 	movhi	r4,2561
 a0025b8:	2106ff04 	addi	r4,r4,7164
 a0025bc:	d9003915 	stw	r4,228(sp)
 a0025c0:	9080080c 	andi	r2,r18,32
 a0025c4:	10006126 	beq	r2,zero,a00274c <___vfprintf_internal_r+0xd34>
 a0025c8:	d9402e17 	ldw	r5,184(sp)
 a0025cc:	2cc00017 	ldw	r19,0(r5)
 a0025d0:	2d800117 	ldw	r22,4(r5)
 a0025d4:	29400204 	addi	r5,r5,8
 a0025d8:	d9402e15 	stw	r5,184(sp)
 a0025dc:	9080004c 	andi	r2,r18,1
 a0025e0:	1001ac26 	beq	r2,zero,a002c94 <___vfprintf_internal_r+0x127c>
 a0025e4:	9d84b03a 	or	r2,r19,r22
 a0025e8:	10038526 	beq	r2,zero,a003400 <___vfprintf_internal_r+0x19e8>
 a0025ec:	d8c02a17 	ldw	r3,168(sp)
 a0025f0:	00800c04 	movi	r2,48
 a0025f4:	d8802705 	stb	r2,156(sp)
 a0025f8:	dc402745 	stb	r17,157(sp)
 a0025fc:	d8002785 	stb	zero,158(sp)
 a002600:	90800094 	ori	r2,r18,2
 a002604:	18047916 	blt	r3,zero,a0037ec <___vfprintf_internal_r+0x1dd4>
 a002608:	00bfdfc4 	movi	r2,-129
 a00260c:	90a4703a 	and	r18,r18,r2
 a002610:	94800094 	ori	r18,r18,2
 a002614:	0039883a 	mov	fp,zero
 a002618:	d9003917 	ldw	r4,228(sp)
 a00261c:	dc001e04 	addi	r16,sp,120
 a002620:	988003cc 	andi	r2,r19,15
 a002624:	b006973a 	slli	r3,r22,28
 a002628:	2085883a 	add	r2,r4,r2
 a00262c:	9826d13a 	srli	r19,r19,4
 a002630:	10800003 	ldbu	r2,0(r2)
 a002634:	b02cd13a 	srli	r22,r22,4
 a002638:	843fffc4 	addi	r16,r16,-1
 a00263c:	1ce6b03a 	or	r19,r3,r19
 a002640:	80800005 	stb	r2,0(r16)
 a002644:	9d84b03a 	or	r2,r19,r22
 a002648:	103ff51e 	bne	r2,zero,a002620 <__alt_mem_flash+0xfe001620>
 a00264c:	d8c02817 	ldw	r3,160(sp)
 a002650:	1c07c83a 	sub	r3,r3,r16
 a002654:	d8c02b15 	stw	r3,172(sp)
 a002658:	003ec606 	br	a002174 <__alt_mem_flash+0xfe001174>
 a00265c:	8025883a 	mov	r18,r16
 a002660:	dc002903 	ldbu	r16,164(sp)
 a002664:	e011883a 	mov	r8,fp
 a002668:	84003fcc 	andi	r16,r16,255
 a00266c:	803e9626 	beq	r16,zero,a0020c8 <__alt_mem_flash+0xfe0010c8>
 a002670:	d8c02b03 	ldbu	r3,172(sp)
 a002674:	d8c02785 	stb	r3,158(sp)
 a002678:	003e9306 	br	a0020c8 <__alt_mem_flash+0xfe0010c8>
 a00267c:	00c00044 	movi	r3,1
 a002680:	d8c02905 	stb	r3,164(sp)
 a002684:	00c00ac4 	movi	r3,43
 a002688:	d8c02b05 	stb	r3,172(sp)
 a00268c:	ac400007 	ldb	r17,0(r21)
 a002690:	003d4306 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a002694:	84000814 	ori	r16,r16,32
 a002698:	ac400007 	ldb	r17,0(r21)
 a00269c:	003d4006 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a0026a0:	d8802e17 	ldw	r2,184(sp)
 a0026a4:	8025883a 	mov	r18,r16
 a0026a8:	d8002785 	stb	zero,158(sp)
 a0026ac:	14000017 	ldw	r16,0(r2)
 a0026b0:	e011883a 	mov	r8,fp
 a0026b4:	14c00104 	addi	r19,r2,4
 a0026b8:	80042d26 	beq	r16,zero,a003770 <___vfprintf_internal_r+0x1d58>
 a0026bc:	d8c02a17 	ldw	r3,168(sp)
 a0026c0:	1803e416 	blt	r3,zero,a003654 <___vfprintf_internal_r+0x1c3c>
 a0026c4:	180d883a 	mov	r6,r3
 a0026c8:	000b883a 	mov	r5,zero
 a0026cc:	8009883a 	mov	r4,r16
 a0026d0:	df003d15 	stw	fp,244(sp)
 a0026d4:	a006e880 	call	a006e88 <memchr>
 a0026d8:	da003d17 	ldw	r8,244(sp)
 a0026dc:	10046826 	beq	r2,zero,a003880 <___vfprintf_internal_r+0x1e68>
 a0026e0:	1405c83a 	sub	r2,r2,r16
 a0026e4:	d8802b15 	stw	r2,172(sp)
 a0026e8:	1003e016 	blt	r2,zero,a00366c <___vfprintf_internal_r+0x1c54>
 a0026ec:	df002783 	ldbu	fp,158(sp)
 a0026f0:	d8802915 	stw	r2,164(sp)
 a0026f4:	dcc02e15 	stw	r19,184(sp)
 a0026f8:	d8002a15 	stw	zero,168(sp)
 a0026fc:	d8003215 	stw	zero,200(sp)
 a002700:	003ea206 	br	a00218c <__alt_mem_flash+0xfe00118c>
 a002704:	8025883a 	mov	r18,r16
 a002708:	dc002903 	ldbu	r16,164(sp)
 a00270c:	e011883a 	mov	r8,fp
 a002710:	84003fcc 	andi	r16,r16,255
 a002714:	803f8d26 	beq	r16,zero,a00254c <__alt_mem_flash+0xfe00154c>
 a002718:	d8c02b03 	ldbu	r3,172(sp)
 a00271c:	d8c02785 	stb	r3,158(sp)
 a002720:	003f8a06 	br	a00254c <__alt_mem_flash+0xfe00154c>
 a002724:	8025883a 	mov	r18,r16
 a002728:	dc002903 	ldbu	r16,164(sp)
 a00272c:	e011883a 	mov	r8,fp
 a002730:	84003fcc 	andi	r16,r16,255
 a002734:	8005661e 	bne	r16,zero,a003cd0 <___vfprintf_internal_r+0x22b8>
 a002738:	01028074 	movhi	r4,2561
 a00273c:	21070404 	addi	r4,r4,7184
 a002740:	d9003915 	stw	r4,228(sp)
 a002744:	9080080c 	andi	r2,r18,32
 a002748:	103f9f1e 	bne	r2,zero,a0025c8 <__alt_mem_flash+0xfe0015c8>
 a00274c:	9080040c 	andi	r2,r18,16
 a002750:	1002eb26 	beq	r2,zero,a003300 <___vfprintf_internal_r+0x18e8>
 a002754:	d8802e17 	ldw	r2,184(sp)
 a002758:	002d883a 	mov	r22,zero
 a00275c:	14c00017 	ldw	r19,0(r2)
 a002760:	10800104 	addi	r2,r2,4
 a002764:	d8802e15 	stw	r2,184(sp)
 a002768:	003f9c06 	br	a0025dc <__alt_mem_flash+0xfe0015dc>
 a00276c:	d8802b07 	ldb	r2,172(sp)
 a002770:	1002e11e 	bne	r2,zero,a0032f8 <___vfprintf_internal_r+0x18e0>
 a002774:	00c00044 	movi	r3,1
 a002778:	d8c02905 	stb	r3,164(sp)
 a00277c:	00c00804 	movi	r3,32
 a002780:	d8c02b05 	stb	r3,172(sp)
 a002784:	ac400007 	ldb	r17,0(r21)
 a002788:	003d0506 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a00278c:	84000054 	ori	r16,r16,1
 a002790:	ac400007 	ldb	r17,0(r21)
 a002794:	003d0206 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a002798:	8025883a 	mov	r18,r16
 a00279c:	dc002903 	ldbu	r16,164(sp)
 a0027a0:	e011883a 	mov	r8,fp
 a0027a4:	84003fcc 	andi	r16,r16,255
 a0027a8:	803de726 	beq	r16,zero,a001f48 <__alt_mem_flash+0xfe000f48>
 a0027ac:	d8c02b03 	ldbu	r3,172(sp)
 a0027b0:	d8c02785 	stb	r3,158(sp)
 a0027b4:	003de406 	br	a001f48 <__alt_mem_flash+0xfe000f48>
 a0027b8:	84001014 	ori	r16,r16,64
 a0027bc:	ac400007 	ldb	r17,0(r21)
 a0027c0:	003cf706 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a0027c4:	ac400007 	ldb	r17,0(r21)
 a0027c8:	00801b04 	movi	r2,108
 a0027cc:	88838f26 	beq	r17,r2,a00360c <___vfprintf_internal_r+0x1bf4>
 a0027d0:	84000414 	ori	r16,r16,16
 a0027d4:	003cf206 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a0027d8:	8025883a 	mov	r18,r16
 a0027dc:	dc002903 	ldbu	r16,164(sp)
 a0027e0:	e011883a 	mov	r8,fp
 a0027e4:	84003fcc 	andi	r16,r16,255
 a0027e8:	80053f1e 	bne	r16,zero,a003ce8 <___vfprintf_internal_r+0x22d0>
 a0027ec:	9080080c 	andi	r2,r18,32
 a0027f0:	1002d226 	beq	r2,zero,a00333c <___vfprintf_internal_r+0x1924>
 a0027f4:	d9002e17 	ldw	r4,184(sp)
 a0027f8:	d9402f17 	ldw	r5,188(sp)
 a0027fc:	20800017 	ldw	r2,0(r4)
 a002800:	2807d7fa 	srai	r3,r5,31
 a002804:	21000104 	addi	r4,r4,4
 a002808:	d9002e15 	stw	r4,184(sp)
 a00280c:	11400015 	stw	r5,0(r2)
 a002810:	10c00115 	stw	r3,4(r2)
 a002814:	003cb806 	br	a001af8 <__alt_mem_flash+0xfe000af8>
 a002818:	d8c02e17 	ldw	r3,184(sp)
 a00281c:	d9002e17 	ldw	r4,184(sp)
 a002820:	8025883a 	mov	r18,r16
 a002824:	18800017 	ldw	r2,0(r3)
 a002828:	21000104 	addi	r4,r4,4
 a00282c:	00c00044 	movi	r3,1
 a002830:	e011883a 	mov	r8,fp
 a002834:	d8c02915 	stw	r3,164(sp)
 a002838:	d8002785 	stb	zero,158(sp)
 a00283c:	d8801405 	stb	r2,80(sp)
 a002840:	d9002e15 	stw	r4,184(sp)
 a002844:	d8c02b15 	stw	r3,172(sp)
 a002848:	d8002a15 	stw	zero,168(sp)
 a00284c:	d8003215 	stw	zero,200(sp)
 a002850:	dc001404 	addi	r16,sp,80
 a002854:	0039883a 	mov	fp,zero
 a002858:	003e5306 	br	a0021a8 <__alt_mem_flash+0xfe0011a8>
 a00285c:	01028074 	movhi	r4,2561
 a002860:	21070404 	addi	r4,r4,7184
 a002864:	0039883a 	mov	fp,zero
 a002868:	d9003915 	stw	r4,228(sp)
 a00286c:	04401e04 	movi	r17,120
 a002870:	003f6906 	br	a002618 <__alt_mem_flash+0xfe001618>
 a002874:	8025883a 	mov	r18,r16
 a002878:	dc002903 	ldbu	r16,164(sp)
 a00287c:	e011883a 	mov	r8,fp
 a002880:	84003fcc 	andi	r16,r16,255
 a002884:	8005081e 	bne	r16,zero,a003ca8 <___vfprintf_internal_r+0x2290>
 a002888:	883d6126 	beq	r17,zero,a001e10 <__alt_mem_flash+0xfe000e10>
 a00288c:	00c00044 	movi	r3,1
 a002890:	d8c02915 	stw	r3,164(sp)
 a002894:	dc401405 	stb	r17,80(sp)
 a002898:	d8002785 	stb	zero,158(sp)
 a00289c:	003fe906 	br	a002844 <__alt_mem_flash+0xfe001844>
 a0028a0:	01428074 	movhi	r5,2561
 a0028a4:	29470404 	addi	r5,r5,7184
 a0028a8:	d9403915 	stw	r5,228(sp)
 a0028ac:	d8c02e15 	stw	r3,184(sp)
 a0028b0:	1025883a 	mov	r18,r2
 a0028b4:	04401e04 	movi	r17,120
 a0028b8:	9d84b03a 	or	r2,r19,r22
 a0028bc:	1000fc1e 	bne	r2,zero,a002cb0 <___vfprintf_internal_r+0x1298>
 a0028c0:	0039883a 	mov	fp,zero
 a0028c4:	00800084 	movi	r2,2
 a0028c8:	10803fcc 	andi	r2,r2,255
 a0028cc:	00c00044 	movi	r3,1
 a0028d0:	10c20f26 	beq	r2,r3,a003110 <___vfprintf_internal_r+0x16f8>
 a0028d4:	00c00084 	movi	r3,2
 a0028d8:	10fd3326 	beq	r2,r3,a001da8 <__alt_mem_flash+0xfe000da8>
 a0028dc:	003e0b06 	br	a00210c <__alt_mem_flash+0xfe00110c>
 a0028e0:	d8c02017 	ldw	r3,128(sp)
 a0028e4:	003e7106 	br	a0022ac <__alt_mem_flash+0xfe0012ac>
 a0028e8:	00801944 	movi	r2,101
 a0028ec:	14407e0e 	bge	r2,r17,a002ae8 <___vfprintf_internal_r+0x10d0>
 a0028f0:	d9003617 	ldw	r4,216(sp)
 a0028f4:	d9403817 	ldw	r5,224(sp)
 a0028f8:	000d883a 	mov	r6,zero
 a0028fc:	000f883a 	mov	r7,zero
 a002900:	d8c03c15 	stw	r3,240(sp)
 a002904:	da003d15 	stw	r8,244(sp)
 a002908:	a00c91c0 	call	a00c91c <__eqdf2>
 a00290c:	d8c03c17 	ldw	r3,240(sp)
 a002910:	da003d17 	ldw	r8,244(sp)
 a002914:	1000f71e 	bne	r2,zero,a002cf4 <___vfprintf_internal_r+0x12dc>
 a002918:	d8801f17 	ldw	r2,124(sp)
 a00291c:	01028074 	movhi	r4,2561
 a002920:	21070b04 	addi	r4,r4,7212
 a002924:	18c00044 	addi	r3,r3,1
 a002928:	10800044 	addi	r2,r2,1
 a00292c:	41000015 	stw	r4,0(r8)
 a002930:	01000044 	movi	r4,1
 a002934:	41000115 	stw	r4,4(r8)
 a002938:	d8c02015 	stw	r3,128(sp)
 a00293c:	d8801f15 	stw	r2,124(sp)
 a002940:	010001c4 	movi	r4,7
 a002944:	2082b816 	blt	r4,r2,a003428 <___vfprintf_internal_r+0x1a10>
 a002948:	42000204 	addi	r8,r8,8
 a00294c:	d8802617 	ldw	r2,152(sp)
 a002950:	d9403317 	ldw	r5,204(sp)
 a002954:	11400216 	blt	r2,r5,a002960 <___vfprintf_internal_r+0xf48>
 a002958:	9080004c 	andi	r2,r18,1
 a00295c:	103eb326 	beq	r2,zero,a00242c <__alt_mem_flash+0xfe00142c>
 a002960:	d8803717 	ldw	r2,220(sp)
 a002964:	d9003417 	ldw	r4,208(sp)
 a002968:	d9403717 	ldw	r5,220(sp)
 a00296c:	1887883a 	add	r3,r3,r2
 a002970:	d8801f17 	ldw	r2,124(sp)
 a002974:	41000015 	stw	r4,0(r8)
 a002978:	41400115 	stw	r5,4(r8)
 a00297c:	10800044 	addi	r2,r2,1
 a002980:	d8c02015 	stw	r3,128(sp)
 a002984:	d8801f15 	stw	r2,124(sp)
 a002988:	010001c4 	movi	r4,7
 a00298c:	20832916 	blt	r4,r2,a003634 <___vfprintf_internal_r+0x1c1c>
 a002990:	42000204 	addi	r8,r8,8
 a002994:	d8803317 	ldw	r2,204(sp)
 a002998:	143fffc4 	addi	r16,r2,-1
 a00299c:	043ea30e 	bge	zero,r16,a00242c <__alt_mem_flash+0xfe00142c>
 a0029a0:	04400404 	movi	r17,16
 a0029a4:	d8801f17 	ldw	r2,124(sp)
 a0029a8:	8c00880e 	bge	r17,r16,a002bcc <___vfprintf_internal_r+0x11b4>
 a0029ac:	01428074 	movhi	r5,2561
 a0029b0:	29470b84 	addi	r5,r5,7214
 a0029b4:	d9402c15 	stw	r5,176(sp)
 a0029b8:	058001c4 	movi	r22,7
 a0029bc:	dcc02d17 	ldw	r19,180(sp)
 a0029c0:	00000306 	br	a0029d0 <___vfprintf_internal_r+0xfb8>
 a0029c4:	42000204 	addi	r8,r8,8
 a0029c8:	843ffc04 	addi	r16,r16,-16
 a0029cc:	8c00820e 	bge	r17,r16,a002bd8 <___vfprintf_internal_r+0x11c0>
 a0029d0:	18c00404 	addi	r3,r3,16
 a0029d4:	10800044 	addi	r2,r2,1
 a0029d8:	45000015 	stw	r20,0(r8)
 a0029dc:	44400115 	stw	r17,4(r8)
 a0029e0:	d8c02015 	stw	r3,128(sp)
 a0029e4:	d8801f15 	stw	r2,124(sp)
 a0029e8:	b0bff60e 	bge	r22,r2,a0029c4 <__alt_mem_flash+0xfe0019c4>
 a0029ec:	d9801e04 	addi	r6,sp,120
 a0029f0:	b80b883a 	mov	r5,r23
 a0029f4:	9809883a 	mov	r4,r19
 a0029f8:	a0087080 	call	a008708 <__sprint_r>
 a0029fc:	103d0a1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002a00:	d8c02017 	ldw	r3,128(sp)
 a002a04:	d8801f17 	ldw	r2,124(sp)
 a002a08:	da000404 	addi	r8,sp,16
 a002a0c:	003fee06 	br	a0029c8 <__alt_mem_flash+0xfe0019c8>
 a002a10:	d9403117 	ldw	r5,196(sp)
 a002a14:	d8802917 	ldw	r2,164(sp)
 a002a18:	28adc83a 	sub	r22,r5,r2
 a002a1c:	05be410e 	bge	zero,r22,a002324 <__alt_mem_flash+0xfe001324>
 a002a20:	07000404 	movi	fp,16
 a002a24:	d8801f17 	ldw	r2,124(sp)
 a002a28:	e5838f0e 	bge	fp,r22,a003868 <___vfprintf_internal_r+0x1e50>
 a002a2c:	01428074 	movhi	r5,2561
 a002a30:	29470b84 	addi	r5,r5,7214
 a002a34:	dc403015 	stw	r17,192(sp)
 a002a38:	d9402c15 	stw	r5,176(sp)
 a002a3c:	b023883a 	mov	r17,r22
 a002a40:	04c001c4 	movi	r19,7
 a002a44:	a82d883a 	mov	r22,r21
 a002a48:	902b883a 	mov	r21,r18
 a002a4c:	8025883a 	mov	r18,r16
 a002a50:	dc002d17 	ldw	r16,180(sp)
 a002a54:	00000306 	br	a002a64 <___vfprintf_internal_r+0x104c>
 a002a58:	8c7ffc04 	addi	r17,r17,-16
 a002a5c:	42000204 	addi	r8,r8,8
 a002a60:	e440110e 	bge	fp,r17,a002aa8 <___vfprintf_internal_r+0x1090>
 a002a64:	18c00404 	addi	r3,r3,16
 a002a68:	10800044 	addi	r2,r2,1
 a002a6c:	45000015 	stw	r20,0(r8)
 a002a70:	47000115 	stw	fp,4(r8)
 a002a74:	d8c02015 	stw	r3,128(sp)
 a002a78:	d8801f15 	stw	r2,124(sp)
 a002a7c:	98bff60e 	bge	r19,r2,a002a58 <__alt_mem_flash+0xfe001a58>
 a002a80:	d9801e04 	addi	r6,sp,120
 a002a84:	b80b883a 	mov	r5,r23
 a002a88:	8009883a 	mov	r4,r16
 a002a8c:	a0087080 	call	a008708 <__sprint_r>
 a002a90:	103ce51e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002a94:	8c7ffc04 	addi	r17,r17,-16
 a002a98:	d8c02017 	ldw	r3,128(sp)
 a002a9c:	d8801f17 	ldw	r2,124(sp)
 a002aa0:	da000404 	addi	r8,sp,16
 a002aa4:	e47fef16 	blt	fp,r17,a002a64 <__alt_mem_flash+0xfe001a64>
 a002aa8:	9021883a 	mov	r16,r18
 a002aac:	a825883a 	mov	r18,r21
 a002ab0:	b02b883a 	mov	r21,r22
 a002ab4:	882d883a 	mov	r22,r17
 a002ab8:	dc403017 	ldw	r17,192(sp)
 a002abc:	d9002c17 	ldw	r4,176(sp)
 a002ac0:	1d87883a 	add	r3,r3,r22
 a002ac4:	10800044 	addi	r2,r2,1
 a002ac8:	41000015 	stw	r4,0(r8)
 a002acc:	45800115 	stw	r22,4(r8)
 a002ad0:	d8c02015 	stw	r3,128(sp)
 a002ad4:	d8801f15 	stw	r2,124(sp)
 a002ad8:	010001c4 	movi	r4,7
 a002adc:	20818e16 	blt	r4,r2,a003118 <___vfprintf_internal_r+0x1700>
 a002ae0:	42000204 	addi	r8,r8,8
 a002ae4:	003e0f06 	br	a002324 <__alt_mem_flash+0xfe001324>
 a002ae8:	d9403317 	ldw	r5,204(sp)
 a002aec:	00800044 	movi	r2,1
 a002af0:	18c00044 	addi	r3,r3,1
 a002af4:	1141530e 	bge	r2,r5,a003044 <___vfprintf_internal_r+0x162c>
 a002af8:	dc401f17 	ldw	r17,124(sp)
 a002afc:	00800044 	movi	r2,1
 a002b00:	40800115 	stw	r2,4(r8)
 a002b04:	8c400044 	addi	r17,r17,1
 a002b08:	44000015 	stw	r16,0(r8)
 a002b0c:	d8c02015 	stw	r3,128(sp)
 a002b10:	dc401f15 	stw	r17,124(sp)
 a002b14:	008001c4 	movi	r2,7
 a002b18:	14416b16 	blt	r2,r17,a0030c8 <___vfprintf_internal_r+0x16b0>
 a002b1c:	42000204 	addi	r8,r8,8
 a002b20:	d8803717 	ldw	r2,220(sp)
 a002b24:	d9003417 	ldw	r4,208(sp)
 a002b28:	8c400044 	addi	r17,r17,1
 a002b2c:	10c7883a 	add	r3,r2,r3
 a002b30:	40800115 	stw	r2,4(r8)
 a002b34:	41000015 	stw	r4,0(r8)
 a002b38:	d8c02015 	stw	r3,128(sp)
 a002b3c:	dc401f15 	stw	r17,124(sp)
 a002b40:	008001c4 	movi	r2,7
 a002b44:	14416916 	blt	r2,r17,a0030ec <___vfprintf_internal_r+0x16d4>
 a002b48:	45800204 	addi	r22,r8,8
 a002b4c:	d9003617 	ldw	r4,216(sp)
 a002b50:	d9403817 	ldw	r5,224(sp)
 a002b54:	000d883a 	mov	r6,zero
 a002b58:	000f883a 	mov	r7,zero
 a002b5c:	d8c03c15 	stw	r3,240(sp)
 a002b60:	a00c91c0 	call	a00c91c <__eqdf2>
 a002b64:	d8c03c17 	ldw	r3,240(sp)
 a002b68:	1000bc26 	beq	r2,zero,a002e5c <___vfprintf_internal_r+0x1444>
 a002b6c:	d9403317 	ldw	r5,204(sp)
 a002b70:	84000044 	addi	r16,r16,1
 a002b74:	8c400044 	addi	r17,r17,1
 a002b78:	28bfffc4 	addi	r2,r5,-1
 a002b7c:	1887883a 	add	r3,r3,r2
 a002b80:	b0800115 	stw	r2,4(r22)
 a002b84:	b4000015 	stw	r16,0(r22)
 a002b88:	d8c02015 	stw	r3,128(sp)
 a002b8c:	dc401f15 	stw	r17,124(sp)
 a002b90:	008001c4 	movi	r2,7
 a002b94:	14414316 	blt	r2,r17,a0030a4 <___vfprintf_internal_r+0x168c>
 a002b98:	b5800204 	addi	r22,r22,8
 a002b9c:	d9003a17 	ldw	r4,232(sp)
 a002ba0:	df0022c4 	addi	fp,sp,139
 a002ba4:	8c400044 	addi	r17,r17,1
 a002ba8:	20c7883a 	add	r3,r4,r3
 a002bac:	b7000015 	stw	fp,0(r22)
 a002bb0:	b1000115 	stw	r4,4(r22)
 a002bb4:	d8c02015 	stw	r3,128(sp)
 a002bb8:	dc401f15 	stw	r17,124(sp)
 a002bbc:	008001c4 	movi	r2,7
 a002bc0:	14400e16 	blt	r2,r17,a002bfc <___vfprintf_internal_r+0x11e4>
 a002bc4:	b2000204 	addi	r8,r22,8
 a002bc8:	003e1806 	br	a00242c <__alt_mem_flash+0xfe00142c>
 a002bcc:	01028074 	movhi	r4,2561
 a002bd0:	21070b84 	addi	r4,r4,7214
 a002bd4:	d9002c15 	stw	r4,176(sp)
 a002bd8:	d9002c17 	ldw	r4,176(sp)
 a002bdc:	1c07883a 	add	r3,r3,r16
 a002be0:	44000115 	stw	r16,4(r8)
 a002be4:	41000015 	stw	r4,0(r8)
 a002be8:	10800044 	addi	r2,r2,1
 a002bec:	d8c02015 	stw	r3,128(sp)
 a002bf0:	d8801f15 	stw	r2,124(sp)
 a002bf4:	010001c4 	movi	r4,7
 a002bf8:	20be0b0e 	bge	r4,r2,a002428 <__alt_mem_flash+0xfe001428>
 a002bfc:	d9002d17 	ldw	r4,180(sp)
 a002c00:	d9801e04 	addi	r6,sp,120
 a002c04:	b80b883a 	mov	r5,r23
 a002c08:	a0087080 	call	a008708 <__sprint_r>
 a002c0c:	103c861e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002c10:	d8c02017 	ldw	r3,128(sp)
 a002c14:	da000404 	addi	r8,sp,16
 a002c18:	003e0406 	br	a00242c <__alt_mem_flash+0xfe00142c>
 a002c1c:	d9002d17 	ldw	r4,180(sp)
 a002c20:	d9801e04 	addi	r6,sp,120
 a002c24:	b80b883a 	mov	r5,r23
 a002c28:	a0087080 	call	a008708 <__sprint_r>
 a002c2c:	103e3b26 	beq	r2,zero,a00251c <__alt_mem_flash+0xfe00151c>
 a002c30:	003c7d06 	br	a001e28 <__alt_mem_flash+0xfe000e28>
 a002c34:	d9002d17 	ldw	r4,180(sp)
 a002c38:	d9801e04 	addi	r6,sp,120
 a002c3c:	b80b883a 	mov	r5,r23
 a002c40:	a0087080 	call	a008708 <__sprint_r>
 a002c44:	103c781e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002c48:	d8c02017 	ldw	r3,128(sp)
 a002c4c:	da000404 	addi	r8,sp,16
 a002c50:	003de906 	br	a0023f8 <__alt_mem_flash+0xfe0013f8>
 a002c54:	d9002d17 	ldw	r4,180(sp)
 a002c58:	d9801e04 	addi	r6,sp,120
 a002c5c:	b80b883a 	mov	r5,r23
 a002c60:	a0087080 	call	a008708 <__sprint_r>
 a002c64:	103c701e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002c68:	d8c02017 	ldw	r3,128(sp)
 a002c6c:	da000404 	addi	r8,sp,16
 a002c70:	003d9b06 	br	a0022e0 <__alt_mem_flash+0xfe0012e0>
 a002c74:	d9002d17 	ldw	r4,180(sp)
 a002c78:	d9801e04 	addi	r6,sp,120
 a002c7c:	b80b883a 	mov	r5,r23
 a002c80:	a0087080 	call	a008708 <__sprint_r>
 a002c84:	103c681e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002c88:	d8c02017 	ldw	r3,128(sp)
 a002c8c:	da000404 	addi	r8,sp,16
 a002c90:	003da106 	br	a002318 <__alt_mem_flash+0xfe001318>
 a002c94:	d9402a17 	ldw	r5,168(sp)
 a002c98:	d8002785 	stb	zero,158(sp)
 a002c9c:	283f0616 	blt	r5,zero,a0028b8 <__alt_mem_flash+0xfe0018b8>
 a002ca0:	00ffdfc4 	movi	r3,-129
 a002ca4:	9d84b03a 	or	r2,r19,r22
 a002ca8:	90e4703a 	and	r18,r18,r3
 a002cac:	103c3b26 	beq	r2,zero,a001d9c <__alt_mem_flash+0xfe000d9c>
 a002cb0:	0039883a 	mov	fp,zero
 a002cb4:	003e5806 	br	a002618 <__alt_mem_flash+0xfe001618>
 a002cb8:	9080040c 	andi	r2,r18,16
 a002cbc:	1001b326 	beq	r2,zero,a00338c <___vfprintf_internal_r+0x1974>
 a002cc0:	d8c02e17 	ldw	r3,184(sp)
 a002cc4:	d9002a17 	ldw	r4,168(sp)
 a002cc8:	d8002785 	stb	zero,158(sp)
 a002ccc:	18800104 	addi	r2,r3,4
 a002cd0:	1cc00017 	ldw	r19,0(r3)
 a002cd4:	002d883a 	mov	r22,zero
 a002cd8:	2001b516 	blt	r4,zero,a0033b0 <___vfprintf_internal_r+0x1998>
 a002cdc:	00ffdfc4 	movi	r3,-129
 a002ce0:	d8802e15 	stw	r2,184(sp)
 a002ce4:	90e4703a 	and	r18,r18,r3
 a002ce8:	983d0526 	beq	r19,zero,a002100 <__alt_mem_flash+0xfe001100>
 a002cec:	0039883a 	mov	fp,zero
 a002cf0:	003d0806 	br	a002114 <__alt_mem_flash+0xfe001114>
 a002cf4:	dc402617 	ldw	r17,152(sp)
 a002cf8:	0441d30e 	bge	zero,r17,a003448 <___vfprintf_internal_r+0x1a30>
 a002cfc:	dc403217 	ldw	r17,200(sp)
 a002d00:	d8803317 	ldw	r2,204(sp)
 a002d04:	1440010e 	bge	r2,r17,a002d0c <___vfprintf_internal_r+0x12f4>
 a002d08:	1023883a 	mov	r17,r2
 a002d0c:	04400a0e 	bge	zero,r17,a002d38 <___vfprintf_internal_r+0x1320>
 a002d10:	d8801f17 	ldw	r2,124(sp)
 a002d14:	1c47883a 	add	r3,r3,r17
 a002d18:	44000015 	stw	r16,0(r8)
 a002d1c:	10800044 	addi	r2,r2,1
 a002d20:	44400115 	stw	r17,4(r8)
 a002d24:	d8c02015 	stw	r3,128(sp)
 a002d28:	d8801f15 	stw	r2,124(sp)
 a002d2c:	010001c4 	movi	r4,7
 a002d30:	20826516 	blt	r4,r2,a0036c8 <___vfprintf_internal_r+0x1cb0>
 a002d34:	42000204 	addi	r8,r8,8
 a002d38:	88026116 	blt	r17,zero,a0036c0 <___vfprintf_internal_r+0x1ca8>
 a002d3c:	d9003217 	ldw	r4,200(sp)
 a002d40:	2463c83a 	sub	r17,r4,r17
 a002d44:	04407b0e 	bge	zero,r17,a002f34 <___vfprintf_internal_r+0x151c>
 a002d48:	05800404 	movi	r22,16
 a002d4c:	d8801f17 	ldw	r2,124(sp)
 a002d50:	b4419d0e 	bge	r22,r17,a0033c8 <___vfprintf_internal_r+0x19b0>
 a002d54:	01028074 	movhi	r4,2561
 a002d58:	21070b84 	addi	r4,r4,7214
 a002d5c:	d9002c15 	stw	r4,176(sp)
 a002d60:	070001c4 	movi	fp,7
 a002d64:	dcc02d17 	ldw	r19,180(sp)
 a002d68:	00000306 	br	a002d78 <___vfprintf_internal_r+0x1360>
 a002d6c:	42000204 	addi	r8,r8,8
 a002d70:	8c7ffc04 	addi	r17,r17,-16
 a002d74:	b441970e 	bge	r22,r17,a0033d4 <___vfprintf_internal_r+0x19bc>
 a002d78:	18c00404 	addi	r3,r3,16
 a002d7c:	10800044 	addi	r2,r2,1
 a002d80:	45000015 	stw	r20,0(r8)
 a002d84:	45800115 	stw	r22,4(r8)
 a002d88:	d8c02015 	stw	r3,128(sp)
 a002d8c:	d8801f15 	stw	r2,124(sp)
 a002d90:	e0bff60e 	bge	fp,r2,a002d6c <__alt_mem_flash+0xfe001d6c>
 a002d94:	d9801e04 	addi	r6,sp,120
 a002d98:	b80b883a 	mov	r5,r23
 a002d9c:	9809883a 	mov	r4,r19
 a002da0:	a0087080 	call	a008708 <__sprint_r>
 a002da4:	103c201e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002da8:	d8c02017 	ldw	r3,128(sp)
 a002dac:	d8801f17 	ldw	r2,124(sp)
 a002db0:	da000404 	addi	r8,sp,16
 a002db4:	003fee06 	br	a002d70 <__alt_mem_flash+0xfe001d70>
 a002db8:	d9002d17 	ldw	r4,180(sp)
 a002dbc:	d9801e04 	addi	r6,sp,120
 a002dc0:	b80b883a 	mov	r5,r23
 a002dc4:	a0087080 	call	a008708 <__sprint_r>
 a002dc8:	103c171e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002dcc:	d8c02017 	ldw	r3,128(sp)
 a002dd0:	df002787 	ldb	fp,158(sp)
 a002dd4:	da000404 	addi	r8,sp,16
 a002dd8:	003d3406 	br	a0022ac <__alt_mem_flash+0xfe0012ac>
 a002ddc:	9080040c 	andi	r2,r18,16
 a002de0:	10016126 	beq	r2,zero,a003368 <___vfprintf_internal_r+0x1950>
 a002de4:	d9402e17 	ldw	r5,184(sp)
 a002de8:	2cc00017 	ldw	r19,0(r5)
 a002dec:	29400104 	addi	r5,r5,4
 a002df0:	d9402e15 	stw	r5,184(sp)
 a002df4:	982dd7fa 	srai	r22,r19,31
 a002df8:	b005883a 	mov	r2,r22
 a002dfc:	003c5a06 	br	a001f68 <__alt_mem_flash+0xfe000f68>
 a002e00:	9080040c 	andi	r2,r18,16
 a002e04:	10003526 	beq	r2,zero,a002edc <___vfprintf_internal_r+0x14c4>
 a002e08:	d8c02e17 	ldw	r3,184(sp)
 a002e0c:	d9002a17 	ldw	r4,168(sp)
 a002e10:	d8002785 	stb	zero,158(sp)
 a002e14:	18800104 	addi	r2,r3,4
 a002e18:	1cc00017 	ldw	r19,0(r3)
 a002e1c:	002d883a 	mov	r22,zero
 a002e20:	20003716 	blt	r4,zero,a002f00 <___vfprintf_internal_r+0x14e8>
 a002e24:	00ffdfc4 	movi	r3,-129
 a002e28:	d8802e15 	stw	r2,184(sp)
 a002e2c:	90e4703a 	and	r18,r18,r3
 a002e30:	0039883a 	mov	fp,zero
 a002e34:	983dd426 	beq	r19,zero,a002588 <__alt_mem_flash+0xfe001588>
 a002e38:	00800244 	movi	r2,9
 a002e3c:	14fc5336 	bltu	r2,r19,a001f8c <__alt_mem_flash+0xfe000f8c>
 a002e40:	d8c02817 	ldw	r3,160(sp)
 a002e44:	dc001dc4 	addi	r16,sp,119
 a002e48:	9cc00c04 	addi	r19,r19,48
 a002e4c:	1c07c83a 	sub	r3,r3,r16
 a002e50:	dcc01dc5 	stb	r19,119(sp)
 a002e54:	d8c02b15 	stw	r3,172(sp)
 a002e58:	003cc606 	br	a002174 <__alt_mem_flash+0xfe001174>
 a002e5c:	d8803317 	ldw	r2,204(sp)
 a002e60:	143fffc4 	addi	r16,r2,-1
 a002e64:	043f4d0e 	bge	zero,r16,a002b9c <__alt_mem_flash+0xfe001b9c>
 a002e68:	07000404 	movi	fp,16
 a002e6c:	e400810e 	bge	fp,r16,a003074 <___vfprintf_internal_r+0x165c>
 a002e70:	01428074 	movhi	r5,2561
 a002e74:	29470b84 	addi	r5,r5,7214
 a002e78:	d9402c15 	stw	r5,176(sp)
 a002e7c:	01c001c4 	movi	r7,7
 a002e80:	dcc02d17 	ldw	r19,180(sp)
 a002e84:	00000306 	br	a002e94 <___vfprintf_internal_r+0x147c>
 a002e88:	b5800204 	addi	r22,r22,8
 a002e8c:	843ffc04 	addi	r16,r16,-16
 a002e90:	e4007b0e 	bge	fp,r16,a003080 <___vfprintf_internal_r+0x1668>
 a002e94:	18c00404 	addi	r3,r3,16
 a002e98:	8c400044 	addi	r17,r17,1
 a002e9c:	b5000015 	stw	r20,0(r22)
 a002ea0:	b7000115 	stw	fp,4(r22)
 a002ea4:	d8c02015 	stw	r3,128(sp)
 a002ea8:	dc401f15 	stw	r17,124(sp)
 a002eac:	3c7ff60e 	bge	r7,r17,a002e88 <__alt_mem_flash+0xfe001e88>
 a002eb0:	d9801e04 	addi	r6,sp,120
 a002eb4:	b80b883a 	mov	r5,r23
 a002eb8:	9809883a 	mov	r4,r19
 a002ebc:	d9c03c15 	stw	r7,240(sp)
 a002ec0:	a0087080 	call	a008708 <__sprint_r>
 a002ec4:	d9c03c17 	ldw	r7,240(sp)
 a002ec8:	103bd71e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002ecc:	d8c02017 	ldw	r3,128(sp)
 a002ed0:	dc401f17 	ldw	r17,124(sp)
 a002ed4:	dd800404 	addi	r22,sp,16
 a002ed8:	003fec06 	br	a002e8c <__alt_mem_flash+0xfe001e8c>
 a002edc:	9080100c 	andi	r2,r18,64
 a002ee0:	d8002785 	stb	zero,158(sp)
 a002ee4:	10010e26 	beq	r2,zero,a003320 <___vfprintf_internal_r+0x1908>
 a002ee8:	d9402e17 	ldw	r5,184(sp)
 a002eec:	d8c02a17 	ldw	r3,168(sp)
 a002ef0:	002d883a 	mov	r22,zero
 a002ef4:	28800104 	addi	r2,r5,4
 a002ef8:	2cc0000b 	ldhu	r19,0(r5)
 a002efc:	183fc90e 	bge	r3,zero,a002e24 <__alt_mem_flash+0xfe001e24>
 a002f00:	d8802e15 	stw	r2,184(sp)
 a002f04:	0039883a 	mov	fp,zero
 a002f08:	9d84b03a 	or	r2,r19,r22
 a002f0c:	103c1e1e 	bne	r2,zero,a001f88 <__alt_mem_flash+0xfe000f88>
 a002f10:	00800044 	movi	r2,1
 a002f14:	003e6c06 	br	a0028c8 <__alt_mem_flash+0xfe0018c8>
 a002f18:	d9002d17 	ldw	r4,180(sp)
 a002f1c:	d9801e04 	addi	r6,sp,120
 a002f20:	b80b883a 	mov	r5,r23
 a002f24:	a0087080 	call	a008708 <__sprint_r>
 a002f28:	103bbf1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a002f2c:	d8c02017 	ldw	r3,128(sp)
 a002f30:	da000404 	addi	r8,sp,16
 a002f34:	d9003217 	ldw	r4,200(sp)
 a002f38:	d8802617 	ldw	r2,152(sp)
 a002f3c:	d9403317 	ldw	r5,204(sp)
 a002f40:	8123883a 	add	r17,r16,r4
 a002f44:	11400216 	blt	r2,r5,a002f50 <___vfprintf_internal_r+0x1538>
 a002f48:	9100004c 	andi	r4,r18,1
 a002f4c:	20000d26 	beq	r4,zero,a002f84 <___vfprintf_internal_r+0x156c>
 a002f50:	d9003717 	ldw	r4,220(sp)
 a002f54:	d9403417 	ldw	r5,208(sp)
 a002f58:	1907883a 	add	r3,r3,r4
 a002f5c:	d9001f17 	ldw	r4,124(sp)
 a002f60:	41400015 	stw	r5,0(r8)
 a002f64:	d9403717 	ldw	r5,220(sp)
 a002f68:	21000044 	addi	r4,r4,1
 a002f6c:	d8c02015 	stw	r3,128(sp)
 a002f70:	41400115 	stw	r5,4(r8)
 a002f74:	d9001f15 	stw	r4,124(sp)
 a002f78:	014001c4 	movi	r5,7
 a002f7c:	2901e816 	blt	r5,r4,a003720 <___vfprintf_internal_r+0x1d08>
 a002f80:	42000204 	addi	r8,r8,8
 a002f84:	d9003317 	ldw	r4,204(sp)
 a002f88:	8121883a 	add	r16,r16,r4
 a002f8c:	2085c83a 	sub	r2,r4,r2
 a002f90:	8461c83a 	sub	r16,r16,r17
 a002f94:	1400010e 	bge	r2,r16,a002f9c <___vfprintf_internal_r+0x1584>
 a002f98:	1021883a 	mov	r16,r2
 a002f9c:	04000a0e 	bge	zero,r16,a002fc8 <___vfprintf_internal_r+0x15b0>
 a002fa0:	d9001f17 	ldw	r4,124(sp)
 a002fa4:	1c07883a 	add	r3,r3,r16
 a002fa8:	44400015 	stw	r17,0(r8)
 a002fac:	21000044 	addi	r4,r4,1
 a002fb0:	44000115 	stw	r16,4(r8)
 a002fb4:	d8c02015 	stw	r3,128(sp)
 a002fb8:	d9001f15 	stw	r4,124(sp)
 a002fbc:	014001c4 	movi	r5,7
 a002fc0:	2901fb16 	blt	r5,r4,a0037b0 <___vfprintf_internal_r+0x1d98>
 a002fc4:	42000204 	addi	r8,r8,8
 a002fc8:	8001f716 	blt	r16,zero,a0037a8 <___vfprintf_internal_r+0x1d90>
 a002fcc:	1421c83a 	sub	r16,r2,r16
 a002fd0:	043d160e 	bge	zero,r16,a00242c <__alt_mem_flash+0xfe00142c>
 a002fd4:	04400404 	movi	r17,16
 a002fd8:	d8801f17 	ldw	r2,124(sp)
 a002fdc:	8c3efb0e 	bge	r17,r16,a002bcc <__alt_mem_flash+0xfe001bcc>
 a002fe0:	01428074 	movhi	r5,2561
 a002fe4:	29470b84 	addi	r5,r5,7214
 a002fe8:	d9402c15 	stw	r5,176(sp)
 a002fec:	058001c4 	movi	r22,7
 a002ff0:	dcc02d17 	ldw	r19,180(sp)
 a002ff4:	00000306 	br	a003004 <___vfprintf_internal_r+0x15ec>
 a002ff8:	42000204 	addi	r8,r8,8
 a002ffc:	843ffc04 	addi	r16,r16,-16
 a003000:	8c3ef50e 	bge	r17,r16,a002bd8 <__alt_mem_flash+0xfe001bd8>
 a003004:	18c00404 	addi	r3,r3,16
 a003008:	10800044 	addi	r2,r2,1
 a00300c:	45000015 	stw	r20,0(r8)
 a003010:	44400115 	stw	r17,4(r8)
 a003014:	d8c02015 	stw	r3,128(sp)
 a003018:	d8801f15 	stw	r2,124(sp)
 a00301c:	b0bff60e 	bge	r22,r2,a002ff8 <__alt_mem_flash+0xfe001ff8>
 a003020:	d9801e04 	addi	r6,sp,120
 a003024:	b80b883a 	mov	r5,r23
 a003028:	9809883a 	mov	r4,r19
 a00302c:	a0087080 	call	a008708 <__sprint_r>
 a003030:	103b7d1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a003034:	d8c02017 	ldw	r3,128(sp)
 a003038:	d8801f17 	ldw	r2,124(sp)
 a00303c:	da000404 	addi	r8,sp,16
 a003040:	003fee06 	br	a002ffc <__alt_mem_flash+0xfe001ffc>
 a003044:	9088703a 	and	r4,r18,r2
 a003048:	203eab1e 	bne	r4,zero,a002af8 <__alt_mem_flash+0xfe001af8>
 a00304c:	dc401f17 	ldw	r17,124(sp)
 a003050:	40800115 	stw	r2,4(r8)
 a003054:	44000015 	stw	r16,0(r8)
 a003058:	8c400044 	addi	r17,r17,1
 a00305c:	d8c02015 	stw	r3,128(sp)
 a003060:	dc401f15 	stw	r17,124(sp)
 a003064:	008001c4 	movi	r2,7
 a003068:	14400e16 	blt	r2,r17,a0030a4 <___vfprintf_internal_r+0x168c>
 a00306c:	45800204 	addi	r22,r8,8
 a003070:	003eca06 	br	a002b9c <__alt_mem_flash+0xfe001b9c>
 a003074:	01028074 	movhi	r4,2561
 a003078:	21070b84 	addi	r4,r4,7214
 a00307c:	d9002c15 	stw	r4,176(sp)
 a003080:	d8802c17 	ldw	r2,176(sp)
 a003084:	1c07883a 	add	r3,r3,r16
 a003088:	8c400044 	addi	r17,r17,1
 a00308c:	b0800015 	stw	r2,0(r22)
 a003090:	b4000115 	stw	r16,4(r22)
 a003094:	d8c02015 	stw	r3,128(sp)
 a003098:	dc401f15 	stw	r17,124(sp)
 a00309c:	008001c4 	movi	r2,7
 a0030a0:	147ebd0e 	bge	r2,r17,a002b98 <__alt_mem_flash+0xfe001b98>
 a0030a4:	d9002d17 	ldw	r4,180(sp)
 a0030a8:	d9801e04 	addi	r6,sp,120
 a0030ac:	b80b883a 	mov	r5,r23
 a0030b0:	a0087080 	call	a008708 <__sprint_r>
 a0030b4:	103b5c1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a0030b8:	d8c02017 	ldw	r3,128(sp)
 a0030bc:	dc401f17 	ldw	r17,124(sp)
 a0030c0:	dd800404 	addi	r22,sp,16
 a0030c4:	003eb506 	br	a002b9c <__alt_mem_flash+0xfe001b9c>
 a0030c8:	d9002d17 	ldw	r4,180(sp)
 a0030cc:	d9801e04 	addi	r6,sp,120
 a0030d0:	b80b883a 	mov	r5,r23
 a0030d4:	a0087080 	call	a008708 <__sprint_r>
 a0030d8:	103b531e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a0030dc:	d8c02017 	ldw	r3,128(sp)
 a0030e0:	dc401f17 	ldw	r17,124(sp)
 a0030e4:	da000404 	addi	r8,sp,16
 a0030e8:	003e8d06 	br	a002b20 <__alt_mem_flash+0xfe001b20>
 a0030ec:	d9002d17 	ldw	r4,180(sp)
 a0030f0:	d9801e04 	addi	r6,sp,120
 a0030f4:	b80b883a 	mov	r5,r23
 a0030f8:	a0087080 	call	a008708 <__sprint_r>
 a0030fc:	103b4a1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a003100:	d8c02017 	ldw	r3,128(sp)
 a003104:	dc401f17 	ldw	r17,124(sp)
 a003108:	dd800404 	addi	r22,sp,16
 a00310c:	003e8f06 	br	a002b4c <__alt_mem_flash+0xfe001b4c>
 a003110:	0027883a 	mov	r19,zero
 a003114:	003f4a06 	br	a002e40 <__alt_mem_flash+0xfe001e40>
 a003118:	d9002d17 	ldw	r4,180(sp)
 a00311c:	d9801e04 	addi	r6,sp,120
 a003120:	b80b883a 	mov	r5,r23
 a003124:	a0087080 	call	a008708 <__sprint_r>
 a003128:	103b3f1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a00312c:	d8c02017 	ldw	r3,128(sp)
 a003130:	da000404 	addi	r8,sp,16
 a003134:	003c7b06 	br	a002324 <__alt_mem_flash+0xfe001324>
 a003138:	d9402a17 	ldw	r5,168(sp)
 a00313c:	04e7c83a 	sub	r19,zero,r19
 a003140:	07000b44 	movi	fp,45
 a003144:	9804c03a 	cmpne	r2,r19,zero
 a003148:	05adc83a 	sub	r22,zero,r22
 a00314c:	df002785 	stb	fp,158(sp)
 a003150:	b0adc83a 	sub	r22,r22,r2
 a003154:	28017b16 	blt	r5,zero,a003744 <___vfprintf_internal_r+0x1d2c>
 a003158:	00bfdfc4 	movi	r2,-129
 a00315c:	90a4703a 	and	r18,r18,r2
 a003160:	003b8906 	br	a001f88 <__alt_mem_flash+0xfe000f88>
 a003164:	d9003617 	ldw	r4,216(sp)
 a003168:	d9403817 	ldw	r5,224(sp)
 a00316c:	da003d15 	stw	r8,244(sp)
 a003170:	a0082940 	call	a008294 <__fpclassifyd>
 a003174:	da003d17 	ldw	r8,244(sp)
 a003178:	1000f026 	beq	r2,zero,a00353c <___vfprintf_internal_r+0x1b24>
 a00317c:	d9002a17 	ldw	r4,168(sp)
 a003180:	05bff7c4 	movi	r22,-33
 a003184:	00bfffc4 	movi	r2,-1
 a003188:	8dac703a 	and	r22,r17,r22
 a00318c:	20820026 	beq	r4,r2,a003990 <___vfprintf_internal_r+0x1f78>
 a003190:	008011c4 	movi	r2,71
 a003194:	b081f726 	beq	r22,r2,a003974 <___vfprintf_internal_r+0x1f5c>
 a003198:	d9003817 	ldw	r4,224(sp)
 a00319c:	90c04014 	ori	r3,r18,256
 a0031a0:	d8c02c15 	stw	r3,176(sp)
 a0031a4:	20021516 	blt	r4,zero,a0039fc <___vfprintf_internal_r+0x1fe4>
 a0031a8:	dcc03817 	ldw	r19,224(sp)
 a0031ac:	d8002905 	stb	zero,164(sp)
 a0031b0:	00801984 	movi	r2,102
 a0031b4:	8881f926 	beq	r17,r2,a00399c <___vfprintf_internal_r+0x1f84>
 a0031b8:	00801184 	movi	r2,70
 a0031bc:	88821c26 	beq	r17,r2,a003a30 <___vfprintf_internal_r+0x2018>
 a0031c0:	00801144 	movi	r2,69
 a0031c4:	b081ef26 	beq	r22,r2,a003984 <___vfprintf_internal_r+0x1f6c>
 a0031c8:	d8c02a17 	ldw	r3,168(sp)
 a0031cc:	d8802104 	addi	r2,sp,132
 a0031d0:	d8800315 	stw	r2,12(sp)
 a0031d4:	d9403617 	ldw	r5,216(sp)
 a0031d8:	d8802504 	addi	r2,sp,148
 a0031dc:	d9002d17 	ldw	r4,180(sp)
 a0031e0:	d8800215 	stw	r2,8(sp)
 a0031e4:	d8802604 	addi	r2,sp,152
 a0031e8:	d8c00015 	stw	r3,0(sp)
 a0031ec:	d8800115 	stw	r2,4(sp)
 a0031f0:	01c00084 	movi	r7,2
 a0031f4:	980d883a 	mov	r6,r19
 a0031f8:	d8c03c15 	stw	r3,240(sp)
 a0031fc:	da003d15 	stw	r8,244(sp)
 a003200:	a0041480 	call	a004148 <_dtoa_r>
 a003204:	1021883a 	mov	r16,r2
 a003208:	008019c4 	movi	r2,103
 a00320c:	d8c03c17 	ldw	r3,240(sp)
 a003210:	da003d17 	ldw	r8,244(sp)
 a003214:	88817126 	beq	r17,r2,a0037dc <___vfprintf_internal_r+0x1dc4>
 a003218:	008011c4 	movi	r2,71
 a00321c:	88829126 	beq	r17,r2,a003c64 <___vfprintf_internal_r+0x224c>
 a003220:	80f9883a 	add	fp,r16,r3
 a003224:	d9003617 	ldw	r4,216(sp)
 a003228:	000d883a 	mov	r6,zero
 a00322c:	000f883a 	mov	r7,zero
 a003230:	980b883a 	mov	r5,r19
 a003234:	da003d15 	stw	r8,244(sp)
 a003238:	a00c91c0 	call	a00c91c <__eqdf2>
 a00323c:	da003d17 	ldw	r8,244(sp)
 a003240:	10018d26 	beq	r2,zero,a003878 <___vfprintf_internal_r+0x1e60>
 a003244:	d8802117 	ldw	r2,132(sp)
 a003248:	1700062e 	bgeu	r2,fp,a003264 <___vfprintf_internal_r+0x184c>
 a00324c:	01000c04 	movi	r4,48
 a003250:	10c00044 	addi	r3,r2,1
 a003254:	d8c02115 	stw	r3,132(sp)
 a003258:	11000005 	stb	r4,0(r2)
 a00325c:	d8802117 	ldw	r2,132(sp)
 a003260:	173ffb36 	bltu	r2,fp,a003250 <__alt_mem_flash+0xfe002250>
 a003264:	1405c83a 	sub	r2,r2,r16
 a003268:	d8803315 	stw	r2,204(sp)
 a00326c:	008011c4 	movi	r2,71
 a003270:	b0817626 	beq	r22,r2,a00384c <___vfprintf_internal_r+0x1e34>
 a003274:	00801944 	movi	r2,101
 a003278:	1442800e 	bge	r2,r17,a003c7c <___vfprintf_internal_r+0x2264>
 a00327c:	d8c02617 	ldw	r3,152(sp)
 a003280:	00801984 	movi	r2,102
 a003284:	d8c03215 	stw	r3,200(sp)
 a003288:	8881fe26 	beq	r17,r2,a003a84 <___vfprintf_internal_r+0x206c>
 a00328c:	d8c03217 	ldw	r3,200(sp)
 a003290:	d9003317 	ldw	r4,204(sp)
 a003294:	1901dd16 	blt	r3,r4,a003a0c <___vfprintf_internal_r+0x1ff4>
 a003298:	9480004c 	andi	r18,r18,1
 a00329c:	90022b1e 	bne	r18,zero,a003b4c <___vfprintf_internal_r+0x2134>
 a0032a0:	1805883a 	mov	r2,r3
 a0032a4:	18028316 	blt	r3,zero,a003cb4 <___vfprintf_internal_r+0x229c>
 a0032a8:	d8c03217 	ldw	r3,200(sp)
 a0032ac:	044019c4 	movi	r17,103
 a0032b0:	d8c02b15 	stw	r3,172(sp)
 a0032b4:	df002907 	ldb	fp,164(sp)
 a0032b8:	e001531e 	bne	fp,zero,a003808 <___vfprintf_internal_r+0x1df0>
 a0032bc:	df002783 	ldbu	fp,158(sp)
 a0032c0:	d8802915 	stw	r2,164(sp)
 a0032c4:	dc802c17 	ldw	r18,176(sp)
 a0032c8:	d8002a15 	stw	zero,168(sp)
 a0032cc:	003baf06 	br	a00218c <__alt_mem_flash+0xfe00118c>
 a0032d0:	d8c02e17 	ldw	r3,184(sp)
 a0032d4:	d9002e17 	ldw	r4,184(sp)
 a0032d8:	d9402e17 	ldw	r5,184(sp)
 a0032dc:	18c00017 	ldw	r3,0(r3)
 a0032e0:	21000117 	ldw	r4,4(r4)
 a0032e4:	29400204 	addi	r5,r5,8
 a0032e8:	d8c03615 	stw	r3,216(sp)
 a0032ec:	d9003815 	stw	r4,224(sp)
 a0032f0:	d9402e15 	stw	r5,184(sp)
 a0032f4:	003b5006 	br	a002038 <__alt_mem_flash+0xfe001038>
 a0032f8:	ac400007 	ldb	r17,0(r21)
 a0032fc:	003a2806 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a003300:	9080100c 	andi	r2,r18,64
 a003304:	1000a826 	beq	r2,zero,a0035a8 <___vfprintf_internal_r+0x1b90>
 a003308:	d8c02e17 	ldw	r3,184(sp)
 a00330c:	002d883a 	mov	r22,zero
 a003310:	1cc0000b 	ldhu	r19,0(r3)
 a003314:	18c00104 	addi	r3,r3,4
 a003318:	d8c02e15 	stw	r3,184(sp)
 a00331c:	003caf06 	br	a0025dc <__alt_mem_flash+0xfe0015dc>
 a003320:	d9002e17 	ldw	r4,184(sp)
 a003324:	d9402a17 	ldw	r5,168(sp)
 a003328:	002d883a 	mov	r22,zero
 a00332c:	20800104 	addi	r2,r4,4
 a003330:	24c00017 	ldw	r19,0(r4)
 a003334:	283ebb0e 	bge	r5,zero,a002e24 <__alt_mem_flash+0xfe001e24>
 a003338:	003ef106 	br	a002f00 <__alt_mem_flash+0xfe001f00>
 a00333c:	9080040c 	andi	r2,r18,16
 a003340:	1000921e 	bne	r2,zero,a00358c <___vfprintf_internal_r+0x1b74>
 a003344:	9480100c 	andi	r18,r18,64
 a003348:	90013926 	beq	r18,zero,a003830 <___vfprintf_internal_r+0x1e18>
 a00334c:	d9402e17 	ldw	r5,184(sp)
 a003350:	d8c02f17 	ldw	r3,188(sp)
 a003354:	28800017 	ldw	r2,0(r5)
 a003358:	29400104 	addi	r5,r5,4
 a00335c:	d9402e15 	stw	r5,184(sp)
 a003360:	10c0000d 	sth	r3,0(r2)
 a003364:	0039e406 	br	a001af8 <__alt_mem_flash+0xfe000af8>
 a003368:	9080100c 	andi	r2,r18,64
 a00336c:	10008026 	beq	r2,zero,a003570 <___vfprintf_internal_r+0x1b58>
 a003370:	d8802e17 	ldw	r2,184(sp)
 a003374:	14c0000f 	ldh	r19,0(r2)
 a003378:	10800104 	addi	r2,r2,4
 a00337c:	d8802e15 	stw	r2,184(sp)
 a003380:	982dd7fa 	srai	r22,r19,31
 a003384:	b005883a 	mov	r2,r22
 a003388:	003af706 	br	a001f68 <__alt_mem_flash+0xfe000f68>
 a00338c:	9080100c 	andi	r2,r18,64
 a003390:	d8002785 	stb	zero,158(sp)
 a003394:	10008a1e 	bne	r2,zero,a0035c0 <___vfprintf_internal_r+0x1ba8>
 a003398:	d9002e17 	ldw	r4,184(sp)
 a00339c:	d9402a17 	ldw	r5,168(sp)
 a0033a0:	002d883a 	mov	r22,zero
 a0033a4:	20800104 	addi	r2,r4,4
 a0033a8:	24c00017 	ldw	r19,0(r4)
 a0033ac:	283e4b0e 	bge	r5,zero,a002cdc <__alt_mem_flash+0xfe001cdc>
 a0033b0:	9d86b03a 	or	r3,r19,r22
 a0033b4:	d8802e15 	stw	r2,184(sp)
 a0033b8:	183e4c1e 	bne	r3,zero,a002cec <__alt_mem_flash+0xfe001cec>
 a0033bc:	0039883a 	mov	fp,zero
 a0033c0:	0005883a 	mov	r2,zero
 a0033c4:	003d4006 	br	a0028c8 <__alt_mem_flash+0xfe0018c8>
 a0033c8:	01428074 	movhi	r5,2561
 a0033cc:	29470b84 	addi	r5,r5,7214
 a0033d0:	d9402c15 	stw	r5,176(sp)
 a0033d4:	d9402c17 	ldw	r5,176(sp)
 a0033d8:	1c47883a 	add	r3,r3,r17
 a0033dc:	10800044 	addi	r2,r2,1
 a0033e0:	41400015 	stw	r5,0(r8)
 a0033e4:	44400115 	stw	r17,4(r8)
 a0033e8:	d8c02015 	stw	r3,128(sp)
 a0033ec:	d8801f15 	stw	r2,124(sp)
 a0033f0:	010001c4 	movi	r4,7
 a0033f4:	20bec816 	blt	r4,r2,a002f18 <__alt_mem_flash+0xfe001f18>
 a0033f8:	42000204 	addi	r8,r8,8
 a0033fc:	003ecd06 	br	a002f34 <__alt_mem_flash+0xfe001f34>
 a003400:	d9002a17 	ldw	r4,168(sp)
 a003404:	d8002785 	stb	zero,158(sp)
 a003408:	203d2d16 	blt	r4,zero,a0028c0 <__alt_mem_flash+0xfe0018c0>
 a00340c:	00bfdfc4 	movi	r2,-129
 a003410:	90a4703a 	and	r18,r18,r2
 a003414:	003a6106 	br	a001d9c <__alt_mem_flash+0xfe000d9c>
 a003418:	01028074 	movhi	r4,2561
 a00341c:	21070b84 	addi	r4,r4,7214
 a003420:	d9002c15 	stw	r4,176(sp)
 a003424:	003bea06 	br	a0023d0 <__alt_mem_flash+0xfe0013d0>
 a003428:	d9002d17 	ldw	r4,180(sp)
 a00342c:	d9801e04 	addi	r6,sp,120
 a003430:	b80b883a 	mov	r5,r23
 a003434:	a0087080 	call	a008708 <__sprint_r>
 a003438:	103a7b1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a00343c:	d8c02017 	ldw	r3,128(sp)
 a003440:	da000404 	addi	r8,sp,16
 a003444:	003d4106 	br	a00294c <__alt_mem_flash+0xfe00194c>
 a003448:	d8801f17 	ldw	r2,124(sp)
 a00344c:	01428074 	movhi	r5,2561
 a003450:	01000044 	movi	r4,1
 a003454:	18c00044 	addi	r3,r3,1
 a003458:	10800044 	addi	r2,r2,1
 a00345c:	29470b04 	addi	r5,r5,7212
 a003460:	41000115 	stw	r4,4(r8)
 a003464:	41400015 	stw	r5,0(r8)
 a003468:	d8c02015 	stw	r3,128(sp)
 a00346c:	d8801f15 	stw	r2,124(sp)
 a003470:	010001c4 	movi	r4,7
 a003474:	20805c16 	blt	r4,r2,a0035e8 <___vfprintf_internal_r+0x1bd0>
 a003478:	42000204 	addi	r8,r8,8
 a00347c:	8800041e 	bne	r17,zero,a003490 <___vfprintf_internal_r+0x1a78>
 a003480:	d8803317 	ldw	r2,204(sp)
 a003484:	1000021e 	bne	r2,zero,a003490 <___vfprintf_internal_r+0x1a78>
 a003488:	9080004c 	andi	r2,r18,1
 a00348c:	103be726 	beq	r2,zero,a00242c <__alt_mem_flash+0xfe00142c>
 a003490:	d9003717 	ldw	r4,220(sp)
 a003494:	d8801f17 	ldw	r2,124(sp)
 a003498:	d9403417 	ldw	r5,208(sp)
 a00349c:	20c7883a 	add	r3,r4,r3
 a0034a0:	10800044 	addi	r2,r2,1
 a0034a4:	41000115 	stw	r4,4(r8)
 a0034a8:	41400015 	stw	r5,0(r8)
 a0034ac:	d8c02015 	stw	r3,128(sp)
 a0034b0:	d8801f15 	stw	r2,124(sp)
 a0034b4:	010001c4 	movi	r4,7
 a0034b8:	20812116 	blt	r4,r2,a003940 <___vfprintf_internal_r+0x1f28>
 a0034bc:	42000204 	addi	r8,r8,8
 a0034c0:	0463c83a 	sub	r17,zero,r17
 a0034c4:	0440730e 	bge	zero,r17,a003694 <___vfprintf_internal_r+0x1c7c>
 a0034c8:	05800404 	movi	r22,16
 a0034cc:	b440860e 	bge	r22,r17,a0036e8 <___vfprintf_internal_r+0x1cd0>
 a0034d0:	01428074 	movhi	r5,2561
 a0034d4:	29470b84 	addi	r5,r5,7214
 a0034d8:	d9402c15 	stw	r5,176(sp)
 a0034dc:	070001c4 	movi	fp,7
 a0034e0:	dcc02d17 	ldw	r19,180(sp)
 a0034e4:	00000306 	br	a0034f4 <___vfprintf_internal_r+0x1adc>
 a0034e8:	42000204 	addi	r8,r8,8
 a0034ec:	8c7ffc04 	addi	r17,r17,-16
 a0034f0:	b440800e 	bge	r22,r17,a0036f4 <___vfprintf_internal_r+0x1cdc>
 a0034f4:	18c00404 	addi	r3,r3,16
 a0034f8:	10800044 	addi	r2,r2,1
 a0034fc:	45000015 	stw	r20,0(r8)
 a003500:	45800115 	stw	r22,4(r8)
 a003504:	d8c02015 	stw	r3,128(sp)
 a003508:	d8801f15 	stw	r2,124(sp)
 a00350c:	e0bff60e 	bge	fp,r2,a0034e8 <__alt_mem_flash+0xfe0024e8>
 a003510:	d9801e04 	addi	r6,sp,120
 a003514:	b80b883a 	mov	r5,r23
 a003518:	9809883a 	mov	r4,r19
 a00351c:	a0087080 	call	a008708 <__sprint_r>
 a003520:	103a411e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a003524:	d8c02017 	ldw	r3,128(sp)
 a003528:	d8801f17 	ldw	r2,124(sp)
 a00352c:	da000404 	addi	r8,sp,16
 a003530:	003fee06 	br	a0034ec <__alt_mem_flash+0xfe0024ec>
 a003534:	00bfffc4 	movi	r2,-1
 a003538:	003a3f06 	br	a001e38 <__alt_mem_flash+0xfe000e38>
 a00353c:	008011c4 	movi	r2,71
 a003540:	1440b816 	blt	r2,r17,a003824 <___vfprintf_internal_r+0x1e0c>
 a003544:	04028074 	movhi	r16,2561
 a003548:	8406fd04 	addi	r16,r16,7156
 a00354c:	00c000c4 	movi	r3,3
 a003550:	00bfdfc4 	movi	r2,-129
 a003554:	d8c02915 	stw	r3,164(sp)
 a003558:	90a4703a 	and	r18,r18,r2
 a00355c:	df002783 	ldbu	fp,158(sp)
 a003560:	d8c02b15 	stw	r3,172(sp)
 a003564:	d8002a15 	stw	zero,168(sp)
 a003568:	d8003215 	stw	zero,200(sp)
 a00356c:	003b0706 	br	a00218c <__alt_mem_flash+0xfe00118c>
 a003570:	d8c02e17 	ldw	r3,184(sp)
 a003574:	1cc00017 	ldw	r19,0(r3)
 a003578:	18c00104 	addi	r3,r3,4
 a00357c:	d8c02e15 	stw	r3,184(sp)
 a003580:	982dd7fa 	srai	r22,r19,31
 a003584:	b005883a 	mov	r2,r22
 a003588:	003a7706 	br	a001f68 <__alt_mem_flash+0xfe000f68>
 a00358c:	d8c02e17 	ldw	r3,184(sp)
 a003590:	d9002f17 	ldw	r4,188(sp)
 a003594:	18800017 	ldw	r2,0(r3)
 a003598:	18c00104 	addi	r3,r3,4
 a00359c:	d8c02e15 	stw	r3,184(sp)
 a0035a0:	11000015 	stw	r4,0(r2)
 a0035a4:	00395406 	br	a001af8 <__alt_mem_flash+0xfe000af8>
 a0035a8:	d9002e17 	ldw	r4,184(sp)
 a0035ac:	002d883a 	mov	r22,zero
 a0035b0:	24c00017 	ldw	r19,0(r4)
 a0035b4:	21000104 	addi	r4,r4,4
 a0035b8:	d9002e15 	stw	r4,184(sp)
 a0035bc:	003c0706 	br	a0025dc <__alt_mem_flash+0xfe0015dc>
 a0035c0:	d9402e17 	ldw	r5,184(sp)
 a0035c4:	d8c02a17 	ldw	r3,168(sp)
 a0035c8:	002d883a 	mov	r22,zero
 a0035cc:	28800104 	addi	r2,r5,4
 a0035d0:	2cc0000b 	ldhu	r19,0(r5)
 a0035d4:	183dc10e 	bge	r3,zero,a002cdc <__alt_mem_flash+0xfe001cdc>
 a0035d8:	003f7506 	br	a0033b0 <__alt_mem_flash+0xfe0023b0>
 a0035dc:	04028074 	movhi	r16,2561
 a0035e0:	8406fb04 	addi	r16,r16,7148
 a0035e4:	003aa706 	br	a002084 <__alt_mem_flash+0xfe001084>
 a0035e8:	d9002d17 	ldw	r4,180(sp)
 a0035ec:	d9801e04 	addi	r6,sp,120
 a0035f0:	b80b883a 	mov	r5,r23
 a0035f4:	a0087080 	call	a008708 <__sprint_r>
 a0035f8:	103a0b1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a0035fc:	dc402617 	ldw	r17,152(sp)
 a003600:	d8c02017 	ldw	r3,128(sp)
 a003604:	da000404 	addi	r8,sp,16
 a003608:	003f9c06 	br	a00347c <__alt_mem_flash+0xfe00247c>
 a00360c:	ac400043 	ldbu	r17,1(r21)
 a003610:	84000814 	ori	r16,r16,32
 a003614:	ad400044 	addi	r21,r21,1
 a003618:	8c403fcc 	andi	r17,r17,255
 a00361c:	8c40201c 	xori	r17,r17,128
 a003620:	8c7fe004 	addi	r17,r17,-128
 a003624:	00395e06 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a003628:	d8c02e15 	stw	r3,184(sp)
 a00362c:	0039883a 	mov	fp,zero
 a003630:	003e3506 	br	a002f08 <__alt_mem_flash+0xfe001f08>
 a003634:	d9002d17 	ldw	r4,180(sp)
 a003638:	d9801e04 	addi	r6,sp,120
 a00363c:	b80b883a 	mov	r5,r23
 a003640:	a0087080 	call	a008708 <__sprint_r>
 a003644:	1039f81e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a003648:	d8c02017 	ldw	r3,128(sp)
 a00364c:	da000404 	addi	r8,sp,16
 a003650:	003cd006 	br	a002994 <__alt_mem_flash+0xfe001994>
 a003654:	8009883a 	mov	r4,r16
 a003658:	df003d15 	stw	fp,244(sp)
 a00365c:	a0085740 	call	a008574 <strlen>
 a003660:	d8802b15 	stw	r2,172(sp)
 a003664:	da003d17 	ldw	r8,244(sp)
 a003668:	103c200e 	bge	r2,zero,a0026ec <__alt_mem_flash+0xfe0016ec>
 a00366c:	0005883a 	mov	r2,zero
 a003670:	003c1e06 	br	a0026ec <__alt_mem_flash+0xfe0016ec>
 a003674:	d9002d17 	ldw	r4,180(sp)
 a003678:	d9801e04 	addi	r6,sp,120
 a00367c:	b80b883a 	mov	r5,r23
 a003680:	a0087080 	call	a008708 <__sprint_r>
 a003684:	1039e81e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a003688:	d8c02017 	ldw	r3,128(sp)
 a00368c:	d8801f17 	ldw	r2,124(sp)
 a003690:	da000404 	addi	r8,sp,16
 a003694:	d9403317 	ldw	r5,204(sp)
 a003698:	10800044 	addi	r2,r2,1
 a00369c:	44000015 	stw	r16,0(r8)
 a0036a0:	28c7883a 	add	r3,r5,r3
 a0036a4:	003b5b06 	br	a002414 <__alt_mem_flash+0xfe001414>
 a0036a8:	01028074 	movhi	r4,2561
 a0036ac:	21070f84 	addi	r4,r4,7230
 a0036b0:	d9003515 	stw	r4,212(sp)
 a0036b4:	003af206 	br	a002280 <__alt_mem_flash+0xfe001280>
 a0036b8:	013fffc4 	movi	r4,-1
 a0036bc:	003a0806 	br	a001ee0 <__alt_mem_flash+0xfe000ee0>
 a0036c0:	0023883a 	mov	r17,zero
 a0036c4:	003d9d06 	br	a002d3c <__alt_mem_flash+0xfe001d3c>
 a0036c8:	d9002d17 	ldw	r4,180(sp)
 a0036cc:	d9801e04 	addi	r6,sp,120
 a0036d0:	b80b883a 	mov	r5,r23
 a0036d4:	a0087080 	call	a008708 <__sprint_r>
 a0036d8:	1039d31e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a0036dc:	d8c02017 	ldw	r3,128(sp)
 a0036e0:	da000404 	addi	r8,sp,16
 a0036e4:	003d9406 	br	a002d38 <__alt_mem_flash+0xfe001d38>
 a0036e8:	01028074 	movhi	r4,2561
 a0036ec:	21070b84 	addi	r4,r4,7214
 a0036f0:	d9002c15 	stw	r4,176(sp)
 a0036f4:	d9002c17 	ldw	r4,176(sp)
 a0036f8:	1c47883a 	add	r3,r3,r17
 a0036fc:	10800044 	addi	r2,r2,1
 a003700:	41000015 	stw	r4,0(r8)
 a003704:	44400115 	stw	r17,4(r8)
 a003708:	d8c02015 	stw	r3,128(sp)
 a00370c:	d8801f15 	stw	r2,124(sp)
 a003710:	010001c4 	movi	r4,7
 a003714:	20bfd716 	blt	r4,r2,a003674 <__alt_mem_flash+0xfe002674>
 a003718:	42000204 	addi	r8,r8,8
 a00371c:	003fdd06 	br	a003694 <__alt_mem_flash+0xfe002694>
 a003720:	d9002d17 	ldw	r4,180(sp)
 a003724:	d9801e04 	addi	r6,sp,120
 a003728:	b80b883a 	mov	r5,r23
 a00372c:	a0087080 	call	a008708 <__sprint_r>
 a003730:	1039bd1e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a003734:	d8802617 	ldw	r2,152(sp)
 a003738:	d8c02017 	ldw	r3,128(sp)
 a00373c:	da000404 	addi	r8,sp,16
 a003740:	003e1006 	br	a002f84 <__alt_mem_flash+0xfe001f84>
 a003744:	00800044 	movi	r2,1
 a003748:	10803fcc 	andi	r2,r2,255
 a00374c:	00c00044 	movi	r3,1
 a003750:	10fa0d26 	beq	r2,r3,a001f88 <__alt_mem_flash+0xfe000f88>
 a003754:	00c00084 	movi	r3,2
 a003758:	10fbaf26 	beq	r2,r3,a002618 <__alt_mem_flash+0xfe001618>
 a00375c:	003a6d06 	br	a002114 <__alt_mem_flash+0xfe001114>
 a003760:	01028074 	movhi	r4,2561
 a003764:	21070f84 	addi	r4,r4,7230
 a003768:	d9003515 	stw	r4,212(sp)
 a00376c:	003b5406 	br	a0024c0 <__alt_mem_flash+0xfe0014c0>
 a003770:	d8802a17 	ldw	r2,168(sp)
 a003774:	00c00184 	movi	r3,6
 a003778:	1880012e 	bgeu	r3,r2,a003780 <___vfprintf_internal_r+0x1d68>
 a00377c:	1805883a 	mov	r2,r3
 a003780:	d8802b15 	stw	r2,172(sp)
 a003784:	1000ef16 	blt	r2,zero,a003b44 <___vfprintf_internal_r+0x212c>
 a003788:	04028074 	movhi	r16,2561
 a00378c:	d8802915 	stw	r2,164(sp)
 a003790:	dcc02e15 	stw	r19,184(sp)
 a003794:	d8002a15 	stw	zero,168(sp)
 a003798:	d8003215 	stw	zero,200(sp)
 a00379c:	84070904 	addi	r16,r16,7204
 a0037a0:	0039883a 	mov	fp,zero
 a0037a4:	003a8006 	br	a0021a8 <__alt_mem_flash+0xfe0011a8>
 a0037a8:	0021883a 	mov	r16,zero
 a0037ac:	003e0706 	br	a002fcc <__alt_mem_flash+0xfe001fcc>
 a0037b0:	d9002d17 	ldw	r4,180(sp)
 a0037b4:	d9801e04 	addi	r6,sp,120
 a0037b8:	b80b883a 	mov	r5,r23
 a0037bc:	a0087080 	call	a008708 <__sprint_r>
 a0037c0:	1039991e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a0037c4:	d8802617 	ldw	r2,152(sp)
 a0037c8:	d9403317 	ldw	r5,204(sp)
 a0037cc:	d8c02017 	ldw	r3,128(sp)
 a0037d0:	da000404 	addi	r8,sp,16
 a0037d4:	2885c83a 	sub	r2,r5,r2
 a0037d8:	003dfb06 	br	a002fc8 <__alt_mem_flash+0xfe001fc8>
 a0037dc:	9080004c 	andi	r2,r18,1
 a0037e0:	103e8f1e 	bne	r2,zero,a003220 <__alt_mem_flash+0xfe002220>
 a0037e4:	d8802117 	ldw	r2,132(sp)
 a0037e8:	003e9e06 	br	a003264 <__alt_mem_flash+0xfe002264>
 a0037ec:	1025883a 	mov	r18,r2
 a0037f0:	0039883a 	mov	fp,zero
 a0037f4:	00800084 	movi	r2,2
 a0037f8:	003fd306 	br	a003748 <__alt_mem_flash+0xfe002748>
 a0037fc:	07000b44 	movi	fp,45
 a003800:	df002785 	stb	fp,158(sp)
 a003804:	003a1b06 	br	a002074 <__alt_mem_flash+0xfe001074>
 a003808:	00c00b44 	movi	r3,45
 a00380c:	d8c02785 	stb	r3,158(sp)
 a003810:	d8802915 	stw	r2,164(sp)
 a003814:	dc802c17 	ldw	r18,176(sp)
 a003818:	d8002a15 	stw	zero,168(sp)
 a00381c:	07000b44 	movi	fp,45
 a003820:	003a5e06 	br	a00219c <__alt_mem_flash+0xfe00119c>
 a003824:	04028074 	movhi	r16,2561
 a003828:	8406fe04 	addi	r16,r16,7160
 a00382c:	003f4706 	br	a00354c <__alt_mem_flash+0xfe00254c>
 a003830:	d9002e17 	ldw	r4,184(sp)
 a003834:	d9402f17 	ldw	r5,188(sp)
 a003838:	20800017 	ldw	r2,0(r4)
 a00383c:	21000104 	addi	r4,r4,4
 a003840:	d9002e15 	stw	r4,184(sp)
 a003844:	11400015 	stw	r5,0(r2)
 a003848:	0038ab06 	br	a001af8 <__alt_mem_flash+0xfe000af8>
 a00384c:	dd802617 	ldw	r22,152(sp)
 a003850:	00bfff44 	movi	r2,-3
 a003854:	b0801c16 	blt	r22,r2,a0038c8 <___vfprintf_internal_r+0x1eb0>
 a003858:	d9402a17 	ldw	r5,168(sp)
 a00385c:	2d801a16 	blt	r5,r22,a0038c8 <___vfprintf_internal_r+0x1eb0>
 a003860:	dd803215 	stw	r22,200(sp)
 a003864:	003e8906 	br	a00328c <__alt_mem_flash+0xfe00228c>
 a003868:	01028074 	movhi	r4,2561
 a00386c:	21070b84 	addi	r4,r4,7214
 a003870:	d9002c15 	stw	r4,176(sp)
 a003874:	003c9106 	br	a002abc <__alt_mem_flash+0xfe001abc>
 a003878:	e005883a 	mov	r2,fp
 a00387c:	003e7906 	br	a003264 <__alt_mem_flash+0xfe002264>
 a003880:	d9002a17 	ldw	r4,168(sp)
 a003884:	df002783 	ldbu	fp,158(sp)
 a003888:	dcc02e15 	stw	r19,184(sp)
 a00388c:	d9002915 	stw	r4,164(sp)
 a003890:	d9002b15 	stw	r4,172(sp)
 a003894:	d8002a15 	stw	zero,168(sp)
 a003898:	d8003215 	stw	zero,200(sp)
 a00389c:	003a3b06 	br	a00218c <__alt_mem_flash+0xfe00118c>
 a0038a0:	9080004c 	andi	r2,r18,1
 a0038a4:	0039883a 	mov	fp,zero
 a0038a8:	10000426 	beq	r2,zero,a0038bc <___vfprintf_internal_r+0x1ea4>
 a0038ac:	00800c04 	movi	r2,48
 a0038b0:	dc001dc4 	addi	r16,sp,119
 a0038b4:	d8801dc5 	stb	r2,119(sp)
 a0038b8:	003b6406 	br	a00264c <__alt_mem_flash+0xfe00164c>
 a0038bc:	d8002b15 	stw	zero,172(sp)
 a0038c0:	dc001e04 	addi	r16,sp,120
 a0038c4:	003a2b06 	br	a002174 <__alt_mem_flash+0xfe001174>
 a0038c8:	8c7fff84 	addi	r17,r17,-2
 a0038cc:	b5bfffc4 	addi	r22,r22,-1
 a0038d0:	dd802615 	stw	r22,152(sp)
 a0038d4:	dc4022c5 	stb	r17,139(sp)
 a0038d8:	b000bf16 	blt	r22,zero,a003bd8 <___vfprintf_internal_r+0x21c0>
 a0038dc:	00800ac4 	movi	r2,43
 a0038e0:	d8802305 	stb	r2,140(sp)
 a0038e4:	00800244 	movi	r2,9
 a0038e8:	15807016 	blt	r2,r22,a003aac <___vfprintf_internal_r+0x2094>
 a0038ec:	00800c04 	movi	r2,48
 a0038f0:	b5800c04 	addi	r22,r22,48
 a0038f4:	d8802345 	stb	r2,141(sp)
 a0038f8:	dd802385 	stb	r22,142(sp)
 a0038fc:	d88023c4 	addi	r2,sp,143
 a003900:	df0022c4 	addi	fp,sp,139
 a003904:	d8c03317 	ldw	r3,204(sp)
 a003908:	1739c83a 	sub	fp,r2,fp
 a00390c:	d9003317 	ldw	r4,204(sp)
 a003910:	e0c7883a 	add	r3,fp,r3
 a003914:	df003a15 	stw	fp,232(sp)
 a003918:	d8c02b15 	stw	r3,172(sp)
 a00391c:	00800044 	movi	r2,1
 a003920:	1100b30e 	bge	r2,r4,a003bf0 <___vfprintf_internal_r+0x21d8>
 a003924:	d8c02b17 	ldw	r3,172(sp)
 a003928:	18c00044 	addi	r3,r3,1
 a00392c:	d8c02b15 	stw	r3,172(sp)
 a003930:	1805883a 	mov	r2,r3
 a003934:	1800ac16 	blt	r3,zero,a003be8 <___vfprintf_internal_r+0x21d0>
 a003938:	d8003215 	stw	zero,200(sp)
 a00393c:	003e5d06 	br	a0032b4 <__alt_mem_flash+0xfe0022b4>
 a003940:	d9002d17 	ldw	r4,180(sp)
 a003944:	d9801e04 	addi	r6,sp,120
 a003948:	b80b883a 	mov	r5,r23
 a00394c:	a0087080 	call	a008708 <__sprint_r>
 a003950:	1039351e 	bne	r2,zero,a001e28 <__alt_mem_flash+0xfe000e28>
 a003954:	dc402617 	ldw	r17,152(sp)
 a003958:	d8c02017 	ldw	r3,128(sp)
 a00395c:	d8801f17 	ldw	r2,124(sp)
 a003960:	da000404 	addi	r8,sp,16
 a003964:	003ed606 	br	a0034c0 <__alt_mem_flash+0xfe0024c0>
 a003968:	182b883a 	mov	r21,r3
 a00396c:	d8002a15 	stw	zero,168(sp)
 a003970:	00388c06 	br	a001ba4 <__alt_mem_flash+0xfe000ba4>
 a003974:	d8802a17 	ldw	r2,168(sp)
 a003978:	103e071e 	bne	r2,zero,a003198 <__alt_mem_flash+0xfe002198>
 a00397c:	dc002a15 	stw	r16,168(sp)
 a003980:	003e0506 	br	a003198 <__alt_mem_flash+0xfe002198>
 a003984:	d9002a17 	ldw	r4,168(sp)
 a003988:	20c00044 	addi	r3,r4,1
 a00398c:	003e0f06 	br	a0031cc <__alt_mem_flash+0xfe0021cc>
 a003990:	01400184 	movi	r5,6
 a003994:	d9402a15 	stw	r5,168(sp)
 a003998:	003dff06 	br	a003198 <__alt_mem_flash+0xfe002198>
 a00399c:	d8802104 	addi	r2,sp,132
 a0039a0:	d8800315 	stw	r2,12(sp)
 a0039a4:	d8802504 	addi	r2,sp,148
 a0039a8:	d8800215 	stw	r2,8(sp)
 a0039ac:	d8802604 	addi	r2,sp,152
 a0039b0:	d8800115 	stw	r2,4(sp)
 a0039b4:	d8802a17 	ldw	r2,168(sp)
 a0039b8:	d9403617 	ldw	r5,216(sp)
 a0039bc:	d9002d17 	ldw	r4,180(sp)
 a0039c0:	d8800015 	stw	r2,0(sp)
 a0039c4:	01c000c4 	movi	r7,3
 a0039c8:	980d883a 	mov	r6,r19
 a0039cc:	da003d15 	stw	r8,244(sp)
 a0039d0:	a0041480 	call	a004148 <_dtoa_r>
 a0039d4:	d8c02a17 	ldw	r3,168(sp)
 a0039d8:	da003d17 	ldw	r8,244(sp)
 a0039dc:	1021883a 	mov	r16,r2
 a0039e0:	10f9883a 	add	fp,r2,r3
 a0039e4:	81000007 	ldb	r4,0(r16)
 a0039e8:	00800c04 	movi	r2,48
 a0039ec:	20805e26 	beq	r4,r2,a003b68 <___vfprintf_internal_r+0x2150>
 a0039f0:	d8c02617 	ldw	r3,152(sp)
 a0039f4:	e0f9883a 	add	fp,fp,r3
 a0039f8:	003e0a06 	br	a003224 <__alt_mem_flash+0xfe002224>
 a0039fc:	00c00b44 	movi	r3,45
 a003a00:	24e0003c 	xorhi	r19,r4,32768
 a003a04:	d8c02905 	stb	r3,164(sp)
 a003a08:	003de906 	br	a0031b0 <__alt_mem_flash+0xfe0021b0>
 a003a0c:	d8c03217 	ldw	r3,200(sp)
 a003a10:	00c07a0e 	bge	zero,r3,a003bfc <___vfprintf_internal_r+0x21e4>
 a003a14:	00800044 	movi	r2,1
 a003a18:	d9003317 	ldw	r4,204(sp)
 a003a1c:	1105883a 	add	r2,r2,r4
 a003a20:	d8802b15 	stw	r2,172(sp)
 a003a24:	10004e16 	blt	r2,zero,a003b60 <___vfprintf_internal_r+0x2148>
 a003a28:	044019c4 	movi	r17,103
 a003a2c:	003e2106 	br	a0032b4 <__alt_mem_flash+0xfe0022b4>
 a003a30:	d9002a17 	ldw	r4,168(sp)
 a003a34:	d8802104 	addi	r2,sp,132
 a003a38:	d8800315 	stw	r2,12(sp)
 a003a3c:	d9000015 	stw	r4,0(sp)
 a003a40:	d8802504 	addi	r2,sp,148
 a003a44:	d9403617 	ldw	r5,216(sp)
 a003a48:	d9002d17 	ldw	r4,180(sp)
 a003a4c:	d8800215 	stw	r2,8(sp)
 a003a50:	d8802604 	addi	r2,sp,152
 a003a54:	d8800115 	stw	r2,4(sp)
 a003a58:	01c000c4 	movi	r7,3
 a003a5c:	980d883a 	mov	r6,r19
 a003a60:	da003d15 	stw	r8,244(sp)
 a003a64:	a0041480 	call	a004148 <_dtoa_r>
 a003a68:	d8c02a17 	ldw	r3,168(sp)
 a003a6c:	da003d17 	ldw	r8,244(sp)
 a003a70:	1021883a 	mov	r16,r2
 a003a74:	00801184 	movi	r2,70
 a003a78:	80f9883a 	add	fp,r16,r3
 a003a7c:	88bfd926 	beq	r17,r2,a0039e4 <__alt_mem_flash+0xfe0029e4>
 a003a80:	003de806 	br	a003224 <__alt_mem_flash+0xfe002224>
 a003a84:	d9002a17 	ldw	r4,168(sp)
 a003a88:	00c04d0e 	bge	zero,r3,a003bc0 <___vfprintf_internal_r+0x21a8>
 a003a8c:	2000441e 	bne	r4,zero,a003ba0 <___vfprintf_internal_r+0x2188>
 a003a90:	9480004c 	andi	r18,r18,1
 a003a94:	9000421e 	bne	r18,zero,a003ba0 <___vfprintf_internal_r+0x2188>
 a003a98:	1805883a 	mov	r2,r3
 a003a9c:	18006f16 	blt	r3,zero,a003c5c <___vfprintf_internal_r+0x2244>
 a003aa0:	d8c03217 	ldw	r3,200(sp)
 a003aa4:	d8c02b15 	stw	r3,172(sp)
 a003aa8:	003e0206 	br	a0032b4 <__alt_mem_flash+0xfe0022b4>
 a003aac:	df0022c4 	addi	fp,sp,139
 a003ab0:	dc002a15 	stw	r16,168(sp)
 a003ab4:	4027883a 	mov	r19,r8
 a003ab8:	e021883a 	mov	r16,fp
 a003abc:	b009883a 	mov	r4,r22
 a003ac0:	01400284 	movi	r5,10
 a003ac4:	a00be1c0 	call	a00be1c <__modsi3>
 a003ac8:	10800c04 	addi	r2,r2,48
 a003acc:	843fffc4 	addi	r16,r16,-1
 a003ad0:	b009883a 	mov	r4,r22
 a003ad4:	01400284 	movi	r5,10
 a003ad8:	80800005 	stb	r2,0(r16)
 a003adc:	a00bd980 	call	a00bd98 <__divsi3>
 a003ae0:	102d883a 	mov	r22,r2
 a003ae4:	00800244 	movi	r2,9
 a003ae8:	15bff416 	blt	r2,r22,a003abc <__alt_mem_flash+0xfe002abc>
 a003aec:	9811883a 	mov	r8,r19
 a003af0:	b0800c04 	addi	r2,r22,48
 a003af4:	8027883a 	mov	r19,r16
 a003af8:	997fffc4 	addi	r5,r19,-1
 a003afc:	98bfffc5 	stb	r2,-1(r19)
 a003b00:	dc002a17 	ldw	r16,168(sp)
 a003b04:	2f006d2e 	bgeu	r5,fp,a003cbc <___vfprintf_internal_r+0x22a4>
 a003b08:	d9c02384 	addi	r7,sp,142
 a003b0c:	3ccfc83a 	sub	r7,r7,r19
 a003b10:	d9002344 	addi	r4,sp,141
 a003b14:	e1cf883a 	add	r7,fp,r7
 a003b18:	00000106 	br	a003b20 <___vfprintf_internal_r+0x2108>
 a003b1c:	28800003 	ldbu	r2,0(r5)
 a003b20:	20800005 	stb	r2,0(r4)
 a003b24:	21000044 	addi	r4,r4,1
 a003b28:	29400044 	addi	r5,r5,1
 a003b2c:	393ffb1e 	bne	r7,r4,a003b1c <__alt_mem_flash+0xfe002b1c>
 a003b30:	d8802304 	addi	r2,sp,140
 a003b34:	14c5c83a 	sub	r2,r2,r19
 a003b38:	d8c02344 	addi	r3,sp,141
 a003b3c:	1885883a 	add	r2,r3,r2
 a003b40:	003f7006 	br	a003904 <__alt_mem_flash+0xfe002904>
 a003b44:	0005883a 	mov	r2,zero
 a003b48:	003f0f06 	br	a003788 <__alt_mem_flash+0xfe002788>
 a003b4c:	d8c03217 	ldw	r3,200(sp)
 a003b50:	18c00044 	addi	r3,r3,1
 a003b54:	d8c02b15 	stw	r3,172(sp)
 a003b58:	1805883a 	mov	r2,r3
 a003b5c:	183fb20e 	bge	r3,zero,a003a28 <__alt_mem_flash+0xfe002a28>
 a003b60:	0005883a 	mov	r2,zero
 a003b64:	003fb006 	br	a003a28 <__alt_mem_flash+0xfe002a28>
 a003b68:	d9003617 	ldw	r4,216(sp)
 a003b6c:	000d883a 	mov	r6,zero
 a003b70:	000f883a 	mov	r7,zero
 a003b74:	980b883a 	mov	r5,r19
 a003b78:	d8c03c15 	stw	r3,240(sp)
 a003b7c:	da003d15 	stw	r8,244(sp)
 a003b80:	a00c91c0 	call	a00c91c <__eqdf2>
 a003b84:	d8c03c17 	ldw	r3,240(sp)
 a003b88:	da003d17 	ldw	r8,244(sp)
 a003b8c:	103f9826 	beq	r2,zero,a0039f0 <__alt_mem_flash+0xfe0029f0>
 a003b90:	00800044 	movi	r2,1
 a003b94:	10c7c83a 	sub	r3,r2,r3
 a003b98:	d8c02615 	stw	r3,152(sp)
 a003b9c:	003f9506 	br	a0039f4 <__alt_mem_flash+0xfe0029f4>
 a003ba0:	d9002a17 	ldw	r4,168(sp)
 a003ba4:	d8c03217 	ldw	r3,200(sp)
 a003ba8:	20800044 	addi	r2,r4,1
 a003bac:	1885883a 	add	r2,r3,r2
 a003bb0:	d8802b15 	stw	r2,172(sp)
 a003bb4:	103dbf0e 	bge	r2,zero,a0032b4 <__alt_mem_flash+0xfe0022b4>
 a003bb8:	0005883a 	mov	r2,zero
 a003bbc:	003dbd06 	br	a0032b4 <__alt_mem_flash+0xfe0022b4>
 a003bc0:	2000201e 	bne	r4,zero,a003c44 <___vfprintf_internal_r+0x222c>
 a003bc4:	9480004c 	andi	r18,r18,1
 a003bc8:	90001e1e 	bne	r18,zero,a003c44 <___vfprintf_internal_r+0x222c>
 a003bcc:	00800044 	movi	r2,1
 a003bd0:	d8802b15 	stw	r2,172(sp)
 a003bd4:	003db706 	br	a0032b4 <__alt_mem_flash+0xfe0022b4>
 a003bd8:	00800b44 	movi	r2,45
 a003bdc:	05adc83a 	sub	r22,zero,r22
 a003be0:	d8802305 	stb	r2,140(sp)
 a003be4:	003f3f06 	br	a0038e4 <__alt_mem_flash+0xfe0028e4>
 a003be8:	0005883a 	mov	r2,zero
 a003bec:	003f5206 	br	a003938 <__alt_mem_flash+0xfe002938>
 a003bf0:	90a4703a 	and	r18,r18,r2
 a003bf4:	903f4e26 	beq	r18,zero,a003930 <__alt_mem_flash+0xfe002930>
 a003bf8:	003f4a06 	br	a003924 <__alt_mem_flash+0xfe002924>
 a003bfc:	00800084 	movi	r2,2
 a003c00:	10c5c83a 	sub	r2,r2,r3
 a003c04:	003f8406 	br	a003a18 <__alt_mem_flash+0xfe002a18>
 a003c08:	d9402e17 	ldw	r5,184(sp)
 a003c0c:	d9002e17 	ldw	r4,184(sp)
 a003c10:	ac400043 	ldbu	r17,1(r21)
 a003c14:	29400017 	ldw	r5,0(r5)
 a003c18:	20800104 	addi	r2,r4,4
 a003c1c:	d8802e15 	stw	r2,184(sp)
 a003c20:	d9402a15 	stw	r5,168(sp)
 a003c24:	182b883a 	mov	r21,r3
 a003c28:	283e7b0e 	bge	r5,zero,a003618 <__alt_mem_flash+0xfe002618>
 a003c2c:	8c403fcc 	andi	r17,r17,255
 a003c30:	017fffc4 	movi	r5,-1
 a003c34:	8c40201c 	xori	r17,r17,128
 a003c38:	d9402a15 	stw	r5,168(sp)
 a003c3c:	8c7fe004 	addi	r17,r17,-128
 a003c40:	0037d706 	br	a001ba0 <__alt_mem_flash+0xfe000ba0>
 a003c44:	d8c02a17 	ldw	r3,168(sp)
 a003c48:	18c00084 	addi	r3,r3,2
 a003c4c:	d8c02b15 	stw	r3,172(sp)
 a003c50:	1805883a 	mov	r2,r3
 a003c54:	183d970e 	bge	r3,zero,a0032b4 <__alt_mem_flash+0xfe0022b4>
 a003c58:	003fd706 	br	a003bb8 <__alt_mem_flash+0xfe002bb8>
 a003c5c:	0005883a 	mov	r2,zero
 a003c60:	003f8f06 	br	a003aa0 <__alt_mem_flash+0xfe002aa0>
 a003c64:	9080004c 	andi	r2,r18,1
 a003c68:	103f821e 	bne	r2,zero,a003a74 <__alt_mem_flash+0xfe002a74>
 a003c6c:	d8802117 	ldw	r2,132(sp)
 a003c70:	1405c83a 	sub	r2,r2,r16
 a003c74:	d8803315 	stw	r2,204(sp)
 a003c78:	b47ef426 	beq	r22,r17,a00384c <__alt_mem_flash+0xfe00284c>
 a003c7c:	dd802617 	ldw	r22,152(sp)
 a003c80:	003f1206 	br	a0038cc <__alt_mem_flash+0xfe0028cc>
 a003c84:	d8c02b03 	ldbu	r3,172(sp)
 a003c88:	d8c02785 	stb	r3,158(sp)
 a003c8c:	0038df06 	br	a00200c <__alt_mem_flash+0xfe00100c>
 a003c90:	d8c02b03 	ldbu	r3,172(sp)
 a003c94:	d8c02785 	stb	r3,158(sp)
 a003c98:	0038aa06 	br	a001f44 <__alt_mem_flash+0xfe000f44>
 a003c9c:	d8c02b03 	ldbu	r3,172(sp)
 a003ca0:	d8c02785 	stb	r3,158(sp)
 a003ca4:	003a4306 	br	a0025b4 <__alt_mem_flash+0xfe0015b4>
 a003ca8:	d8c02b03 	ldbu	r3,172(sp)
 a003cac:	d8c02785 	stb	r3,158(sp)
 a003cb0:	003af506 	br	a002888 <__alt_mem_flash+0xfe001888>
 a003cb4:	0005883a 	mov	r2,zero
 a003cb8:	003d7b06 	br	a0032a8 <__alt_mem_flash+0xfe0022a8>
 a003cbc:	d8802344 	addi	r2,sp,141
 a003cc0:	003f1006 	br	a003904 <__alt_mem_flash+0xfe002904>
 a003cc4:	d8c02b03 	ldbu	r3,172(sp)
 a003cc8:	d8c02785 	stb	r3,158(sp)
 a003ccc:	0038fd06 	br	a0020c4 <__alt_mem_flash+0xfe0010c4>
 a003cd0:	d8c02b03 	ldbu	r3,172(sp)
 a003cd4:	d8c02785 	stb	r3,158(sp)
 a003cd8:	003a9706 	br	a002738 <__alt_mem_flash+0xfe001738>
 a003cdc:	d8c02b03 	ldbu	r3,172(sp)
 a003ce0:	d8c02785 	stb	r3,158(sp)
 a003ce4:	003a1806 	br	a002548 <__alt_mem_flash+0xfe001548>
 a003ce8:	d8c02b03 	ldbu	r3,172(sp)
 a003cec:	d8c02785 	stb	r3,158(sp)
 a003cf0:	003abe06 	br	a0027ec <__alt_mem_flash+0xfe0017ec>

0a003cf4 <__vfprintf_internal>:
 a003cf4:	00828074 	movhi	r2,2561
 a003cf8:	108ea004 	addi	r2,r2,14976
 a003cfc:	300f883a 	mov	r7,r6
 a003d00:	280d883a 	mov	r6,r5
 a003d04:	200b883a 	mov	r5,r4
 a003d08:	11000017 	ldw	r4,0(r2)
 a003d0c:	a001a181 	jmpi	a001a18 <___vfprintf_internal_r>

0a003d10 <__sbprintf>:
 a003d10:	2880030b 	ldhu	r2,12(r5)
 a003d14:	2ac01917 	ldw	r11,100(r5)
 a003d18:	2a80038b 	ldhu	r10,14(r5)
 a003d1c:	2a400717 	ldw	r9,28(r5)
 a003d20:	2a000917 	ldw	r8,36(r5)
 a003d24:	defee204 	addi	sp,sp,-1144
 a003d28:	00c10004 	movi	r3,1024
 a003d2c:	dc011a15 	stw	r16,1128(sp)
 a003d30:	10bfff4c 	andi	r2,r2,65533
 a003d34:	2821883a 	mov	r16,r5
 a003d38:	d8cb883a 	add	r5,sp,r3
 a003d3c:	dc811c15 	stw	r18,1136(sp)
 a003d40:	dc411b15 	stw	r17,1132(sp)
 a003d44:	dfc11d15 	stw	ra,1140(sp)
 a003d48:	2025883a 	mov	r18,r4
 a003d4c:	d881030d 	sth	r2,1036(sp)
 a003d50:	dac11915 	stw	r11,1124(sp)
 a003d54:	da81038d 	sth	r10,1038(sp)
 a003d58:	da410715 	stw	r9,1052(sp)
 a003d5c:	da010915 	stw	r8,1060(sp)
 a003d60:	dec10015 	stw	sp,1024(sp)
 a003d64:	dec10415 	stw	sp,1040(sp)
 a003d68:	d8c10215 	stw	r3,1032(sp)
 a003d6c:	d8c10515 	stw	r3,1044(sp)
 a003d70:	d8010615 	stw	zero,1048(sp)
 a003d74:	a001a180 	call	a001a18 <___vfprintf_internal_r>
 a003d78:	1023883a 	mov	r17,r2
 a003d7c:	10000416 	blt	r2,zero,a003d90 <__sbprintf+0x80>
 a003d80:	d9410004 	addi	r5,sp,1024
 a003d84:	9009883a 	mov	r4,r18
 a003d88:	a0059ec0 	call	a0059ec <_fflush_r>
 a003d8c:	10000d1e 	bne	r2,zero,a003dc4 <__sbprintf+0xb4>
 a003d90:	d881030b 	ldhu	r2,1036(sp)
 a003d94:	1080100c 	andi	r2,r2,64
 a003d98:	10000326 	beq	r2,zero,a003da8 <__sbprintf+0x98>
 a003d9c:	8080030b 	ldhu	r2,12(r16)
 a003da0:	10801014 	ori	r2,r2,64
 a003da4:	8080030d 	sth	r2,12(r16)
 a003da8:	8805883a 	mov	r2,r17
 a003dac:	dfc11d17 	ldw	ra,1140(sp)
 a003db0:	dc811c17 	ldw	r18,1136(sp)
 a003db4:	dc411b17 	ldw	r17,1132(sp)
 a003db8:	dc011a17 	ldw	r16,1128(sp)
 a003dbc:	dec11e04 	addi	sp,sp,1144
 a003dc0:	f800283a 	ret
 a003dc4:	047fffc4 	movi	r17,-1
 a003dc8:	003ff106 	br	a003d90 <__alt_mem_flash+0xfe002d90>

0a003dcc <__swsetup_r>:
 a003dcc:	00828074 	movhi	r2,2561
 a003dd0:	defffd04 	addi	sp,sp,-12
 a003dd4:	108ea004 	addi	r2,r2,14976
 a003dd8:	dc400115 	stw	r17,4(sp)
 a003ddc:	2023883a 	mov	r17,r4
 a003de0:	11000017 	ldw	r4,0(r2)
 a003de4:	dc000015 	stw	r16,0(sp)
 a003de8:	dfc00215 	stw	ra,8(sp)
 a003dec:	2821883a 	mov	r16,r5
 a003df0:	20000226 	beq	r4,zero,a003dfc <__swsetup_r+0x30>
 a003df4:	20800e17 	ldw	r2,56(r4)
 a003df8:	10003126 	beq	r2,zero,a003ec0 <__swsetup_r+0xf4>
 a003dfc:	8080030b 	ldhu	r2,12(r16)
 a003e00:	10c0020c 	andi	r3,r2,8
 a003e04:	1009883a 	mov	r4,r2
 a003e08:	18000f26 	beq	r3,zero,a003e48 <__swsetup_r+0x7c>
 a003e0c:	80c00417 	ldw	r3,16(r16)
 a003e10:	18001526 	beq	r3,zero,a003e68 <__swsetup_r+0x9c>
 a003e14:	1100004c 	andi	r4,r2,1
 a003e18:	20001c1e 	bne	r4,zero,a003e8c <__swsetup_r+0xc0>
 a003e1c:	1080008c 	andi	r2,r2,2
 a003e20:	1000291e 	bne	r2,zero,a003ec8 <__swsetup_r+0xfc>
 a003e24:	80800517 	ldw	r2,20(r16)
 a003e28:	80800215 	stw	r2,8(r16)
 a003e2c:	18001c26 	beq	r3,zero,a003ea0 <__swsetup_r+0xd4>
 a003e30:	0005883a 	mov	r2,zero
 a003e34:	dfc00217 	ldw	ra,8(sp)
 a003e38:	dc400117 	ldw	r17,4(sp)
 a003e3c:	dc000017 	ldw	r16,0(sp)
 a003e40:	dec00304 	addi	sp,sp,12
 a003e44:	f800283a 	ret
 a003e48:	2080040c 	andi	r2,r4,16
 a003e4c:	10002e26 	beq	r2,zero,a003f08 <__swsetup_r+0x13c>
 a003e50:	2080010c 	andi	r2,r4,4
 a003e54:	10001e1e 	bne	r2,zero,a003ed0 <__swsetup_r+0x104>
 a003e58:	80c00417 	ldw	r3,16(r16)
 a003e5c:	20800214 	ori	r2,r4,8
 a003e60:	8080030d 	sth	r2,12(r16)
 a003e64:	183feb1e 	bne	r3,zero,a003e14 <__alt_mem_flash+0xfe002e14>
 a003e68:	1100a00c 	andi	r4,r2,640
 a003e6c:	01408004 	movi	r5,512
 a003e70:	217fe826 	beq	r4,r5,a003e14 <__alt_mem_flash+0xfe002e14>
 a003e74:	800b883a 	mov	r5,r16
 a003e78:	8809883a 	mov	r4,r17
 a003e7c:	a0064c00 	call	a0064c0 <__smakebuf_r>
 a003e80:	8080030b 	ldhu	r2,12(r16)
 a003e84:	80c00417 	ldw	r3,16(r16)
 a003e88:	003fe206 	br	a003e14 <__alt_mem_flash+0xfe002e14>
 a003e8c:	80800517 	ldw	r2,20(r16)
 a003e90:	80000215 	stw	zero,8(r16)
 a003e94:	0085c83a 	sub	r2,zero,r2
 a003e98:	80800615 	stw	r2,24(r16)
 a003e9c:	183fe41e 	bne	r3,zero,a003e30 <__alt_mem_flash+0xfe002e30>
 a003ea0:	80c0030b 	ldhu	r3,12(r16)
 a003ea4:	0005883a 	mov	r2,zero
 a003ea8:	1900200c 	andi	r4,r3,128
 a003eac:	203fe126 	beq	r4,zero,a003e34 <__alt_mem_flash+0xfe002e34>
 a003eb0:	18c01014 	ori	r3,r3,64
 a003eb4:	80c0030d 	sth	r3,12(r16)
 a003eb8:	00bfffc4 	movi	r2,-1
 a003ebc:	003fdd06 	br	a003e34 <__alt_mem_flash+0xfe002e34>
 a003ec0:	a005dd80 	call	a005dd8 <__sinit>
 a003ec4:	003fcd06 	br	a003dfc <__alt_mem_flash+0xfe002dfc>
 a003ec8:	0005883a 	mov	r2,zero
 a003ecc:	003fd606 	br	a003e28 <__alt_mem_flash+0xfe002e28>
 a003ed0:	81400c17 	ldw	r5,48(r16)
 a003ed4:	28000626 	beq	r5,zero,a003ef0 <__swsetup_r+0x124>
 a003ed8:	80801004 	addi	r2,r16,64
 a003edc:	28800326 	beq	r5,r2,a003eec <__swsetup_r+0x120>
 a003ee0:	8809883a 	mov	r4,r17
 a003ee4:	a005f4c0 	call	a005f4c <_free_r>
 a003ee8:	8100030b 	ldhu	r4,12(r16)
 a003eec:	80000c15 	stw	zero,48(r16)
 a003ef0:	80c00417 	ldw	r3,16(r16)
 a003ef4:	00bff6c4 	movi	r2,-37
 a003ef8:	1108703a 	and	r4,r2,r4
 a003efc:	80000115 	stw	zero,4(r16)
 a003f00:	80c00015 	stw	r3,0(r16)
 a003f04:	003fd506 	br	a003e5c <__alt_mem_flash+0xfe002e5c>
 a003f08:	00800244 	movi	r2,9
 a003f0c:	88800015 	stw	r2,0(r17)
 a003f10:	20801014 	ori	r2,r4,64
 a003f14:	8080030d 	sth	r2,12(r16)
 a003f18:	00bfffc4 	movi	r2,-1
 a003f1c:	003fc506 	br	a003e34 <__alt_mem_flash+0xfe002e34>

0a003f20 <quorem>:
 a003f20:	defff204 	addi	sp,sp,-56
 a003f24:	ddc00b15 	stw	r23,44(sp)
 a003f28:	20800417 	ldw	r2,16(r4)
 a003f2c:	2dc00417 	ldw	r23,16(r5)
 a003f30:	dfc00d15 	stw	ra,52(sp)
 a003f34:	df000c15 	stw	fp,48(sp)
 a003f38:	dd800a15 	stw	r22,40(sp)
 a003f3c:	dd400915 	stw	r21,36(sp)
 a003f40:	dd000815 	stw	r20,32(sp)
 a003f44:	dcc00715 	stw	r19,28(sp)
 a003f48:	dc800615 	stw	r18,24(sp)
 a003f4c:	dc400515 	stw	r17,20(sp)
 a003f50:	dc000415 	stw	r16,16(sp)
 a003f54:	15c07a16 	blt	r2,r23,a004140 <quorem+0x220>
 a003f58:	bdffffc4 	addi	r23,r23,-1
 a003f5c:	bde9883a 	add	r20,r23,r23
 a003f60:	28c00504 	addi	r3,r5,20
 a003f64:	a529883a 	add	r20,r20,r20
 a003f68:	1d39883a 	add	fp,r3,r20
 a003f6c:	24c00504 	addi	r19,r4,20
 a003f70:	d9400215 	stw	r5,8(sp)
 a003f74:	9d29883a 	add	r20,r19,r20
 a003f78:	e1400017 	ldw	r5,0(fp)
 a003f7c:	d9000015 	stw	r4,0(sp)
 a003f80:	a1000017 	ldw	r4,0(r20)
 a003f84:	29400044 	addi	r5,r5,1
 a003f88:	d8c00115 	stw	r3,4(sp)
 a003f8c:	dd000315 	stw	r20,12(sp)
 a003f90:	a00be900 	call	a00be90 <__udivsi3>
 a003f94:	1025883a 	mov	r18,r2
 a003f98:	10003026 	beq	r2,zero,a00405c <quorem+0x13c>
 a003f9c:	dc400117 	ldw	r17,4(sp)
 a003fa0:	9829883a 	mov	r20,r19
 a003fa4:	002d883a 	mov	r22,zero
 a003fa8:	0021883a 	mov	r16,zero
 a003fac:	8d400017 	ldw	r21,0(r17)
 a003fb0:	900b883a 	mov	r5,r18
 a003fb4:	8c400104 	addi	r17,r17,4
 a003fb8:	a93fffcc 	andi	r4,r21,65535
 a003fbc:	a0019a40 	call	a0019a4 <__mulsi3>
 a003fc0:	a808d43a 	srli	r4,r21,16
 a003fc4:	900b883a 	mov	r5,r18
 a003fc8:	15ad883a 	add	r22,r2,r22
 a003fcc:	a0019a40 	call	a0019a4 <__mulsi3>
 a003fd0:	a1000017 	ldw	r4,0(r20)
 a003fd4:	b00cd43a 	srli	r6,r22,16
 a003fd8:	b0ffffcc 	andi	r3,r22,65535
 a003fdc:	217fffcc 	andi	r5,r4,65535
 a003fe0:	2c21883a 	add	r16,r5,r16
 a003fe4:	80c7c83a 	sub	r3,r16,r3
 a003fe8:	2008d43a 	srli	r4,r4,16
 a003fec:	1185883a 	add	r2,r2,r6
 a003ff0:	1821d43a 	srai	r16,r3,16
 a003ff4:	117fffcc 	andi	r5,r2,65535
 a003ff8:	2149c83a 	sub	r4,r4,r5
 a003ffc:	2421883a 	add	r16,r4,r16
 a004000:	8008943a 	slli	r4,r16,16
 a004004:	18ffffcc 	andi	r3,r3,65535
 a004008:	102cd43a 	srli	r22,r2,16
 a00400c:	20c8b03a 	or	r4,r4,r3
 a004010:	a1000015 	stw	r4,0(r20)
 a004014:	8021d43a 	srai	r16,r16,16
 a004018:	a5000104 	addi	r20,r20,4
 a00401c:	e47fe32e 	bgeu	fp,r17,a003fac <__alt_mem_flash+0xfe002fac>
 a004020:	d8c00317 	ldw	r3,12(sp)
 a004024:	18800017 	ldw	r2,0(r3)
 a004028:	10000c1e 	bne	r2,zero,a00405c <quorem+0x13c>
 a00402c:	18bfff04 	addi	r2,r3,-4
 a004030:	9880082e 	bgeu	r19,r2,a004054 <quorem+0x134>
 a004034:	18ffff17 	ldw	r3,-4(r3)
 a004038:	18000326 	beq	r3,zero,a004048 <quorem+0x128>
 a00403c:	00000506 	br	a004054 <quorem+0x134>
 a004040:	10c00017 	ldw	r3,0(r2)
 a004044:	1800031e 	bne	r3,zero,a004054 <quorem+0x134>
 a004048:	10bfff04 	addi	r2,r2,-4
 a00404c:	bdffffc4 	addi	r23,r23,-1
 a004050:	98bffb36 	bltu	r19,r2,a004040 <__alt_mem_flash+0xfe003040>
 a004054:	d8c00017 	ldw	r3,0(sp)
 a004058:	1dc00415 	stw	r23,16(r3)
 a00405c:	d9400217 	ldw	r5,8(sp)
 a004060:	d9000017 	ldw	r4,0(sp)
 a004064:	a007b600 	call	a007b60 <__mcmp>
 a004068:	10002816 	blt	r2,zero,a00410c <quorem+0x1ec>
 a00406c:	dc400117 	ldw	r17,4(sp)
 a004070:	94800044 	addi	r18,r18,1
 a004074:	980d883a 	mov	r6,r19
 a004078:	0007883a 	mov	r3,zero
 a00407c:	31000017 	ldw	r4,0(r6)
 a004080:	89400017 	ldw	r5,0(r17)
 a004084:	31800104 	addi	r6,r6,4
 a004088:	20bfffcc 	andi	r2,r4,65535
 a00408c:	10c7883a 	add	r3,r2,r3
 a004090:	28bfffcc 	andi	r2,r5,65535
 a004094:	1885c83a 	sub	r2,r3,r2
 a004098:	280ad43a 	srli	r5,r5,16
 a00409c:	2008d43a 	srli	r4,r4,16
 a0040a0:	1007d43a 	srai	r3,r2,16
 a0040a4:	10bfffcc 	andi	r2,r2,65535
 a0040a8:	2149c83a 	sub	r4,r4,r5
 a0040ac:	20c9883a 	add	r4,r4,r3
 a0040b0:	200a943a 	slli	r5,r4,16
 a0040b4:	8c400104 	addi	r17,r17,4
 a0040b8:	2007d43a 	srai	r3,r4,16
 a0040bc:	2884b03a 	or	r2,r5,r2
 a0040c0:	30bfff15 	stw	r2,-4(r6)
 a0040c4:	e47fed2e 	bgeu	fp,r17,a00407c <__alt_mem_flash+0xfe00307c>
 a0040c8:	bdc5883a 	add	r2,r23,r23
 a0040cc:	1085883a 	add	r2,r2,r2
 a0040d0:	9887883a 	add	r3,r19,r2
 a0040d4:	18800017 	ldw	r2,0(r3)
 a0040d8:	10000c1e 	bne	r2,zero,a00410c <quorem+0x1ec>
 a0040dc:	18bfff04 	addi	r2,r3,-4
 a0040e0:	9880082e 	bgeu	r19,r2,a004104 <quorem+0x1e4>
 a0040e4:	18ffff17 	ldw	r3,-4(r3)
 a0040e8:	18000326 	beq	r3,zero,a0040f8 <quorem+0x1d8>
 a0040ec:	00000506 	br	a004104 <quorem+0x1e4>
 a0040f0:	10c00017 	ldw	r3,0(r2)
 a0040f4:	1800031e 	bne	r3,zero,a004104 <quorem+0x1e4>
 a0040f8:	10bfff04 	addi	r2,r2,-4
 a0040fc:	bdffffc4 	addi	r23,r23,-1
 a004100:	98bffb36 	bltu	r19,r2,a0040f0 <__alt_mem_flash+0xfe0030f0>
 a004104:	d8c00017 	ldw	r3,0(sp)
 a004108:	1dc00415 	stw	r23,16(r3)
 a00410c:	9005883a 	mov	r2,r18
 a004110:	dfc00d17 	ldw	ra,52(sp)
 a004114:	df000c17 	ldw	fp,48(sp)
 a004118:	ddc00b17 	ldw	r23,44(sp)
 a00411c:	dd800a17 	ldw	r22,40(sp)
 a004120:	dd400917 	ldw	r21,36(sp)
 a004124:	dd000817 	ldw	r20,32(sp)
 a004128:	dcc00717 	ldw	r19,28(sp)
 a00412c:	dc800617 	ldw	r18,24(sp)
 a004130:	dc400517 	ldw	r17,20(sp)
 a004134:	dc000417 	ldw	r16,16(sp)
 a004138:	dec00e04 	addi	sp,sp,56
 a00413c:	f800283a 	ret
 a004140:	0005883a 	mov	r2,zero
 a004144:	003ff206 	br	a004110 <__alt_mem_flash+0xfe003110>

0a004148 <_dtoa_r>:
 a004148:	20801017 	ldw	r2,64(r4)
 a00414c:	deffde04 	addi	sp,sp,-136
 a004150:	df002015 	stw	fp,128(sp)
 a004154:	dcc01b15 	stw	r19,108(sp)
 a004158:	dc801a15 	stw	r18,104(sp)
 a00415c:	dc401915 	stw	r17,100(sp)
 a004160:	dc001815 	stw	r16,96(sp)
 a004164:	dfc02115 	stw	ra,132(sp)
 a004168:	ddc01f15 	stw	r23,124(sp)
 a00416c:	dd801e15 	stw	r22,120(sp)
 a004170:	dd401d15 	stw	r21,116(sp)
 a004174:	dd001c15 	stw	r20,112(sp)
 a004178:	d9c00315 	stw	r7,12(sp)
 a00417c:	2039883a 	mov	fp,r4
 a004180:	3023883a 	mov	r17,r6
 a004184:	2825883a 	mov	r18,r5
 a004188:	dc002417 	ldw	r16,144(sp)
 a00418c:	3027883a 	mov	r19,r6
 a004190:	10000826 	beq	r2,zero,a0041b4 <_dtoa_r+0x6c>
 a004194:	21801117 	ldw	r6,68(r4)
 a004198:	00c00044 	movi	r3,1
 a00419c:	100b883a 	mov	r5,r2
 a0041a0:	1986983a 	sll	r3,r3,r6
 a0041a4:	11800115 	stw	r6,4(r2)
 a0041a8:	10c00215 	stw	r3,8(r2)
 a0041ac:	a0072840 	call	a007284 <_Bfree>
 a0041b0:	e0001015 	stw	zero,64(fp)
 a0041b4:	88002e16 	blt	r17,zero,a004270 <_dtoa_r+0x128>
 a0041b8:	80000015 	stw	zero,0(r16)
 a0041bc:	889ffc2c 	andhi	r2,r17,32752
 a0041c0:	00dffc34 	movhi	r3,32752
 a0041c4:	10c01c26 	beq	r2,r3,a004238 <_dtoa_r+0xf0>
 a0041c8:	000d883a 	mov	r6,zero
 a0041cc:	000f883a 	mov	r7,zero
 a0041d0:	9009883a 	mov	r4,r18
 a0041d4:	980b883a 	mov	r5,r19
 a0041d8:	a00c91c0 	call	a00c91c <__eqdf2>
 a0041dc:	10002b1e 	bne	r2,zero,a00428c <_dtoa_r+0x144>
 a0041e0:	d9c02317 	ldw	r7,140(sp)
 a0041e4:	00800044 	movi	r2,1
 a0041e8:	38800015 	stw	r2,0(r7)
 a0041ec:	d8802517 	ldw	r2,148(sp)
 a0041f0:	10019e26 	beq	r2,zero,a00486c <_dtoa_r+0x724>
 a0041f4:	d8c02517 	ldw	r3,148(sp)
 a0041f8:	00828074 	movhi	r2,2561
 a0041fc:	10870b44 	addi	r2,r2,7213
 a004200:	18800015 	stw	r2,0(r3)
 a004204:	10bfffc4 	addi	r2,r2,-1
 a004208:	dfc02117 	ldw	ra,132(sp)
 a00420c:	df002017 	ldw	fp,128(sp)
 a004210:	ddc01f17 	ldw	r23,124(sp)
 a004214:	dd801e17 	ldw	r22,120(sp)
 a004218:	dd401d17 	ldw	r21,116(sp)
 a00421c:	dd001c17 	ldw	r20,112(sp)
 a004220:	dcc01b17 	ldw	r19,108(sp)
 a004224:	dc801a17 	ldw	r18,104(sp)
 a004228:	dc401917 	ldw	r17,100(sp)
 a00422c:	dc001817 	ldw	r16,96(sp)
 a004230:	dec02204 	addi	sp,sp,136
 a004234:	f800283a 	ret
 a004238:	d8c02317 	ldw	r3,140(sp)
 a00423c:	0089c3c4 	movi	r2,9999
 a004240:	18800015 	stw	r2,0(r3)
 a004244:	90017726 	beq	r18,zero,a004824 <_dtoa_r+0x6dc>
 a004248:	00828074 	movhi	r2,2561
 a00424c:	10871704 	addi	r2,r2,7260
 a004250:	d9002517 	ldw	r4,148(sp)
 a004254:	203fec26 	beq	r4,zero,a004208 <__alt_mem_flash+0xfe003208>
 a004258:	10c000c7 	ldb	r3,3(r2)
 a00425c:	1801781e 	bne	r3,zero,a004840 <_dtoa_r+0x6f8>
 a004260:	10c000c4 	addi	r3,r2,3
 a004264:	d9802517 	ldw	r6,148(sp)
 a004268:	30c00015 	stw	r3,0(r6)
 a00426c:	003fe606 	br	a004208 <__alt_mem_flash+0xfe003208>
 a004270:	04e00034 	movhi	r19,32768
 a004274:	9cffffc4 	addi	r19,r19,-1
 a004278:	00800044 	movi	r2,1
 a00427c:	8ce6703a 	and	r19,r17,r19
 a004280:	80800015 	stw	r2,0(r16)
 a004284:	9823883a 	mov	r17,r19
 a004288:	003fcc06 	br	a0041bc <__alt_mem_flash+0xfe0031bc>
 a00428c:	d8800204 	addi	r2,sp,8
 a004290:	d8800015 	stw	r2,0(sp)
 a004294:	d9c00104 	addi	r7,sp,4
 a004298:	900b883a 	mov	r5,r18
 a00429c:	980d883a 	mov	r6,r19
 a0042a0:	e009883a 	mov	r4,fp
 a0042a4:	8820d53a 	srli	r16,r17,20
 a0042a8:	a007f2c0 	call	a007f2c <__d2b>
 a0042ac:	d8800915 	stw	r2,36(sp)
 a0042b0:	8001651e 	bne	r16,zero,a004848 <_dtoa_r+0x700>
 a0042b4:	dd800217 	ldw	r22,8(sp)
 a0042b8:	dc000117 	ldw	r16,4(sp)
 a0042bc:	00800804 	movi	r2,32
 a0042c0:	b421883a 	add	r16,r22,r16
 a0042c4:	80c10c84 	addi	r3,r16,1074
 a0042c8:	10c2d10e 	bge	r2,r3,a004e10 <_dtoa_r+0xcc8>
 a0042cc:	00801004 	movi	r2,64
 a0042d0:	81010484 	addi	r4,r16,1042
 a0042d4:	10c7c83a 	sub	r3,r2,r3
 a0042d8:	9108d83a 	srl	r4,r18,r4
 a0042dc:	88e2983a 	sll	r17,r17,r3
 a0042e0:	2448b03a 	or	r4,r4,r17
 a0042e4:	a00d4f00 	call	a00d4f0 <__floatunsidf>
 a0042e8:	017f8434 	movhi	r5,65040
 a0042ec:	01800044 	movi	r6,1
 a0042f0:	1009883a 	mov	r4,r2
 a0042f4:	194b883a 	add	r5,r3,r5
 a0042f8:	843fffc4 	addi	r16,r16,-1
 a0042fc:	d9801115 	stw	r6,68(sp)
 a004300:	000d883a 	mov	r6,zero
 a004304:	01cffe34 	movhi	r7,16376
 a004308:	a00cb740 	call	a00cb74 <__subdf3>
 a00430c:	0198dbf4 	movhi	r6,25455
 a004310:	01cff4f4 	movhi	r7,16339
 a004314:	3190d844 	addi	r6,r6,17249
 a004318:	39e1e9c4 	addi	r7,r7,-30809
 a00431c:	1009883a 	mov	r4,r2
 a004320:	180b883a 	mov	r5,r3
 a004324:	a000d400 	call	a000d40 <__muldf3>
 a004328:	01a2d874 	movhi	r6,35681
 a00432c:	01cff1f4 	movhi	r7,16327
 a004330:	31b22cc4 	addi	r6,r6,-14157
 a004334:	39e28a04 	addi	r7,r7,-30168
 a004338:	180b883a 	mov	r5,r3
 a00433c:	1009883a 	mov	r4,r2
 a004340:	a0004940 	call	a000494 <__adddf3>
 a004344:	8009883a 	mov	r4,r16
 a004348:	1029883a 	mov	r20,r2
 a00434c:	1823883a 	mov	r17,r3
 a004350:	a0015ac0 	call	a0015ac <__floatsidf>
 a004354:	019427f4 	movhi	r6,20639
 a004358:	01cff4f4 	movhi	r7,16339
 a00435c:	319e7ec4 	addi	r6,r6,31227
 a004360:	39d104c4 	addi	r7,r7,17427
 a004364:	1009883a 	mov	r4,r2
 a004368:	180b883a 	mov	r5,r3
 a00436c:	a000d400 	call	a000d40 <__muldf3>
 a004370:	100d883a 	mov	r6,r2
 a004374:	180f883a 	mov	r7,r3
 a004378:	a009883a 	mov	r4,r20
 a00437c:	880b883a 	mov	r5,r17
 a004380:	a0004940 	call	a000494 <__adddf3>
 a004384:	1009883a 	mov	r4,r2
 a004388:	180b883a 	mov	r5,r3
 a00438c:	1029883a 	mov	r20,r2
 a004390:	1823883a 	mov	r17,r3
 a004394:	a00d4700 	call	a00d470 <__fixdfsi>
 a004398:	000d883a 	mov	r6,zero
 a00439c:	000f883a 	mov	r7,zero
 a0043a0:	a009883a 	mov	r4,r20
 a0043a4:	880b883a 	mov	r5,r17
 a0043a8:	d8800515 	stw	r2,20(sp)
 a0043ac:	a00ca800 	call	a00ca80 <__ledf2>
 a0043b0:	10028716 	blt	r2,zero,a004dd0 <_dtoa_r+0xc88>
 a0043b4:	d8c00517 	ldw	r3,20(sp)
 a0043b8:	00800584 	movi	r2,22
 a0043bc:	10c27536 	bltu	r2,r3,a004d94 <_dtoa_r+0xc4c>
 a0043c0:	180490fa 	slli	r2,r3,3
 a0043c4:	00c28074 	movhi	r3,2561
 a0043c8:	18c73204 	addi	r3,r3,7368
 a0043cc:	1885883a 	add	r2,r3,r2
 a0043d0:	11000017 	ldw	r4,0(r2)
 a0043d4:	11400117 	ldw	r5,4(r2)
 a0043d8:	900d883a 	mov	r6,r18
 a0043dc:	980f883a 	mov	r7,r19
 a0043e0:	a00c9a40 	call	a00c9a4 <__gedf2>
 a0043e4:	00828d0e 	bge	zero,r2,a004e1c <_dtoa_r+0xcd4>
 a0043e8:	d9000517 	ldw	r4,20(sp)
 a0043ec:	d8000e15 	stw	zero,56(sp)
 a0043f0:	213fffc4 	addi	r4,r4,-1
 a0043f4:	d9000515 	stw	r4,20(sp)
 a0043f8:	b42dc83a 	sub	r22,r22,r16
 a0043fc:	b5bfffc4 	addi	r22,r22,-1
 a004400:	b0026f16 	blt	r22,zero,a004dc0 <_dtoa_r+0xc78>
 a004404:	d8000815 	stw	zero,32(sp)
 a004408:	d9c00517 	ldw	r7,20(sp)
 a00440c:	38026416 	blt	r7,zero,a004da0 <_dtoa_r+0xc58>
 a004410:	b1ed883a 	add	r22,r22,r7
 a004414:	d9c00d15 	stw	r7,52(sp)
 a004418:	d8000a15 	stw	zero,40(sp)
 a00441c:	d9800317 	ldw	r6,12(sp)
 a004420:	00800244 	movi	r2,9
 a004424:	11811436 	bltu	r2,r6,a004878 <_dtoa_r+0x730>
 a004428:	00800144 	movi	r2,5
 a00442c:	1184e10e 	bge	r2,r6,a0057b4 <_dtoa_r+0x166c>
 a004430:	31bfff04 	addi	r6,r6,-4
 a004434:	d9800315 	stw	r6,12(sp)
 a004438:	0023883a 	mov	r17,zero
 a00443c:	d9800317 	ldw	r6,12(sp)
 a004440:	008000c4 	movi	r2,3
 a004444:	30836726 	beq	r6,r2,a0051e4 <_dtoa_r+0x109c>
 a004448:	1183410e 	bge	r2,r6,a005150 <_dtoa_r+0x1008>
 a00444c:	d9c00317 	ldw	r7,12(sp)
 a004450:	00800104 	movi	r2,4
 a004454:	38827c26 	beq	r7,r2,a004e48 <_dtoa_r+0xd00>
 a004458:	00800144 	movi	r2,5
 a00445c:	3884c41e 	bne	r7,r2,a005770 <_dtoa_r+0x1628>
 a004460:	00800044 	movi	r2,1
 a004464:	d8800b15 	stw	r2,44(sp)
 a004468:	d8c00517 	ldw	r3,20(sp)
 a00446c:	d9002217 	ldw	r4,136(sp)
 a004470:	1907883a 	add	r3,r3,r4
 a004474:	19800044 	addi	r6,r3,1
 a004478:	d8c00c15 	stw	r3,48(sp)
 a00447c:	d9800615 	stw	r6,24(sp)
 a004480:	0183a40e 	bge	zero,r6,a005314 <_dtoa_r+0x11cc>
 a004484:	d9800617 	ldw	r6,24(sp)
 a004488:	3021883a 	mov	r16,r6
 a00448c:	e0001115 	stw	zero,68(fp)
 a004490:	008005c4 	movi	r2,23
 a004494:	1184c92e 	bgeu	r2,r6,a0057bc <_dtoa_r+0x1674>
 a004498:	00c00044 	movi	r3,1
 a00449c:	00800104 	movi	r2,4
 a0044a0:	1085883a 	add	r2,r2,r2
 a0044a4:	11000504 	addi	r4,r2,20
 a0044a8:	180b883a 	mov	r5,r3
 a0044ac:	18c00044 	addi	r3,r3,1
 a0044b0:	313ffb2e 	bgeu	r6,r4,a0044a0 <__alt_mem_flash+0xfe0034a0>
 a0044b4:	e1401115 	stw	r5,68(fp)
 a0044b8:	e009883a 	mov	r4,fp
 a0044bc:	a0071dc0 	call	a0071dc <_Balloc>
 a0044c0:	d8800715 	stw	r2,28(sp)
 a0044c4:	e0801015 	stw	r2,64(fp)
 a0044c8:	00800384 	movi	r2,14
 a0044cc:	1400f736 	bltu	r2,r16,a0048ac <_dtoa_r+0x764>
 a0044d0:	8800f626 	beq	r17,zero,a0048ac <_dtoa_r+0x764>
 a0044d4:	d9c00517 	ldw	r7,20(sp)
 a0044d8:	01c39a0e 	bge	zero,r7,a005344 <_dtoa_r+0x11fc>
 a0044dc:	388003cc 	andi	r2,r7,15
 a0044e0:	100490fa 	slli	r2,r2,3
 a0044e4:	382bd13a 	srai	r21,r7,4
 a0044e8:	00c28074 	movhi	r3,2561
 a0044ec:	18c73204 	addi	r3,r3,7368
 a0044f0:	1885883a 	add	r2,r3,r2
 a0044f4:	a8c0040c 	andi	r3,r21,16
 a0044f8:	12400017 	ldw	r9,0(r2)
 a0044fc:	12000117 	ldw	r8,4(r2)
 a004500:	18037926 	beq	r3,zero,a0052e8 <_dtoa_r+0x11a0>
 a004504:	00828074 	movhi	r2,2561
 a004508:	10872804 	addi	r2,r2,7328
 a00450c:	11800817 	ldw	r6,32(r2)
 a004510:	11c00917 	ldw	r7,36(r2)
 a004514:	9009883a 	mov	r4,r18
 a004518:	980b883a 	mov	r5,r19
 a00451c:	da001715 	stw	r8,92(sp)
 a004520:	da401615 	stw	r9,88(sp)
 a004524:	a00bf4c0 	call	a00bf4c <__divdf3>
 a004528:	da001717 	ldw	r8,92(sp)
 a00452c:	da401617 	ldw	r9,88(sp)
 a004530:	ad4003cc 	andi	r21,r21,15
 a004534:	040000c4 	movi	r16,3
 a004538:	1023883a 	mov	r17,r2
 a00453c:	1829883a 	mov	r20,r3
 a004540:	a8001126 	beq	r21,zero,a004588 <_dtoa_r+0x440>
 a004544:	05c28074 	movhi	r23,2561
 a004548:	bdc72804 	addi	r23,r23,7328
 a00454c:	4805883a 	mov	r2,r9
 a004550:	4007883a 	mov	r3,r8
 a004554:	a980004c 	andi	r6,r21,1
 a004558:	1009883a 	mov	r4,r2
 a00455c:	a82bd07a 	srai	r21,r21,1
 a004560:	180b883a 	mov	r5,r3
 a004564:	30000426 	beq	r6,zero,a004578 <_dtoa_r+0x430>
 a004568:	b9800017 	ldw	r6,0(r23)
 a00456c:	b9c00117 	ldw	r7,4(r23)
 a004570:	84000044 	addi	r16,r16,1
 a004574:	a000d400 	call	a000d40 <__muldf3>
 a004578:	bdc00204 	addi	r23,r23,8
 a00457c:	a83ff51e 	bne	r21,zero,a004554 <__alt_mem_flash+0xfe003554>
 a004580:	1013883a 	mov	r9,r2
 a004584:	1811883a 	mov	r8,r3
 a004588:	480d883a 	mov	r6,r9
 a00458c:	400f883a 	mov	r7,r8
 a004590:	8809883a 	mov	r4,r17
 a004594:	a00b883a 	mov	r5,r20
 a004598:	a00bf4c0 	call	a00bf4c <__divdf3>
 a00459c:	d8800f15 	stw	r2,60(sp)
 a0045a0:	d8c01015 	stw	r3,64(sp)
 a0045a4:	d8c00e17 	ldw	r3,56(sp)
 a0045a8:	18000626 	beq	r3,zero,a0045c4 <_dtoa_r+0x47c>
 a0045ac:	d9000f17 	ldw	r4,60(sp)
 a0045b0:	d9401017 	ldw	r5,64(sp)
 a0045b4:	000d883a 	mov	r6,zero
 a0045b8:	01cffc34 	movhi	r7,16368
 a0045bc:	a00ca800 	call	a00ca80 <__ledf2>
 a0045c0:	10040b16 	blt	r2,zero,a0055f0 <_dtoa_r+0x14a8>
 a0045c4:	8009883a 	mov	r4,r16
 a0045c8:	a0015ac0 	call	a0015ac <__floatsidf>
 a0045cc:	d9800f17 	ldw	r6,60(sp)
 a0045d0:	d9c01017 	ldw	r7,64(sp)
 a0045d4:	1009883a 	mov	r4,r2
 a0045d8:	180b883a 	mov	r5,r3
 a0045dc:	a000d400 	call	a000d40 <__muldf3>
 a0045e0:	000d883a 	mov	r6,zero
 a0045e4:	01d00734 	movhi	r7,16412
 a0045e8:	1009883a 	mov	r4,r2
 a0045ec:	180b883a 	mov	r5,r3
 a0045f0:	a0004940 	call	a000494 <__adddf3>
 a0045f4:	1021883a 	mov	r16,r2
 a0045f8:	d8800617 	ldw	r2,24(sp)
 a0045fc:	047f3034 	movhi	r17,64704
 a004600:	1c63883a 	add	r17,r3,r17
 a004604:	10031826 	beq	r2,zero,a005268 <_dtoa_r+0x1120>
 a004608:	d8c00517 	ldw	r3,20(sp)
 a00460c:	db000617 	ldw	r12,24(sp)
 a004610:	d8c01315 	stw	r3,76(sp)
 a004614:	d9000b17 	ldw	r4,44(sp)
 a004618:	20038f26 	beq	r4,zero,a005458 <_dtoa_r+0x1310>
 a00461c:	60bfffc4 	addi	r2,r12,-1
 a004620:	100490fa 	slli	r2,r2,3
 a004624:	00c28074 	movhi	r3,2561
 a004628:	18c73204 	addi	r3,r3,7368
 a00462c:	1885883a 	add	r2,r3,r2
 a004630:	11800017 	ldw	r6,0(r2)
 a004634:	11c00117 	ldw	r7,4(r2)
 a004638:	d8800717 	ldw	r2,28(sp)
 a00463c:	0009883a 	mov	r4,zero
 a004640:	014ff834 	movhi	r5,16352
 a004644:	db001615 	stw	r12,88(sp)
 a004648:	15c00044 	addi	r23,r2,1
 a00464c:	a00bf4c0 	call	a00bf4c <__divdf3>
 a004650:	800d883a 	mov	r6,r16
 a004654:	880f883a 	mov	r7,r17
 a004658:	1009883a 	mov	r4,r2
 a00465c:	180b883a 	mov	r5,r3
 a004660:	a00cb740 	call	a00cb74 <__subdf3>
 a004664:	d9401017 	ldw	r5,64(sp)
 a004668:	d9000f17 	ldw	r4,60(sp)
 a00466c:	102b883a 	mov	r21,r2
 a004670:	d8c01215 	stw	r3,72(sp)
 a004674:	a00d4700 	call	a00d470 <__fixdfsi>
 a004678:	1009883a 	mov	r4,r2
 a00467c:	1029883a 	mov	r20,r2
 a004680:	a0015ac0 	call	a0015ac <__floatsidf>
 a004684:	d9000f17 	ldw	r4,60(sp)
 a004688:	d9401017 	ldw	r5,64(sp)
 a00468c:	100d883a 	mov	r6,r2
 a004690:	180f883a 	mov	r7,r3
 a004694:	a00cb740 	call	a00cb74 <__subdf3>
 a004698:	1823883a 	mov	r17,r3
 a00469c:	d8c00717 	ldw	r3,28(sp)
 a0046a0:	d9401217 	ldw	r5,72(sp)
 a0046a4:	a2000c04 	addi	r8,r20,48
 a0046a8:	1021883a 	mov	r16,r2
 a0046ac:	1a000005 	stb	r8,0(r3)
 a0046b0:	800d883a 	mov	r6,r16
 a0046b4:	880f883a 	mov	r7,r17
 a0046b8:	a809883a 	mov	r4,r21
 a0046bc:	4029883a 	mov	r20,r8
 a0046c0:	a00c9a40 	call	a00c9a4 <__gedf2>
 a0046c4:	00841d16 	blt	zero,r2,a00573c <_dtoa_r+0x15f4>
 a0046c8:	800d883a 	mov	r6,r16
 a0046cc:	880f883a 	mov	r7,r17
 a0046d0:	0009883a 	mov	r4,zero
 a0046d4:	014ffc34 	movhi	r5,16368
 a0046d8:	a00cb740 	call	a00cb74 <__subdf3>
 a0046dc:	d9401217 	ldw	r5,72(sp)
 a0046e0:	100d883a 	mov	r6,r2
 a0046e4:	180f883a 	mov	r7,r3
 a0046e8:	a809883a 	mov	r4,r21
 a0046ec:	a00c9a40 	call	a00c9a4 <__gedf2>
 a0046f0:	db001617 	ldw	r12,88(sp)
 a0046f4:	00840e16 	blt	zero,r2,a005730 <_dtoa_r+0x15e8>
 a0046f8:	00800044 	movi	r2,1
 a0046fc:	13006b0e 	bge	r2,r12,a0048ac <_dtoa_r+0x764>
 a004700:	d9000717 	ldw	r4,28(sp)
 a004704:	dd800f15 	stw	r22,60(sp)
 a004708:	dcc01015 	stw	r19,64(sp)
 a00470c:	2319883a 	add	r12,r4,r12
 a004710:	dcc01217 	ldw	r19,72(sp)
 a004714:	602d883a 	mov	r22,r12
 a004718:	dc801215 	stw	r18,72(sp)
 a00471c:	b825883a 	mov	r18,r23
 a004720:	00000906 	br	a004748 <_dtoa_r+0x600>
 a004724:	a00cb740 	call	a00cb74 <__subdf3>
 a004728:	a80d883a 	mov	r6,r21
 a00472c:	980f883a 	mov	r7,r19
 a004730:	1009883a 	mov	r4,r2
 a004734:	180b883a 	mov	r5,r3
 a004738:	a00ca800 	call	a00ca80 <__ledf2>
 a00473c:	1003e816 	blt	r2,zero,a0056e0 <_dtoa_r+0x1598>
 a004740:	b825883a 	mov	r18,r23
 a004744:	bd83e926 	beq	r23,r22,a0056ec <_dtoa_r+0x15a4>
 a004748:	a809883a 	mov	r4,r21
 a00474c:	980b883a 	mov	r5,r19
 a004750:	000d883a 	mov	r6,zero
 a004754:	01d00934 	movhi	r7,16420
 a004758:	a000d400 	call	a000d40 <__muldf3>
 a00475c:	000d883a 	mov	r6,zero
 a004760:	01d00934 	movhi	r7,16420
 a004764:	8009883a 	mov	r4,r16
 a004768:	880b883a 	mov	r5,r17
 a00476c:	102b883a 	mov	r21,r2
 a004770:	1827883a 	mov	r19,r3
 a004774:	a000d400 	call	a000d40 <__muldf3>
 a004778:	180b883a 	mov	r5,r3
 a00477c:	1009883a 	mov	r4,r2
 a004780:	1821883a 	mov	r16,r3
 a004784:	1023883a 	mov	r17,r2
 a004788:	a00d4700 	call	a00d470 <__fixdfsi>
 a00478c:	1009883a 	mov	r4,r2
 a004790:	1029883a 	mov	r20,r2
 a004794:	a0015ac0 	call	a0015ac <__floatsidf>
 a004798:	8809883a 	mov	r4,r17
 a00479c:	800b883a 	mov	r5,r16
 a0047a0:	100d883a 	mov	r6,r2
 a0047a4:	180f883a 	mov	r7,r3
 a0047a8:	a00cb740 	call	a00cb74 <__subdf3>
 a0047ac:	a5000c04 	addi	r20,r20,48
 a0047b0:	a80d883a 	mov	r6,r21
 a0047b4:	980f883a 	mov	r7,r19
 a0047b8:	1009883a 	mov	r4,r2
 a0047bc:	180b883a 	mov	r5,r3
 a0047c0:	95000005 	stb	r20,0(r18)
 a0047c4:	1021883a 	mov	r16,r2
 a0047c8:	1823883a 	mov	r17,r3
 a0047cc:	a00ca800 	call	a00ca80 <__ledf2>
 a0047d0:	bdc00044 	addi	r23,r23,1
 a0047d4:	800d883a 	mov	r6,r16
 a0047d8:	880f883a 	mov	r7,r17
 a0047dc:	0009883a 	mov	r4,zero
 a0047e0:	014ffc34 	movhi	r5,16368
 a0047e4:	103fcf0e 	bge	r2,zero,a004724 <__alt_mem_flash+0xfe003724>
 a0047e8:	d8c01317 	ldw	r3,76(sp)
 a0047ec:	d8c00515 	stw	r3,20(sp)
 a0047f0:	d9400917 	ldw	r5,36(sp)
 a0047f4:	e009883a 	mov	r4,fp
 a0047f8:	a0072840 	call	a007284 <_Bfree>
 a0047fc:	d9000517 	ldw	r4,20(sp)
 a004800:	d9802317 	ldw	r6,140(sp)
 a004804:	d9c02517 	ldw	r7,148(sp)
 a004808:	b8000005 	stb	zero,0(r23)
 a00480c:	20800044 	addi	r2,r4,1
 a004810:	30800015 	stw	r2,0(r6)
 a004814:	3802aa26 	beq	r7,zero,a0052c0 <_dtoa_r+0x1178>
 a004818:	3dc00015 	stw	r23,0(r7)
 a00481c:	d8800717 	ldw	r2,28(sp)
 a004820:	003e7906 	br	a004208 <__alt_mem_flash+0xfe003208>
 a004824:	00800434 	movhi	r2,16
 a004828:	10bfffc4 	addi	r2,r2,-1
 a00482c:	88a2703a 	and	r17,r17,r2
 a004830:	883e851e 	bne	r17,zero,a004248 <__alt_mem_flash+0xfe003248>
 a004834:	00828074 	movhi	r2,2561
 a004838:	10871404 	addi	r2,r2,7248
 a00483c:	003e8406 	br	a004250 <__alt_mem_flash+0xfe003250>
 a004840:	10c00204 	addi	r3,r2,8
 a004844:	003e8706 	br	a004264 <__alt_mem_flash+0xfe003264>
 a004848:	01400434 	movhi	r5,16
 a00484c:	297fffc4 	addi	r5,r5,-1
 a004850:	994a703a 	and	r5,r19,r5
 a004854:	9009883a 	mov	r4,r18
 a004858:	843f0044 	addi	r16,r16,-1023
 a00485c:	294ffc34 	orhi	r5,r5,16368
 a004860:	dd800217 	ldw	r22,8(sp)
 a004864:	d8001115 	stw	zero,68(sp)
 a004868:	003ea506 	br	a004300 <__alt_mem_flash+0xfe003300>
 a00486c:	00828074 	movhi	r2,2561
 a004870:	10870b04 	addi	r2,r2,7212
 a004874:	003e6406 	br	a004208 <__alt_mem_flash+0xfe003208>
 a004878:	e0001115 	stw	zero,68(fp)
 a00487c:	000b883a 	mov	r5,zero
 a004880:	e009883a 	mov	r4,fp
 a004884:	a0071dc0 	call	a0071dc <_Balloc>
 a004888:	01bfffc4 	movi	r6,-1
 a00488c:	01c00044 	movi	r7,1
 a004890:	d8800715 	stw	r2,28(sp)
 a004894:	d9800c15 	stw	r6,48(sp)
 a004898:	e0801015 	stw	r2,64(fp)
 a00489c:	d8000315 	stw	zero,12(sp)
 a0048a0:	d9c00b15 	stw	r7,44(sp)
 a0048a4:	d9800615 	stw	r6,24(sp)
 a0048a8:	d8002215 	stw	zero,136(sp)
 a0048ac:	d8800117 	ldw	r2,4(sp)
 a0048b0:	10008916 	blt	r2,zero,a004ad8 <_dtoa_r+0x990>
 a0048b4:	d9000517 	ldw	r4,20(sp)
 a0048b8:	00c00384 	movi	r3,14
 a0048bc:	19008616 	blt	r3,r4,a004ad8 <_dtoa_r+0x990>
 a0048c0:	200490fa 	slli	r2,r4,3
 a0048c4:	00c28074 	movhi	r3,2561
 a0048c8:	d9802217 	ldw	r6,136(sp)
 a0048cc:	18c73204 	addi	r3,r3,7368
 a0048d0:	1885883a 	add	r2,r3,r2
 a0048d4:	14000017 	ldw	r16,0(r2)
 a0048d8:	14400117 	ldw	r17,4(r2)
 a0048dc:	30016316 	blt	r6,zero,a004e6c <_dtoa_r+0xd24>
 a0048e0:	800d883a 	mov	r6,r16
 a0048e4:	880f883a 	mov	r7,r17
 a0048e8:	9009883a 	mov	r4,r18
 a0048ec:	980b883a 	mov	r5,r19
 a0048f0:	a00bf4c0 	call	a00bf4c <__divdf3>
 a0048f4:	180b883a 	mov	r5,r3
 a0048f8:	1009883a 	mov	r4,r2
 a0048fc:	a00d4700 	call	a00d470 <__fixdfsi>
 a004900:	1009883a 	mov	r4,r2
 a004904:	102b883a 	mov	r21,r2
 a004908:	a0015ac0 	call	a0015ac <__floatsidf>
 a00490c:	800d883a 	mov	r6,r16
 a004910:	880f883a 	mov	r7,r17
 a004914:	1009883a 	mov	r4,r2
 a004918:	180b883a 	mov	r5,r3
 a00491c:	a000d400 	call	a000d40 <__muldf3>
 a004920:	100d883a 	mov	r6,r2
 a004924:	180f883a 	mov	r7,r3
 a004928:	9009883a 	mov	r4,r18
 a00492c:	980b883a 	mov	r5,r19
 a004930:	a00cb740 	call	a00cb74 <__subdf3>
 a004934:	d9c00717 	ldw	r7,28(sp)
 a004938:	1009883a 	mov	r4,r2
 a00493c:	a8800c04 	addi	r2,r21,48
 a004940:	38800005 	stb	r2,0(r7)
 a004944:	3dc00044 	addi	r23,r7,1
 a004948:	d9c00617 	ldw	r7,24(sp)
 a00494c:	01800044 	movi	r6,1
 a004950:	180b883a 	mov	r5,r3
 a004954:	2005883a 	mov	r2,r4
 a004958:	39803826 	beq	r7,r6,a004a3c <_dtoa_r+0x8f4>
 a00495c:	000d883a 	mov	r6,zero
 a004960:	01d00934 	movhi	r7,16420
 a004964:	a000d400 	call	a000d40 <__muldf3>
 a004968:	000d883a 	mov	r6,zero
 a00496c:	000f883a 	mov	r7,zero
 a004970:	1009883a 	mov	r4,r2
 a004974:	180b883a 	mov	r5,r3
 a004978:	1025883a 	mov	r18,r2
 a00497c:	1827883a 	mov	r19,r3
 a004980:	a00c91c0 	call	a00c91c <__eqdf2>
 a004984:	103f9a26 	beq	r2,zero,a0047f0 <__alt_mem_flash+0xfe0037f0>
 a004988:	d9c00617 	ldw	r7,24(sp)
 a00498c:	d8c00717 	ldw	r3,28(sp)
 a004990:	b829883a 	mov	r20,r23
 a004994:	38bfffc4 	addi	r2,r7,-1
 a004998:	18ad883a 	add	r22,r3,r2
 a00499c:	00000a06 	br	a0049c8 <_dtoa_r+0x880>
 a0049a0:	a000d400 	call	a000d40 <__muldf3>
 a0049a4:	000d883a 	mov	r6,zero
 a0049a8:	000f883a 	mov	r7,zero
 a0049ac:	1009883a 	mov	r4,r2
 a0049b0:	180b883a 	mov	r5,r3
 a0049b4:	1025883a 	mov	r18,r2
 a0049b8:	1827883a 	mov	r19,r3
 a0049bc:	b829883a 	mov	r20,r23
 a0049c0:	a00c91c0 	call	a00c91c <__eqdf2>
 a0049c4:	103f8a26 	beq	r2,zero,a0047f0 <__alt_mem_flash+0xfe0037f0>
 a0049c8:	800d883a 	mov	r6,r16
 a0049cc:	880f883a 	mov	r7,r17
 a0049d0:	9009883a 	mov	r4,r18
 a0049d4:	980b883a 	mov	r5,r19
 a0049d8:	a00bf4c0 	call	a00bf4c <__divdf3>
 a0049dc:	180b883a 	mov	r5,r3
 a0049e0:	1009883a 	mov	r4,r2
 a0049e4:	a00d4700 	call	a00d470 <__fixdfsi>
 a0049e8:	1009883a 	mov	r4,r2
 a0049ec:	102b883a 	mov	r21,r2
 a0049f0:	a0015ac0 	call	a0015ac <__floatsidf>
 a0049f4:	800d883a 	mov	r6,r16
 a0049f8:	880f883a 	mov	r7,r17
 a0049fc:	1009883a 	mov	r4,r2
 a004a00:	180b883a 	mov	r5,r3
 a004a04:	a000d400 	call	a000d40 <__muldf3>
 a004a08:	100d883a 	mov	r6,r2
 a004a0c:	180f883a 	mov	r7,r3
 a004a10:	9009883a 	mov	r4,r18
 a004a14:	980b883a 	mov	r5,r19
 a004a18:	a00cb740 	call	a00cb74 <__subdf3>
 a004a1c:	aa000c04 	addi	r8,r21,48
 a004a20:	a2000005 	stb	r8,0(r20)
 a004a24:	000d883a 	mov	r6,zero
 a004a28:	01d00934 	movhi	r7,16420
 a004a2c:	1009883a 	mov	r4,r2
 a004a30:	180b883a 	mov	r5,r3
 a004a34:	a5c00044 	addi	r23,r20,1
 a004a38:	b53fd91e 	bne	r22,r20,a0049a0 <__alt_mem_flash+0xfe0039a0>
 a004a3c:	100d883a 	mov	r6,r2
 a004a40:	180f883a 	mov	r7,r3
 a004a44:	1009883a 	mov	r4,r2
 a004a48:	180b883a 	mov	r5,r3
 a004a4c:	a0004940 	call	a000494 <__adddf3>
 a004a50:	100d883a 	mov	r6,r2
 a004a54:	180f883a 	mov	r7,r3
 a004a58:	8009883a 	mov	r4,r16
 a004a5c:	880b883a 	mov	r5,r17
 a004a60:	1027883a 	mov	r19,r2
 a004a64:	1825883a 	mov	r18,r3
 a004a68:	a00ca800 	call	a00ca80 <__ledf2>
 a004a6c:	10000816 	blt	r2,zero,a004a90 <_dtoa_r+0x948>
 a004a70:	980d883a 	mov	r6,r19
 a004a74:	900f883a 	mov	r7,r18
 a004a78:	8009883a 	mov	r4,r16
 a004a7c:	880b883a 	mov	r5,r17
 a004a80:	a00c91c0 	call	a00c91c <__eqdf2>
 a004a84:	103f5a1e 	bne	r2,zero,a0047f0 <__alt_mem_flash+0xfe0037f0>
 a004a88:	ad40004c 	andi	r21,r21,1
 a004a8c:	a83f5826 	beq	r21,zero,a0047f0 <__alt_mem_flash+0xfe0037f0>
 a004a90:	bd3fffc3 	ldbu	r20,-1(r23)
 a004a94:	b8bfffc4 	addi	r2,r23,-1
 a004a98:	1007883a 	mov	r3,r2
 a004a9c:	01400e44 	movi	r5,57
 a004aa0:	d9800717 	ldw	r6,28(sp)
 a004aa4:	00000506 	br	a004abc <_dtoa_r+0x974>
 a004aa8:	18ffffc4 	addi	r3,r3,-1
 a004aac:	11824726 	beq	r2,r6,a0053cc <_dtoa_r+0x1284>
 a004ab0:	1d000003 	ldbu	r20,0(r3)
 a004ab4:	102f883a 	mov	r23,r2
 a004ab8:	10bfffc4 	addi	r2,r2,-1
 a004abc:	a1003fcc 	andi	r4,r20,255
 a004ac0:	2100201c 	xori	r4,r4,128
 a004ac4:	213fe004 	addi	r4,r4,-128
 a004ac8:	217ff726 	beq	r4,r5,a004aa8 <__alt_mem_flash+0xfe003aa8>
 a004acc:	a2000044 	addi	r8,r20,1
 a004ad0:	12000005 	stb	r8,0(r2)
 a004ad4:	003f4606 	br	a0047f0 <__alt_mem_flash+0xfe0037f0>
 a004ad8:	d9000b17 	ldw	r4,44(sp)
 a004adc:	2000c826 	beq	r4,zero,a004e00 <_dtoa_r+0xcb8>
 a004ae0:	d9800317 	ldw	r6,12(sp)
 a004ae4:	00c00044 	movi	r3,1
 a004ae8:	1980f90e 	bge	r3,r6,a004ed0 <_dtoa_r+0xd88>
 a004aec:	d8800617 	ldw	r2,24(sp)
 a004af0:	d8c00a17 	ldw	r3,40(sp)
 a004af4:	157fffc4 	addi	r21,r2,-1
 a004af8:	1d41f316 	blt	r3,r21,a0052c8 <_dtoa_r+0x1180>
 a004afc:	1d6bc83a 	sub	r21,r3,r21
 a004b00:	d9c00617 	ldw	r7,24(sp)
 a004b04:	3802aa16 	blt	r7,zero,a0055b0 <_dtoa_r+0x1468>
 a004b08:	dd000817 	ldw	r20,32(sp)
 a004b0c:	d8800617 	ldw	r2,24(sp)
 a004b10:	d8c00817 	ldw	r3,32(sp)
 a004b14:	01400044 	movi	r5,1
 a004b18:	e009883a 	mov	r4,fp
 a004b1c:	1887883a 	add	r3,r3,r2
 a004b20:	d8c00815 	stw	r3,32(sp)
 a004b24:	b0ad883a 	add	r22,r22,r2
 a004b28:	a0076100 	call	a007610 <__i2b>
 a004b2c:	1023883a 	mov	r17,r2
 a004b30:	a0000826 	beq	r20,zero,a004b54 <_dtoa_r+0xa0c>
 a004b34:	0580070e 	bge	zero,r22,a004b54 <_dtoa_r+0xa0c>
 a004b38:	a005883a 	mov	r2,r20
 a004b3c:	b500b916 	blt	r22,r20,a004e24 <_dtoa_r+0xcdc>
 a004b40:	d9000817 	ldw	r4,32(sp)
 a004b44:	a0a9c83a 	sub	r20,r20,r2
 a004b48:	b0adc83a 	sub	r22,r22,r2
 a004b4c:	2089c83a 	sub	r4,r4,r2
 a004b50:	d9000815 	stw	r4,32(sp)
 a004b54:	d9800a17 	ldw	r6,40(sp)
 a004b58:	0181810e 	bge	zero,r6,a005160 <_dtoa_r+0x1018>
 a004b5c:	d9c00b17 	ldw	r7,44(sp)
 a004b60:	3800b326 	beq	r7,zero,a004e30 <_dtoa_r+0xce8>
 a004b64:	a800b226 	beq	r21,zero,a004e30 <_dtoa_r+0xce8>
 a004b68:	880b883a 	mov	r5,r17
 a004b6c:	a80d883a 	mov	r6,r21
 a004b70:	e009883a 	mov	r4,fp
 a004b74:	a0078d80 	call	a0078d8 <__pow5mult>
 a004b78:	d9800917 	ldw	r6,36(sp)
 a004b7c:	100b883a 	mov	r5,r2
 a004b80:	e009883a 	mov	r4,fp
 a004b84:	1023883a 	mov	r17,r2
 a004b88:	a00764c0 	call	a00764c <__multiply>
 a004b8c:	1021883a 	mov	r16,r2
 a004b90:	d8800a17 	ldw	r2,40(sp)
 a004b94:	d9400917 	ldw	r5,36(sp)
 a004b98:	e009883a 	mov	r4,fp
 a004b9c:	1545c83a 	sub	r2,r2,r21
 a004ba0:	d8800a15 	stw	r2,40(sp)
 a004ba4:	a0072840 	call	a007284 <_Bfree>
 a004ba8:	d8c00a17 	ldw	r3,40(sp)
 a004bac:	18009f1e 	bne	r3,zero,a004e2c <_dtoa_r+0xce4>
 a004bb0:	05c00044 	movi	r23,1
 a004bb4:	e009883a 	mov	r4,fp
 a004bb8:	b80b883a 	mov	r5,r23
 a004bbc:	a0076100 	call	a007610 <__i2b>
 a004bc0:	d9000d17 	ldw	r4,52(sp)
 a004bc4:	102b883a 	mov	r21,r2
 a004bc8:	2000ce26 	beq	r4,zero,a004f04 <_dtoa_r+0xdbc>
 a004bcc:	200d883a 	mov	r6,r4
 a004bd0:	100b883a 	mov	r5,r2
 a004bd4:	e009883a 	mov	r4,fp
 a004bd8:	a0078d80 	call	a0078d8 <__pow5mult>
 a004bdc:	d9800317 	ldw	r6,12(sp)
 a004be0:	102b883a 	mov	r21,r2
 a004be4:	b981810e 	bge	r23,r6,a0051ec <_dtoa_r+0x10a4>
 a004be8:	0027883a 	mov	r19,zero
 a004bec:	a8800417 	ldw	r2,16(r21)
 a004bf0:	05c00804 	movi	r23,32
 a004bf4:	10800104 	addi	r2,r2,4
 a004bf8:	1085883a 	add	r2,r2,r2
 a004bfc:	1085883a 	add	r2,r2,r2
 a004c00:	a885883a 	add	r2,r21,r2
 a004c04:	11000017 	ldw	r4,0(r2)
 a004c08:	a0074f80 	call	a0074f8 <__hi0bits>
 a004c0c:	b885c83a 	sub	r2,r23,r2
 a004c10:	1585883a 	add	r2,r2,r22
 a004c14:	108007cc 	andi	r2,r2,31
 a004c18:	1000b326 	beq	r2,zero,a004ee8 <_dtoa_r+0xda0>
 a004c1c:	00c00804 	movi	r3,32
 a004c20:	1887c83a 	sub	r3,r3,r2
 a004c24:	01000104 	movi	r4,4
 a004c28:	20c2cd0e 	bge	r4,r3,a005760 <_dtoa_r+0x1618>
 a004c2c:	00c00704 	movi	r3,28
 a004c30:	1885c83a 	sub	r2,r3,r2
 a004c34:	d8c00817 	ldw	r3,32(sp)
 a004c38:	a0a9883a 	add	r20,r20,r2
 a004c3c:	b0ad883a 	add	r22,r22,r2
 a004c40:	1887883a 	add	r3,r3,r2
 a004c44:	d8c00815 	stw	r3,32(sp)
 a004c48:	d9800817 	ldw	r6,32(sp)
 a004c4c:	0180040e 	bge	zero,r6,a004c60 <_dtoa_r+0xb18>
 a004c50:	800b883a 	mov	r5,r16
 a004c54:	e009883a 	mov	r4,fp
 a004c58:	a007a180 	call	a007a18 <__lshift>
 a004c5c:	1021883a 	mov	r16,r2
 a004c60:	0580050e 	bge	zero,r22,a004c78 <_dtoa_r+0xb30>
 a004c64:	a80b883a 	mov	r5,r21
 a004c68:	b00d883a 	mov	r6,r22
 a004c6c:	e009883a 	mov	r4,fp
 a004c70:	a007a180 	call	a007a18 <__lshift>
 a004c74:	102b883a 	mov	r21,r2
 a004c78:	d9c00e17 	ldw	r7,56(sp)
 a004c7c:	3801211e 	bne	r7,zero,a005104 <_dtoa_r+0xfbc>
 a004c80:	d9800617 	ldw	r6,24(sp)
 a004c84:	0181380e 	bge	zero,r6,a005168 <_dtoa_r+0x1020>
 a004c88:	d8c00b17 	ldw	r3,44(sp)
 a004c8c:	1800ab1e 	bne	r3,zero,a004f3c <_dtoa_r+0xdf4>
 a004c90:	dc800717 	ldw	r18,28(sp)
 a004c94:	dcc00617 	ldw	r19,24(sp)
 a004c98:	9029883a 	mov	r20,r18
 a004c9c:	00000206 	br	a004ca8 <_dtoa_r+0xb60>
 a004ca0:	a0072ac0 	call	a0072ac <__multadd>
 a004ca4:	1021883a 	mov	r16,r2
 a004ca8:	a80b883a 	mov	r5,r21
 a004cac:	8009883a 	mov	r4,r16
 a004cb0:	a003f200 	call	a003f20 <quorem>
 a004cb4:	10800c04 	addi	r2,r2,48
 a004cb8:	90800005 	stb	r2,0(r18)
 a004cbc:	94800044 	addi	r18,r18,1
 a004cc0:	9507c83a 	sub	r3,r18,r20
 a004cc4:	000f883a 	mov	r7,zero
 a004cc8:	01800284 	movi	r6,10
 a004ccc:	800b883a 	mov	r5,r16
 a004cd0:	e009883a 	mov	r4,fp
 a004cd4:	1cfff216 	blt	r3,r19,a004ca0 <__alt_mem_flash+0xfe003ca0>
 a004cd8:	1011883a 	mov	r8,r2
 a004cdc:	d8800617 	ldw	r2,24(sp)
 a004ce0:	0082370e 	bge	zero,r2,a0055c0 <_dtoa_r+0x1478>
 a004ce4:	d9000717 	ldw	r4,28(sp)
 a004ce8:	0025883a 	mov	r18,zero
 a004cec:	20af883a 	add	r23,r4,r2
 a004cf0:	01800044 	movi	r6,1
 a004cf4:	800b883a 	mov	r5,r16
 a004cf8:	e009883a 	mov	r4,fp
 a004cfc:	da001715 	stw	r8,92(sp)
 a004d00:	a007a180 	call	a007a18 <__lshift>
 a004d04:	a80b883a 	mov	r5,r21
 a004d08:	1009883a 	mov	r4,r2
 a004d0c:	d8800915 	stw	r2,36(sp)
 a004d10:	a007b600 	call	a007b60 <__mcmp>
 a004d14:	da001717 	ldw	r8,92(sp)
 a004d18:	0081800e 	bge	zero,r2,a00531c <_dtoa_r+0x11d4>
 a004d1c:	b93fffc3 	ldbu	r4,-1(r23)
 a004d20:	b8bfffc4 	addi	r2,r23,-1
 a004d24:	1007883a 	mov	r3,r2
 a004d28:	01800e44 	movi	r6,57
 a004d2c:	d9c00717 	ldw	r7,28(sp)
 a004d30:	00000506 	br	a004d48 <_dtoa_r+0xc00>
 a004d34:	18ffffc4 	addi	r3,r3,-1
 a004d38:	11c12326 	beq	r2,r7,a0051c8 <_dtoa_r+0x1080>
 a004d3c:	19000003 	ldbu	r4,0(r3)
 a004d40:	102f883a 	mov	r23,r2
 a004d44:	10bfffc4 	addi	r2,r2,-1
 a004d48:	21403fcc 	andi	r5,r4,255
 a004d4c:	2940201c 	xori	r5,r5,128
 a004d50:	297fe004 	addi	r5,r5,-128
 a004d54:	29bff726 	beq	r5,r6,a004d34 <__alt_mem_flash+0xfe003d34>
 a004d58:	21000044 	addi	r4,r4,1
 a004d5c:	11000005 	stb	r4,0(r2)
 a004d60:	a80b883a 	mov	r5,r21
 a004d64:	e009883a 	mov	r4,fp
 a004d68:	a0072840 	call	a007284 <_Bfree>
 a004d6c:	883ea026 	beq	r17,zero,a0047f0 <__alt_mem_flash+0xfe0037f0>
 a004d70:	90000426 	beq	r18,zero,a004d84 <_dtoa_r+0xc3c>
 a004d74:	94400326 	beq	r18,r17,a004d84 <_dtoa_r+0xc3c>
 a004d78:	900b883a 	mov	r5,r18
 a004d7c:	e009883a 	mov	r4,fp
 a004d80:	a0072840 	call	a007284 <_Bfree>
 a004d84:	880b883a 	mov	r5,r17
 a004d88:	e009883a 	mov	r4,fp
 a004d8c:	a0072840 	call	a007284 <_Bfree>
 a004d90:	003e9706 	br	a0047f0 <__alt_mem_flash+0xfe0037f0>
 a004d94:	01800044 	movi	r6,1
 a004d98:	d9800e15 	stw	r6,56(sp)
 a004d9c:	003d9606 	br	a0043f8 <__alt_mem_flash+0xfe0033f8>
 a004da0:	d8800817 	ldw	r2,32(sp)
 a004da4:	d8c00517 	ldw	r3,20(sp)
 a004da8:	d8000d15 	stw	zero,52(sp)
 a004dac:	10c5c83a 	sub	r2,r2,r3
 a004db0:	00c9c83a 	sub	r4,zero,r3
 a004db4:	d8800815 	stw	r2,32(sp)
 a004db8:	d9000a15 	stw	r4,40(sp)
 a004dbc:	003d9706 	br	a00441c <__alt_mem_flash+0xfe00341c>
 a004dc0:	05adc83a 	sub	r22,zero,r22
 a004dc4:	dd800815 	stw	r22,32(sp)
 a004dc8:	002d883a 	mov	r22,zero
 a004dcc:	003d8e06 	br	a004408 <__alt_mem_flash+0xfe003408>
 a004dd0:	d9000517 	ldw	r4,20(sp)
 a004dd4:	a0015ac0 	call	a0015ac <__floatsidf>
 a004dd8:	100d883a 	mov	r6,r2
 a004ddc:	180f883a 	mov	r7,r3
 a004de0:	a009883a 	mov	r4,r20
 a004de4:	880b883a 	mov	r5,r17
 a004de8:	a00c91c0 	call	a00c91c <__eqdf2>
 a004dec:	103d7126 	beq	r2,zero,a0043b4 <__alt_mem_flash+0xfe0033b4>
 a004df0:	d9c00517 	ldw	r7,20(sp)
 a004df4:	39ffffc4 	addi	r7,r7,-1
 a004df8:	d9c00515 	stw	r7,20(sp)
 a004dfc:	003d6d06 	br	a0043b4 <__alt_mem_flash+0xfe0033b4>
 a004e00:	dd400a17 	ldw	r21,40(sp)
 a004e04:	dd000817 	ldw	r20,32(sp)
 a004e08:	0023883a 	mov	r17,zero
 a004e0c:	003f4806 	br	a004b30 <__alt_mem_flash+0xfe003b30>
 a004e10:	10e3c83a 	sub	r17,r2,r3
 a004e14:	9448983a 	sll	r4,r18,r17
 a004e18:	003d3206 	br	a0042e4 <__alt_mem_flash+0xfe0032e4>
 a004e1c:	d8000e15 	stw	zero,56(sp)
 a004e20:	003d7506 	br	a0043f8 <__alt_mem_flash+0xfe0033f8>
 a004e24:	b005883a 	mov	r2,r22
 a004e28:	003f4506 	br	a004b40 <__alt_mem_flash+0xfe003b40>
 a004e2c:	dc000915 	stw	r16,36(sp)
 a004e30:	d9800a17 	ldw	r6,40(sp)
 a004e34:	d9400917 	ldw	r5,36(sp)
 a004e38:	e009883a 	mov	r4,fp
 a004e3c:	a0078d80 	call	a0078d8 <__pow5mult>
 a004e40:	1021883a 	mov	r16,r2
 a004e44:	003f5a06 	br	a004bb0 <__alt_mem_flash+0xfe003bb0>
 a004e48:	01c00044 	movi	r7,1
 a004e4c:	d9c00b15 	stw	r7,44(sp)
 a004e50:	d8802217 	ldw	r2,136(sp)
 a004e54:	0081280e 	bge	zero,r2,a0052f8 <_dtoa_r+0x11b0>
 a004e58:	100d883a 	mov	r6,r2
 a004e5c:	1021883a 	mov	r16,r2
 a004e60:	d8800c15 	stw	r2,48(sp)
 a004e64:	d8800615 	stw	r2,24(sp)
 a004e68:	003d8806 	br	a00448c <__alt_mem_flash+0xfe00348c>
 a004e6c:	d8800617 	ldw	r2,24(sp)
 a004e70:	00be9b16 	blt	zero,r2,a0048e0 <__alt_mem_flash+0xfe0038e0>
 a004e74:	10010f1e 	bne	r2,zero,a0052b4 <_dtoa_r+0x116c>
 a004e78:	880b883a 	mov	r5,r17
 a004e7c:	000d883a 	mov	r6,zero
 a004e80:	01d00534 	movhi	r7,16404
 a004e84:	8009883a 	mov	r4,r16
 a004e88:	a000d400 	call	a000d40 <__muldf3>
 a004e8c:	900d883a 	mov	r6,r18
 a004e90:	980f883a 	mov	r7,r19
 a004e94:	1009883a 	mov	r4,r2
 a004e98:	180b883a 	mov	r5,r3
 a004e9c:	a00c9a40 	call	a00c9a4 <__gedf2>
 a004ea0:	002b883a 	mov	r21,zero
 a004ea4:	0023883a 	mov	r17,zero
 a004ea8:	1000bf16 	blt	r2,zero,a0051a8 <_dtoa_r+0x1060>
 a004eac:	d9802217 	ldw	r6,136(sp)
 a004eb0:	ddc00717 	ldw	r23,28(sp)
 a004eb4:	018c303a 	nor	r6,zero,r6
 a004eb8:	d9800515 	stw	r6,20(sp)
 a004ebc:	a80b883a 	mov	r5,r21
 a004ec0:	e009883a 	mov	r4,fp
 a004ec4:	a0072840 	call	a007284 <_Bfree>
 a004ec8:	883e4926 	beq	r17,zero,a0047f0 <__alt_mem_flash+0xfe0037f0>
 a004ecc:	003fad06 	br	a004d84 <__alt_mem_flash+0xfe003d84>
 a004ed0:	d9c01117 	ldw	r7,68(sp)
 a004ed4:	3801bc26 	beq	r7,zero,a0055c8 <_dtoa_r+0x1480>
 a004ed8:	10810cc4 	addi	r2,r2,1075
 a004edc:	dd400a17 	ldw	r21,40(sp)
 a004ee0:	dd000817 	ldw	r20,32(sp)
 a004ee4:	003f0a06 	br	a004b10 <__alt_mem_flash+0xfe003b10>
 a004ee8:	00800704 	movi	r2,28
 a004eec:	d9000817 	ldw	r4,32(sp)
 a004ef0:	a0a9883a 	add	r20,r20,r2
 a004ef4:	b0ad883a 	add	r22,r22,r2
 a004ef8:	2089883a 	add	r4,r4,r2
 a004efc:	d9000815 	stw	r4,32(sp)
 a004f00:	003f5106 	br	a004c48 <__alt_mem_flash+0xfe003c48>
 a004f04:	d8c00317 	ldw	r3,12(sp)
 a004f08:	b8c1fc0e 	bge	r23,r3,a0056fc <_dtoa_r+0x15b4>
 a004f0c:	0027883a 	mov	r19,zero
 a004f10:	b805883a 	mov	r2,r23
 a004f14:	003f3e06 	br	a004c10 <__alt_mem_flash+0xfe003c10>
 a004f18:	880b883a 	mov	r5,r17
 a004f1c:	e009883a 	mov	r4,fp
 a004f20:	000f883a 	mov	r7,zero
 a004f24:	01800284 	movi	r6,10
 a004f28:	a0072ac0 	call	a0072ac <__multadd>
 a004f2c:	d9000c17 	ldw	r4,48(sp)
 a004f30:	1023883a 	mov	r17,r2
 a004f34:	0102040e 	bge	zero,r4,a005748 <_dtoa_r+0x1600>
 a004f38:	d9000615 	stw	r4,24(sp)
 a004f3c:	0500050e 	bge	zero,r20,a004f54 <_dtoa_r+0xe0c>
 a004f40:	880b883a 	mov	r5,r17
 a004f44:	a00d883a 	mov	r6,r20
 a004f48:	e009883a 	mov	r4,fp
 a004f4c:	a007a180 	call	a007a18 <__lshift>
 a004f50:	1023883a 	mov	r17,r2
 a004f54:	9801241e 	bne	r19,zero,a0053e8 <_dtoa_r+0x12a0>
 a004f58:	8829883a 	mov	r20,r17
 a004f5c:	d9000617 	ldw	r4,24(sp)
 a004f60:	dcc00717 	ldw	r19,28(sp)
 a004f64:	9480004c 	andi	r18,r18,1
 a004f68:	20bfffc4 	addi	r2,r4,-1
 a004f6c:	9885883a 	add	r2,r19,r2
 a004f70:	d8800415 	stw	r2,16(sp)
 a004f74:	dc800615 	stw	r18,24(sp)
 a004f78:	a80b883a 	mov	r5,r21
 a004f7c:	8009883a 	mov	r4,r16
 a004f80:	a003f200 	call	a003f20 <quorem>
 a004f84:	880b883a 	mov	r5,r17
 a004f88:	8009883a 	mov	r4,r16
 a004f8c:	102f883a 	mov	r23,r2
 a004f90:	a007b600 	call	a007b60 <__mcmp>
 a004f94:	a80b883a 	mov	r5,r21
 a004f98:	a00d883a 	mov	r6,r20
 a004f9c:	e009883a 	mov	r4,fp
 a004fa0:	102d883a 	mov	r22,r2
 a004fa4:	a007bc00 	call	a007bc0 <__mdiff>
 a004fa8:	1007883a 	mov	r3,r2
 a004fac:	10800317 	ldw	r2,12(r2)
 a004fb0:	bc800c04 	addi	r18,r23,48
 a004fb4:	180b883a 	mov	r5,r3
 a004fb8:	10004e1e 	bne	r2,zero,a0050f4 <_dtoa_r+0xfac>
 a004fbc:	8009883a 	mov	r4,r16
 a004fc0:	d8c01615 	stw	r3,88(sp)
 a004fc4:	a007b600 	call	a007b60 <__mcmp>
 a004fc8:	d8c01617 	ldw	r3,88(sp)
 a004fcc:	e009883a 	mov	r4,fp
 a004fd0:	d8801615 	stw	r2,88(sp)
 a004fd4:	180b883a 	mov	r5,r3
 a004fd8:	a0072840 	call	a007284 <_Bfree>
 a004fdc:	d8801617 	ldw	r2,88(sp)
 a004fe0:	1000041e 	bne	r2,zero,a004ff4 <_dtoa_r+0xeac>
 a004fe4:	d9800317 	ldw	r6,12(sp)
 a004fe8:	3000021e 	bne	r6,zero,a004ff4 <_dtoa_r+0xeac>
 a004fec:	d8c00617 	ldw	r3,24(sp)
 a004ff0:	18003726 	beq	r3,zero,a0050d0 <_dtoa_r+0xf88>
 a004ff4:	b0002016 	blt	r22,zero,a005078 <_dtoa_r+0xf30>
 a004ff8:	b000041e 	bne	r22,zero,a00500c <_dtoa_r+0xec4>
 a004ffc:	d9000317 	ldw	r4,12(sp)
 a005000:	2000021e 	bne	r4,zero,a00500c <_dtoa_r+0xec4>
 a005004:	d8c00617 	ldw	r3,24(sp)
 a005008:	18001b26 	beq	r3,zero,a005078 <_dtoa_r+0xf30>
 a00500c:	00810716 	blt	zero,r2,a00542c <_dtoa_r+0x12e4>
 a005010:	d8c00417 	ldw	r3,16(sp)
 a005014:	9d800044 	addi	r22,r19,1
 a005018:	9c800005 	stb	r18,0(r19)
 a00501c:	b02f883a 	mov	r23,r22
 a005020:	98c10626 	beq	r19,r3,a00543c <_dtoa_r+0x12f4>
 a005024:	800b883a 	mov	r5,r16
 a005028:	000f883a 	mov	r7,zero
 a00502c:	01800284 	movi	r6,10
 a005030:	e009883a 	mov	r4,fp
 a005034:	a0072ac0 	call	a0072ac <__multadd>
 a005038:	1021883a 	mov	r16,r2
 a00503c:	000f883a 	mov	r7,zero
 a005040:	01800284 	movi	r6,10
 a005044:	880b883a 	mov	r5,r17
 a005048:	e009883a 	mov	r4,fp
 a00504c:	8d002526 	beq	r17,r20,a0050e4 <_dtoa_r+0xf9c>
 a005050:	a0072ac0 	call	a0072ac <__multadd>
 a005054:	a00b883a 	mov	r5,r20
 a005058:	000f883a 	mov	r7,zero
 a00505c:	01800284 	movi	r6,10
 a005060:	e009883a 	mov	r4,fp
 a005064:	1023883a 	mov	r17,r2
 a005068:	a0072ac0 	call	a0072ac <__multadd>
 a00506c:	1029883a 	mov	r20,r2
 a005070:	b027883a 	mov	r19,r22
 a005074:	003fc006 	br	a004f78 <__alt_mem_flash+0xfe003f78>
 a005078:	9011883a 	mov	r8,r18
 a00507c:	00800e0e 	bge	zero,r2,a0050b8 <_dtoa_r+0xf70>
 a005080:	800b883a 	mov	r5,r16
 a005084:	01800044 	movi	r6,1
 a005088:	e009883a 	mov	r4,fp
 a00508c:	da001715 	stw	r8,92(sp)
 a005090:	a007a180 	call	a007a18 <__lshift>
 a005094:	a80b883a 	mov	r5,r21
 a005098:	1009883a 	mov	r4,r2
 a00509c:	1021883a 	mov	r16,r2
 a0050a0:	a007b600 	call	a007b60 <__mcmp>
 a0050a4:	da001717 	ldw	r8,92(sp)
 a0050a8:	0081960e 	bge	zero,r2,a005704 <_dtoa_r+0x15bc>
 a0050ac:	00800e44 	movi	r2,57
 a0050b0:	40817026 	beq	r8,r2,a005674 <_dtoa_r+0x152c>
 a0050b4:	ba000c44 	addi	r8,r23,49
 a0050b8:	8825883a 	mov	r18,r17
 a0050bc:	9dc00044 	addi	r23,r19,1
 a0050c0:	9a000005 	stb	r8,0(r19)
 a0050c4:	a023883a 	mov	r17,r20
 a0050c8:	dc000915 	stw	r16,36(sp)
 a0050cc:	003f2406 	br	a004d60 <__alt_mem_flash+0xfe003d60>
 a0050d0:	00800e44 	movi	r2,57
 a0050d4:	9011883a 	mov	r8,r18
 a0050d8:	90816626 	beq	r18,r2,a005674 <_dtoa_r+0x152c>
 a0050dc:	05bff516 	blt	zero,r22,a0050b4 <__alt_mem_flash+0xfe0040b4>
 a0050e0:	003ff506 	br	a0050b8 <__alt_mem_flash+0xfe0040b8>
 a0050e4:	a0072ac0 	call	a0072ac <__multadd>
 a0050e8:	1023883a 	mov	r17,r2
 a0050ec:	1029883a 	mov	r20,r2
 a0050f0:	003fdf06 	br	a005070 <__alt_mem_flash+0xfe004070>
 a0050f4:	e009883a 	mov	r4,fp
 a0050f8:	a0072840 	call	a007284 <_Bfree>
 a0050fc:	00800044 	movi	r2,1
 a005100:	003fbc06 	br	a004ff4 <__alt_mem_flash+0xfe003ff4>
 a005104:	a80b883a 	mov	r5,r21
 a005108:	8009883a 	mov	r4,r16
 a00510c:	a007b600 	call	a007b60 <__mcmp>
 a005110:	103edb0e 	bge	r2,zero,a004c80 <__alt_mem_flash+0xfe003c80>
 a005114:	800b883a 	mov	r5,r16
 a005118:	000f883a 	mov	r7,zero
 a00511c:	01800284 	movi	r6,10
 a005120:	e009883a 	mov	r4,fp
 a005124:	a0072ac0 	call	a0072ac <__multadd>
 a005128:	1021883a 	mov	r16,r2
 a00512c:	d8800517 	ldw	r2,20(sp)
 a005130:	d8c00b17 	ldw	r3,44(sp)
 a005134:	10bfffc4 	addi	r2,r2,-1
 a005138:	d8800515 	stw	r2,20(sp)
 a00513c:	183f761e 	bne	r3,zero,a004f18 <__alt_mem_flash+0xfe003f18>
 a005140:	d9000c17 	ldw	r4,48(sp)
 a005144:	0101730e 	bge	zero,r4,a005714 <_dtoa_r+0x15cc>
 a005148:	d9000615 	stw	r4,24(sp)
 a00514c:	003ed006 	br	a004c90 <__alt_mem_flash+0xfe003c90>
 a005150:	00800084 	movi	r2,2
 a005154:	3081861e 	bne	r6,r2,a005770 <_dtoa_r+0x1628>
 a005158:	d8000b15 	stw	zero,44(sp)
 a00515c:	003f3c06 	br	a004e50 <__alt_mem_flash+0xfe003e50>
 a005160:	dc000917 	ldw	r16,36(sp)
 a005164:	003e9206 	br	a004bb0 <__alt_mem_flash+0xfe003bb0>
 a005168:	d9c00317 	ldw	r7,12(sp)
 a00516c:	00800084 	movi	r2,2
 a005170:	11fec50e 	bge	r2,r7,a004c88 <__alt_mem_flash+0xfe003c88>
 a005174:	d9000617 	ldw	r4,24(sp)
 a005178:	20013c1e 	bne	r4,zero,a00566c <_dtoa_r+0x1524>
 a00517c:	a80b883a 	mov	r5,r21
 a005180:	000f883a 	mov	r7,zero
 a005184:	01800144 	movi	r6,5
 a005188:	e009883a 	mov	r4,fp
 a00518c:	a0072ac0 	call	a0072ac <__multadd>
 a005190:	100b883a 	mov	r5,r2
 a005194:	8009883a 	mov	r4,r16
 a005198:	102b883a 	mov	r21,r2
 a00519c:	a007b600 	call	a007b60 <__mcmp>
 a0051a0:	dc000915 	stw	r16,36(sp)
 a0051a4:	00bf410e 	bge	zero,r2,a004eac <__alt_mem_flash+0xfe003eac>
 a0051a8:	d9c00717 	ldw	r7,28(sp)
 a0051ac:	00800c44 	movi	r2,49
 a0051b0:	38800005 	stb	r2,0(r7)
 a0051b4:	d8800517 	ldw	r2,20(sp)
 a0051b8:	3dc00044 	addi	r23,r7,1
 a0051bc:	10800044 	addi	r2,r2,1
 a0051c0:	d8800515 	stw	r2,20(sp)
 a0051c4:	003f3d06 	br	a004ebc <__alt_mem_flash+0xfe003ebc>
 a0051c8:	d9800517 	ldw	r6,20(sp)
 a0051cc:	d9c00717 	ldw	r7,28(sp)
 a0051d0:	00800c44 	movi	r2,49
 a0051d4:	31800044 	addi	r6,r6,1
 a0051d8:	d9800515 	stw	r6,20(sp)
 a0051dc:	38800005 	stb	r2,0(r7)
 a0051e0:	003edf06 	br	a004d60 <__alt_mem_flash+0xfe003d60>
 a0051e4:	d8000b15 	stw	zero,44(sp)
 a0051e8:	003c9f06 	br	a004468 <__alt_mem_flash+0xfe003468>
 a0051ec:	903e7e1e 	bne	r18,zero,a004be8 <__alt_mem_flash+0xfe003be8>
 a0051f0:	00800434 	movhi	r2,16
 a0051f4:	10bfffc4 	addi	r2,r2,-1
 a0051f8:	9884703a 	and	r2,r19,r2
 a0051fc:	1000ea1e 	bne	r2,zero,a0055a8 <_dtoa_r+0x1460>
 a005200:	9cdffc2c 	andhi	r19,r19,32752
 a005204:	9800e826 	beq	r19,zero,a0055a8 <_dtoa_r+0x1460>
 a005208:	d9c00817 	ldw	r7,32(sp)
 a00520c:	b5800044 	addi	r22,r22,1
 a005210:	04c00044 	movi	r19,1
 a005214:	39c00044 	addi	r7,r7,1
 a005218:	d9c00815 	stw	r7,32(sp)
 a00521c:	d8800d17 	ldw	r2,52(sp)
 a005220:	103e721e 	bne	r2,zero,a004bec <__alt_mem_flash+0xfe003bec>
 a005224:	00800044 	movi	r2,1
 a005228:	003e7906 	br	a004c10 <__alt_mem_flash+0xfe003c10>
 a00522c:	8009883a 	mov	r4,r16
 a005230:	a0015ac0 	call	a0015ac <__floatsidf>
 a005234:	d9800f17 	ldw	r6,60(sp)
 a005238:	d9c01017 	ldw	r7,64(sp)
 a00523c:	1009883a 	mov	r4,r2
 a005240:	180b883a 	mov	r5,r3
 a005244:	a000d400 	call	a000d40 <__muldf3>
 a005248:	000d883a 	mov	r6,zero
 a00524c:	01d00734 	movhi	r7,16412
 a005250:	1009883a 	mov	r4,r2
 a005254:	180b883a 	mov	r5,r3
 a005258:	a0004940 	call	a000494 <__adddf3>
 a00525c:	047f3034 	movhi	r17,64704
 a005260:	1021883a 	mov	r16,r2
 a005264:	1c63883a 	add	r17,r3,r17
 a005268:	d9000f17 	ldw	r4,60(sp)
 a00526c:	d9401017 	ldw	r5,64(sp)
 a005270:	000d883a 	mov	r6,zero
 a005274:	01d00534 	movhi	r7,16404
 a005278:	a00cb740 	call	a00cb74 <__subdf3>
 a00527c:	800d883a 	mov	r6,r16
 a005280:	880f883a 	mov	r7,r17
 a005284:	1009883a 	mov	r4,r2
 a005288:	180b883a 	mov	r5,r3
 a00528c:	102b883a 	mov	r21,r2
 a005290:	1829883a 	mov	r20,r3
 a005294:	a00c9a40 	call	a00c9a4 <__gedf2>
 a005298:	00806c16 	blt	zero,r2,a00544c <_dtoa_r+0x1304>
 a00529c:	89e0003c 	xorhi	r7,r17,32768
 a0052a0:	800d883a 	mov	r6,r16
 a0052a4:	a809883a 	mov	r4,r21
 a0052a8:	a00b883a 	mov	r5,r20
 a0052ac:	a00ca800 	call	a00ca80 <__ledf2>
 a0052b0:	103d7e0e 	bge	r2,zero,a0048ac <__alt_mem_flash+0xfe0038ac>
 a0052b4:	002b883a 	mov	r21,zero
 a0052b8:	0023883a 	mov	r17,zero
 a0052bc:	003efb06 	br	a004eac <__alt_mem_flash+0xfe003eac>
 a0052c0:	d8800717 	ldw	r2,28(sp)
 a0052c4:	003bd006 	br	a004208 <__alt_mem_flash+0xfe003208>
 a0052c8:	d9000a17 	ldw	r4,40(sp)
 a0052cc:	d9800d17 	ldw	r6,52(sp)
 a0052d0:	dd400a15 	stw	r21,40(sp)
 a0052d4:	a905c83a 	sub	r2,r21,r4
 a0052d8:	308d883a 	add	r6,r6,r2
 a0052dc:	d9800d15 	stw	r6,52(sp)
 a0052e0:	002b883a 	mov	r21,zero
 a0052e4:	003e0606 	br	a004b00 <__alt_mem_flash+0xfe003b00>
 a0052e8:	9023883a 	mov	r17,r18
 a0052ec:	9829883a 	mov	r20,r19
 a0052f0:	04000084 	movi	r16,2
 a0052f4:	003c9206 	br	a004540 <__alt_mem_flash+0xfe003540>
 a0052f8:	04000044 	movi	r16,1
 a0052fc:	dc000c15 	stw	r16,48(sp)
 a005300:	dc000615 	stw	r16,24(sp)
 a005304:	dc002215 	stw	r16,136(sp)
 a005308:	e0001115 	stw	zero,68(fp)
 a00530c:	000b883a 	mov	r5,zero
 a005310:	003c6906 	br	a0044b8 <__alt_mem_flash+0xfe0034b8>
 a005314:	3021883a 	mov	r16,r6
 a005318:	003ffb06 	br	a005308 <__alt_mem_flash+0xfe004308>
 a00531c:	1000021e 	bne	r2,zero,a005328 <_dtoa_r+0x11e0>
 a005320:	4200004c 	andi	r8,r8,1
 a005324:	403e7d1e 	bne	r8,zero,a004d1c <__alt_mem_flash+0xfe003d1c>
 a005328:	01000c04 	movi	r4,48
 a00532c:	00000106 	br	a005334 <_dtoa_r+0x11ec>
 a005330:	102f883a 	mov	r23,r2
 a005334:	b8bfffc4 	addi	r2,r23,-1
 a005338:	10c00007 	ldb	r3,0(r2)
 a00533c:	193ffc26 	beq	r3,r4,a005330 <__alt_mem_flash+0xfe004330>
 a005340:	003e8706 	br	a004d60 <__alt_mem_flash+0xfe003d60>
 a005344:	d8800517 	ldw	r2,20(sp)
 a005348:	00a3c83a 	sub	r17,zero,r2
 a00534c:	8800a426 	beq	r17,zero,a0055e0 <_dtoa_r+0x1498>
 a005350:	888003cc 	andi	r2,r17,15
 a005354:	100490fa 	slli	r2,r2,3
 a005358:	00c28074 	movhi	r3,2561
 a00535c:	18c73204 	addi	r3,r3,7368
 a005360:	1885883a 	add	r2,r3,r2
 a005364:	11800017 	ldw	r6,0(r2)
 a005368:	11c00117 	ldw	r7,4(r2)
 a00536c:	9009883a 	mov	r4,r18
 a005370:	980b883a 	mov	r5,r19
 a005374:	8823d13a 	srai	r17,r17,4
 a005378:	a000d400 	call	a000d40 <__muldf3>
 a00537c:	d8800f15 	stw	r2,60(sp)
 a005380:	d8c01015 	stw	r3,64(sp)
 a005384:	8800e826 	beq	r17,zero,a005728 <_dtoa_r+0x15e0>
 a005388:	05028074 	movhi	r20,2561
 a00538c:	a5072804 	addi	r20,r20,7328
 a005390:	04000084 	movi	r16,2
 a005394:	8980004c 	andi	r6,r17,1
 a005398:	1009883a 	mov	r4,r2
 a00539c:	8823d07a 	srai	r17,r17,1
 a0053a0:	180b883a 	mov	r5,r3
 a0053a4:	30000426 	beq	r6,zero,a0053b8 <_dtoa_r+0x1270>
 a0053a8:	a1800017 	ldw	r6,0(r20)
 a0053ac:	a1c00117 	ldw	r7,4(r20)
 a0053b0:	84000044 	addi	r16,r16,1
 a0053b4:	a000d400 	call	a000d40 <__muldf3>
 a0053b8:	a5000204 	addi	r20,r20,8
 a0053bc:	883ff51e 	bne	r17,zero,a005394 <__alt_mem_flash+0xfe004394>
 a0053c0:	d8800f15 	stw	r2,60(sp)
 a0053c4:	d8c01015 	stw	r3,64(sp)
 a0053c8:	003c7606 	br	a0045a4 <__alt_mem_flash+0xfe0035a4>
 a0053cc:	00c00c04 	movi	r3,48
 a0053d0:	10c00005 	stb	r3,0(r2)
 a0053d4:	d8c00517 	ldw	r3,20(sp)
 a0053d8:	bd3fffc3 	ldbu	r20,-1(r23)
 a0053dc:	18c00044 	addi	r3,r3,1
 a0053e0:	d8c00515 	stw	r3,20(sp)
 a0053e4:	003db906 	br	a004acc <__alt_mem_flash+0xfe003acc>
 a0053e8:	89400117 	ldw	r5,4(r17)
 a0053ec:	e009883a 	mov	r4,fp
 a0053f0:	a0071dc0 	call	a0071dc <_Balloc>
 a0053f4:	89800417 	ldw	r6,16(r17)
 a0053f8:	89400304 	addi	r5,r17,12
 a0053fc:	11000304 	addi	r4,r2,12
 a005400:	31800084 	addi	r6,r6,2
 a005404:	318d883a 	add	r6,r6,r6
 a005408:	318d883a 	add	r6,r6,r6
 a00540c:	1027883a 	mov	r19,r2
 a005410:	a006f6c0 	call	a006f6c <memcpy>
 a005414:	01800044 	movi	r6,1
 a005418:	980b883a 	mov	r5,r19
 a00541c:	e009883a 	mov	r4,fp
 a005420:	a007a180 	call	a007a18 <__lshift>
 a005424:	1029883a 	mov	r20,r2
 a005428:	003ecc06 	br	a004f5c <__alt_mem_flash+0xfe003f5c>
 a00542c:	00800e44 	movi	r2,57
 a005430:	90809026 	beq	r18,r2,a005674 <_dtoa_r+0x152c>
 a005434:	92000044 	addi	r8,r18,1
 a005438:	003f1f06 	br	a0050b8 <__alt_mem_flash+0xfe0040b8>
 a00543c:	9011883a 	mov	r8,r18
 a005440:	8825883a 	mov	r18,r17
 a005444:	a023883a 	mov	r17,r20
 a005448:	003e2906 	br	a004cf0 <__alt_mem_flash+0xfe003cf0>
 a00544c:	002b883a 	mov	r21,zero
 a005450:	0023883a 	mov	r17,zero
 a005454:	003f5406 	br	a0051a8 <__alt_mem_flash+0xfe0041a8>
 a005458:	61bfffc4 	addi	r6,r12,-1
 a00545c:	300490fa 	slli	r2,r6,3
 a005460:	00c28074 	movhi	r3,2561
 a005464:	18c73204 	addi	r3,r3,7368
 a005468:	1885883a 	add	r2,r3,r2
 a00546c:	11000017 	ldw	r4,0(r2)
 a005470:	11400117 	ldw	r5,4(r2)
 a005474:	d8800717 	ldw	r2,28(sp)
 a005478:	880f883a 	mov	r7,r17
 a00547c:	d9801215 	stw	r6,72(sp)
 a005480:	800d883a 	mov	r6,r16
 a005484:	db001615 	stw	r12,88(sp)
 a005488:	15c00044 	addi	r23,r2,1
 a00548c:	a000d400 	call	a000d40 <__muldf3>
 a005490:	d9401017 	ldw	r5,64(sp)
 a005494:	d9000f17 	ldw	r4,60(sp)
 a005498:	d8c01515 	stw	r3,84(sp)
 a00549c:	d8801415 	stw	r2,80(sp)
 a0054a0:	a00d4700 	call	a00d470 <__fixdfsi>
 a0054a4:	1009883a 	mov	r4,r2
 a0054a8:	1021883a 	mov	r16,r2
 a0054ac:	a0015ac0 	call	a0015ac <__floatsidf>
 a0054b0:	d9000f17 	ldw	r4,60(sp)
 a0054b4:	d9401017 	ldw	r5,64(sp)
 a0054b8:	100d883a 	mov	r6,r2
 a0054bc:	180f883a 	mov	r7,r3
 a0054c0:	a00cb740 	call	a00cb74 <__subdf3>
 a0054c4:	1829883a 	mov	r20,r3
 a0054c8:	d8c00717 	ldw	r3,28(sp)
 a0054cc:	84000c04 	addi	r16,r16,48
 a0054d0:	1023883a 	mov	r17,r2
 a0054d4:	1c000005 	stb	r16,0(r3)
 a0054d8:	db001617 	ldw	r12,88(sp)
 a0054dc:	00800044 	movi	r2,1
 a0054e0:	60802226 	beq	r12,r2,a00556c <_dtoa_r+0x1424>
 a0054e4:	d9c00717 	ldw	r7,28(sp)
 a0054e8:	8805883a 	mov	r2,r17
 a0054ec:	b82b883a 	mov	r21,r23
 a0054f0:	3b19883a 	add	r12,r7,r12
 a0054f4:	6023883a 	mov	r17,r12
 a0054f8:	a007883a 	mov	r3,r20
 a0054fc:	dc800f15 	stw	r18,60(sp)
 a005500:	000d883a 	mov	r6,zero
 a005504:	01d00934 	movhi	r7,16420
 a005508:	1009883a 	mov	r4,r2
 a00550c:	180b883a 	mov	r5,r3
 a005510:	a000d400 	call	a000d40 <__muldf3>
 a005514:	180b883a 	mov	r5,r3
 a005518:	1009883a 	mov	r4,r2
 a00551c:	1829883a 	mov	r20,r3
 a005520:	1025883a 	mov	r18,r2
 a005524:	a00d4700 	call	a00d470 <__fixdfsi>
 a005528:	1009883a 	mov	r4,r2
 a00552c:	1021883a 	mov	r16,r2
 a005530:	a0015ac0 	call	a0015ac <__floatsidf>
 a005534:	100d883a 	mov	r6,r2
 a005538:	180f883a 	mov	r7,r3
 a00553c:	9009883a 	mov	r4,r18
 a005540:	a00b883a 	mov	r5,r20
 a005544:	84000c04 	addi	r16,r16,48
 a005548:	a00cb740 	call	a00cb74 <__subdf3>
 a00554c:	ad400044 	addi	r21,r21,1
 a005550:	ac3fffc5 	stb	r16,-1(r21)
 a005554:	ac7fea1e 	bne	r21,r17,a005500 <__alt_mem_flash+0xfe004500>
 a005558:	1023883a 	mov	r17,r2
 a00555c:	d8801217 	ldw	r2,72(sp)
 a005560:	dc800f17 	ldw	r18,60(sp)
 a005564:	1829883a 	mov	r20,r3
 a005568:	b8af883a 	add	r23,r23,r2
 a00556c:	d9001417 	ldw	r4,80(sp)
 a005570:	d9401517 	ldw	r5,84(sp)
 a005574:	000d883a 	mov	r6,zero
 a005578:	01cff834 	movhi	r7,16352
 a00557c:	a0004940 	call	a000494 <__adddf3>
 a005580:	880d883a 	mov	r6,r17
 a005584:	a00f883a 	mov	r7,r20
 a005588:	1009883a 	mov	r4,r2
 a00558c:	180b883a 	mov	r5,r3
 a005590:	a00ca800 	call	a00ca80 <__ledf2>
 a005594:	10003e0e 	bge	r2,zero,a005690 <_dtoa_r+0x1548>
 a005598:	d9001317 	ldw	r4,76(sp)
 a00559c:	bd3fffc3 	ldbu	r20,-1(r23)
 a0055a0:	d9000515 	stw	r4,20(sp)
 a0055a4:	003d3b06 	br	a004a94 <__alt_mem_flash+0xfe003a94>
 a0055a8:	0027883a 	mov	r19,zero
 a0055ac:	003f1b06 	br	a00521c <__alt_mem_flash+0xfe00421c>
 a0055b0:	d8800817 	ldw	r2,32(sp)
 a0055b4:	11e9c83a 	sub	r20,r2,r7
 a0055b8:	0005883a 	mov	r2,zero
 a0055bc:	003d5406 	br	a004b10 <__alt_mem_flash+0xfe003b10>
 a0055c0:	00800044 	movi	r2,1
 a0055c4:	003dc706 	br	a004ce4 <__alt_mem_flash+0xfe003ce4>
 a0055c8:	d8c00217 	ldw	r3,8(sp)
 a0055cc:	00800d84 	movi	r2,54
 a0055d0:	dd400a17 	ldw	r21,40(sp)
 a0055d4:	10c5c83a 	sub	r2,r2,r3
 a0055d8:	dd000817 	ldw	r20,32(sp)
 a0055dc:	003d4c06 	br	a004b10 <__alt_mem_flash+0xfe003b10>
 a0055e0:	dc800f15 	stw	r18,60(sp)
 a0055e4:	dcc01015 	stw	r19,64(sp)
 a0055e8:	04000084 	movi	r16,2
 a0055ec:	003bed06 	br	a0045a4 <__alt_mem_flash+0xfe0035a4>
 a0055f0:	d9000617 	ldw	r4,24(sp)
 a0055f4:	203f0d26 	beq	r4,zero,a00522c <__alt_mem_flash+0xfe00422c>
 a0055f8:	d9800c17 	ldw	r6,48(sp)
 a0055fc:	01bcab0e 	bge	zero,r6,a0048ac <__alt_mem_flash+0xfe0038ac>
 a005600:	d9401017 	ldw	r5,64(sp)
 a005604:	d9000f17 	ldw	r4,60(sp)
 a005608:	000d883a 	mov	r6,zero
 a00560c:	01d00934 	movhi	r7,16420
 a005610:	a000d400 	call	a000d40 <__muldf3>
 a005614:	81000044 	addi	r4,r16,1
 a005618:	d8800f15 	stw	r2,60(sp)
 a00561c:	d8c01015 	stw	r3,64(sp)
 a005620:	a0015ac0 	call	a0015ac <__floatsidf>
 a005624:	d9800f17 	ldw	r6,60(sp)
 a005628:	d9c01017 	ldw	r7,64(sp)
 a00562c:	1009883a 	mov	r4,r2
 a005630:	180b883a 	mov	r5,r3
 a005634:	a000d400 	call	a000d40 <__muldf3>
 a005638:	01d00734 	movhi	r7,16412
 a00563c:	000d883a 	mov	r6,zero
 a005640:	1009883a 	mov	r4,r2
 a005644:	180b883a 	mov	r5,r3
 a005648:	a0004940 	call	a000494 <__adddf3>
 a00564c:	d9c00517 	ldw	r7,20(sp)
 a005650:	047f3034 	movhi	r17,64704
 a005654:	1021883a 	mov	r16,r2
 a005658:	39ffffc4 	addi	r7,r7,-1
 a00565c:	d9c01315 	stw	r7,76(sp)
 a005660:	1c63883a 	add	r17,r3,r17
 a005664:	db000c17 	ldw	r12,48(sp)
 a005668:	003bea06 	br	a004614 <__alt_mem_flash+0xfe003614>
 a00566c:	dc000915 	stw	r16,36(sp)
 a005670:	003e0e06 	br	a004eac <__alt_mem_flash+0xfe003eac>
 a005674:	01000e44 	movi	r4,57
 a005678:	8825883a 	mov	r18,r17
 a00567c:	9dc00044 	addi	r23,r19,1
 a005680:	99000005 	stb	r4,0(r19)
 a005684:	a023883a 	mov	r17,r20
 a005688:	dc000915 	stw	r16,36(sp)
 a00568c:	003da406 	br	a004d20 <__alt_mem_flash+0xfe003d20>
 a005690:	d9801417 	ldw	r6,80(sp)
 a005694:	d9c01517 	ldw	r7,84(sp)
 a005698:	0009883a 	mov	r4,zero
 a00569c:	014ff834 	movhi	r5,16352
 a0056a0:	a00cb740 	call	a00cb74 <__subdf3>
 a0056a4:	880d883a 	mov	r6,r17
 a0056a8:	a00f883a 	mov	r7,r20
 a0056ac:	1009883a 	mov	r4,r2
 a0056b0:	180b883a 	mov	r5,r3
 a0056b4:	a00c9a40 	call	a00c9a4 <__gedf2>
 a0056b8:	00bc7c0e 	bge	zero,r2,a0048ac <__alt_mem_flash+0xfe0038ac>
 a0056bc:	01000c04 	movi	r4,48
 a0056c0:	00000106 	br	a0056c8 <_dtoa_r+0x1580>
 a0056c4:	102f883a 	mov	r23,r2
 a0056c8:	b8bfffc4 	addi	r2,r23,-1
 a0056cc:	10c00007 	ldb	r3,0(r2)
 a0056d0:	193ffc26 	beq	r3,r4,a0056c4 <__alt_mem_flash+0xfe0046c4>
 a0056d4:	d9801317 	ldw	r6,76(sp)
 a0056d8:	d9800515 	stw	r6,20(sp)
 a0056dc:	003c4406 	br	a0047f0 <__alt_mem_flash+0xfe0037f0>
 a0056e0:	d9801317 	ldw	r6,76(sp)
 a0056e4:	d9800515 	stw	r6,20(sp)
 a0056e8:	003cea06 	br	a004a94 <__alt_mem_flash+0xfe003a94>
 a0056ec:	dd800f17 	ldw	r22,60(sp)
 a0056f0:	dcc01017 	ldw	r19,64(sp)
 a0056f4:	dc801217 	ldw	r18,72(sp)
 a0056f8:	003c6c06 	br	a0048ac <__alt_mem_flash+0xfe0038ac>
 a0056fc:	903e031e 	bne	r18,zero,a004f0c <__alt_mem_flash+0xfe003f0c>
 a005700:	003ebb06 	br	a0051f0 <__alt_mem_flash+0xfe0041f0>
 a005704:	103e6c1e 	bne	r2,zero,a0050b8 <__alt_mem_flash+0xfe0040b8>
 a005708:	4080004c 	andi	r2,r8,1
 a00570c:	103e6a26 	beq	r2,zero,a0050b8 <__alt_mem_flash+0xfe0040b8>
 a005710:	003e6606 	br	a0050ac <__alt_mem_flash+0xfe0040ac>
 a005714:	d8c00317 	ldw	r3,12(sp)
 a005718:	00800084 	movi	r2,2
 a00571c:	10c02916 	blt	r2,r3,a0057c4 <_dtoa_r+0x167c>
 a005720:	d9000c17 	ldw	r4,48(sp)
 a005724:	003e8806 	br	a005148 <__alt_mem_flash+0xfe004148>
 a005728:	04000084 	movi	r16,2
 a00572c:	003b9d06 	br	a0045a4 <__alt_mem_flash+0xfe0035a4>
 a005730:	d9001317 	ldw	r4,76(sp)
 a005734:	d9000515 	stw	r4,20(sp)
 a005738:	003cd606 	br	a004a94 <__alt_mem_flash+0xfe003a94>
 a00573c:	d8801317 	ldw	r2,76(sp)
 a005740:	d8800515 	stw	r2,20(sp)
 a005744:	003c2a06 	br	a0047f0 <__alt_mem_flash+0xfe0037f0>
 a005748:	d9800317 	ldw	r6,12(sp)
 a00574c:	00800084 	movi	r2,2
 a005750:	11801516 	blt	r2,r6,a0057a8 <_dtoa_r+0x1660>
 a005754:	d9c00c17 	ldw	r7,48(sp)
 a005758:	d9c00615 	stw	r7,24(sp)
 a00575c:	003df706 	br	a004f3c <__alt_mem_flash+0xfe003f3c>
 a005760:	193d3926 	beq	r3,r4,a004c48 <__alt_mem_flash+0xfe003c48>
 a005764:	00c00f04 	movi	r3,60
 a005768:	1885c83a 	sub	r2,r3,r2
 a00576c:	003ddf06 	br	a004eec <__alt_mem_flash+0xfe003eec>
 a005770:	e009883a 	mov	r4,fp
 a005774:	e0001115 	stw	zero,68(fp)
 a005778:	000b883a 	mov	r5,zero
 a00577c:	a0071dc0 	call	a0071dc <_Balloc>
 a005780:	d8800715 	stw	r2,28(sp)
 a005784:	d8c00717 	ldw	r3,28(sp)
 a005788:	00bfffc4 	movi	r2,-1
 a00578c:	01000044 	movi	r4,1
 a005790:	d8800c15 	stw	r2,48(sp)
 a005794:	e0c01015 	stw	r3,64(fp)
 a005798:	d9000b15 	stw	r4,44(sp)
 a00579c:	d8800615 	stw	r2,24(sp)
 a0057a0:	d8002215 	stw	zero,136(sp)
 a0057a4:	003c4106 	br	a0048ac <__alt_mem_flash+0xfe0038ac>
 a0057a8:	d8c00c17 	ldw	r3,48(sp)
 a0057ac:	d8c00615 	stw	r3,24(sp)
 a0057b0:	003e7006 	br	a005174 <__alt_mem_flash+0xfe004174>
 a0057b4:	04400044 	movi	r17,1
 a0057b8:	003b2006 	br	a00443c <__alt_mem_flash+0xfe00343c>
 a0057bc:	000b883a 	mov	r5,zero
 a0057c0:	003b3d06 	br	a0044b8 <__alt_mem_flash+0xfe0034b8>
 a0057c4:	d8800c17 	ldw	r2,48(sp)
 a0057c8:	d8800615 	stw	r2,24(sp)
 a0057cc:	003e6906 	br	a005174 <__alt_mem_flash+0xfe004174>

0a0057d0 <__sflush_r>:
 a0057d0:	2880030b 	ldhu	r2,12(r5)
 a0057d4:	defffb04 	addi	sp,sp,-20
 a0057d8:	dcc00315 	stw	r19,12(sp)
 a0057dc:	dc400115 	stw	r17,4(sp)
 a0057e0:	dfc00415 	stw	ra,16(sp)
 a0057e4:	dc800215 	stw	r18,8(sp)
 a0057e8:	dc000015 	stw	r16,0(sp)
 a0057ec:	10c0020c 	andi	r3,r2,8
 a0057f0:	2823883a 	mov	r17,r5
 a0057f4:	2027883a 	mov	r19,r4
 a0057f8:	1800311e 	bne	r3,zero,a0058c0 <__sflush_r+0xf0>
 a0057fc:	28c00117 	ldw	r3,4(r5)
 a005800:	10820014 	ori	r2,r2,2048
 a005804:	2880030d 	sth	r2,12(r5)
 a005808:	00c04b0e 	bge	zero,r3,a005938 <__sflush_r+0x168>
 a00580c:	8a000a17 	ldw	r8,40(r17)
 a005810:	40002326 	beq	r8,zero,a0058a0 <__sflush_r+0xd0>
 a005814:	9c000017 	ldw	r16,0(r19)
 a005818:	10c4000c 	andi	r3,r2,4096
 a00581c:	98000015 	stw	zero,0(r19)
 a005820:	18004826 	beq	r3,zero,a005944 <__sflush_r+0x174>
 a005824:	89801417 	ldw	r6,80(r17)
 a005828:	10c0010c 	andi	r3,r2,4
 a00582c:	18000626 	beq	r3,zero,a005848 <__sflush_r+0x78>
 a005830:	88c00117 	ldw	r3,4(r17)
 a005834:	88800c17 	ldw	r2,48(r17)
 a005838:	30cdc83a 	sub	r6,r6,r3
 a00583c:	10000226 	beq	r2,zero,a005848 <__sflush_r+0x78>
 a005840:	88800f17 	ldw	r2,60(r17)
 a005844:	308dc83a 	sub	r6,r6,r2
 a005848:	89400717 	ldw	r5,28(r17)
 a00584c:	000f883a 	mov	r7,zero
 a005850:	9809883a 	mov	r4,r19
 a005854:	403ee83a 	callr	r8
 a005858:	00ffffc4 	movi	r3,-1
 a00585c:	10c04426 	beq	r2,r3,a005970 <__sflush_r+0x1a0>
 a005860:	88c0030b 	ldhu	r3,12(r17)
 a005864:	89000417 	ldw	r4,16(r17)
 a005868:	88000115 	stw	zero,4(r17)
 a00586c:	197dffcc 	andi	r5,r3,63487
 a005870:	8940030d 	sth	r5,12(r17)
 a005874:	89000015 	stw	r4,0(r17)
 a005878:	18c4000c 	andi	r3,r3,4096
 a00587c:	18002c1e 	bne	r3,zero,a005930 <__sflush_r+0x160>
 a005880:	89400c17 	ldw	r5,48(r17)
 a005884:	9c000015 	stw	r16,0(r19)
 a005888:	28000526 	beq	r5,zero,a0058a0 <__sflush_r+0xd0>
 a00588c:	88801004 	addi	r2,r17,64
 a005890:	28800226 	beq	r5,r2,a00589c <__sflush_r+0xcc>
 a005894:	9809883a 	mov	r4,r19
 a005898:	a005f4c0 	call	a005f4c <_free_r>
 a00589c:	88000c15 	stw	zero,48(r17)
 a0058a0:	0005883a 	mov	r2,zero
 a0058a4:	dfc00417 	ldw	ra,16(sp)
 a0058a8:	dcc00317 	ldw	r19,12(sp)
 a0058ac:	dc800217 	ldw	r18,8(sp)
 a0058b0:	dc400117 	ldw	r17,4(sp)
 a0058b4:	dc000017 	ldw	r16,0(sp)
 a0058b8:	dec00504 	addi	sp,sp,20
 a0058bc:	f800283a 	ret
 a0058c0:	2c800417 	ldw	r18,16(r5)
 a0058c4:	903ff626 	beq	r18,zero,a0058a0 <__alt_mem_flash+0xfe0048a0>
 a0058c8:	2c000017 	ldw	r16,0(r5)
 a0058cc:	108000cc 	andi	r2,r2,3
 a0058d0:	2c800015 	stw	r18,0(r5)
 a0058d4:	84a1c83a 	sub	r16,r16,r18
 a0058d8:	1000131e 	bne	r2,zero,a005928 <__sflush_r+0x158>
 a0058dc:	28800517 	ldw	r2,20(r5)
 a0058e0:	88800215 	stw	r2,8(r17)
 a0058e4:	04000316 	blt	zero,r16,a0058f4 <__sflush_r+0x124>
 a0058e8:	003fed06 	br	a0058a0 <__alt_mem_flash+0xfe0048a0>
 a0058ec:	90a5883a 	add	r18,r18,r2
 a0058f0:	043feb0e 	bge	zero,r16,a0058a0 <__alt_mem_flash+0xfe0048a0>
 a0058f4:	88800917 	ldw	r2,36(r17)
 a0058f8:	89400717 	ldw	r5,28(r17)
 a0058fc:	800f883a 	mov	r7,r16
 a005900:	900d883a 	mov	r6,r18
 a005904:	9809883a 	mov	r4,r19
 a005908:	103ee83a 	callr	r2
 a00590c:	80a1c83a 	sub	r16,r16,r2
 a005910:	00bff616 	blt	zero,r2,a0058ec <__alt_mem_flash+0xfe0048ec>
 a005914:	88c0030b 	ldhu	r3,12(r17)
 a005918:	00bfffc4 	movi	r2,-1
 a00591c:	18c01014 	ori	r3,r3,64
 a005920:	88c0030d 	sth	r3,12(r17)
 a005924:	003fdf06 	br	a0058a4 <__alt_mem_flash+0xfe0048a4>
 a005928:	0005883a 	mov	r2,zero
 a00592c:	003fec06 	br	a0058e0 <__alt_mem_flash+0xfe0048e0>
 a005930:	88801415 	stw	r2,80(r17)
 a005934:	003fd206 	br	a005880 <__alt_mem_flash+0xfe004880>
 a005938:	28c00f17 	ldw	r3,60(r5)
 a00593c:	00ffb316 	blt	zero,r3,a00580c <__alt_mem_flash+0xfe00480c>
 a005940:	003fd706 	br	a0058a0 <__alt_mem_flash+0xfe0048a0>
 a005944:	89400717 	ldw	r5,28(r17)
 a005948:	000d883a 	mov	r6,zero
 a00594c:	01c00044 	movi	r7,1
 a005950:	9809883a 	mov	r4,r19
 a005954:	403ee83a 	callr	r8
 a005958:	100d883a 	mov	r6,r2
 a00595c:	00bfffc4 	movi	r2,-1
 a005960:	30801426 	beq	r6,r2,a0059b4 <__sflush_r+0x1e4>
 a005964:	8880030b 	ldhu	r2,12(r17)
 a005968:	8a000a17 	ldw	r8,40(r17)
 a00596c:	003fae06 	br	a005828 <__alt_mem_flash+0xfe004828>
 a005970:	98c00017 	ldw	r3,0(r19)
 a005974:	183fba26 	beq	r3,zero,a005860 <__alt_mem_flash+0xfe004860>
 a005978:	01000744 	movi	r4,29
 a00597c:	19000626 	beq	r3,r4,a005998 <__sflush_r+0x1c8>
 a005980:	01000584 	movi	r4,22
 a005984:	19000426 	beq	r3,r4,a005998 <__sflush_r+0x1c8>
 a005988:	88c0030b 	ldhu	r3,12(r17)
 a00598c:	18c01014 	ori	r3,r3,64
 a005990:	88c0030d 	sth	r3,12(r17)
 a005994:	003fc306 	br	a0058a4 <__alt_mem_flash+0xfe0048a4>
 a005998:	8880030b 	ldhu	r2,12(r17)
 a00599c:	88c00417 	ldw	r3,16(r17)
 a0059a0:	88000115 	stw	zero,4(r17)
 a0059a4:	10bdffcc 	andi	r2,r2,63487
 a0059a8:	8880030d 	sth	r2,12(r17)
 a0059ac:	88c00015 	stw	r3,0(r17)
 a0059b0:	003fb306 	br	a005880 <__alt_mem_flash+0xfe004880>
 a0059b4:	98800017 	ldw	r2,0(r19)
 a0059b8:	103fea26 	beq	r2,zero,a005964 <__alt_mem_flash+0xfe004964>
 a0059bc:	00c00744 	movi	r3,29
 a0059c0:	10c00226 	beq	r2,r3,a0059cc <__sflush_r+0x1fc>
 a0059c4:	00c00584 	movi	r3,22
 a0059c8:	10c0031e 	bne	r2,r3,a0059d8 <__sflush_r+0x208>
 a0059cc:	9c000015 	stw	r16,0(r19)
 a0059d0:	0005883a 	mov	r2,zero
 a0059d4:	003fb306 	br	a0058a4 <__alt_mem_flash+0xfe0048a4>
 a0059d8:	88c0030b 	ldhu	r3,12(r17)
 a0059dc:	3005883a 	mov	r2,r6
 a0059e0:	18c01014 	ori	r3,r3,64
 a0059e4:	88c0030d 	sth	r3,12(r17)
 a0059e8:	003fae06 	br	a0058a4 <__alt_mem_flash+0xfe0048a4>

0a0059ec <_fflush_r>:
 a0059ec:	defffd04 	addi	sp,sp,-12
 a0059f0:	dc000115 	stw	r16,4(sp)
 a0059f4:	dfc00215 	stw	ra,8(sp)
 a0059f8:	2021883a 	mov	r16,r4
 a0059fc:	20000226 	beq	r4,zero,a005a08 <_fflush_r+0x1c>
 a005a00:	20800e17 	ldw	r2,56(r4)
 a005a04:	10000c26 	beq	r2,zero,a005a38 <_fflush_r+0x4c>
 a005a08:	2880030f 	ldh	r2,12(r5)
 a005a0c:	1000051e 	bne	r2,zero,a005a24 <_fflush_r+0x38>
 a005a10:	0005883a 	mov	r2,zero
 a005a14:	dfc00217 	ldw	ra,8(sp)
 a005a18:	dc000117 	ldw	r16,4(sp)
 a005a1c:	dec00304 	addi	sp,sp,12
 a005a20:	f800283a 	ret
 a005a24:	8009883a 	mov	r4,r16
 a005a28:	dfc00217 	ldw	ra,8(sp)
 a005a2c:	dc000117 	ldw	r16,4(sp)
 a005a30:	dec00304 	addi	sp,sp,12
 a005a34:	a0057d01 	jmpi	a0057d0 <__sflush_r>
 a005a38:	d9400015 	stw	r5,0(sp)
 a005a3c:	a005dd80 	call	a005dd8 <__sinit>
 a005a40:	d9400017 	ldw	r5,0(sp)
 a005a44:	003ff006 	br	a005a08 <__alt_mem_flash+0xfe004a08>

0a005a48 <fflush>:
 a005a48:	20000526 	beq	r4,zero,a005a60 <fflush+0x18>
 a005a4c:	00828074 	movhi	r2,2561
 a005a50:	108ea004 	addi	r2,r2,14976
 a005a54:	200b883a 	mov	r5,r4
 a005a58:	11000017 	ldw	r4,0(r2)
 a005a5c:	a0059ec1 	jmpi	a0059ec <_fflush_r>
 a005a60:	00828074 	movhi	r2,2561
 a005a64:	108e9f04 	addi	r2,r2,14972
 a005a68:	11000017 	ldw	r4,0(r2)
 a005a6c:	01428034 	movhi	r5,2560
 a005a70:	29567b04 	addi	r5,r5,23020
 a005a74:	a0063201 	jmpi	a006320 <_fwalk_reent>

0a005a78 <__fp_unlock>:
 a005a78:	0005883a 	mov	r2,zero
 a005a7c:	f800283a 	ret

0a005a80 <_cleanup_r>:
 a005a80:	01428074 	movhi	r5,2561
 a005a84:	2967a504 	addi	r5,r5,-24940
 a005a88:	a0063201 	jmpi	a006320 <_fwalk_reent>

0a005a8c <__sinit.part.1>:
 a005a8c:	defff704 	addi	sp,sp,-36
 a005a90:	00c28034 	movhi	r3,2560
 a005a94:	dfc00815 	stw	ra,32(sp)
 a005a98:	ddc00715 	stw	r23,28(sp)
 a005a9c:	dd800615 	stw	r22,24(sp)
 a005aa0:	dd400515 	stw	r21,20(sp)
 a005aa4:	dd000415 	stw	r20,16(sp)
 a005aa8:	dcc00315 	stw	r19,12(sp)
 a005aac:	dc800215 	stw	r18,8(sp)
 a005ab0:	dc400115 	stw	r17,4(sp)
 a005ab4:	dc000015 	stw	r16,0(sp)
 a005ab8:	18d6a004 	addi	r3,r3,23168
 a005abc:	24000117 	ldw	r16,4(r4)
 a005ac0:	20c00f15 	stw	r3,60(r4)
 a005ac4:	2080bb04 	addi	r2,r4,748
 a005ac8:	00c000c4 	movi	r3,3
 a005acc:	20c0b915 	stw	r3,740(r4)
 a005ad0:	2080ba15 	stw	r2,744(r4)
 a005ad4:	2000b815 	stw	zero,736(r4)
 a005ad8:	05c00204 	movi	r23,8
 a005adc:	00800104 	movi	r2,4
 a005ae0:	2025883a 	mov	r18,r4
 a005ae4:	b80d883a 	mov	r6,r23
 a005ae8:	81001704 	addi	r4,r16,92
 a005aec:	000b883a 	mov	r5,zero
 a005af0:	80000015 	stw	zero,0(r16)
 a005af4:	80000115 	stw	zero,4(r16)
 a005af8:	80000215 	stw	zero,8(r16)
 a005afc:	8080030d 	sth	r2,12(r16)
 a005b00:	80001915 	stw	zero,100(r16)
 a005b04:	8000038d 	sth	zero,14(r16)
 a005b08:	80000415 	stw	zero,16(r16)
 a005b0c:	80000515 	stw	zero,20(r16)
 a005b10:	80000615 	stw	zero,24(r16)
 a005b14:	a0070b40 	call	a0070b4 <memset>
 a005b18:	05828074 	movhi	r22,2561
 a005b1c:	94400217 	ldw	r17,8(r18)
 a005b20:	05428074 	movhi	r21,2561
 a005b24:	05028074 	movhi	r20,2561
 a005b28:	04c28074 	movhi	r19,2561
 a005b2c:	b5a0d704 	addi	r22,r22,-31908
 a005b30:	ad60ee04 	addi	r21,r21,-31816
 a005b34:	a5210d04 	addi	r20,r20,-31692
 a005b38:	9ce12404 	addi	r19,r19,-31600
 a005b3c:	85800815 	stw	r22,32(r16)
 a005b40:	85400915 	stw	r21,36(r16)
 a005b44:	85000a15 	stw	r20,40(r16)
 a005b48:	84c00b15 	stw	r19,44(r16)
 a005b4c:	84000715 	stw	r16,28(r16)
 a005b50:	00800284 	movi	r2,10
 a005b54:	8880030d 	sth	r2,12(r17)
 a005b58:	00800044 	movi	r2,1
 a005b5c:	b80d883a 	mov	r6,r23
 a005b60:	89001704 	addi	r4,r17,92
 a005b64:	000b883a 	mov	r5,zero
 a005b68:	88000015 	stw	zero,0(r17)
 a005b6c:	88000115 	stw	zero,4(r17)
 a005b70:	88000215 	stw	zero,8(r17)
 a005b74:	88001915 	stw	zero,100(r17)
 a005b78:	8880038d 	sth	r2,14(r17)
 a005b7c:	88000415 	stw	zero,16(r17)
 a005b80:	88000515 	stw	zero,20(r17)
 a005b84:	88000615 	stw	zero,24(r17)
 a005b88:	a0070b40 	call	a0070b4 <memset>
 a005b8c:	94000317 	ldw	r16,12(r18)
 a005b90:	00800484 	movi	r2,18
 a005b94:	8c400715 	stw	r17,28(r17)
 a005b98:	8d800815 	stw	r22,32(r17)
 a005b9c:	8d400915 	stw	r21,36(r17)
 a005ba0:	8d000a15 	stw	r20,40(r17)
 a005ba4:	8cc00b15 	stw	r19,44(r17)
 a005ba8:	8080030d 	sth	r2,12(r16)
 a005bac:	00800084 	movi	r2,2
 a005bb0:	80000015 	stw	zero,0(r16)
 a005bb4:	80000115 	stw	zero,4(r16)
 a005bb8:	80000215 	stw	zero,8(r16)
 a005bbc:	80001915 	stw	zero,100(r16)
 a005bc0:	8080038d 	sth	r2,14(r16)
 a005bc4:	80000415 	stw	zero,16(r16)
 a005bc8:	80000515 	stw	zero,20(r16)
 a005bcc:	80000615 	stw	zero,24(r16)
 a005bd0:	b80d883a 	mov	r6,r23
 a005bd4:	000b883a 	mov	r5,zero
 a005bd8:	81001704 	addi	r4,r16,92
 a005bdc:	a0070b40 	call	a0070b4 <memset>
 a005be0:	00800044 	movi	r2,1
 a005be4:	84000715 	stw	r16,28(r16)
 a005be8:	85800815 	stw	r22,32(r16)
 a005bec:	85400915 	stw	r21,36(r16)
 a005bf0:	85000a15 	stw	r20,40(r16)
 a005bf4:	84c00b15 	stw	r19,44(r16)
 a005bf8:	90800e15 	stw	r2,56(r18)
 a005bfc:	dfc00817 	ldw	ra,32(sp)
 a005c00:	ddc00717 	ldw	r23,28(sp)
 a005c04:	dd800617 	ldw	r22,24(sp)
 a005c08:	dd400517 	ldw	r21,20(sp)
 a005c0c:	dd000417 	ldw	r20,16(sp)
 a005c10:	dcc00317 	ldw	r19,12(sp)
 a005c14:	dc800217 	ldw	r18,8(sp)
 a005c18:	dc400117 	ldw	r17,4(sp)
 a005c1c:	dc000017 	ldw	r16,0(sp)
 a005c20:	dec00904 	addi	sp,sp,36
 a005c24:	f800283a 	ret

0a005c28 <__fp_lock>:
 a005c28:	0005883a 	mov	r2,zero
 a005c2c:	f800283a 	ret

0a005c30 <__sfmoreglue>:
 a005c30:	defffc04 	addi	sp,sp,-16
 a005c34:	dc800215 	stw	r18,8(sp)
 a005c38:	2825883a 	mov	r18,r5
 a005c3c:	dc000015 	stw	r16,0(sp)
 a005c40:	01401a04 	movi	r5,104
 a005c44:	2021883a 	mov	r16,r4
 a005c48:	913fffc4 	addi	r4,r18,-1
 a005c4c:	dfc00315 	stw	ra,12(sp)
 a005c50:	dc400115 	stw	r17,4(sp)
 a005c54:	a0019a40 	call	a0019a4 <__mulsi3>
 a005c58:	8009883a 	mov	r4,r16
 a005c5c:	11401d04 	addi	r5,r2,116
 a005c60:	1023883a 	mov	r17,r2
 a005c64:	a00667c0 	call	a00667c <_malloc_r>
 a005c68:	1021883a 	mov	r16,r2
 a005c6c:	10000726 	beq	r2,zero,a005c8c <__sfmoreglue+0x5c>
 a005c70:	11000304 	addi	r4,r2,12
 a005c74:	10000015 	stw	zero,0(r2)
 a005c78:	14800115 	stw	r18,4(r2)
 a005c7c:	11000215 	stw	r4,8(r2)
 a005c80:	89801a04 	addi	r6,r17,104
 a005c84:	000b883a 	mov	r5,zero
 a005c88:	a0070b40 	call	a0070b4 <memset>
 a005c8c:	8005883a 	mov	r2,r16
 a005c90:	dfc00317 	ldw	ra,12(sp)
 a005c94:	dc800217 	ldw	r18,8(sp)
 a005c98:	dc400117 	ldw	r17,4(sp)
 a005c9c:	dc000017 	ldw	r16,0(sp)
 a005ca0:	dec00404 	addi	sp,sp,16
 a005ca4:	f800283a 	ret

0a005ca8 <__sfp>:
 a005ca8:	defffb04 	addi	sp,sp,-20
 a005cac:	dc000015 	stw	r16,0(sp)
 a005cb0:	04028074 	movhi	r16,2561
 a005cb4:	840e9f04 	addi	r16,r16,14972
 a005cb8:	dcc00315 	stw	r19,12(sp)
 a005cbc:	2027883a 	mov	r19,r4
 a005cc0:	81000017 	ldw	r4,0(r16)
 a005cc4:	dfc00415 	stw	ra,16(sp)
 a005cc8:	dc800215 	stw	r18,8(sp)
 a005ccc:	20800e17 	ldw	r2,56(r4)
 a005cd0:	dc400115 	stw	r17,4(sp)
 a005cd4:	1000021e 	bne	r2,zero,a005ce0 <__sfp+0x38>
 a005cd8:	a005a8c0 	call	a005a8c <__sinit.part.1>
 a005cdc:	81000017 	ldw	r4,0(r16)
 a005ce0:	2480b804 	addi	r18,r4,736
 a005ce4:	047fffc4 	movi	r17,-1
 a005ce8:	91000117 	ldw	r4,4(r18)
 a005cec:	94000217 	ldw	r16,8(r18)
 a005cf0:	213fffc4 	addi	r4,r4,-1
 a005cf4:	20000a16 	blt	r4,zero,a005d20 <__sfp+0x78>
 a005cf8:	8080030f 	ldh	r2,12(r16)
 a005cfc:	10000c26 	beq	r2,zero,a005d30 <__sfp+0x88>
 a005d00:	80c01d04 	addi	r3,r16,116
 a005d04:	00000206 	br	a005d10 <__sfp+0x68>
 a005d08:	18bfe60f 	ldh	r2,-104(r3)
 a005d0c:	10000826 	beq	r2,zero,a005d30 <__sfp+0x88>
 a005d10:	213fffc4 	addi	r4,r4,-1
 a005d14:	1c3ffd04 	addi	r16,r3,-12
 a005d18:	18c01a04 	addi	r3,r3,104
 a005d1c:	247ffa1e 	bne	r4,r17,a005d08 <__alt_mem_flash+0xfe004d08>
 a005d20:	90800017 	ldw	r2,0(r18)
 a005d24:	10001d26 	beq	r2,zero,a005d9c <__sfp+0xf4>
 a005d28:	1025883a 	mov	r18,r2
 a005d2c:	003fee06 	br	a005ce8 <__alt_mem_flash+0xfe004ce8>
 a005d30:	00bfffc4 	movi	r2,-1
 a005d34:	8080038d 	sth	r2,14(r16)
 a005d38:	00800044 	movi	r2,1
 a005d3c:	8080030d 	sth	r2,12(r16)
 a005d40:	80001915 	stw	zero,100(r16)
 a005d44:	80000015 	stw	zero,0(r16)
 a005d48:	80000215 	stw	zero,8(r16)
 a005d4c:	80000115 	stw	zero,4(r16)
 a005d50:	80000415 	stw	zero,16(r16)
 a005d54:	80000515 	stw	zero,20(r16)
 a005d58:	80000615 	stw	zero,24(r16)
 a005d5c:	01800204 	movi	r6,8
 a005d60:	000b883a 	mov	r5,zero
 a005d64:	81001704 	addi	r4,r16,92
 a005d68:	a0070b40 	call	a0070b4 <memset>
 a005d6c:	8005883a 	mov	r2,r16
 a005d70:	80000c15 	stw	zero,48(r16)
 a005d74:	80000d15 	stw	zero,52(r16)
 a005d78:	80001115 	stw	zero,68(r16)
 a005d7c:	80001215 	stw	zero,72(r16)
 a005d80:	dfc00417 	ldw	ra,16(sp)
 a005d84:	dcc00317 	ldw	r19,12(sp)
 a005d88:	dc800217 	ldw	r18,8(sp)
 a005d8c:	dc400117 	ldw	r17,4(sp)
 a005d90:	dc000017 	ldw	r16,0(sp)
 a005d94:	dec00504 	addi	sp,sp,20
 a005d98:	f800283a 	ret
 a005d9c:	01400104 	movi	r5,4
 a005da0:	9809883a 	mov	r4,r19
 a005da4:	a005c300 	call	a005c30 <__sfmoreglue>
 a005da8:	90800015 	stw	r2,0(r18)
 a005dac:	103fde1e 	bne	r2,zero,a005d28 <__alt_mem_flash+0xfe004d28>
 a005db0:	00800304 	movi	r2,12
 a005db4:	98800015 	stw	r2,0(r19)
 a005db8:	0005883a 	mov	r2,zero
 a005dbc:	003ff006 	br	a005d80 <__alt_mem_flash+0xfe004d80>

0a005dc0 <_cleanup>:
 a005dc0:	00828074 	movhi	r2,2561
 a005dc4:	108e9f04 	addi	r2,r2,14972
 a005dc8:	11000017 	ldw	r4,0(r2)
 a005dcc:	01428074 	movhi	r5,2561
 a005dd0:	2967a504 	addi	r5,r5,-24940
 a005dd4:	a0063201 	jmpi	a006320 <_fwalk_reent>

0a005dd8 <__sinit>:
 a005dd8:	20800e17 	ldw	r2,56(r4)
 a005ddc:	10000126 	beq	r2,zero,a005de4 <__sinit+0xc>
 a005de0:	f800283a 	ret
 a005de4:	a005a8c1 	jmpi	a005a8c <__sinit.part.1>

0a005de8 <__sfp_lock_acquire>:
 a005de8:	f800283a 	ret

0a005dec <__sfp_lock_release>:
 a005dec:	f800283a 	ret

0a005df0 <__sinit_lock_acquire>:
 a005df0:	f800283a 	ret

0a005df4 <__sinit_lock_release>:
 a005df4:	f800283a 	ret

0a005df8 <__fp_lock_all>:
 a005df8:	00828074 	movhi	r2,2561
 a005dfc:	108ea004 	addi	r2,r2,14976
 a005e00:	11000017 	ldw	r4,0(r2)
 a005e04:	01428034 	movhi	r5,2560
 a005e08:	29570a04 	addi	r5,r5,23592
 a005e0c:	a00625c1 	jmpi	a00625c <_fwalk>

0a005e10 <__fp_unlock_all>:
 a005e10:	00828074 	movhi	r2,2561
 a005e14:	108ea004 	addi	r2,r2,14976
 a005e18:	11000017 	ldw	r4,0(r2)
 a005e1c:	01428034 	movhi	r5,2560
 a005e20:	29569e04 	addi	r5,r5,23160
 a005e24:	a00625c1 	jmpi	a00625c <_fwalk>

0a005e28 <_malloc_trim_r>:
 a005e28:	defffb04 	addi	sp,sp,-20
 a005e2c:	dcc00315 	stw	r19,12(sp)
 a005e30:	04c28074 	movhi	r19,2561
 a005e34:	dc800215 	stw	r18,8(sp)
 a005e38:	dc400115 	stw	r17,4(sp)
 a005e3c:	dc000015 	stw	r16,0(sp)
 a005e40:	dfc00415 	stw	ra,16(sp)
 a005e44:	2821883a 	mov	r16,r5
 a005e48:	9cc8ac04 	addi	r19,r19,8880
 a005e4c:	2025883a 	mov	r18,r4
 a005e50:	a00db340 	call	a00db34 <__malloc_lock>
 a005e54:	98800217 	ldw	r2,8(r19)
 a005e58:	14400117 	ldw	r17,4(r2)
 a005e5c:	00bfff04 	movi	r2,-4
 a005e60:	88a2703a 	and	r17,r17,r2
 a005e64:	8c21c83a 	sub	r16,r17,r16
 a005e68:	8403fbc4 	addi	r16,r16,4079
 a005e6c:	8020d33a 	srli	r16,r16,12
 a005e70:	0083ffc4 	movi	r2,4095
 a005e74:	843fffc4 	addi	r16,r16,-1
 a005e78:	8020933a 	slli	r16,r16,12
 a005e7c:	1400060e 	bge	r2,r16,a005e98 <_malloc_trim_r+0x70>
 a005e80:	000b883a 	mov	r5,zero
 a005e84:	9009883a 	mov	r4,r18
 a005e88:	a0083080 	call	a008308 <_sbrk_r>
 a005e8c:	98c00217 	ldw	r3,8(r19)
 a005e90:	1c47883a 	add	r3,r3,r17
 a005e94:	10c00a26 	beq	r2,r3,a005ec0 <_malloc_trim_r+0x98>
 a005e98:	9009883a 	mov	r4,r18
 a005e9c:	a00db580 	call	a00db58 <__malloc_unlock>
 a005ea0:	0005883a 	mov	r2,zero
 a005ea4:	dfc00417 	ldw	ra,16(sp)
 a005ea8:	dcc00317 	ldw	r19,12(sp)
 a005eac:	dc800217 	ldw	r18,8(sp)
 a005eb0:	dc400117 	ldw	r17,4(sp)
 a005eb4:	dc000017 	ldw	r16,0(sp)
 a005eb8:	dec00504 	addi	sp,sp,20
 a005ebc:	f800283a 	ret
 a005ec0:	040bc83a 	sub	r5,zero,r16
 a005ec4:	9009883a 	mov	r4,r18
 a005ec8:	a0083080 	call	a008308 <_sbrk_r>
 a005ecc:	00ffffc4 	movi	r3,-1
 a005ed0:	10c00d26 	beq	r2,r3,a005f08 <_malloc_trim_r+0xe0>
 a005ed4:	00c28074 	movhi	r3,2561
 a005ed8:	18d5eb04 	addi	r3,r3,22444
 a005edc:	18800017 	ldw	r2,0(r3)
 a005ee0:	99000217 	ldw	r4,8(r19)
 a005ee4:	8c23c83a 	sub	r17,r17,r16
 a005ee8:	8c400054 	ori	r17,r17,1
 a005eec:	1421c83a 	sub	r16,r2,r16
 a005ef0:	24400115 	stw	r17,4(r4)
 a005ef4:	9009883a 	mov	r4,r18
 a005ef8:	1c000015 	stw	r16,0(r3)
 a005efc:	a00db580 	call	a00db58 <__malloc_unlock>
 a005f00:	00800044 	movi	r2,1
 a005f04:	003fe706 	br	a005ea4 <__alt_mem_flash+0xfe004ea4>
 a005f08:	000b883a 	mov	r5,zero
 a005f0c:	9009883a 	mov	r4,r18
 a005f10:	a0083080 	call	a008308 <_sbrk_r>
 a005f14:	99000217 	ldw	r4,8(r19)
 a005f18:	014003c4 	movi	r5,15
 a005f1c:	1107c83a 	sub	r3,r2,r4
 a005f20:	28ffdd0e 	bge	r5,r3,a005e98 <__alt_mem_flash+0xfe004e98>
 a005f24:	01428074 	movhi	r5,2561
 a005f28:	294ea204 	addi	r5,r5,14984
 a005f2c:	29400017 	ldw	r5,0(r5)
 a005f30:	18c00054 	ori	r3,r3,1
 a005f34:	20c00115 	stw	r3,4(r4)
 a005f38:	00c28074 	movhi	r3,2561
 a005f3c:	1145c83a 	sub	r2,r2,r5
 a005f40:	18d5eb04 	addi	r3,r3,22444
 a005f44:	18800015 	stw	r2,0(r3)
 a005f48:	003fd306 	br	a005e98 <__alt_mem_flash+0xfe004e98>

0a005f4c <_free_r>:
 a005f4c:	28004126 	beq	r5,zero,a006054 <_free_r+0x108>
 a005f50:	defffd04 	addi	sp,sp,-12
 a005f54:	dc400115 	stw	r17,4(sp)
 a005f58:	dc000015 	stw	r16,0(sp)
 a005f5c:	2023883a 	mov	r17,r4
 a005f60:	2821883a 	mov	r16,r5
 a005f64:	dfc00215 	stw	ra,8(sp)
 a005f68:	a00db340 	call	a00db34 <__malloc_lock>
 a005f6c:	81ffff17 	ldw	r7,-4(r16)
 a005f70:	00bfff84 	movi	r2,-2
 a005f74:	01028074 	movhi	r4,2561
 a005f78:	81bffe04 	addi	r6,r16,-8
 a005f7c:	3884703a 	and	r2,r7,r2
 a005f80:	2108ac04 	addi	r4,r4,8880
 a005f84:	308b883a 	add	r5,r6,r2
 a005f88:	2a400117 	ldw	r9,4(r5)
 a005f8c:	22000217 	ldw	r8,8(r4)
 a005f90:	00ffff04 	movi	r3,-4
 a005f94:	48c6703a 	and	r3,r9,r3
 a005f98:	2a005726 	beq	r5,r8,a0060f8 <_free_r+0x1ac>
 a005f9c:	28c00115 	stw	r3,4(r5)
 a005fa0:	39c0004c 	andi	r7,r7,1
 a005fa4:	3800091e 	bne	r7,zero,a005fcc <_free_r+0x80>
 a005fa8:	823ffe17 	ldw	r8,-8(r16)
 a005fac:	22400204 	addi	r9,r4,8
 a005fb0:	320dc83a 	sub	r6,r6,r8
 a005fb4:	31c00217 	ldw	r7,8(r6)
 a005fb8:	1205883a 	add	r2,r2,r8
 a005fbc:	3a406526 	beq	r7,r9,a006154 <_free_r+0x208>
 a005fc0:	32000317 	ldw	r8,12(r6)
 a005fc4:	3a000315 	stw	r8,12(r7)
 a005fc8:	41c00215 	stw	r7,8(r8)
 a005fcc:	28cf883a 	add	r7,r5,r3
 a005fd0:	39c00117 	ldw	r7,4(r7)
 a005fd4:	39c0004c 	andi	r7,r7,1
 a005fd8:	38003a26 	beq	r7,zero,a0060c4 <_free_r+0x178>
 a005fdc:	10c00054 	ori	r3,r2,1
 a005fe0:	30c00115 	stw	r3,4(r6)
 a005fe4:	3087883a 	add	r3,r6,r2
 a005fe8:	18800015 	stw	r2,0(r3)
 a005fec:	00c07fc4 	movi	r3,511
 a005ff0:	18801936 	bltu	r3,r2,a006058 <_free_r+0x10c>
 a005ff4:	1004d0fa 	srli	r2,r2,3
 a005ff8:	01c00044 	movi	r7,1
 a005ffc:	21400117 	ldw	r5,4(r4)
 a006000:	10c00044 	addi	r3,r2,1
 a006004:	18c7883a 	add	r3,r3,r3
 a006008:	1005d0ba 	srai	r2,r2,2
 a00600c:	18c7883a 	add	r3,r3,r3
 a006010:	18c7883a 	add	r3,r3,r3
 a006014:	1907883a 	add	r3,r3,r4
 a006018:	3884983a 	sll	r2,r7,r2
 a00601c:	19c00017 	ldw	r7,0(r3)
 a006020:	1a3ffe04 	addi	r8,r3,-8
 a006024:	1144b03a 	or	r2,r2,r5
 a006028:	32000315 	stw	r8,12(r6)
 a00602c:	31c00215 	stw	r7,8(r6)
 a006030:	20800115 	stw	r2,4(r4)
 a006034:	19800015 	stw	r6,0(r3)
 a006038:	39800315 	stw	r6,12(r7)
 a00603c:	8809883a 	mov	r4,r17
 a006040:	dfc00217 	ldw	ra,8(sp)
 a006044:	dc400117 	ldw	r17,4(sp)
 a006048:	dc000017 	ldw	r16,0(sp)
 a00604c:	dec00304 	addi	sp,sp,12
 a006050:	a00db581 	jmpi	a00db58 <__malloc_unlock>
 a006054:	f800283a 	ret
 a006058:	100ad27a 	srli	r5,r2,9
 a00605c:	00c00104 	movi	r3,4
 a006060:	19404a36 	bltu	r3,r5,a00618c <_free_r+0x240>
 a006064:	100ad1ba 	srli	r5,r2,6
 a006068:	28c00e44 	addi	r3,r5,57
 a00606c:	18c7883a 	add	r3,r3,r3
 a006070:	29400e04 	addi	r5,r5,56
 a006074:	18c7883a 	add	r3,r3,r3
 a006078:	18c7883a 	add	r3,r3,r3
 a00607c:	1909883a 	add	r4,r3,r4
 a006080:	20c00017 	ldw	r3,0(r4)
 a006084:	01c28074 	movhi	r7,2561
 a006088:	213ffe04 	addi	r4,r4,-8
 a00608c:	39c8ac04 	addi	r7,r7,8880
 a006090:	20c04426 	beq	r4,r3,a0061a4 <_free_r+0x258>
 a006094:	01ffff04 	movi	r7,-4
 a006098:	19400117 	ldw	r5,4(r3)
 a00609c:	29ca703a 	and	r5,r5,r7
 a0060a0:	1140022e 	bgeu	r2,r5,a0060ac <_free_r+0x160>
 a0060a4:	18c00217 	ldw	r3,8(r3)
 a0060a8:	20fffb1e 	bne	r4,r3,a006098 <__alt_mem_flash+0xfe005098>
 a0060ac:	19000317 	ldw	r4,12(r3)
 a0060b0:	31000315 	stw	r4,12(r6)
 a0060b4:	30c00215 	stw	r3,8(r6)
 a0060b8:	21800215 	stw	r6,8(r4)
 a0060bc:	19800315 	stw	r6,12(r3)
 a0060c0:	003fde06 	br	a00603c <__alt_mem_flash+0xfe00503c>
 a0060c4:	29c00217 	ldw	r7,8(r5)
 a0060c8:	10c5883a 	add	r2,r2,r3
 a0060cc:	00c28074 	movhi	r3,2561
 a0060d0:	18c8ae04 	addi	r3,r3,8888
 a0060d4:	38c03b26 	beq	r7,r3,a0061c4 <_free_r+0x278>
 a0060d8:	2a000317 	ldw	r8,12(r5)
 a0060dc:	11400054 	ori	r5,r2,1
 a0060e0:	3087883a 	add	r3,r6,r2
 a0060e4:	3a000315 	stw	r8,12(r7)
 a0060e8:	41c00215 	stw	r7,8(r8)
 a0060ec:	31400115 	stw	r5,4(r6)
 a0060f0:	18800015 	stw	r2,0(r3)
 a0060f4:	003fbd06 	br	a005fec <__alt_mem_flash+0xfe004fec>
 a0060f8:	39c0004c 	andi	r7,r7,1
 a0060fc:	10c5883a 	add	r2,r2,r3
 a006100:	3800071e 	bne	r7,zero,a006120 <_free_r+0x1d4>
 a006104:	81fffe17 	ldw	r7,-8(r16)
 a006108:	31cdc83a 	sub	r6,r6,r7
 a00610c:	30c00317 	ldw	r3,12(r6)
 a006110:	31400217 	ldw	r5,8(r6)
 a006114:	11c5883a 	add	r2,r2,r7
 a006118:	28c00315 	stw	r3,12(r5)
 a00611c:	19400215 	stw	r5,8(r3)
 a006120:	10c00054 	ori	r3,r2,1
 a006124:	30c00115 	stw	r3,4(r6)
 a006128:	00c28074 	movhi	r3,2561
 a00612c:	18cea304 	addi	r3,r3,14988
 a006130:	18c00017 	ldw	r3,0(r3)
 a006134:	21800215 	stw	r6,8(r4)
 a006138:	10ffc036 	bltu	r2,r3,a00603c <__alt_mem_flash+0xfe00503c>
 a00613c:	00828074 	movhi	r2,2561
 a006140:	1095e204 	addi	r2,r2,22408
 a006144:	11400017 	ldw	r5,0(r2)
 a006148:	8809883a 	mov	r4,r17
 a00614c:	a005e280 	call	a005e28 <_malloc_trim_r>
 a006150:	003fba06 	br	a00603c <__alt_mem_flash+0xfe00503c>
 a006154:	28c9883a 	add	r4,r5,r3
 a006158:	21000117 	ldw	r4,4(r4)
 a00615c:	2100004c 	andi	r4,r4,1
 a006160:	2000391e 	bne	r4,zero,a006248 <_free_r+0x2fc>
 a006164:	29c00217 	ldw	r7,8(r5)
 a006168:	29000317 	ldw	r4,12(r5)
 a00616c:	1885883a 	add	r2,r3,r2
 a006170:	10c00054 	ori	r3,r2,1
 a006174:	39000315 	stw	r4,12(r7)
 a006178:	21c00215 	stw	r7,8(r4)
 a00617c:	30c00115 	stw	r3,4(r6)
 a006180:	308d883a 	add	r6,r6,r2
 a006184:	30800015 	stw	r2,0(r6)
 a006188:	003fac06 	br	a00603c <__alt_mem_flash+0xfe00503c>
 a00618c:	00c00504 	movi	r3,20
 a006190:	19401536 	bltu	r3,r5,a0061e8 <_free_r+0x29c>
 a006194:	28c01704 	addi	r3,r5,92
 a006198:	18c7883a 	add	r3,r3,r3
 a00619c:	294016c4 	addi	r5,r5,91
 a0061a0:	003fb406 	br	a006074 <__alt_mem_flash+0xfe005074>
 a0061a4:	280bd0ba 	srai	r5,r5,2
 a0061a8:	00c00044 	movi	r3,1
 a0061ac:	38800117 	ldw	r2,4(r7)
 a0061b0:	194a983a 	sll	r5,r3,r5
 a0061b4:	2007883a 	mov	r3,r4
 a0061b8:	2884b03a 	or	r2,r5,r2
 a0061bc:	38800115 	stw	r2,4(r7)
 a0061c0:	003fbb06 	br	a0060b0 <__alt_mem_flash+0xfe0050b0>
 a0061c4:	21800515 	stw	r6,20(r4)
 a0061c8:	21800415 	stw	r6,16(r4)
 a0061cc:	10c00054 	ori	r3,r2,1
 a0061d0:	31c00315 	stw	r7,12(r6)
 a0061d4:	31c00215 	stw	r7,8(r6)
 a0061d8:	30c00115 	stw	r3,4(r6)
 a0061dc:	308d883a 	add	r6,r6,r2
 a0061e0:	30800015 	stw	r2,0(r6)
 a0061e4:	003f9506 	br	a00603c <__alt_mem_flash+0xfe00503c>
 a0061e8:	00c01504 	movi	r3,84
 a0061ec:	19400536 	bltu	r3,r5,a006204 <_free_r+0x2b8>
 a0061f0:	100ad33a 	srli	r5,r2,12
 a0061f4:	28c01bc4 	addi	r3,r5,111
 a0061f8:	18c7883a 	add	r3,r3,r3
 a0061fc:	29401b84 	addi	r5,r5,110
 a006200:	003f9c06 	br	a006074 <__alt_mem_flash+0xfe005074>
 a006204:	00c05504 	movi	r3,340
 a006208:	19400536 	bltu	r3,r5,a006220 <_free_r+0x2d4>
 a00620c:	100ad3fa 	srli	r5,r2,15
 a006210:	28c01e04 	addi	r3,r5,120
 a006214:	18c7883a 	add	r3,r3,r3
 a006218:	29401dc4 	addi	r5,r5,119
 a00621c:	003f9506 	br	a006074 <__alt_mem_flash+0xfe005074>
 a006220:	00c15504 	movi	r3,1364
 a006224:	19400536 	bltu	r3,r5,a00623c <_free_r+0x2f0>
 a006228:	100ad4ba 	srli	r5,r2,18
 a00622c:	28c01f44 	addi	r3,r5,125
 a006230:	18c7883a 	add	r3,r3,r3
 a006234:	29401f04 	addi	r5,r5,124
 a006238:	003f8e06 	br	a006074 <__alt_mem_flash+0xfe005074>
 a00623c:	00c03f84 	movi	r3,254
 a006240:	01401f84 	movi	r5,126
 a006244:	003f8b06 	br	a006074 <__alt_mem_flash+0xfe005074>
 a006248:	10c00054 	ori	r3,r2,1
 a00624c:	30c00115 	stw	r3,4(r6)
 a006250:	308d883a 	add	r6,r6,r2
 a006254:	30800015 	stw	r2,0(r6)
 a006258:	003f7806 	br	a00603c <__alt_mem_flash+0xfe00503c>

0a00625c <_fwalk>:
 a00625c:	defff704 	addi	sp,sp,-36
 a006260:	dd000415 	stw	r20,16(sp)
 a006264:	dfc00815 	stw	ra,32(sp)
 a006268:	ddc00715 	stw	r23,28(sp)
 a00626c:	dd800615 	stw	r22,24(sp)
 a006270:	dd400515 	stw	r21,20(sp)
 a006274:	dcc00315 	stw	r19,12(sp)
 a006278:	dc800215 	stw	r18,8(sp)
 a00627c:	dc400115 	stw	r17,4(sp)
 a006280:	dc000015 	stw	r16,0(sp)
 a006284:	2500b804 	addi	r20,r4,736
 a006288:	a0002326 	beq	r20,zero,a006318 <_fwalk+0xbc>
 a00628c:	282b883a 	mov	r21,r5
 a006290:	002f883a 	mov	r23,zero
 a006294:	05800044 	movi	r22,1
 a006298:	04ffffc4 	movi	r19,-1
 a00629c:	a4400117 	ldw	r17,4(r20)
 a0062a0:	a4800217 	ldw	r18,8(r20)
 a0062a4:	8c7fffc4 	addi	r17,r17,-1
 a0062a8:	88000d16 	blt	r17,zero,a0062e0 <_fwalk+0x84>
 a0062ac:	94000304 	addi	r16,r18,12
 a0062b0:	94800384 	addi	r18,r18,14
 a0062b4:	8080000b 	ldhu	r2,0(r16)
 a0062b8:	8c7fffc4 	addi	r17,r17,-1
 a0062bc:	813ffd04 	addi	r4,r16,-12
 a0062c0:	b080042e 	bgeu	r22,r2,a0062d4 <_fwalk+0x78>
 a0062c4:	9080000f 	ldh	r2,0(r18)
 a0062c8:	14c00226 	beq	r2,r19,a0062d4 <_fwalk+0x78>
 a0062cc:	a83ee83a 	callr	r21
 a0062d0:	b8aeb03a 	or	r23,r23,r2
 a0062d4:	84001a04 	addi	r16,r16,104
 a0062d8:	94801a04 	addi	r18,r18,104
 a0062dc:	8cfff51e 	bne	r17,r19,a0062b4 <__alt_mem_flash+0xfe0052b4>
 a0062e0:	a5000017 	ldw	r20,0(r20)
 a0062e4:	a03fed1e 	bne	r20,zero,a00629c <__alt_mem_flash+0xfe00529c>
 a0062e8:	b805883a 	mov	r2,r23
 a0062ec:	dfc00817 	ldw	ra,32(sp)
 a0062f0:	ddc00717 	ldw	r23,28(sp)
 a0062f4:	dd800617 	ldw	r22,24(sp)
 a0062f8:	dd400517 	ldw	r21,20(sp)
 a0062fc:	dd000417 	ldw	r20,16(sp)
 a006300:	dcc00317 	ldw	r19,12(sp)
 a006304:	dc800217 	ldw	r18,8(sp)
 a006308:	dc400117 	ldw	r17,4(sp)
 a00630c:	dc000017 	ldw	r16,0(sp)
 a006310:	dec00904 	addi	sp,sp,36
 a006314:	f800283a 	ret
 a006318:	002f883a 	mov	r23,zero
 a00631c:	003ff206 	br	a0062e8 <__alt_mem_flash+0xfe0052e8>

0a006320 <_fwalk_reent>:
 a006320:	defff704 	addi	sp,sp,-36
 a006324:	dd000415 	stw	r20,16(sp)
 a006328:	dfc00815 	stw	ra,32(sp)
 a00632c:	ddc00715 	stw	r23,28(sp)
 a006330:	dd800615 	stw	r22,24(sp)
 a006334:	dd400515 	stw	r21,20(sp)
 a006338:	dcc00315 	stw	r19,12(sp)
 a00633c:	dc800215 	stw	r18,8(sp)
 a006340:	dc400115 	stw	r17,4(sp)
 a006344:	dc000015 	stw	r16,0(sp)
 a006348:	2500b804 	addi	r20,r4,736
 a00634c:	a0002326 	beq	r20,zero,a0063dc <_fwalk_reent+0xbc>
 a006350:	282b883a 	mov	r21,r5
 a006354:	2027883a 	mov	r19,r4
 a006358:	002f883a 	mov	r23,zero
 a00635c:	05800044 	movi	r22,1
 a006360:	04bfffc4 	movi	r18,-1
 a006364:	a4400117 	ldw	r17,4(r20)
 a006368:	a4000217 	ldw	r16,8(r20)
 a00636c:	8c7fffc4 	addi	r17,r17,-1
 a006370:	88000c16 	blt	r17,zero,a0063a4 <_fwalk_reent+0x84>
 a006374:	84000304 	addi	r16,r16,12
 a006378:	8080000b 	ldhu	r2,0(r16)
 a00637c:	8c7fffc4 	addi	r17,r17,-1
 a006380:	817ffd04 	addi	r5,r16,-12
 a006384:	b080052e 	bgeu	r22,r2,a00639c <_fwalk_reent+0x7c>
 a006388:	8080008f 	ldh	r2,2(r16)
 a00638c:	9809883a 	mov	r4,r19
 a006390:	14800226 	beq	r2,r18,a00639c <_fwalk_reent+0x7c>
 a006394:	a83ee83a 	callr	r21
 a006398:	b8aeb03a 	or	r23,r23,r2
 a00639c:	84001a04 	addi	r16,r16,104
 a0063a0:	8cbff51e 	bne	r17,r18,a006378 <__alt_mem_flash+0xfe005378>
 a0063a4:	a5000017 	ldw	r20,0(r20)
 a0063a8:	a03fee1e 	bne	r20,zero,a006364 <__alt_mem_flash+0xfe005364>
 a0063ac:	b805883a 	mov	r2,r23
 a0063b0:	dfc00817 	ldw	ra,32(sp)
 a0063b4:	ddc00717 	ldw	r23,28(sp)
 a0063b8:	dd800617 	ldw	r22,24(sp)
 a0063bc:	dd400517 	ldw	r21,20(sp)
 a0063c0:	dd000417 	ldw	r20,16(sp)
 a0063c4:	dcc00317 	ldw	r19,12(sp)
 a0063c8:	dc800217 	ldw	r18,8(sp)
 a0063cc:	dc400117 	ldw	r17,4(sp)
 a0063d0:	dc000017 	ldw	r16,0(sp)
 a0063d4:	dec00904 	addi	sp,sp,36
 a0063d8:	f800283a 	ret
 a0063dc:	002f883a 	mov	r23,zero
 a0063e0:	003ff206 	br	a0063ac <__alt_mem_flash+0xfe0053ac>

0a0063e4 <_setlocale_r>:
 a0063e4:	30001b26 	beq	r6,zero,a006454 <_setlocale_r+0x70>
 a0063e8:	01428074 	movhi	r5,2561
 a0063ec:	defffe04 	addi	sp,sp,-8
 a0063f0:	29471804 	addi	r5,r5,7264
 a0063f4:	3009883a 	mov	r4,r6
 a0063f8:	dc000015 	stw	r16,0(sp)
 a0063fc:	dfc00115 	stw	ra,4(sp)
 a006400:	3021883a 	mov	r16,r6
 a006404:	a0084980 	call	a008498 <strcmp>
 a006408:	1000061e 	bne	r2,zero,a006424 <_setlocale_r+0x40>
 a00640c:	00828074 	movhi	r2,2561
 a006410:	1086fa04 	addi	r2,r2,7144
 a006414:	dfc00117 	ldw	ra,4(sp)
 a006418:	dc000017 	ldw	r16,0(sp)
 a00641c:	dec00204 	addi	sp,sp,8
 a006420:	f800283a 	ret
 a006424:	01428074 	movhi	r5,2561
 a006428:	2946fa04 	addi	r5,r5,7144
 a00642c:	8009883a 	mov	r4,r16
 a006430:	a0084980 	call	a008498 <strcmp>
 a006434:	103ff526 	beq	r2,zero,a00640c <__alt_mem_flash+0xfe00540c>
 a006438:	01428074 	movhi	r5,2561
 a00643c:	29470304 	addi	r5,r5,7180
 a006440:	8009883a 	mov	r4,r16
 a006444:	a0084980 	call	a008498 <strcmp>
 a006448:	103ff026 	beq	r2,zero,a00640c <__alt_mem_flash+0xfe00540c>
 a00644c:	0005883a 	mov	r2,zero
 a006450:	003ff006 	br	a006414 <__alt_mem_flash+0xfe005414>
 a006454:	00828074 	movhi	r2,2561
 a006458:	1086fa04 	addi	r2,r2,7144
 a00645c:	f800283a 	ret

0a006460 <__locale_charset>:
 a006460:	00828074 	movhi	r2,2561
 a006464:	10889604 	addi	r2,r2,8792
 a006468:	f800283a 	ret

0a00646c <__locale_mb_cur_max>:
 a00646c:	00828074 	movhi	r2,2561
 a006470:	108ea104 	addi	r2,r2,14980
 a006474:	10800017 	ldw	r2,0(r2)
 a006478:	f800283a 	ret

0a00647c <__locale_msgcharset>:
 a00647c:	00828074 	movhi	r2,2561
 a006480:	10888e04 	addi	r2,r2,8760
 a006484:	f800283a 	ret

0a006488 <__locale_cjk_lang>:
 a006488:	0005883a 	mov	r2,zero
 a00648c:	f800283a 	ret

0a006490 <_localeconv_r>:
 a006490:	00828074 	movhi	r2,2561
 a006494:	10889e04 	addi	r2,r2,8824
 a006498:	f800283a 	ret

0a00649c <setlocale>:
 a00649c:	00828074 	movhi	r2,2561
 a0064a0:	108ea004 	addi	r2,r2,14976
 a0064a4:	280d883a 	mov	r6,r5
 a0064a8:	200b883a 	mov	r5,r4
 a0064ac:	11000017 	ldw	r4,0(r2)
 a0064b0:	a0063e41 	jmpi	a0063e4 <_setlocale_r>

0a0064b4 <localeconv>:
 a0064b4:	00828074 	movhi	r2,2561
 a0064b8:	10889e04 	addi	r2,r2,8824
 a0064bc:	f800283a 	ret

0a0064c0 <__smakebuf_r>:
 a0064c0:	2880030b 	ldhu	r2,12(r5)
 a0064c4:	10c0008c 	andi	r3,r2,2
 a0064c8:	1800411e 	bne	r3,zero,a0065d0 <__smakebuf_r+0x110>
 a0064cc:	deffec04 	addi	sp,sp,-80
 a0064d0:	dc000f15 	stw	r16,60(sp)
 a0064d4:	2821883a 	mov	r16,r5
 a0064d8:	2940038f 	ldh	r5,14(r5)
 a0064dc:	dc401015 	stw	r17,64(sp)
 a0064e0:	dfc01315 	stw	ra,76(sp)
 a0064e4:	dcc01215 	stw	r19,72(sp)
 a0064e8:	dc801115 	stw	r18,68(sp)
 a0064ec:	2023883a 	mov	r17,r4
 a0064f0:	28001c16 	blt	r5,zero,a006564 <__smakebuf_r+0xa4>
 a0064f4:	d80d883a 	mov	r6,sp
 a0064f8:	a00a1a00 	call	a00a1a0 <_fstat_r>
 a0064fc:	10001816 	blt	r2,zero,a006560 <__smakebuf_r+0xa0>
 a006500:	d8800117 	ldw	r2,4(sp)
 a006504:	00e00014 	movui	r3,32768
 a006508:	10bc000c 	andi	r2,r2,61440
 a00650c:	14c80020 	cmpeqi	r19,r2,8192
 a006510:	10c03726 	beq	r2,r3,a0065f0 <__smakebuf_r+0x130>
 a006514:	80c0030b 	ldhu	r3,12(r16)
 a006518:	18c20014 	ori	r3,r3,2048
 a00651c:	80c0030d 	sth	r3,12(r16)
 a006520:	00c80004 	movi	r3,8192
 a006524:	10c0521e 	bne	r2,r3,a006670 <__smakebuf_r+0x1b0>
 a006528:	8140038f 	ldh	r5,14(r16)
 a00652c:	8809883a 	mov	r4,r17
 a006530:	a00a6c40 	call	a00a6c4 <_isatty_r>
 a006534:	10004c26 	beq	r2,zero,a006668 <__smakebuf_r+0x1a8>
 a006538:	8080030b 	ldhu	r2,12(r16)
 a00653c:	80c010c4 	addi	r3,r16,67
 a006540:	80c00015 	stw	r3,0(r16)
 a006544:	10800054 	ori	r2,r2,1
 a006548:	8080030d 	sth	r2,12(r16)
 a00654c:	00800044 	movi	r2,1
 a006550:	80c00415 	stw	r3,16(r16)
 a006554:	80800515 	stw	r2,20(r16)
 a006558:	04810004 	movi	r18,1024
 a00655c:	00000706 	br	a00657c <__smakebuf_r+0xbc>
 a006560:	8080030b 	ldhu	r2,12(r16)
 a006564:	10c0200c 	andi	r3,r2,128
 a006568:	18001f1e 	bne	r3,zero,a0065e8 <__smakebuf_r+0x128>
 a00656c:	04810004 	movi	r18,1024
 a006570:	10820014 	ori	r2,r2,2048
 a006574:	8080030d 	sth	r2,12(r16)
 a006578:	0027883a 	mov	r19,zero
 a00657c:	900b883a 	mov	r5,r18
 a006580:	8809883a 	mov	r4,r17
 a006584:	a00667c0 	call	a00667c <_malloc_r>
 a006588:	10002c26 	beq	r2,zero,a00663c <__smakebuf_r+0x17c>
 a00658c:	80c0030b 	ldhu	r3,12(r16)
 a006590:	01028034 	movhi	r4,2560
 a006594:	2116a004 	addi	r4,r4,23168
 a006598:	89000f15 	stw	r4,60(r17)
 a00659c:	18c02014 	ori	r3,r3,128
 a0065a0:	80c0030d 	sth	r3,12(r16)
 a0065a4:	80800015 	stw	r2,0(r16)
 a0065a8:	80800415 	stw	r2,16(r16)
 a0065ac:	84800515 	stw	r18,20(r16)
 a0065b0:	98001a1e 	bne	r19,zero,a00661c <__smakebuf_r+0x15c>
 a0065b4:	dfc01317 	ldw	ra,76(sp)
 a0065b8:	dcc01217 	ldw	r19,72(sp)
 a0065bc:	dc801117 	ldw	r18,68(sp)
 a0065c0:	dc401017 	ldw	r17,64(sp)
 a0065c4:	dc000f17 	ldw	r16,60(sp)
 a0065c8:	dec01404 	addi	sp,sp,80
 a0065cc:	f800283a 	ret
 a0065d0:	288010c4 	addi	r2,r5,67
 a0065d4:	28800015 	stw	r2,0(r5)
 a0065d8:	28800415 	stw	r2,16(r5)
 a0065dc:	00800044 	movi	r2,1
 a0065e0:	28800515 	stw	r2,20(r5)
 a0065e4:	f800283a 	ret
 a0065e8:	04801004 	movi	r18,64
 a0065ec:	003fe006 	br	a006570 <__alt_mem_flash+0xfe005570>
 a0065f0:	81000a17 	ldw	r4,40(r16)
 a0065f4:	00c28074 	movhi	r3,2561
 a0065f8:	18e10d04 	addi	r3,r3,-31692
 a0065fc:	20ffc51e 	bne	r4,r3,a006514 <__alt_mem_flash+0xfe005514>
 a006600:	8080030b 	ldhu	r2,12(r16)
 a006604:	04810004 	movi	r18,1024
 a006608:	84801315 	stw	r18,76(r16)
 a00660c:	1484b03a 	or	r2,r2,r18
 a006610:	8080030d 	sth	r2,12(r16)
 a006614:	0027883a 	mov	r19,zero
 a006618:	003fd806 	br	a00657c <__alt_mem_flash+0xfe00557c>
 a00661c:	8140038f 	ldh	r5,14(r16)
 a006620:	8809883a 	mov	r4,r17
 a006624:	a00a6c40 	call	a00a6c4 <_isatty_r>
 a006628:	103fe226 	beq	r2,zero,a0065b4 <__alt_mem_flash+0xfe0055b4>
 a00662c:	8080030b 	ldhu	r2,12(r16)
 a006630:	10800054 	ori	r2,r2,1
 a006634:	8080030d 	sth	r2,12(r16)
 a006638:	003fde06 	br	a0065b4 <__alt_mem_flash+0xfe0055b4>
 a00663c:	8080030b 	ldhu	r2,12(r16)
 a006640:	10c0800c 	andi	r3,r2,512
 a006644:	183fdb1e 	bne	r3,zero,a0065b4 <__alt_mem_flash+0xfe0055b4>
 a006648:	10800094 	ori	r2,r2,2
 a00664c:	80c010c4 	addi	r3,r16,67
 a006650:	8080030d 	sth	r2,12(r16)
 a006654:	00800044 	movi	r2,1
 a006658:	80c00015 	stw	r3,0(r16)
 a00665c:	80c00415 	stw	r3,16(r16)
 a006660:	80800515 	stw	r2,20(r16)
 a006664:	003fd306 	br	a0065b4 <__alt_mem_flash+0xfe0055b4>
 a006668:	04810004 	movi	r18,1024
 a00666c:	003fc306 	br	a00657c <__alt_mem_flash+0xfe00557c>
 a006670:	0027883a 	mov	r19,zero
 a006674:	04810004 	movi	r18,1024
 a006678:	003fc006 	br	a00657c <__alt_mem_flash+0xfe00557c>

0a00667c <_malloc_r>:
 a00667c:	defff504 	addi	sp,sp,-44
 a006680:	dc800315 	stw	r18,12(sp)
 a006684:	dfc00a15 	stw	ra,40(sp)
 a006688:	df000915 	stw	fp,36(sp)
 a00668c:	ddc00815 	stw	r23,32(sp)
 a006690:	dd800715 	stw	r22,28(sp)
 a006694:	dd400615 	stw	r21,24(sp)
 a006698:	dd000515 	stw	r20,20(sp)
 a00669c:	dcc00415 	stw	r19,16(sp)
 a0066a0:	dc400215 	stw	r17,8(sp)
 a0066a4:	dc000115 	stw	r16,4(sp)
 a0066a8:	288002c4 	addi	r2,r5,11
 a0066ac:	00c00584 	movi	r3,22
 a0066b0:	2025883a 	mov	r18,r4
 a0066b4:	18807f2e 	bgeu	r3,r2,a0068b4 <_malloc_r+0x238>
 a0066b8:	047ffe04 	movi	r17,-8
 a0066bc:	1462703a 	and	r17,r2,r17
 a0066c0:	8800a316 	blt	r17,zero,a006950 <_malloc_r+0x2d4>
 a0066c4:	8940a236 	bltu	r17,r5,a006950 <_malloc_r+0x2d4>
 a0066c8:	a00db340 	call	a00db34 <__malloc_lock>
 a0066cc:	00807dc4 	movi	r2,503
 a0066d0:	1441e92e 	bgeu	r2,r17,a006e78 <_malloc_r+0x7fc>
 a0066d4:	8804d27a 	srli	r2,r17,9
 a0066d8:	1000a126 	beq	r2,zero,a006960 <_malloc_r+0x2e4>
 a0066dc:	00c00104 	movi	r3,4
 a0066e0:	18811e36 	bltu	r3,r2,a006b5c <_malloc_r+0x4e0>
 a0066e4:	8804d1ba 	srli	r2,r17,6
 a0066e8:	12000e44 	addi	r8,r2,57
 a0066ec:	11c00e04 	addi	r7,r2,56
 a0066f0:	4209883a 	add	r4,r8,r8
 a0066f4:	04c28074 	movhi	r19,2561
 a0066f8:	2109883a 	add	r4,r4,r4
 a0066fc:	9cc8ac04 	addi	r19,r19,8880
 a006700:	2109883a 	add	r4,r4,r4
 a006704:	9909883a 	add	r4,r19,r4
 a006708:	24000117 	ldw	r16,4(r4)
 a00670c:	213ffe04 	addi	r4,r4,-8
 a006710:	24009726 	beq	r4,r16,a006970 <_malloc_r+0x2f4>
 a006714:	80800117 	ldw	r2,4(r16)
 a006718:	01bfff04 	movi	r6,-4
 a00671c:	014003c4 	movi	r5,15
 a006720:	1184703a 	and	r2,r2,r6
 a006724:	1447c83a 	sub	r3,r2,r17
 a006728:	28c00716 	blt	r5,r3,a006748 <_malloc_r+0xcc>
 a00672c:	1800920e 	bge	r3,zero,a006978 <_malloc_r+0x2fc>
 a006730:	84000317 	ldw	r16,12(r16)
 a006734:	24008e26 	beq	r4,r16,a006970 <_malloc_r+0x2f4>
 a006738:	80800117 	ldw	r2,4(r16)
 a00673c:	1184703a 	and	r2,r2,r6
 a006740:	1447c83a 	sub	r3,r2,r17
 a006744:	28fff90e 	bge	r5,r3,a00672c <__alt_mem_flash+0xfe00572c>
 a006748:	3809883a 	mov	r4,r7
 a00674c:	01828074 	movhi	r6,2561
 a006750:	9c000417 	ldw	r16,16(r19)
 a006754:	3188ac04 	addi	r6,r6,8880
 a006758:	32000204 	addi	r8,r6,8
 a00675c:	82013426 	beq	r16,r8,a006c30 <_malloc_r+0x5b4>
 a006760:	80c00117 	ldw	r3,4(r16)
 a006764:	00bfff04 	movi	r2,-4
 a006768:	188e703a 	and	r7,r3,r2
 a00676c:	3c45c83a 	sub	r2,r7,r17
 a006770:	00c003c4 	movi	r3,15
 a006774:	18811f16 	blt	r3,r2,a006bf4 <_malloc_r+0x578>
 a006778:	32000515 	stw	r8,20(r6)
 a00677c:	32000415 	stw	r8,16(r6)
 a006780:	10007f0e 	bge	r2,zero,a006980 <_malloc_r+0x304>
 a006784:	00807fc4 	movi	r2,511
 a006788:	11c0fd36 	bltu	r2,r7,a006b80 <_malloc_r+0x504>
 a00678c:	3806d0fa 	srli	r3,r7,3
 a006790:	01c00044 	movi	r7,1
 a006794:	30800117 	ldw	r2,4(r6)
 a006798:	19400044 	addi	r5,r3,1
 a00679c:	294b883a 	add	r5,r5,r5
 a0067a0:	1807d0ba 	srai	r3,r3,2
 a0067a4:	294b883a 	add	r5,r5,r5
 a0067a8:	294b883a 	add	r5,r5,r5
 a0067ac:	298b883a 	add	r5,r5,r6
 a0067b0:	38c6983a 	sll	r3,r7,r3
 a0067b4:	29c00017 	ldw	r7,0(r5)
 a0067b8:	2a7ffe04 	addi	r9,r5,-8
 a0067bc:	1886b03a 	or	r3,r3,r2
 a0067c0:	82400315 	stw	r9,12(r16)
 a0067c4:	81c00215 	stw	r7,8(r16)
 a0067c8:	30c00115 	stw	r3,4(r6)
 a0067cc:	2c000015 	stw	r16,0(r5)
 a0067d0:	3c000315 	stw	r16,12(r7)
 a0067d4:	2005d0ba 	srai	r2,r4,2
 a0067d8:	01400044 	movi	r5,1
 a0067dc:	288a983a 	sll	r5,r5,r2
 a0067e0:	19406f36 	bltu	r3,r5,a0069a0 <_malloc_r+0x324>
 a0067e4:	28c4703a 	and	r2,r5,r3
 a0067e8:	10000a1e 	bne	r2,zero,a006814 <_malloc_r+0x198>
 a0067ec:	00bfff04 	movi	r2,-4
 a0067f0:	294b883a 	add	r5,r5,r5
 a0067f4:	2088703a 	and	r4,r4,r2
 a0067f8:	28c4703a 	and	r2,r5,r3
 a0067fc:	21000104 	addi	r4,r4,4
 a006800:	1000041e 	bne	r2,zero,a006814 <_malloc_r+0x198>
 a006804:	294b883a 	add	r5,r5,r5
 a006808:	28c4703a 	and	r2,r5,r3
 a00680c:	21000104 	addi	r4,r4,4
 a006810:	103ffc26 	beq	r2,zero,a006804 <__alt_mem_flash+0xfe005804>
 a006814:	02bfff04 	movi	r10,-4
 a006818:	024003c4 	movi	r9,15
 a00681c:	21800044 	addi	r6,r4,1
 a006820:	318d883a 	add	r6,r6,r6
 a006824:	318d883a 	add	r6,r6,r6
 a006828:	318d883a 	add	r6,r6,r6
 a00682c:	998d883a 	add	r6,r19,r6
 a006830:	333ffe04 	addi	r12,r6,-8
 a006834:	2017883a 	mov	r11,r4
 a006838:	31800104 	addi	r6,r6,4
 a00683c:	34000017 	ldw	r16,0(r6)
 a006840:	31fffd04 	addi	r7,r6,-12
 a006844:	81c0041e 	bne	r16,r7,a006858 <_malloc_r+0x1dc>
 a006848:	0000fb06 	br	a006c38 <_malloc_r+0x5bc>
 a00684c:	1801030e 	bge	r3,zero,a006c5c <_malloc_r+0x5e0>
 a006850:	84000317 	ldw	r16,12(r16)
 a006854:	81c0f826 	beq	r16,r7,a006c38 <_malloc_r+0x5bc>
 a006858:	80800117 	ldw	r2,4(r16)
 a00685c:	1284703a 	and	r2,r2,r10
 a006860:	1447c83a 	sub	r3,r2,r17
 a006864:	48fff90e 	bge	r9,r3,a00684c <__alt_mem_flash+0xfe00584c>
 a006868:	80800317 	ldw	r2,12(r16)
 a00686c:	81000217 	ldw	r4,8(r16)
 a006870:	89400054 	ori	r5,r17,1
 a006874:	81400115 	stw	r5,4(r16)
 a006878:	20800315 	stw	r2,12(r4)
 a00687c:	11000215 	stw	r4,8(r2)
 a006880:	8463883a 	add	r17,r16,r17
 a006884:	9c400515 	stw	r17,20(r19)
 a006888:	9c400415 	stw	r17,16(r19)
 a00688c:	18800054 	ori	r2,r3,1
 a006890:	88800115 	stw	r2,4(r17)
 a006894:	8a000315 	stw	r8,12(r17)
 a006898:	8a000215 	stw	r8,8(r17)
 a00689c:	88e3883a 	add	r17,r17,r3
 a0068a0:	88c00015 	stw	r3,0(r17)
 a0068a4:	9009883a 	mov	r4,r18
 a0068a8:	a00db580 	call	a00db58 <__malloc_unlock>
 a0068ac:	80800204 	addi	r2,r16,8
 a0068b0:	00001b06 	br	a006920 <_malloc_r+0x2a4>
 a0068b4:	04400404 	movi	r17,16
 a0068b8:	89402536 	bltu	r17,r5,a006950 <_malloc_r+0x2d4>
 a0068bc:	a00db340 	call	a00db34 <__malloc_lock>
 a0068c0:	00800184 	movi	r2,6
 a0068c4:	01000084 	movi	r4,2
 a0068c8:	04c28074 	movhi	r19,2561
 a0068cc:	1085883a 	add	r2,r2,r2
 a0068d0:	9cc8ac04 	addi	r19,r19,8880
 a0068d4:	1085883a 	add	r2,r2,r2
 a0068d8:	9885883a 	add	r2,r19,r2
 a0068dc:	14000117 	ldw	r16,4(r2)
 a0068e0:	10fffe04 	addi	r3,r2,-8
 a0068e4:	80c0d926 	beq	r16,r3,a006c4c <_malloc_r+0x5d0>
 a0068e8:	80c00117 	ldw	r3,4(r16)
 a0068ec:	81000317 	ldw	r4,12(r16)
 a0068f0:	00bfff04 	movi	r2,-4
 a0068f4:	1884703a 	and	r2,r3,r2
 a0068f8:	81400217 	ldw	r5,8(r16)
 a0068fc:	8085883a 	add	r2,r16,r2
 a006900:	10c00117 	ldw	r3,4(r2)
 a006904:	29000315 	stw	r4,12(r5)
 a006908:	21400215 	stw	r5,8(r4)
 a00690c:	18c00054 	ori	r3,r3,1
 a006910:	10c00115 	stw	r3,4(r2)
 a006914:	9009883a 	mov	r4,r18
 a006918:	a00db580 	call	a00db58 <__malloc_unlock>
 a00691c:	80800204 	addi	r2,r16,8
 a006920:	dfc00a17 	ldw	ra,40(sp)
 a006924:	df000917 	ldw	fp,36(sp)
 a006928:	ddc00817 	ldw	r23,32(sp)
 a00692c:	dd800717 	ldw	r22,28(sp)
 a006930:	dd400617 	ldw	r21,24(sp)
 a006934:	dd000517 	ldw	r20,20(sp)
 a006938:	dcc00417 	ldw	r19,16(sp)
 a00693c:	dc800317 	ldw	r18,12(sp)
 a006940:	dc400217 	ldw	r17,8(sp)
 a006944:	dc000117 	ldw	r16,4(sp)
 a006948:	dec00b04 	addi	sp,sp,44
 a00694c:	f800283a 	ret
 a006950:	00800304 	movi	r2,12
 a006954:	90800015 	stw	r2,0(r18)
 a006958:	0005883a 	mov	r2,zero
 a00695c:	003ff006 	br	a006920 <__alt_mem_flash+0xfe005920>
 a006960:	01002004 	movi	r4,128
 a006964:	02001004 	movi	r8,64
 a006968:	01c00fc4 	movi	r7,63
 a00696c:	003f6106 	br	a0066f4 <__alt_mem_flash+0xfe0056f4>
 a006970:	4009883a 	mov	r4,r8
 a006974:	003f7506 	br	a00674c <__alt_mem_flash+0xfe00574c>
 a006978:	81000317 	ldw	r4,12(r16)
 a00697c:	003fde06 	br	a0068f8 <__alt_mem_flash+0xfe0058f8>
 a006980:	81c5883a 	add	r2,r16,r7
 a006984:	11400117 	ldw	r5,4(r2)
 a006988:	9009883a 	mov	r4,r18
 a00698c:	29400054 	ori	r5,r5,1
 a006990:	11400115 	stw	r5,4(r2)
 a006994:	a00db580 	call	a00db58 <__malloc_unlock>
 a006998:	80800204 	addi	r2,r16,8
 a00699c:	003fe006 	br	a006920 <__alt_mem_flash+0xfe005920>
 a0069a0:	9c000217 	ldw	r16,8(r19)
 a0069a4:	00bfff04 	movi	r2,-4
 a0069a8:	85800117 	ldw	r22,4(r16)
 a0069ac:	b0ac703a 	and	r22,r22,r2
 a0069b0:	b4400336 	bltu	r22,r17,a0069c0 <_malloc_r+0x344>
 a0069b4:	b445c83a 	sub	r2,r22,r17
 a0069b8:	00c003c4 	movi	r3,15
 a0069bc:	18805d16 	blt	r3,r2,a006b34 <_malloc_r+0x4b8>
 a0069c0:	05c28074 	movhi	r23,2561
 a0069c4:	00828074 	movhi	r2,2561
 a0069c8:	1095e204 	addi	r2,r2,22408
 a0069cc:	bdcea204 	addi	r23,r23,14984
 a0069d0:	15400017 	ldw	r21,0(r2)
 a0069d4:	b8c00017 	ldw	r3,0(r23)
 a0069d8:	00bfffc4 	movi	r2,-1
 a0069dc:	858d883a 	add	r6,r16,r22
 a0069e0:	8d6b883a 	add	r21,r17,r21
 a0069e4:	1880ea26 	beq	r3,r2,a006d90 <_malloc_r+0x714>
 a0069e8:	ad4403c4 	addi	r21,r21,4111
 a0069ec:	00bc0004 	movi	r2,-4096
 a0069f0:	a8aa703a 	and	r21,r21,r2
 a0069f4:	a80b883a 	mov	r5,r21
 a0069f8:	9009883a 	mov	r4,r18
 a0069fc:	d9800015 	stw	r6,0(sp)
 a006a00:	a0083080 	call	a008308 <_sbrk_r>
 a006a04:	1029883a 	mov	r20,r2
 a006a08:	00bfffc4 	movi	r2,-1
 a006a0c:	d9800017 	ldw	r6,0(sp)
 a006a10:	a080e826 	beq	r20,r2,a006db4 <_malloc_r+0x738>
 a006a14:	a180a636 	bltu	r20,r6,a006cb0 <_malloc_r+0x634>
 a006a18:	07028074 	movhi	fp,2561
 a006a1c:	e715eb04 	addi	fp,fp,22444
 a006a20:	e0800017 	ldw	r2,0(fp)
 a006a24:	a887883a 	add	r3,r21,r2
 a006a28:	e0c00015 	stw	r3,0(fp)
 a006a2c:	3500e626 	beq	r6,r20,a006dc8 <_malloc_r+0x74c>
 a006a30:	b9000017 	ldw	r4,0(r23)
 a006a34:	00bfffc4 	movi	r2,-1
 a006a38:	2080ee26 	beq	r4,r2,a006df4 <_malloc_r+0x778>
 a006a3c:	a185c83a 	sub	r2,r20,r6
 a006a40:	10c5883a 	add	r2,r2,r3
 a006a44:	e0800015 	stw	r2,0(fp)
 a006a48:	a0c001cc 	andi	r3,r20,7
 a006a4c:	1800bc26 	beq	r3,zero,a006d40 <_malloc_r+0x6c4>
 a006a50:	a0e9c83a 	sub	r20,r20,r3
 a006a54:	00840204 	movi	r2,4104
 a006a58:	a5000204 	addi	r20,r20,8
 a006a5c:	10c7c83a 	sub	r3,r2,r3
 a006a60:	a545883a 	add	r2,r20,r21
 a006a64:	1083ffcc 	andi	r2,r2,4095
 a006a68:	18abc83a 	sub	r21,r3,r2
 a006a6c:	a80b883a 	mov	r5,r21
 a006a70:	9009883a 	mov	r4,r18
 a006a74:	a0083080 	call	a008308 <_sbrk_r>
 a006a78:	00ffffc4 	movi	r3,-1
 a006a7c:	10c0e126 	beq	r2,r3,a006e04 <_malloc_r+0x788>
 a006a80:	1505c83a 	sub	r2,r2,r20
 a006a84:	1545883a 	add	r2,r2,r21
 a006a88:	10800054 	ori	r2,r2,1
 a006a8c:	e0c00017 	ldw	r3,0(fp)
 a006a90:	9d000215 	stw	r20,8(r19)
 a006a94:	a0800115 	stw	r2,4(r20)
 a006a98:	a8c7883a 	add	r3,r21,r3
 a006a9c:	e0c00015 	stw	r3,0(fp)
 a006aa0:	84c00e26 	beq	r16,r19,a006adc <_malloc_r+0x460>
 a006aa4:	018003c4 	movi	r6,15
 a006aa8:	3580a72e 	bgeu	r6,r22,a006d48 <_malloc_r+0x6cc>
 a006aac:	81400117 	ldw	r5,4(r16)
 a006ab0:	013ffe04 	movi	r4,-8
 a006ab4:	b0bffd04 	addi	r2,r22,-12
 a006ab8:	1104703a 	and	r2,r2,r4
 a006abc:	2900004c 	andi	r4,r5,1
 a006ac0:	2088b03a 	or	r4,r4,r2
 a006ac4:	81000115 	stw	r4,4(r16)
 a006ac8:	01400144 	movi	r5,5
 a006acc:	8089883a 	add	r4,r16,r2
 a006ad0:	21400115 	stw	r5,4(r4)
 a006ad4:	21400215 	stw	r5,8(r4)
 a006ad8:	3080cd36 	bltu	r6,r2,a006e10 <_malloc_r+0x794>
 a006adc:	00828074 	movhi	r2,2561
 a006ae0:	1095e104 	addi	r2,r2,22404
 a006ae4:	11000017 	ldw	r4,0(r2)
 a006ae8:	20c0012e 	bgeu	r4,r3,a006af0 <_malloc_r+0x474>
 a006aec:	10c00015 	stw	r3,0(r2)
 a006af0:	00828074 	movhi	r2,2561
 a006af4:	1095e004 	addi	r2,r2,22400
 a006af8:	11000017 	ldw	r4,0(r2)
 a006afc:	9c000217 	ldw	r16,8(r19)
 a006b00:	20c0012e 	bgeu	r4,r3,a006b08 <_malloc_r+0x48c>
 a006b04:	10c00015 	stw	r3,0(r2)
 a006b08:	80c00117 	ldw	r3,4(r16)
 a006b0c:	00bfff04 	movi	r2,-4
 a006b10:	1886703a 	and	r3,r3,r2
 a006b14:	1c45c83a 	sub	r2,r3,r17
 a006b18:	1c400236 	bltu	r3,r17,a006b24 <_malloc_r+0x4a8>
 a006b1c:	00c003c4 	movi	r3,15
 a006b20:	18800416 	blt	r3,r2,a006b34 <_malloc_r+0x4b8>
 a006b24:	9009883a 	mov	r4,r18
 a006b28:	a00db580 	call	a00db58 <__malloc_unlock>
 a006b2c:	0005883a 	mov	r2,zero
 a006b30:	003f7b06 	br	a006920 <__alt_mem_flash+0xfe005920>
 a006b34:	88c00054 	ori	r3,r17,1
 a006b38:	80c00115 	stw	r3,4(r16)
 a006b3c:	8463883a 	add	r17,r16,r17
 a006b40:	10800054 	ori	r2,r2,1
 a006b44:	9c400215 	stw	r17,8(r19)
 a006b48:	88800115 	stw	r2,4(r17)
 a006b4c:	9009883a 	mov	r4,r18
 a006b50:	a00db580 	call	a00db58 <__malloc_unlock>
 a006b54:	80800204 	addi	r2,r16,8
 a006b58:	003f7106 	br	a006920 <__alt_mem_flash+0xfe005920>
 a006b5c:	00c00504 	movi	r3,20
 a006b60:	18804a2e 	bgeu	r3,r2,a006c8c <_malloc_r+0x610>
 a006b64:	00c01504 	movi	r3,84
 a006b68:	18806e36 	bltu	r3,r2,a006d24 <_malloc_r+0x6a8>
 a006b6c:	8804d33a 	srli	r2,r17,12
 a006b70:	12001bc4 	addi	r8,r2,111
 a006b74:	11c01b84 	addi	r7,r2,110
 a006b78:	4209883a 	add	r4,r8,r8
 a006b7c:	003edd06 	br	a0066f4 <__alt_mem_flash+0xfe0056f4>
 a006b80:	3804d27a 	srli	r2,r7,9
 a006b84:	00c00104 	movi	r3,4
 a006b88:	1880442e 	bgeu	r3,r2,a006c9c <_malloc_r+0x620>
 a006b8c:	00c00504 	movi	r3,20
 a006b90:	18808136 	bltu	r3,r2,a006d98 <_malloc_r+0x71c>
 a006b94:	11401704 	addi	r5,r2,92
 a006b98:	10c016c4 	addi	r3,r2,91
 a006b9c:	294b883a 	add	r5,r5,r5
 a006ba0:	294b883a 	add	r5,r5,r5
 a006ba4:	294b883a 	add	r5,r5,r5
 a006ba8:	994b883a 	add	r5,r19,r5
 a006bac:	28800017 	ldw	r2,0(r5)
 a006bb0:	01828074 	movhi	r6,2561
 a006bb4:	297ffe04 	addi	r5,r5,-8
 a006bb8:	3188ac04 	addi	r6,r6,8880
 a006bbc:	28806526 	beq	r5,r2,a006d54 <_malloc_r+0x6d8>
 a006bc0:	01bfff04 	movi	r6,-4
 a006bc4:	10c00117 	ldw	r3,4(r2)
 a006bc8:	1986703a 	and	r3,r3,r6
 a006bcc:	38c0022e 	bgeu	r7,r3,a006bd8 <_malloc_r+0x55c>
 a006bd0:	10800217 	ldw	r2,8(r2)
 a006bd4:	28bffb1e 	bne	r5,r2,a006bc4 <__alt_mem_flash+0xfe005bc4>
 a006bd8:	11400317 	ldw	r5,12(r2)
 a006bdc:	98c00117 	ldw	r3,4(r19)
 a006be0:	81400315 	stw	r5,12(r16)
 a006be4:	80800215 	stw	r2,8(r16)
 a006be8:	2c000215 	stw	r16,8(r5)
 a006bec:	14000315 	stw	r16,12(r2)
 a006bf0:	003ef806 	br	a0067d4 <__alt_mem_flash+0xfe0057d4>
 a006bf4:	88c00054 	ori	r3,r17,1
 a006bf8:	80c00115 	stw	r3,4(r16)
 a006bfc:	8463883a 	add	r17,r16,r17
 a006c00:	34400515 	stw	r17,20(r6)
 a006c04:	34400415 	stw	r17,16(r6)
 a006c08:	10c00054 	ori	r3,r2,1
 a006c0c:	8a000315 	stw	r8,12(r17)
 a006c10:	8a000215 	stw	r8,8(r17)
 a006c14:	88c00115 	stw	r3,4(r17)
 a006c18:	88a3883a 	add	r17,r17,r2
 a006c1c:	88800015 	stw	r2,0(r17)
 a006c20:	9009883a 	mov	r4,r18
 a006c24:	a00db580 	call	a00db58 <__malloc_unlock>
 a006c28:	80800204 	addi	r2,r16,8
 a006c2c:	003f3c06 	br	a006920 <__alt_mem_flash+0xfe005920>
 a006c30:	30c00117 	ldw	r3,4(r6)
 a006c34:	003ee706 	br	a0067d4 <__alt_mem_flash+0xfe0057d4>
 a006c38:	5ac00044 	addi	r11,r11,1
 a006c3c:	588000cc 	andi	r2,r11,3
 a006c40:	31800204 	addi	r6,r6,8
 a006c44:	103efd1e 	bne	r2,zero,a00683c <__alt_mem_flash+0xfe00583c>
 a006c48:	00002406 	br	a006cdc <_malloc_r+0x660>
 a006c4c:	14000317 	ldw	r16,12(r2)
 a006c50:	143f251e 	bne	r2,r16,a0068e8 <__alt_mem_flash+0xfe0058e8>
 a006c54:	21000084 	addi	r4,r4,2
 a006c58:	003ebc06 	br	a00674c <__alt_mem_flash+0xfe00574c>
 a006c5c:	8085883a 	add	r2,r16,r2
 a006c60:	10c00117 	ldw	r3,4(r2)
 a006c64:	81000317 	ldw	r4,12(r16)
 a006c68:	81400217 	ldw	r5,8(r16)
 a006c6c:	18c00054 	ori	r3,r3,1
 a006c70:	10c00115 	stw	r3,4(r2)
 a006c74:	29000315 	stw	r4,12(r5)
 a006c78:	21400215 	stw	r5,8(r4)
 a006c7c:	9009883a 	mov	r4,r18
 a006c80:	a00db580 	call	a00db58 <__malloc_unlock>
 a006c84:	80800204 	addi	r2,r16,8
 a006c88:	003f2506 	br	a006920 <__alt_mem_flash+0xfe005920>
 a006c8c:	12001704 	addi	r8,r2,92
 a006c90:	11c016c4 	addi	r7,r2,91
 a006c94:	4209883a 	add	r4,r8,r8
 a006c98:	003e9606 	br	a0066f4 <__alt_mem_flash+0xfe0056f4>
 a006c9c:	3804d1ba 	srli	r2,r7,6
 a006ca0:	11400e44 	addi	r5,r2,57
 a006ca4:	10c00e04 	addi	r3,r2,56
 a006ca8:	294b883a 	add	r5,r5,r5
 a006cac:	003fbc06 	br	a006ba0 <__alt_mem_flash+0xfe005ba0>
 a006cb0:	84ff5926 	beq	r16,r19,a006a18 <__alt_mem_flash+0xfe005a18>
 a006cb4:	00828074 	movhi	r2,2561
 a006cb8:	1088ac04 	addi	r2,r2,8880
 a006cbc:	14000217 	ldw	r16,8(r2)
 a006cc0:	00bfff04 	movi	r2,-4
 a006cc4:	80c00117 	ldw	r3,4(r16)
 a006cc8:	1886703a 	and	r3,r3,r2
 a006ccc:	003f9106 	br	a006b14 <__alt_mem_flash+0xfe005b14>
 a006cd0:	60800217 	ldw	r2,8(r12)
 a006cd4:	213fffc4 	addi	r4,r4,-1
 a006cd8:	1300651e 	bne	r2,r12,a006e70 <_malloc_r+0x7f4>
 a006cdc:	208000cc 	andi	r2,r4,3
 a006ce0:	633ffe04 	addi	r12,r12,-8
 a006ce4:	103ffa1e 	bne	r2,zero,a006cd0 <__alt_mem_flash+0xfe005cd0>
 a006ce8:	98800117 	ldw	r2,4(r19)
 a006cec:	0146303a 	nor	r3,zero,r5
 a006cf0:	1884703a 	and	r2,r3,r2
 a006cf4:	98800115 	stw	r2,4(r19)
 a006cf8:	294b883a 	add	r5,r5,r5
 a006cfc:	117f2836 	bltu	r2,r5,a0069a0 <__alt_mem_flash+0xfe0059a0>
 a006d00:	283f2726 	beq	r5,zero,a0069a0 <__alt_mem_flash+0xfe0059a0>
 a006d04:	2886703a 	and	r3,r5,r2
 a006d08:	5809883a 	mov	r4,r11
 a006d0c:	183ec31e 	bne	r3,zero,a00681c <__alt_mem_flash+0xfe00581c>
 a006d10:	294b883a 	add	r5,r5,r5
 a006d14:	2886703a 	and	r3,r5,r2
 a006d18:	21000104 	addi	r4,r4,4
 a006d1c:	183ffc26 	beq	r3,zero,a006d10 <__alt_mem_flash+0xfe005d10>
 a006d20:	003ebe06 	br	a00681c <__alt_mem_flash+0xfe00581c>
 a006d24:	00c05504 	movi	r3,340
 a006d28:	18801236 	bltu	r3,r2,a006d74 <_malloc_r+0x6f8>
 a006d2c:	8804d3fa 	srli	r2,r17,15
 a006d30:	12001e04 	addi	r8,r2,120
 a006d34:	11c01dc4 	addi	r7,r2,119
 a006d38:	4209883a 	add	r4,r8,r8
 a006d3c:	003e6d06 	br	a0066f4 <__alt_mem_flash+0xfe0056f4>
 a006d40:	00c40004 	movi	r3,4096
 a006d44:	003f4606 	br	a006a60 <__alt_mem_flash+0xfe005a60>
 a006d48:	00800044 	movi	r2,1
 a006d4c:	a0800115 	stw	r2,4(r20)
 a006d50:	003f7406 	br	a006b24 <__alt_mem_flash+0xfe005b24>
 a006d54:	1805d0ba 	srai	r2,r3,2
 a006d58:	01c00044 	movi	r7,1
 a006d5c:	30c00117 	ldw	r3,4(r6)
 a006d60:	388e983a 	sll	r7,r7,r2
 a006d64:	2805883a 	mov	r2,r5
 a006d68:	38c6b03a 	or	r3,r7,r3
 a006d6c:	30c00115 	stw	r3,4(r6)
 a006d70:	003f9b06 	br	a006be0 <__alt_mem_flash+0xfe005be0>
 a006d74:	00c15504 	movi	r3,1364
 a006d78:	18801a36 	bltu	r3,r2,a006de4 <_malloc_r+0x768>
 a006d7c:	8804d4ba 	srli	r2,r17,18
 a006d80:	12001f44 	addi	r8,r2,125
 a006d84:	11c01f04 	addi	r7,r2,124
 a006d88:	4209883a 	add	r4,r8,r8
 a006d8c:	003e5906 	br	a0066f4 <__alt_mem_flash+0xfe0056f4>
 a006d90:	ad400404 	addi	r21,r21,16
 a006d94:	003f1706 	br	a0069f4 <__alt_mem_flash+0xfe0059f4>
 a006d98:	00c01504 	movi	r3,84
 a006d9c:	18802336 	bltu	r3,r2,a006e2c <_malloc_r+0x7b0>
 a006da0:	3804d33a 	srli	r2,r7,12
 a006da4:	11401bc4 	addi	r5,r2,111
 a006da8:	10c01b84 	addi	r3,r2,110
 a006dac:	294b883a 	add	r5,r5,r5
 a006db0:	003f7b06 	br	a006ba0 <__alt_mem_flash+0xfe005ba0>
 a006db4:	9c000217 	ldw	r16,8(r19)
 a006db8:	00bfff04 	movi	r2,-4
 a006dbc:	80c00117 	ldw	r3,4(r16)
 a006dc0:	1886703a 	and	r3,r3,r2
 a006dc4:	003f5306 	br	a006b14 <__alt_mem_flash+0xfe005b14>
 a006dc8:	3083ffcc 	andi	r2,r6,4095
 a006dcc:	103f181e 	bne	r2,zero,a006a30 <__alt_mem_flash+0xfe005a30>
 a006dd0:	99000217 	ldw	r4,8(r19)
 a006dd4:	b545883a 	add	r2,r22,r21
 a006dd8:	10800054 	ori	r2,r2,1
 a006ddc:	20800115 	stw	r2,4(r4)
 a006de0:	003f3e06 	br	a006adc <__alt_mem_flash+0xfe005adc>
 a006de4:	01003f84 	movi	r4,254
 a006de8:	02001fc4 	movi	r8,127
 a006dec:	01c01f84 	movi	r7,126
 a006df0:	003e4006 	br	a0066f4 <__alt_mem_flash+0xfe0056f4>
 a006df4:	00828074 	movhi	r2,2561
 a006df8:	108ea204 	addi	r2,r2,14984
 a006dfc:	15000015 	stw	r20,0(r2)
 a006e00:	003f1106 	br	a006a48 <__alt_mem_flash+0xfe005a48>
 a006e04:	00800044 	movi	r2,1
 a006e08:	002b883a 	mov	r21,zero
 a006e0c:	003f1f06 	br	a006a8c <__alt_mem_flash+0xfe005a8c>
 a006e10:	81400204 	addi	r5,r16,8
 a006e14:	9009883a 	mov	r4,r18
 a006e18:	a005f4c0 	call	a005f4c <_free_r>
 a006e1c:	00828074 	movhi	r2,2561
 a006e20:	1095eb04 	addi	r2,r2,22444
 a006e24:	10c00017 	ldw	r3,0(r2)
 a006e28:	003f2c06 	br	a006adc <__alt_mem_flash+0xfe005adc>
 a006e2c:	00c05504 	movi	r3,340
 a006e30:	18800536 	bltu	r3,r2,a006e48 <_malloc_r+0x7cc>
 a006e34:	3804d3fa 	srli	r2,r7,15
 a006e38:	11401e04 	addi	r5,r2,120
 a006e3c:	10c01dc4 	addi	r3,r2,119
 a006e40:	294b883a 	add	r5,r5,r5
 a006e44:	003f5606 	br	a006ba0 <__alt_mem_flash+0xfe005ba0>
 a006e48:	00c15504 	movi	r3,1364
 a006e4c:	18800536 	bltu	r3,r2,a006e64 <_malloc_r+0x7e8>
 a006e50:	3804d4ba 	srli	r2,r7,18
 a006e54:	11401f44 	addi	r5,r2,125
 a006e58:	10c01f04 	addi	r3,r2,124
 a006e5c:	294b883a 	add	r5,r5,r5
 a006e60:	003f4f06 	br	a006ba0 <__alt_mem_flash+0xfe005ba0>
 a006e64:	01403f84 	movi	r5,254
 a006e68:	00c01f84 	movi	r3,126
 a006e6c:	003f4c06 	br	a006ba0 <__alt_mem_flash+0xfe005ba0>
 a006e70:	98800117 	ldw	r2,4(r19)
 a006e74:	003fa006 	br	a006cf8 <__alt_mem_flash+0xfe005cf8>
 a006e78:	8808d0fa 	srli	r4,r17,3
 a006e7c:	20800044 	addi	r2,r4,1
 a006e80:	1085883a 	add	r2,r2,r2
 a006e84:	003e9006 	br	a0068c8 <__alt_mem_flash+0xfe0058c8>

0a006e88 <memchr>:
 a006e88:	208000cc 	andi	r2,r4,3
 a006e8c:	280f883a 	mov	r7,r5
 a006e90:	10003426 	beq	r2,zero,a006f64 <memchr+0xdc>
 a006e94:	30bfffc4 	addi	r2,r6,-1
 a006e98:	30001a26 	beq	r6,zero,a006f04 <memchr+0x7c>
 a006e9c:	20c00003 	ldbu	r3,0(r4)
 a006ea0:	29803fcc 	andi	r6,r5,255
 a006ea4:	30c0051e 	bne	r6,r3,a006ebc <memchr+0x34>
 a006ea8:	00001806 	br	a006f0c <memchr+0x84>
 a006eac:	10001526 	beq	r2,zero,a006f04 <memchr+0x7c>
 a006eb0:	20c00003 	ldbu	r3,0(r4)
 a006eb4:	10bfffc4 	addi	r2,r2,-1
 a006eb8:	30c01426 	beq	r6,r3,a006f0c <memchr+0x84>
 a006ebc:	21000044 	addi	r4,r4,1
 a006ec0:	20c000cc 	andi	r3,r4,3
 a006ec4:	183ff91e 	bne	r3,zero,a006eac <__alt_mem_flash+0xfe005eac>
 a006ec8:	020000c4 	movi	r8,3
 a006ecc:	40801136 	bltu	r8,r2,a006f14 <memchr+0x8c>
 a006ed0:	10000c26 	beq	r2,zero,a006f04 <memchr+0x7c>
 a006ed4:	20c00003 	ldbu	r3,0(r4)
 a006ed8:	29403fcc 	andi	r5,r5,255
 a006edc:	28c00b26 	beq	r5,r3,a006f0c <memchr+0x84>
 a006ee0:	20c00044 	addi	r3,r4,1
 a006ee4:	39803fcc 	andi	r6,r7,255
 a006ee8:	2089883a 	add	r4,r4,r2
 a006eec:	00000306 	br	a006efc <memchr+0x74>
 a006ef0:	18c00044 	addi	r3,r3,1
 a006ef4:	197fffc3 	ldbu	r5,-1(r3)
 a006ef8:	31400526 	beq	r6,r5,a006f10 <memchr+0x88>
 a006efc:	1805883a 	mov	r2,r3
 a006f00:	20fffb1e 	bne	r4,r3,a006ef0 <__alt_mem_flash+0xfe005ef0>
 a006f04:	0005883a 	mov	r2,zero
 a006f08:	f800283a 	ret
 a006f0c:	2005883a 	mov	r2,r4
 a006f10:	f800283a 	ret
 a006f14:	28c03fcc 	andi	r3,r5,255
 a006f18:	1812923a 	slli	r9,r3,8
 a006f1c:	02ffbff4 	movhi	r11,65279
 a006f20:	02a02074 	movhi	r10,32897
 a006f24:	48d2b03a 	or	r9,r9,r3
 a006f28:	4806943a 	slli	r3,r9,16
 a006f2c:	5affbfc4 	addi	r11,r11,-257
 a006f30:	52a02004 	addi	r10,r10,-32640
 a006f34:	48d2b03a 	or	r9,r9,r3
 a006f38:	20c00017 	ldw	r3,0(r4)
 a006f3c:	48c6f03a 	xor	r3,r9,r3
 a006f40:	1acd883a 	add	r6,r3,r11
 a006f44:	00c6303a 	nor	r3,zero,r3
 a006f48:	30c6703a 	and	r3,r6,r3
 a006f4c:	1a86703a 	and	r3,r3,r10
 a006f50:	183fe01e 	bne	r3,zero,a006ed4 <__alt_mem_flash+0xfe005ed4>
 a006f54:	10bfff04 	addi	r2,r2,-4
 a006f58:	21000104 	addi	r4,r4,4
 a006f5c:	40bff636 	bltu	r8,r2,a006f38 <__alt_mem_flash+0xfe005f38>
 a006f60:	003fdb06 	br	a006ed0 <__alt_mem_flash+0xfe005ed0>
 a006f64:	3005883a 	mov	r2,r6
 a006f68:	003fd706 	br	a006ec8 <__alt_mem_flash+0xfe005ec8>

0a006f6c <memcpy>:
 a006f6c:	defffd04 	addi	sp,sp,-12
 a006f70:	dfc00215 	stw	ra,8(sp)
 a006f74:	dc400115 	stw	r17,4(sp)
 a006f78:	dc000015 	stw	r16,0(sp)
 a006f7c:	00c003c4 	movi	r3,15
 a006f80:	2005883a 	mov	r2,r4
 a006f84:	1980452e 	bgeu	r3,r6,a00709c <memcpy+0x130>
 a006f88:	2906b03a 	or	r3,r5,r4
 a006f8c:	18c000cc 	andi	r3,r3,3
 a006f90:	1800441e 	bne	r3,zero,a0070a4 <memcpy+0x138>
 a006f94:	347ffc04 	addi	r17,r6,-16
 a006f98:	8822d13a 	srli	r17,r17,4
 a006f9c:	28c00104 	addi	r3,r5,4
 a006fa0:	23400104 	addi	r13,r4,4
 a006fa4:	8820913a 	slli	r16,r17,4
 a006fa8:	2b000204 	addi	r12,r5,8
 a006fac:	22c00204 	addi	r11,r4,8
 a006fb0:	84000504 	addi	r16,r16,20
 a006fb4:	2a800304 	addi	r10,r5,12
 a006fb8:	22400304 	addi	r9,r4,12
 a006fbc:	2c21883a 	add	r16,r5,r16
 a006fc0:	2811883a 	mov	r8,r5
 a006fc4:	200f883a 	mov	r7,r4
 a006fc8:	41000017 	ldw	r4,0(r8)
 a006fcc:	1fc00017 	ldw	ra,0(r3)
 a006fd0:	63c00017 	ldw	r15,0(r12)
 a006fd4:	39000015 	stw	r4,0(r7)
 a006fd8:	53800017 	ldw	r14,0(r10)
 a006fdc:	6fc00015 	stw	ra,0(r13)
 a006fe0:	5bc00015 	stw	r15,0(r11)
 a006fe4:	4b800015 	stw	r14,0(r9)
 a006fe8:	18c00404 	addi	r3,r3,16
 a006fec:	39c00404 	addi	r7,r7,16
 a006ff0:	42000404 	addi	r8,r8,16
 a006ff4:	6b400404 	addi	r13,r13,16
 a006ff8:	63000404 	addi	r12,r12,16
 a006ffc:	5ac00404 	addi	r11,r11,16
 a007000:	52800404 	addi	r10,r10,16
 a007004:	4a400404 	addi	r9,r9,16
 a007008:	1c3fef1e 	bne	r3,r16,a006fc8 <__alt_mem_flash+0xfe005fc8>
 a00700c:	89c00044 	addi	r7,r17,1
 a007010:	380e913a 	slli	r7,r7,4
 a007014:	310003cc 	andi	r4,r6,15
 a007018:	02c000c4 	movi	r11,3
 a00701c:	11c7883a 	add	r3,r2,r7
 a007020:	29cb883a 	add	r5,r5,r7
 a007024:	5900212e 	bgeu	r11,r4,a0070ac <memcpy+0x140>
 a007028:	1813883a 	mov	r9,r3
 a00702c:	2811883a 	mov	r8,r5
 a007030:	200f883a 	mov	r7,r4
 a007034:	42800017 	ldw	r10,0(r8)
 a007038:	4a400104 	addi	r9,r9,4
 a00703c:	39ffff04 	addi	r7,r7,-4
 a007040:	4abfff15 	stw	r10,-4(r9)
 a007044:	42000104 	addi	r8,r8,4
 a007048:	59fffa36 	bltu	r11,r7,a007034 <__alt_mem_flash+0xfe006034>
 a00704c:	213fff04 	addi	r4,r4,-4
 a007050:	2008d0ba 	srli	r4,r4,2
 a007054:	318000cc 	andi	r6,r6,3
 a007058:	21000044 	addi	r4,r4,1
 a00705c:	2109883a 	add	r4,r4,r4
 a007060:	2109883a 	add	r4,r4,r4
 a007064:	1907883a 	add	r3,r3,r4
 a007068:	290b883a 	add	r5,r5,r4
 a00706c:	30000626 	beq	r6,zero,a007088 <memcpy+0x11c>
 a007070:	198d883a 	add	r6,r3,r6
 a007074:	29c00003 	ldbu	r7,0(r5)
 a007078:	18c00044 	addi	r3,r3,1
 a00707c:	29400044 	addi	r5,r5,1
 a007080:	19ffffc5 	stb	r7,-1(r3)
 a007084:	19bffb1e 	bne	r3,r6,a007074 <__alt_mem_flash+0xfe006074>
 a007088:	dfc00217 	ldw	ra,8(sp)
 a00708c:	dc400117 	ldw	r17,4(sp)
 a007090:	dc000017 	ldw	r16,0(sp)
 a007094:	dec00304 	addi	sp,sp,12
 a007098:	f800283a 	ret
 a00709c:	2007883a 	mov	r3,r4
 a0070a0:	003ff206 	br	a00706c <__alt_mem_flash+0xfe00606c>
 a0070a4:	2007883a 	mov	r3,r4
 a0070a8:	003ff106 	br	a007070 <__alt_mem_flash+0xfe006070>
 a0070ac:	200d883a 	mov	r6,r4
 a0070b0:	003fee06 	br	a00706c <__alt_mem_flash+0xfe00606c>

0a0070b4 <memset>:
 a0070b4:	20c000cc 	andi	r3,r4,3
 a0070b8:	2005883a 	mov	r2,r4
 a0070bc:	18004426 	beq	r3,zero,a0071d0 <memset+0x11c>
 a0070c0:	31ffffc4 	addi	r7,r6,-1
 a0070c4:	30004026 	beq	r6,zero,a0071c8 <memset+0x114>
 a0070c8:	2813883a 	mov	r9,r5
 a0070cc:	200d883a 	mov	r6,r4
 a0070d0:	2007883a 	mov	r3,r4
 a0070d4:	00000406 	br	a0070e8 <memset+0x34>
 a0070d8:	3a3fffc4 	addi	r8,r7,-1
 a0070dc:	31800044 	addi	r6,r6,1
 a0070e0:	38003926 	beq	r7,zero,a0071c8 <memset+0x114>
 a0070e4:	400f883a 	mov	r7,r8
 a0070e8:	18c00044 	addi	r3,r3,1
 a0070ec:	32400005 	stb	r9,0(r6)
 a0070f0:	1a0000cc 	andi	r8,r3,3
 a0070f4:	403ff81e 	bne	r8,zero,a0070d8 <__alt_mem_flash+0xfe0060d8>
 a0070f8:	010000c4 	movi	r4,3
 a0070fc:	21c02d2e 	bgeu	r4,r7,a0071b4 <memset+0x100>
 a007100:	29003fcc 	andi	r4,r5,255
 a007104:	200c923a 	slli	r6,r4,8
 a007108:	3108b03a 	or	r4,r6,r4
 a00710c:	200c943a 	slli	r6,r4,16
 a007110:	218cb03a 	or	r6,r4,r6
 a007114:	010003c4 	movi	r4,15
 a007118:	21c0182e 	bgeu	r4,r7,a00717c <memset+0xc8>
 a00711c:	3b3ffc04 	addi	r12,r7,-16
 a007120:	6018d13a 	srli	r12,r12,4
 a007124:	1a000104 	addi	r8,r3,4
 a007128:	1ac00204 	addi	r11,r3,8
 a00712c:	6008913a 	slli	r4,r12,4
 a007130:	1a800304 	addi	r10,r3,12
 a007134:	1813883a 	mov	r9,r3
 a007138:	21000504 	addi	r4,r4,20
 a00713c:	1909883a 	add	r4,r3,r4
 a007140:	49800015 	stw	r6,0(r9)
 a007144:	41800015 	stw	r6,0(r8)
 a007148:	59800015 	stw	r6,0(r11)
 a00714c:	51800015 	stw	r6,0(r10)
 a007150:	42000404 	addi	r8,r8,16
 a007154:	4a400404 	addi	r9,r9,16
 a007158:	5ac00404 	addi	r11,r11,16
 a00715c:	52800404 	addi	r10,r10,16
 a007160:	413ff71e 	bne	r8,r4,a007140 <__alt_mem_flash+0xfe006140>
 a007164:	63000044 	addi	r12,r12,1
 a007168:	6018913a 	slli	r12,r12,4
 a00716c:	39c003cc 	andi	r7,r7,15
 a007170:	010000c4 	movi	r4,3
 a007174:	1b07883a 	add	r3,r3,r12
 a007178:	21c00e2e 	bgeu	r4,r7,a0071b4 <memset+0x100>
 a00717c:	1813883a 	mov	r9,r3
 a007180:	3811883a 	mov	r8,r7
 a007184:	010000c4 	movi	r4,3
 a007188:	49800015 	stw	r6,0(r9)
 a00718c:	423fff04 	addi	r8,r8,-4
 a007190:	4a400104 	addi	r9,r9,4
 a007194:	223ffc36 	bltu	r4,r8,a007188 <__alt_mem_flash+0xfe006188>
 a007198:	393fff04 	addi	r4,r7,-4
 a00719c:	2008d0ba 	srli	r4,r4,2
 a0071a0:	39c000cc 	andi	r7,r7,3
 a0071a4:	21000044 	addi	r4,r4,1
 a0071a8:	2109883a 	add	r4,r4,r4
 a0071ac:	2109883a 	add	r4,r4,r4
 a0071b0:	1907883a 	add	r3,r3,r4
 a0071b4:	38000526 	beq	r7,zero,a0071cc <memset+0x118>
 a0071b8:	19cf883a 	add	r7,r3,r7
 a0071bc:	19400005 	stb	r5,0(r3)
 a0071c0:	18c00044 	addi	r3,r3,1
 a0071c4:	38fffd1e 	bne	r7,r3,a0071bc <__alt_mem_flash+0xfe0061bc>
 a0071c8:	f800283a 	ret
 a0071cc:	f800283a 	ret
 a0071d0:	2007883a 	mov	r3,r4
 a0071d4:	300f883a 	mov	r7,r6
 a0071d8:	003fc706 	br	a0070f8 <__alt_mem_flash+0xfe0060f8>

0a0071dc <_Balloc>:
 a0071dc:	20801317 	ldw	r2,76(r4)
 a0071e0:	defffc04 	addi	sp,sp,-16
 a0071e4:	dc400115 	stw	r17,4(sp)
 a0071e8:	dc000015 	stw	r16,0(sp)
 a0071ec:	dfc00315 	stw	ra,12(sp)
 a0071f0:	dc800215 	stw	r18,8(sp)
 a0071f4:	2023883a 	mov	r17,r4
 a0071f8:	2821883a 	mov	r16,r5
 a0071fc:	10000f26 	beq	r2,zero,a00723c <_Balloc+0x60>
 a007200:	8407883a 	add	r3,r16,r16
 a007204:	18c7883a 	add	r3,r3,r3
 a007208:	10c7883a 	add	r3,r2,r3
 a00720c:	18800017 	ldw	r2,0(r3)
 a007210:	10001126 	beq	r2,zero,a007258 <_Balloc+0x7c>
 a007214:	11000017 	ldw	r4,0(r2)
 a007218:	19000015 	stw	r4,0(r3)
 a00721c:	10000415 	stw	zero,16(r2)
 a007220:	10000315 	stw	zero,12(r2)
 a007224:	dfc00317 	ldw	ra,12(sp)
 a007228:	dc800217 	ldw	r18,8(sp)
 a00722c:	dc400117 	ldw	r17,4(sp)
 a007230:	dc000017 	ldw	r16,0(sp)
 a007234:	dec00404 	addi	sp,sp,16
 a007238:	f800283a 	ret
 a00723c:	01800844 	movi	r6,33
 a007240:	01400104 	movi	r5,4
 a007244:	a009db80 	call	a009db8 <_calloc_r>
 a007248:	88801315 	stw	r2,76(r17)
 a00724c:	103fec1e 	bne	r2,zero,a007200 <__alt_mem_flash+0xfe006200>
 a007250:	0005883a 	mov	r2,zero
 a007254:	003ff306 	br	a007224 <__alt_mem_flash+0xfe006224>
 a007258:	01400044 	movi	r5,1
 a00725c:	2c24983a 	sll	r18,r5,r16
 a007260:	8809883a 	mov	r4,r17
 a007264:	91800144 	addi	r6,r18,5
 a007268:	318d883a 	add	r6,r6,r6
 a00726c:	318d883a 	add	r6,r6,r6
 a007270:	a009db80 	call	a009db8 <_calloc_r>
 a007274:	103ff626 	beq	r2,zero,a007250 <__alt_mem_flash+0xfe006250>
 a007278:	14000115 	stw	r16,4(r2)
 a00727c:	14800215 	stw	r18,8(r2)
 a007280:	003fe606 	br	a00721c <__alt_mem_flash+0xfe00621c>

0a007284 <_Bfree>:
 a007284:	28000826 	beq	r5,zero,a0072a8 <_Bfree+0x24>
 a007288:	28c00117 	ldw	r3,4(r5)
 a00728c:	20801317 	ldw	r2,76(r4)
 a007290:	18c7883a 	add	r3,r3,r3
 a007294:	18c7883a 	add	r3,r3,r3
 a007298:	10c5883a 	add	r2,r2,r3
 a00729c:	10c00017 	ldw	r3,0(r2)
 a0072a0:	28c00015 	stw	r3,0(r5)
 a0072a4:	11400015 	stw	r5,0(r2)
 a0072a8:	f800283a 	ret

0a0072ac <__multadd>:
 a0072ac:	defff704 	addi	sp,sp,-36
 a0072b0:	dc800215 	stw	r18,8(sp)
 a0072b4:	2c800417 	ldw	r18,16(r5)
 a0072b8:	dd800615 	stw	r22,24(sp)
 a0072bc:	dd400515 	stw	r21,20(sp)
 a0072c0:	dd000415 	stw	r20,16(sp)
 a0072c4:	dcc00315 	stw	r19,12(sp)
 a0072c8:	dc400115 	stw	r17,4(sp)
 a0072cc:	dc000015 	stw	r16,0(sp)
 a0072d0:	dfc00815 	stw	ra,32(sp)
 a0072d4:	ddc00715 	stw	r23,28(sp)
 a0072d8:	2827883a 	mov	r19,r5
 a0072dc:	2029883a 	mov	r20,r4
 a0072e0:	3023883a 	mov	r17,r6
 a0072e4:	3821883a 	mov	r16,r7
 a0072e8:	2d400504 	addi	r21,r5,20
 a0072ec:	002d883a 	mov	r22,zero
 a0072f0:	adc00017 	ldw	r23,0(r21)
 a0072f4:	880b883a 	mov	r5,r17
 a0072f8:	ad400104 	addi	r21,r21,4
 a0072fc:	b93fffcc 	andi	r4,r23,65535
 a007300:	a0019a40 	call	a0019a4 <__mulsi3>
 a007304:	b808d43a 	srli	r4,r23,16
 a007308:	880b883a 	mov	r5,r17
 a00730c:	1421883a 	add	r16,r2,r16
 a007310:	a0019a40 	call	a0019a4 <__mulsi3>
 a007314:	800ed43a 	srli	r7,r16,16
 a007318:	80ffffcc 	andi	r3,r16,65535
 a00731c:	b5800044 	addi	r22,r22,1
 a007320:	11c5883a 	add	r2,r2,r7
 a007324:	100e943a 	slli	r7,r2,16
 a007328:	1020d43a 	srli	r16,r2,16
 a00732c:	38c7883a 	add	r3,r7,r3
 a007330:	a8ffff15 	stw	r3,-4(r21)
 a007334:	b4bfee16 	blt	r22,r18,a0072f0 <__alt_mem_flash+0xfe0062f0>
 a007338:	80000926 	beq	r16,zero,a007360 <__multadd+0xb4>
 a00733c:	98800217 	ldw	r2,8(r19)
 a007340:	9080130e 	bge	r18,r2,a007390 <__multadd+0xe4>
 a007344:	90800144 	addi	r2,r18,5
 a007348:	1085883a 	add	r2,r2,r2
 a00734c:	1085883a 	add	r2,r2,r2
 a007350:	9885883a 	add	r2,r19,r2
 a007354:	14000015 	stw	r16,0(r2)
 a007358:	94800044 	addi	r18,r18,1
 a00735c:	9c800415 	stw	r18,16(r19)
 a007360:	9805883a 	mov	r2,r19
 a007364:	dfc00817 	ldw	ra,32(sp)
 a007368:	ddc00717 	ldw	r23,28(sp)
 a00736c:	dd800617 	ldw	r22,24(sp)
 a007370:	dd400517 	ldw	r21,20(sp)
 a007374:	dd000417 	ldw	r20,16(sp)
 a007378:	dcc00317 	ldw	r19,12(sp)
 a00737c:	dc800217 	ldw	r18,8(sp)
 a007380:	dc400117 	ldw	r17,4(sp)
 a007384:	dc000017 	ldw	r16,0(sp)
 a007388:	dec00904 	addi	sp,sp,36
 a00738c:	f800283a 	ret
 a007390:	99400117 	ldw	r5,4(r19)
 a007394:	a009883a 	mov	r4,r20
 a007398:	29400044 	addi	r5,r5,1
 a00739c:	a0071dc0 	call	a0071dc <_Balloc>
 a0073a0:	99800417 	ldw	r6,16(r19)
 a0073a4:	99400304 	addi	r5,r19,12
 a0073a8:	11000304 	addi	r4,r2,12
 a0073ac:	31800084 	addi	r6,r6,2
 a0073b0:	318d883a 	add	r6,r6,r6
 a0073b4:	318d883a 	add	r6,r6,r6
 a0073b8:	1023883a 	mov	r17,r2
 a0073bc:	a006f6c0 	call	a006f6c <memcpy>
 a0073c0:	98000a26 	beq	r19,zero,a0073ec <__multadd+0x140>
 a0073c4:	98c00117 	ldw	r3,4(r19)
 a0073c8:	a0801317 	ldw	r2,76(r20)
 a0073cc:	18c7883a 	add	r3,r3,r3
 a0073d0:	18c7883a 	add	r3,r3,r3
 a0073d4:	10c5883a 	add	r2,r2,r3
 a0073d8:	10c00017 	ldw	r3,0(r2)
 a0073dc:	98c00015 	stw	r3,0(r19)
 a0073e0:	14c00015 	stw	r19,0(r2)
 a0073e4:	8827883a 	mov	r19,r17
 a0073e8:	003fd606 	br	a007344 <__alt_mem_flash+0xfe006344>
 a0073ec:	8827883a 	mov	r19,r17
 a0073f0:	003fd406 	br	a007344 <__alt_mem_flash+0xfe006344>

0a0073f4 <__s2b>:
 a0073f4:	defff904 	addi	sp,sp,-28
 a0073f8:	dc400115 	stw	r17,4(sp)
 a0073fc:	dc000015 	stw	r16,0(sp)
 a007400:	2023883a 	mov	r17,r4
 a007404:	2821883a 	mov	r16,r5
 a007408:	39000204 	addi	r4,r7,8
 a00740c:	01400244 	movi	r5,9
 a007410:	dcc00315 	stw	r19,12(sp)
 a007414:	dc800215 	stw	r18,8(sp)
 a007418:	dfc00615 	stw	ra,24(sp)
 a00741c:	dd400515 	stw	r21,20(sp)
 a007420:	dd000415 	stw	r20,16(sp)
 a007424:	3825883a 	mov	r18,r7
 a007428:	3027883a 	mov	r19,r6
 a00742c:	a00bd980 	call	a00bd98 <__divsi3>
 a007430:	00c00044 	movi	r3,1
 a007434:	000b883a 	mov	r5,zero
 a007438:	1880030e 	bge	r3,r2,a007448 <__s2b+0x54>
 a00743c:	18c7883a 	add	r3,r3,r3
 a007440:	29400044 	addi	r5,r5,1
 a007444:	18bffd16 	blt	r3,r2,a00743c <__alt_mem_flash+0xfe00643c>
 a007448:	8809883a 	mov	r4,r17
 a00744c:	a0071dc0 	call	a0071dc <_Balloc>
 a007450:	d8c00717 	ldw	r3,28(sp)
 a007454:	10c00515 	stw	r3,20(r2)
 a007458:	00c00044 	movi	r3,1
 a00745c:	10c00415 	stw	r3,16(r2)
 a007460:	00c00244 	movi	r3,9
 a007464:	1cc0210e 	bge	r3,r19,a0074ec <__s2b+0xf8>
 a007468:	80eb883a 	add	r21,r16,r3
 a00746c:	a829883a 	mov	r20,r21
 a007470:	84e1883a 	add	r16,r16,r19
 a007474:	a1c00007 	ldb	r7,0(r20)
 a007478:	01800284 	movi	r6,10
 a00747c:	a5000044 	addi	r20,r20,1
 a007480:	100b883a 	mov	r5,r2
 a007484:	39fff404 	addi	r7,r7,-48
 a007488:	8809883a 	mov	r4,r17
 a00748c:	a0072ac0 	call	a0072ac <__multadd>
 a007490:	a43ff81e 	bne	r20,r16,a007474 <__alt_mem_flash+0xfe006474>
 a007494:	ace1883a 	add	r16,r21,r19
 a007498:	843ffe04 	addi	r16,r16,-8
 a00749c:	9c800a0e 	bge	r19,r18,a0074c8 <__s2b+0xd4>
 a0074a0:	94e5c83a 	sub	r18,r18,r19
 a0074a4:	84a5883a 	add	r18,r16,r18
 a0074a8:	81c00007 	ldb	r7,0(r16)
 a0074ac:	01800284 	movi	r6,10
 a0074b0:	84000044 	addi	r16,r16,1
 a0074b4:	100b883a 	mov	r5,r2
 a0074b8:	39fff404 	addi	r7,r7,-48
 a0074bc:	8809883a 	mov	r4,r17
 a0074c0:	a0072ac0 	call	a0072ac <__multadd>
 a0074c4:	84bff81e 	bne	r16,r18,a0074a8 <__alt_mem_flash+0xfe0064a8>
 a0074c8:	dfc00617 	ldw	ra,24(sp)
 a0074cc:	dd400517 	ldw	r21,20(sp)
 a0074d0:	dd000417 	ldw	r20,16(sp)
 a0074d4:	dcc00317 	ldw	r19,12(sp)
 a0074d8:	dc800217 	ldw	r18,8(sp)
 a0074dc:	dc400117 	ldw	r17,4(sp)
 a0074e0:	dc000017 	ldw	r16,0(sp)
 a0074e4:	dec00704 	addi	sp,sp,28
 a0074e8:	f800283a 	ret
 a0074ec:	84000284 	addi	r16,r16,10
 a0074f0:	1827883a 	mov	r19,r3
 a0074f4:	003fe906 	br	a00749c <__alt_mem_flash+0xfe00649c>

0a0074f8 <__hi0bits>:
 a0074f8:	20bfffec 	andhi	r2,r4,65535
 a0074fc:	1000141e 	bne	r2,zero,a007550 <__hi0bits+0x58>
 a007500:	2008943a 	slli	r4,r4,16
 a007504:	00800404 	movi	r2,16
 a007508:	20ffc02c 	andhi	r3,r4,65280
 a00750c:	1800021e 	bne	r3,zero,a007518 <__hi0bits+0x20>
 a007510:	2008923a 	slli	r4,r4,8
 a007514:	10800204 	addi	r2,r2,8
 a007518:	20fc002c 	andhi	r3,r4,61440
 a00751c:	1800021e 	bne	r3,zero,a007528 <__hi0bits+0x30>
 a007520:	2008913a 	slli	r4,r4,4
 a007524:	10800104 	addi	r2,r2,4
 a007528:	20f0002c 	andhi	r3,r4,49152
 a00752c:	1800031e 	bne	r3,zero,a00753c <__hi0bits+0x44>
 a007530:	2109883a 	add	r4,r4,r4
 a007534:	10800084 	addi	r2,r2,2
 a007538:	2109883a 	add	r4,r4,r4
 a00753c:	20000316 	blt	r4,zero,a00754c <__hi0bits+0x54>
 a007540:	2110002c 	andhi	r4,r4,16384
 a007544:	2000041e 	bne	r4,zero,a007558 <__hi0bits+0x60>
 a007548:	00800804 	movi	r2,32
 a00754c:	f800283a 	ret
 a007550:	0005883a 	mov	r2,zero
 a007554:	003fec06 	br	a007508 <__alt_mem_flash+0xfe006508>
 a007558:	10800044 	addi	r2,r2,1
 a00755c:	f800283a 	ret

0a007560 <__lo0bits>:
 a007560:	20c00017 	ldw	r3,0(r4)
 a007564:	188001cc 	andi	r2,r3,7
 a007568:	10000826 	beq	r2,zero,a00758c <__lo0bits+0x2c>
 a00756c:	1880004c 	andi	r2,r3,1
 a007570:	1000211e 	bne	r2,zero,a0075f8 <__lo0bits+0x98>
 a007574:	1880008c 	andi	r2,r3,2
 a007578:	1000211e 	bne	r2,zero,a007600 <__lo0bits+0xa0>
 a00757c:	1806d0ba 	srli	r3,r3,2
 a007580:	00800084 	movi	r2,2
 a007584:	20c00015 	stw	r3,0(r4)
 a007588:	f800283a 	ret
 a00758c:	18bfffcc 	andi	r2,r3,65535
 a007590:	10001326 	beq	r2,zero,a0075e0 <__lo0bits+0x80>
 a007594:	0005883a 	mov	r2,zero
 a007598:	19403fcc 	andi	r5,r3,255
 a00759c:	2800021e 	bne	r5,zero,a0075a8 <__lo0bits+0x48>
 a0075a0:	1806d23a 	srli	r3,r3,8
 a0075a4:	10800204 	addi	r2,r2,8
 a0075a8:	194003cc 	andi	r5,r3,15
 a0075ac:	2800021e 	bne	r5,zero,a0075b8 <__lo0bits+0x58>
 a0075b0:	1806d13a 	srli	r3,r3,4
 a0075b4:	10800104 	addi	r2,r2,4
 a0075b8:	194000cc 	andi	r5,r3,3
 a0075bc:	2800021e 	bne	r5,zero,a0075c8 <__lo0bits+0x68>
 a0075c0:	1806d0ba 	srli	r3,r3,2
 a0075c4:	10800084 	addi	r2,r2,2
 a0075c8:	1940004c 	andi	r5,r3,1
 a0075cc:	2800081e 	bne	r5,zero,a0075f0 <__lo0bits+0x90>
 a0075d0:	1806d07a 	srli	r3,r3,1
 a0075d4:	1800051e 	bne	r3,zero,a0075ec <__lo0bits+0x8c>
 a0075d8:	00800804 	movi	r2,32
 a0075dc:	f800283a 	ret
 a0075e0:	1806d43a 	srli	r3,r3,16
 a0075e4:	00800404 	movi	r2,16
 a0075e8:	003feb06 	br	a007598 <__alt_mem_flash+0xfe006598>
 a0075ec:	10800044 	addi	r2,r2,1
 a0075f0:	20c00015 	stw	r3,0(r4)
 a0075f4:	f800283a 	ret
 a0075f8:	0005883a 	mov	r2,zero
 a0075fc:	f800283a 	ret
 a007600:	1806d07a 	srli	r3,r3,1
 a007604:	00800044 	movi	r2,1
 a007608:	20c00015 	stw	r3,0(r4)
 a00760c:	f800283a 	ret

0a007610 <__i2b>:
 a007610:	defffd04 	addi	sp,sp,-12
 a007614:	dc000015 	stw	r16,0(sp)
 a007618:	04000044 	movi	r16,1
 a00761c:	dc400115 	stw	r17,4(sp)
 a007620:	2823883a 	mov	r17,r5
 a007624:	800b883a 	mov	r5,r16
 a007628:	dfc00215 	stw	ra,8(sp)
 a00762c:	a0071dc0 	call	a0071dc <_Balloc>
 a007630:	14400515 	stw	r17,20(r2)
 a007634:	14000415 	stw	r16,16(r2)
 a007638:	dfc00217 	ldw	ra,8(sp)
 a00763c:	dc400117 	ldw	r17,4(sp)
 a007640:	dc000017 	ldw	r16,0(sp)
 a007644:	dec00304 	addi	sp,sp,12
 a007648:	f800283a 	ret

0a00764c <__multiply>:
 a00764c:	deffef04 	addi	sp,sp,-68
 a007650:	dc400815 	stw	r17,32(sp)
 a007654:	dc000715 	stw	r16,28(sp)
 a007658:	34400417 	ldw	r17,16(r6)
 a00765c:	2c000417 	ldw	r16,16(r5)
 a007660:	dd800d15 	stw	r22,52(sp)
 a007664:	dc800915 	stw	r18,36(sp)
 a007668:	dfc01015 	stw	ra,64(sp)
 a00766c:	df000f15 	stw	fp,60(sp)
 a007670:	ddc00e15 	stw	r23,56(sp)
 a007674:	dd400c15 	stw	r21,48(sp)
 a007678:	dd000b15 	stw	r20,44(sp)
 a00767c:	dcc00a15 	stw	r19,40(sp)
 a007680:	2825883a 	mov	r18,r5
 a007684:	302d883a 	mov	r22,r6
 a007688:	8440050e 	bge	r16,r17,a0076a0 <__multiply+0x54>
 a00768c:	8007883a 	mov	r3,r16
 a007690:	3025883a 	mov	r18,r6
 a007694:	8821883a 	mov	r16,r17
 a007698:	282d883a 	mov	r22,r5
 a00769c:	1823883a 	mov	r17,r3
 a0076a0:	90800217 	ldw	r2,8(r18)
 a0076a4:	8447883a 	add	r3,r16,r17
 a0076a8:	d8c00215 	stw	r3,8(sp)
 a0076ac:	91400117 	ldw	r5,4(r18)
 a0076b0:	10c0010e 	bge	r2,r3,a0076b8 <__multiply+0x6c>
 a0076b4:	29400044 	addi	r5,r5,1
 a0076b8:	a0071dc0 	call	a0071dc <_Balloc>
 a0076bc:	d8c00217 	ldw	r3,8(sp)
 a0076c0:	d8800615 	stw	r2,24(sp)
 a0076c4:	18eb883a 	add	r21,r3,r3
 a0076c8:	ad6b883a 	add	r21,r21,r21
 a0076cc:	10c00504 	addi	r3,r2,20
 a0076d0:	1d6b883a 	add	r21,r3,r21
 a0076d4:	d8c00115 	stw	r3,4(sp)
 a0076d8:	dd400315 	stw	r21,12(sp)
 a0076dc:	1805883a 	mov	r2,r3
 a0076e0:	1d40042e 	bgeu	r3,r21,a0076f4 <__multiply+0xa8>
 a0076e4:	d8c00317 	ldw	r3,12(sp)
 a0076e8:	10000015 	stw	zero,0(r2)
 a0076ec:	10800104 	addi	r2,r2,4
 a0076f0:	10fffc36 	bltu	r2,r3,a0076e4 <__alt_mem_flash+0xfe0066e4>
 a0076f4:	8c63883a 	add	r17,r17,r17
 a0076f8:	b5800504 	addi	r22,r22,20
 a0076fc:	8c63883a 	add	r17,r17,r17
 a007700:	94800504 	addi	r18,r18,20
 a007704:	8421883a 	add	r16,r16,r16
 a007708:	b463883a 	add	r17,r22,r17
 a00770c:	8421883a 	add	r16,r16,r16
 a007710:	dd800015 	stw	r22,0(sp)
 a007714:	dc800415 	stw	r18,16(sp)
 a007718:	dc400515 	stw	r17,20(sp)
 a00771c:	9429883a 	add	r20,r18,r16
 a007720:	b4404f2e 	bgeu	r22,r17,a007860 <__multiply+0x214>
 a007724:	d8c00017 	ldw	r3,0(sp)
 a007728:	1c800017 	ldw	r18,0(r3)
 a00772c:	947fffcc 	andi	r17,r18,65535
 a007730:	88001e26 	beq	r17,zero,a0077ac <__multiply+0x160>
 a007734:	dd800117 	ldw	r22,4(sp)
 a007738:	dd400417 	ldw	r21,16(sp)
 a00773c:	0027883a 	mov	r19,zero
 a007740:	ac800017 	ldw	r18,0(r21)
 a007744:	b4000017 	ldw	r16,0(r22)
 a007748:	880b883a 	mov	r5,r17
 a00774c:	913fffcc 	andi	r4,r18,65535
 a007750:	a0019a40 	call	a0019a4 <__mulsi3>
 a007754:	9008d43a 	srli	r4,r18,16
 a007758:	84bfffcc 	andi	r18,r16,65535
 a00775c:	1485883a 	add	r2,r2,r18
 a007760:	14e5883a 	add	r18,r2,r19
 a007764:	8020d43a 	srli	r16,r16,16
 a007768:	9026d43a 	srli	r19,r18,16
 a00776c:	880b883a 	mov	r5,r17
 a007770:	a0019a40 	call	a0019a4 <__mulsi3>
 a007774:	1405883a 	add	r2,r2,r16
 a007778:	14e1883a 	add	r16,r2,r19
 a00777c:	90ffffcc 	andi	r3,r18,65535
 a007780:	8024943a 	slli	r18,r16,16
 a007784:	ad400104 	addi	r21,r21,4
 a007788:	b005883a 	mov	r2,r22
 a00778c:	90c6b03a 	or	r3,r18,r3
 a007790:	b0c00015 	stw	r3,0(r22)
 a007794:	8026d43a 	srli	r19,r16,16
 a007798:	b5800104 	addi	r22,r22,4
 a00779c:	ad3fe836 	bltu	r21,r20,a007740 <__alt_mem_flash+0xfe006740>
 a0077a0:	d8c00017 	ldw	r3,0(sp)
 a0077a4:	14c00115 	stw	r19,4(r2)
 a0077a8:	1c800017 	ldw	r18,0(r3)
 a0077ac:	9024d43a 	srli	r18,r18,16
 a0077b0:	90002226 	beq	r18,zero,a00783c <__multiply+0x1f0>
 a0077b4:	d8c00117 	ldw	r3,4(sp)
 a0077b8:	dd800417 	ldw	r22,16(sp)
 a0077bc:	002f883a 	mov	r23,zero
 a0077c0:	1f000017 	ldw	fp,0(r3)
 a0077c4:	1823883a 	mov	r17,r3
 a0077c8:	182b883a 	mov	r21,r3
 a0077cc:	e021883a 	mov	r16,fp
 a0077d0:	00000106 	br	a0077d8 <__multiply+0x18c>
 a0077d4:	982b883a 	mov	r21,r19
 a0077d8:	b100000b 	ldhu	r4,0(r22)
 a0077dc:	8020d43a 	srli	r16,r16,16
 a0077e0:	900b883a 	mov	r5,r18
 a0077e4:	a0019a40 	call	a0019a4 <__mulsi3>
 a0077e8:	1405883a 	add	r2,r2,r16
 a0077ec:	15ef883a 	add	r23,r2,r23
 a0077f0:	b804943a 	slli	r2,r23,16
 a0077f4:	e0ffffcc 	andi	r3,fp,65535
 a0077f8:	8c400104 	addi	r17,r17,4
 a0077fc:	10c6b03a 	or	r3,r2,r3
 a007800:	88ffff15 	stw	r3,-4(r17)
 a007804:	b5800104 	addi	r22,r22,4
 a007808:	b13fff17 	ldw	r4,-4(r22)
 a00780c:	acc00104 	addi	r19,r21,4
 a007810:	900b883a 	mov	r5,r18
 a007814:	2008d43a 	srli	r4,r4,16
 a007818:	9c000017 	ldw	r16,0(r19)
 a00781c:	a0019a40 	call	a0019a4 <__mulsi3>
 a007820:	b806d43a 	srli	r3,r23,16
 a007824:	813fffcc 	andi	r4,r16,65535
 a007828:	1105883a 	add	r2,r2,r4
 a00782c:	10f9883a 	add	fp,r2,r3
 a007830:	e02ed43a 	srli	r23,fp,16
 a007834:	b53fe736 	bltu	r22,r20,a0077d4 <__alt_mem_flash+0xfe0067d4>
 a007838:	af000115 	stw	fp,4(r21)
 a00783c:	d8c00017 	ldw	r3,0(sp)
 a007840:	d9000517 	ldw	r4,20(sp)
 a007844:	18c00104 	addi	r3,r3,4
 a007848:	d8c00015 	stw	r3,0(sp)
 a00784c:	d8c00117 	ldw	r3,4(sp)
 a007850:	18c00104 	addi	r3,r3,4
 a007854:	d8c00115 	stw	r3,4(sp)
 a007858:	d8c00017 	ldw	r3,0(sp)
 a00785c:	193fb136 	bltu	r3,r4,a007724 <__alt_mem_flash+0xfe006724>
 a007860:	d8c00217 	ldw	r3,8(sp)
 a007864:	00c00c0e 	bge	zero,r3,a007898 <__multiply+0x24c>
 a007868:	d8c00317 	ldw	r3,12(sp)
 a00786c:	18bfff17 	ldw	r2,-4(r3)
 a007870:	1d7fff04 	addi	r21,r3,-4
 a007874:	10000326 	beq	r2,zero,a007884 <__multiply+0x238>
 a007878:	00000706 	br	a007898 <__multiply+0x24c>
 a00787c:	a8800017 	ldw	r2,0(r21)
 a007880:	1000051e 	bne	r2,zero,a007898 <__multiply+0x24c>
 a007884:	d8c00217 	ldw	r3,8(sp)
 a007888:	ad7fff04 	addi	r21,r21,-4
 a00788c:	18ffffc4 	addi	r3,r3,-1
 a007890:	d8c00215 	stw	r3,8(sp)
 a007894:	183ff91e 	bne	r3,zero,a00787c <__alt_mem_flash+0xfe00687c>
 a007898:	d8c00617 	ldw	r3,24(sp)
 a00789c:	d9000217 	ldw	r4,8(sp)
 a0078a0:	1805883a 	mov	r2,r3
 a0078a4:	19000415 	stw	r4,16(r3)
 a0078a8:	dfc01017 	ldw	ra,64(sp)
 a0078ac:	df000f17 	ldw	fp,60(sp)
 a0078b0:	ddc00e17 	ldw	r23,56(sp)
 a0078b4:	dd800d17 	ldw	r22,52(sp)
 a0078b8:	dd400c17 	ldw	r21,48(sp)
 a0078bc:	dd000b17 	ldw	r20,44(sp)
 a0078c0:	dcc00a17 	ldw	r19,40(sp)
 a0078c4:	dc800917 	ldw	r18,36(sp)
 a0078c8:	dc400817 	ldw	r17,32(sp)
 a0078cc:	dc000717 	ldw	r16,28(sp)
 a0078d0:	dec01104 	addi	sp,sp,68
 a0078d4:	f800283a 	ret

0a0078d8 <__pow5mult>:
 a0078d8:	defffa04 	addi	sp,sp,-24
 a0078dc:	dcc00315 	stw	r19,12(sp)
 a0078e0:	dc000015 	stw	r16,0(sp)
 a0078e4:	dfc00515 	stw	ra,20(sp)
 a0078e8:	dd000415 	stw	r20,16(sp)
 a0078ec:	dc800215 	stw	r18,8(sp)
 a0078f0:	dc400115 	stw	r17,4(sp)
 a0078f4:	308000cc 	andi	r2,r6,3
 a0078f8:	3021883a 	mov	r16,r6
 a0078fc:	2027883a 	mov	r19,r4
 a007900:	10002f1e 	bne	r2,zero,a0079c0 <__pow5mult+0xe8>
 a007904:	2825883a 	mov	r18,r5
 a007908:	8021d0ba 	srai	r16,r16,2
 a00790c:	80001a26 	beq	r16,zero,a007978 <__pow5mult+0xa0>
 a007910:	9c401217 	ldw	r17,72(r19)
 a007914:	8800061e 	bne	r17,zero,a007930 <__pow5mult+0x58>
 a007918:	00003406 	br	a0079ec <__pow5mult+0x114>
 a00791c:	8021d07a 	srai	r16,r16,1
 a007920:	80001526 	beq	r16,zero,a007978 <__pow5mult+0xa0>
 a007924:	88800017 	ldw	r2,0(r17)
 a007928:	10001c26 	beq	r2,zero,a00799c <__pow5mult+0xc4>
 a00792c:	1023883a 	mov	r17,r2
 a007930:	8080004c 	andi	r2,r16,1
 a007934:	103ff926 	beq	r2,zero,a00791c <__alt_mem_flash+0xfe00691c>
 a007938:	880d883a 	mov	r6,r17
 a00793c:	900b883a 	mov	r5,r18
 a007940:	9809883a 	mov	r4,r19
 a007944:	a00764c0 	call	a00764c <__multiply>
 a007948:	90001b26 	beq	r18,zero,a0079b8 <__pow5mult+0xe0>
 a00794c:	91000117 	ldw	r4,4(r18)
 a007950:	98c01317 	ldw	r3,76(r19)
 a007954:	8021d07a 	srai	r16,r16,1
 a007958:	2109883a 	add	r4,r4,r4
 a00795c:	2109883a 	add	r4,r4,r4
 a007960:	1907883a 	add	r3,r3,r4
 a007964:	19000017 	ldw	r4,0(r3)
 a007968:	91000015 	stw	r4,0(r18)
 a00796c:	1c800015 	stw	r18,0(r3)
 a007970:	1025883a 	mov	r18,r2
 a007974:	803feb1e 	bne	r16,zero,a007924 <__alt_mem_flash+0xfe006924>
 a007978:	9005883a 	mov	r2,r18
 a00797c:	dfc00517 	ldw	ra,20(sp)
 a007980:	dd000417 	ldw	r20,16(sp)
 a007984:	dcc00317 	ldw	r19,12(sp)
 a007988:	dc800217 	ldw	r18,8(sp)
 a00798c:	dc400117 	ldw	r17,4(sp)
 a007990:	dc000017 	ldw	r16,0(sp)
 a007994:	dec00604 	addi	sp,sp,24
 a007998:	f800283a 	ret
 a00799c:	880d883a 	mov	r6,r17
 a0079a0:	880b883a 	mov	r5,r17
 a0079a4:	9809883a 	mov	r4,r19
 a0079a8:	a00764c0 	call	a00764c <__multiply>
 a0079ac:	88800015 	stw	r2,0(r17)
 a0079b0:	10000015 	stw	zero,0(r2)
 a0079b4:	003fdd06 	br	a00792c <__alt_mem_flash+0xfe00692c>
 a0079b8:	1025883a 	mov	r18,r2
 a0079bc:	003fd706 	br	a00791c <__alt_mem_flash+0xfe00691c>
 a0079c0:	10bfffc4 	addi	r2,r2,-1
 a0079c4:	1085883a 	add	r2,r2,r2
 a0079c8:	00c28074 	movhi	r3,2561
 a0079cc:	18c71b04 	addi	r3,r3,7276
 a0079d0:	1085883a 	add	r2,r2,r2
 a0079d4:	1885883a 	add	r2,r3,r2
 a0079d8:	11800017 	ldw	r6,0(r2)
 a0079dc:	000f883a 	mov	r7,zero
 a0079e0:	a0072ac0 	call	a0072ac <__multadd>
 a0079e4:	1025883a 	mov	r18,r2
 a0079e8:	003fc706 	br	a007908 <__alt_mem_flash+0xfe006908>
 a0079ec:	05000044 	movi	r20,1
 a0079f0:	a00b883a 	mov	r5,r20
 a0079f4:	9809883a 	mov	r4,r19
 a0079f8:	a0071dc0 	call	a0071dc <_Balloc>
 a0079fc:	1023883a 	mov	r17,r2
 a007a00:	00809c44 	movi	r2,625
 a007a04:	88800515 	stw	r2,20(r17)
 a007a08:	8d000415 	stw	r20,16(r17)
 a007a0c:	9c401215 	stw	r17,72(r19)
 a007a10:	88000015 	stw	zero,0(r17)
 a007a14:	003fc606 	br	a007930 <__alt_mem_flash+0xfe006930>

0a007a18 <__lshift>:
 a007a18:	defff904 	addi	sp,sp,-28
 a007a1c:	dd400515 	stw	r21,20(sp)
 a007a20:	dcc00315 	stw	r19,12(sp)
 a007a24:	302bd17a 	srai	r21,r6,5
 a007a28:	2cc00417 	ldw	r19,16(r5)
 a007a2c:	28800217 	ldw	r2,8(r5)
 a007a30:	dd000415 	stw	r20,16(sp)
 a007a34:	ace7883a 	add	r19,r21,r19
 a007a38:	dc800215 	stw	r18,8(sp)
 a007a3c:	dc400115 	stw	r17,4(sp)
 a007a40:	dc000015 	stw	r16,0(sp)
 a007a44:	dfc00615 	stw	ra,24(sp)
 a007a48:	9c000044 	addi	r16,r19,1
 a007a4c:	2823883a 	mov	r17,r5
 a007a50:	3029883a 	mov	r20,r6
 a007a54:	2025883a 	mov	r18,r4
 a007a58:	29400117 	ldw	r5,4(r5)
 a007a5c:	1400030e 	bge	r2,r16,a007a6c <__lshift+0x54>
 a007a60:	1085883a 	add	r2,r2,r2
 a007a64:	29400044 	addi	r5,r5,1
 a007a68:	143ffd16 	blt	r2,r16,a007a60 <__alt_mem_flash+0xfe006a60>
 a007a6c:	9009883a 	mov	r4,r18
 a007a70:	a0071dc0 	call	a0071dc <_Balloc>
 a007a74:	10c00504 	addi	r3,r2,20
 a007a78:	0540070e 	bge	zero,r21,a007a98 <__lshift+0x80>
 a007a7c:	ad6b883a 	add	r21,r21,r21
 a007a80:	ad6b883a 	add	r21,r21,r21
 a007a84:	1809883a 	mov	r4,r3
 a007a88:	1d47883a 	add	r3,r3,r21
 a007a8c:	20000015 	stw	zero,0(r4)
 a007a90:	21000104 	addi	r4,r4,4
 a007a94:	193ffd1e 	bne	r3,r4,a007a8c <__alt_mem_flash+0xfe006a8c>
 a007a98:	8a000417 	ldw	r8,16(r17)
 a007a9c:	89000504 	addi	r4,r17,20
 a007aa0:	a18007cc 	andi	r6,r20,31
 a007aa4:	4211883a 	add	r8,r8,r8
 a007aa8:	4211883a 	add	r8,r8,r8
 a007aac:	2211883a 	add	r8,r4,r8
 a007ab0:	30002326 	beq	r6,zero,a007b40 <__lshift+0x128>
 a007ab4:	02400804 	movi	r9,32
 a007ab8:	4993c83a 	sub	r9,r9,r6
 a007abc:	000b883a 	mov	r5,zero
 a007ac0:	21c00017 	ldw	r7,0(r4)
 a007ac4:	1815883a 	mov	r10,r3
 a007ac8:	18c00104 	addi	r3,r3,4
 a007acc:	398e983a 	sll	r7,r7,r6
 a007ad0:	21000104 	addi	r4,r4,4
 a007ad4:	394ab03a 	or	r5,r7,r5
 a007ad8:	197fff15 	stw	r5,-4(r3)
 a007adc:	217fff17 	ldw	r5,-4(r4)
 a007ae0:	2a4ad83a 	srl	r5,r5,r9
 a007ae4:	223ff636 	bltu	r4,r8,a007ac0 <__alt_mem_flash+0xfe006ac0>
 a007ae8:	51400115 	stw	r5,4(r10)
 a007aec:	28001a1e 	bne	r5,zero,a007b58 <__lshift+0x140>
 a007af0:	843fffc4 	addi	r16,r16,-1
 a007af4:	14000415 	stw	r16,16(r2)
 a007af8:	88000826 	beq	r17,zero,a007b1c <__lshift+0x104>
 a007afc:	89000117 	ldw	r4,4(r17)
 a007b00:	90c01317 	ldw	r3,76(r18)
 a007b04:	2109883a 	add	r4,r4,r4
 a007b08:	2109883a 	add	r4,r4,r4
 a007b0c:	1907883a 	add	r3,r3,r4
 a007b10:	19000017 	ldw	r4,0(r3)
 a007b14:	89000015 	stw	r4,0(r17)
 a007b18:	1c400015 	stw	r17,0(r3)
 a007b1c:	dfc00617 	ldw	ra,24(sp)
 a007b20:	dd400517 	ldw	r21,20(sp)
 a007b24:	dd000417 	ldw	r20,16(sp)
 a007b28:	dcc00317 	ldw	r19,12(sp)
 a007b2c:	dc800217 	ldw	r18,8(sp)
 a007b30:	dc400117 	ldw	r17,4(sp)
 a007b34:	dc000017 	ldw	r16,0(sp)
 a007b38:	dec00704 	addi	sp,sp,28
 a007b3c:	f800283a 	ret
 a007b40:	21400017 	ldw	r5,0(r4)
 a007b44:	18c00104 	addi	r3,r3,4
 a007b48:	21000104 	addi	r4,r4,4
 a007b4c:	197fff15 	stw	r5,-4(r3)
 a007b50:	223ffb36 	bltu	r4,r8,a007b40 <__alt_mem_flash+0xfe006b40>
 a007b54:	003fe606 	br	a007af0 <__alt_mem_flash+0xfe006af0>
 a007b58:	9c000084 	addi	r16,r19,2
 a007b5c:	003fe406 	br	a007af0 <__alt_mem_flash+0xfe006af0>

0a007b60 <__mcmp>:
 a007b60:	20800417 	ldw	r2,16(r4)
 a007b64:	28c00417 	ldw	r3,16(r5)
 a007b68:	10c5c83a 	sub	r2,r2,r3
 a007b6c:	1000111e 	bne	r2,zero,a007bb4 <__mcmp+0x54>
 a007b70:	18c7883a 	add	r3,r3,r3
 a007b74:	18c7883a 	add	r3,r3,r3
 a007b78:	21000504 	addi	r4,r4,20
 a007b7c:	29400504 	addi	r5,r5,20
 a007b80:	20c5883a 	add	r2,r4,r3
 a007b84:	28cb883a 	add	r5,r5,r3
 a007b88:	00000106 	br	a007b90 <__mcmp+0x30>
 a007b8c:	20800a2e 	bgeu	r4,r2,a007bb8 <__mcmp+0x58>
 a007b90:	10bfff04 	addi	r2,r2,-4
 a007b94:	297fff04 	addi	r5,r5,-4
 a007b98:	11800017 	ldw	r6,0(r2)
 a007b9c:	28c00017 	ldw	r3,0(r5)
 a007ba0:	30fffa26 	beq	r6,r3,a007b8c <__alt_mem_flash+0xfe006b8c>
 a007ba4:	30c00236 	bltu	r6,r3,a007bb0 <__mcmp+0x50>
 a007ba8:	00800044 	movi	r2,1
 a007bac:	f800283a 	ret
 a007bb0:	00bfffc4 	movi	r2,-1
 a007bb4:	f800283a 	ret
 a007bb8:	0005883a 	mov	r2,zero
 a007bbc:	f800283a 	ret

0a007bc0 <__mdiff>:
 a007bc0:	28c00417 	ldw	r3,16(r5)
 a007bc4:	30800417 	ldw	r2,16(r6)
 a007bc8:	defffa04 	addi	sp,sp,-24
 a007bcc:	dcc00315 	stw	r19,12(sp)
 a007bd0:	dc800215 	stw	r18,8(sp)
 a007bd4:	dfc00515 	stw	ra,20(sp)
 a007bd8:	dd000415 	stw	r20,16(sp)
 a007bdc:	dc400115 	stw	r17,4(sp)
 a007be0:	dc000015 	stw	r16,0(sp)
 a007be4:	1887c83a 	sub	r3,r3,r2
 a007be8:	2825883a 	mov	r18,r5
 a007bec:	3027883a 	mov	r19,r6
 a007bf0:	1800141e 	bne	r3,zero,a007c44 <__mdiff+0x84>
 a007bf4:	1085883a 	add	r2,r2,r2
 a007bf8:	1085883a 	add	r2,r2,r2
 a007bfc:	2a000504 	addi	r8,r5,20
 a007c00:	34000504 	addi	r16,r6,20
 a007c04:	4087883a 	add	r3,r8,r2
 a007c08:	8085883a 	add	r2,r16,r2
 a007c0c:	00000106 	br	a007c14 <__mdiff+0x54>
 a007c10:	40c0592e 	bgeu	r8,r3,a007d78 <__mdiff+0x1b8>
 a007c14:	18ffff04 	addi	r3,r3,-4
 a007c18:	10bfff04 	addi	r2,r2,-4
 a007c1c:	19c00017 	ldw	r7,0(r3)
 a007c20:	11400017 	ldw	r5,0(r2)
 a007c24:	397ffa26 	beq	r7,r5,a007c10 <__alt_mem_flash+0xfe006c10>
 a007c28:	3940592e 	bgeu	r7,r5,a007d90 <__mdiff+0x1d0>
 a007c2c:	9005883a 	mov	r2,r18
 a007c30:	4023883a 	mov	r17,r8
 a007c34:	9825883a 	mov	r18,r19
 a007c38:	05000044 	movi	r20,1
 a007c3c:	1027883a 	mov	r19,r2
 a007c40:	00000406 	br	a007c54 <__mdiff+0x94>
 a007c44:	18005616 	blt	r3,zero,a007da0 <__mdiff+0x1e0>
 a007c48:	34400504 	addi	r17,r6,20
 a007c4c:	2c000504 	addi	r16,r5,20
 a007c50:	0029883a 	mov	r20,zero
 a007c54:	91400117 	ldw	r5,4(r18)
 a007c58:	a0071dc0 	call	a0071dc <_Balloc>
 a007c5c:	92400417 	ldw	r9,16(r18)
 a007c60:	9b000417 	ldw	r12,16(r19)
 a007c64:	12c00504 	addi	r11,r2,20
 a007c68:	4a51883a 	add	r8,r9,r9
 a007c6c:	6319883a 	add	r12,r12,r12
 a007c70:	4211883a 	add	r8,r8,r8
 a007c74:	6319883a 	add	r12,r12,r12
 a007c78:	15000315 	stw	r20,12(r2)
 a007c7c:	8211883a 	add	r8,r16,r8
 a007c80:	8b19883a 	add	r12,r17,r12
 a007c84:	0007883a 	mov	r3,zero
 a007c88:	81400017 	ldw	r5,0(r16)
 a007c8c:	89c00017 	ldw	r7,0(r17)
 a007c90:	59800104 	addi	r6,r11,4
 a007c94:	293fffcc 	andi	r4,r5,65535
 a007c98:	20c7883a 	add	r3,r4,r3
 a007c9c:	393fffcc 	andi	r4,r7,65535
 a007ca0:	1909c83a 	sub	r4,r3,r4
 a007ca4:	280ad43a 	srli	r5,r5,16
 a007ca8:	380ed43a 	srli	r7,r7,16
 a007cac:	2007d43a 	srai	r3,r4,16
 a007cb0:	213fffcc 	andi	r4,r4,65535
 a007cb4:	29cbc83a 	sub	r5,r5,r7
 a007cb8:	28c7883a 	add	r3,r5,r3
 a007cbc:	180a943a 	slli	r5,r3,16
 a007cc0:	8c400104 	addi	r17,r17,4
 a007cc4:	84000104 	addi	r16,r16,4
 a007cc8:	2908b03a 	or	r4,r5,r4
 a007ccc:	59000015 	stw	r4,0(r11)
 a007cd0:	1807d43a 	srai	r3,r3,16
 a007cd4:	3015883a 	mov	r10,r6
 a007cd8:	3017883a 	mov	r11,r6
 a007cdc:	8b3fea36 	bltu	r17,r12,a007c88 <__alt_mem_flash+0xfe006c88>
 a007ce0:	8200162e 	bgeu	r16,r8,a007d3c <__mdiff+0x17c>
 a007ce4:	8017883a 	mov	r11,r16
 a007ce8:	59400017 	ldw	r5,0(r11)
 a007cec:	31800104 	addi	r6,r6,4
 a007cf0:	5ac00104 	addi	r11,r11,4
 a007cf4:	293fffcc 	andi	r4,r5,65535
 a007cf8:	20c7883a 	add	r3,r4,r3
 a007cfc:	280ed43a 	srli	r7,r5,16
 a007d00:	180bd43a 	srai	r5,r3,16
 a007d04:	193fffcc 	andi	r4,r3,65535
 a007d08:	3947883a 	add	r3,r7,r5
 a007d0c:	180a943a 	slli	r5,r3,16
 a007d10:	1807d43a 	srai	r3,r3,16
 a007d14:	2908b03a 	or	r4,r5,r4
 a007d18:	313fff15 	stw	r4,-4(r6)
 a007d1c:	5a3ff236 	bltu	r11,r8,a007ce8 <__alt_mem_flash+0xfe006ce8>
 a007d20:	0406303a 	nor	r3,zero,r16
 a007d24:	1a07883a 	add	r3,r3,r8
 a007d28:	1806d0ba 	srli	r3,r3,2
 a007d2c:	18c00044 	addi	r3,r3,1
 a007d30:	18c7883a 	add	r3,r3,r3
 a007d34:	18c7883a 	add	r3,r3,r3
 a007d38:	50d5883a 	add	r10,r10,r3
 a007d3c:	50ffff04 	addi	r3,r10,-4
 a007d40:	2000041e 	bne	r4,zero,a007d54 <__mdiff+0x194>
 a007d44:	18ffff04 	addi	r3,r3,-4
 a007d48:	19000017 	ldw	r4,0(r3)
 a007d4c:	4a7fffc4 	addi	r9,r9,-1
 a007d50:	203ffc26 	beq	r4,zero,a007d44 <__alt_mem_flash+0xfe006d44>
 a007d54:	12400415 	stw	r9,16(r2)
 a007d58:	dfc00517 	ldw	ra,20(sp)
 a007d5c:	dd000417 	ldw	r20,16(sp)
 a007d60:	dcc00317 	ldw	r19,12(sp)
 a007d64:	dc800217 	ldw	r18,8(sp)
 a007d68:	dc400117 	ldw	r17,4(sp)
 a007d6c:	dc000017 	ldw	r16,0(sp)
 a007d70:	dec00604 	addi	sp,sp,24
 a007d74:	f800283a 	ret
 a007d78:	000b883a 	mov	r5,zero
 a007d7c:	a0071dc0 	call	a0071dc <_Balloc>
 a007d80:	00c00044 	movi	r3,1
 a007d84:	10c00415 	stw	r3,16(r2)
 a007d88:	10000515 	stw	zero,20(r2)
 a007d8c:	003ff206 	br	a007d58 <__alt_mem_flash+0xfe006d58>
 a007d90:	8023883a 	mov	r17,r16
 a007d94:	0029883a 	mov	r20,zero
 a007d98:	4021883a 	mov	r16,r8
 a007d9c:	003fad06 	br	a007c54 <__alt_mem_flash+0xfe006c54>
 a007da0:	9005883a 	mov	r2,r18
 a007da4:	94400504 	addi	r17,r18,20
 a007da8:	9c000504 	addi	r16,r19,20
 a007dac:	9825883a 	mov	r18,r19
 a007db0:	05000044 	movi	r20,1
 a007db4:	1027883a 	mov	r19,r2
 a007db8:	003fa606 	br	a007c54 <__alt_mem_flash+0xfe006c54>

0a007dbc <__ulp>:
 a007dbc:	295ffc2c 	andhi	r5,r5,32752
 a007dc0:	00bf3034 	movhi	r2,64704
 a007dc4:	2887883a 	add	r3,r5,r2
 a007dc8:	00c0020e 	bge	zero,r3,a007dd4 <__ulp+0x18>
 a007dcc:	0005883a 	mov	r2,zero
 a007dd0:	f800283a 	ret
 a007dd4:	00c7c83a 	sub	r3,zero,r3
 a007dd8:	1807d53a 	srai	r3,r3,20
 a007ddc:	008004c4 	movi	r2,19
 a007de0:	10c00b0e 	bge	r2,r3,a007e10 <__ulp+0x54>
 a007de4:	18bffb04 	addi	r2,r3,-20
 a007de8:	01000784 	movi	r4,30
 a007dec:	0007883a 	mov	r3,zero
 a007df0:	20800516 	blt	r4,r2,a007e08 <__ulp+0x4c>
 a007df4:	010007c4 	movi	r4,31
 a007df8:	2089c83a 	sub	r4,r4,r2
 a007dfc:	00800044 	movi	r2,1
 a007e00:	1104983a 	sll	r2,r2,r4
 a007e04:	f800283a 	ret
 a007e08:	00800044 	movi	r2,1
 a007e0c:	f800283a 	ret
 a007e10:	01400234 	movhi	r5,8
 a007e14:	28c7d83a 	sra	r3,r5,r3
 a007e18:	0005883a 	mov	r2,zero
 a007e1c:	f800283a 	ret

0a007e20 <__b2d>:
 a007e20:	defffa04 	addi	sp,sp,-24
 a007e24:	dc000015 	stw	r16,0(sp)
 a007e28:	24000417 	ldw	r16,16(r4)
 a007e2c:	dc400115 	stw	r17,4(sp)
 a007e30:	24400504 	addi	r17,r4,20
 a007e34:	8421883a 	add	r16,r16,r16
 a007e38:	8421883a 	add	r16,r16,r16
 a007e3c:	8c21883a 	add	r16,r17,r16
 a007e40:	dc800215 	stw	r18,8(sp)
 a007e44:	84bfff17 	ldw	r18,-4(r16)
 a007e48:	dd000415 	stw	r20,16(sp)
 a007e4c:	dcc00315 	stw	r19,12(sp)
 a007e50:	9009883a 	mov	r4,r18
 a007e54:	2829883a 	mov	r20,r5
 a007e58:	dfc00515 	stw	ra,20(sp)
 a007e5c:	a0074f80 	call	a0074f8 <__hi0bits>
 a007e60:	00c00804 	movi	r3,32
 a007e64:	1889c83a 	sub	r4,r3,r2
 a007e68:	a1000015 	stw	r4,0(r20)
 a007e6c:	01000284 	movi	r4,10
 a007e70:	84ffff04 	addi	r19,r16,-4
 a007e74:	20801216 	blt	r4,r2,a007ec0 <__b2d+0xa0>
 a007e78:	018002c4 	movi	r6,11
 a007e7c:	308dc83a 	sub	r6,r6,r2
 a007e80:	9186d83a 	srl	r3,r18,r6
 a007e84:	18cffc34 	orhi	r3,r3,16368
 a007e88:	8cc0212e 	bgeu	r17,r19,a007f10 <__b2d+0xf0>
 a007e8c:	813ffe17 	ldw	r4,-8(r16)
 a007e90:	218cd83a 	srl	r6,r4,r6
 a007e94:	10800544 	addi	r2,r2,21
 a007e98:	9084983a 	sll	r2,r18,r2
 a007e9c:	1184b03a 	or	r2,r2,r6
 a007ea0:	dfc00517 	ldw	ra,20(sp)
 a007ea4:	dd000417 	ldw	r20,16(sp)
 a007ea8:	dcc00317 	ldw	r19,12(sp)
 a007eac:	dc800217 	ldw	r18,8(sp)
 a007eb0:	dc400117 	ldw	r17,4(sp)
 a007eb4:	dc000017 	ldw	r16,0(sp)
 a007eb8:	dec00604 	addi	sp,sp,24
 a007ebc:	f800283a 	ret
 a007ec0:	8cc00f2e 	bgeu	r17,r19,a007f00 <__b2d+0xe0>
 a007ec4:	117ffd44 	addi	r5,r2,-11
 a007ec8:	80bffe17 	ldw	r2,-8(r16)
 a007ecc:	28000e26 	beq	r5,zero,a007f08 <__b2d+0xe8>
 a007ed0:	1949c83a 	sub	r4,r3,r5
 a007ed4:	9164983a 	sll	r18,r18,r5
 a007ed8:	1106d83a 	srl	r3,r2,r4
 a007edc:	81bffe04 	addi	r6,r16,-8
 a007ee0:	948ffc34 	orhi	r18,r18,16368
 a007ee4:	90c6b03a 	or	r3,r18,r3
 a007ee8:	89800e2e 	bgeu	r17,r6,a007f24 <__b2d+0x104>
 a007eec:	81bffd17 	ldw	r6,-12(r16)
 a007ef0:	1144983a 	sll	r2,r2,r5
 a007ef4:	310ad83a 	srl	r5,r6,r4
 a007ef8:	2884b03a 	or	r2,r5,r2
 a007efc:	003fe806 	br	a007ea0 <__alt_mem_flash+0xfe006ea0>
 a007f00:	10bffd44 	addi	r2,r2,-11
 a007f04:	1000041e 	bne	r2,zero,a007f18 <__b2d+0xf8>
 a007f08:	90cffc34 	orhi	r3,r18,16368
 a007f0c:	003fe406 	br	a007ea0 <__alt_mem_flash+0xfe006ea0>
 a007f10:	000d883a 	mov	r6,zero
 a007f14:	003fdf06 	br	a007e94 <__alt_mem_flash+0xfe006e94>
 a007f18:	90a4983a 	sll	r18,r18,r2
 a007f1c:	0005883a 	mov	r2,zero
 a007f20:	003ff906 	br	a007f08 <__alt_mem_flash+0xfe006f08>
 a007f24:	1144983a 	sll	r2,r2,r5
 a007f28:	003fdd06 	br	a007ea0 <__alt_mem_flash+0xfe006ea0>

0a007f2c <__d2b>:
 a007f2c:	defff804 	addi	sp,sp,-32
 a007f30:	dc000215 	stw	r16,8(sp)
 a007f34:	3021883a 	mov	r16,r6
 a007f38:	dc400315 	stw	r17,12(sp)
 a007f3c:	8022907a 	slli	r17,r16,1
 a007f40:	dd000615 	stw	r20,24(sp)
 a007f44:	2829883a 	mov	r20,r5
 a007f48:	01400044 	movi	r5,1
 a007f4c:	dcc00515 	stw	r19,20(sp)
 a007f50:	dc800415 	stw	r18,16(sp)
 a007f54:	dfc00715 	stw	ra,28(sp)
 a007f58:	3825883a 	mov	r18,r7
 a007f5c:	8822d57a 	srli	r17,r17,21
 a007f60:	a0071dc0 	call	a0071dc <_Balloc>
 a007f64:	1027883a 	mov	r19,r2
 a007f68:	00800434 	movhi	r2,16
 a007f6c:	10bfffc4 	addi	r2,r2,-1
 a007f70:	808c703a 	and	r6,r16,r2
 a007f74:	88000126 	beq	r17,zero,a007f7c <__d2b+0x50>
 a007f78:	31800434 	orhi	r6,r6,16
 a007f7c:	d9800015 	stw	r6,0(sp)
 a007f80:	a0002426 	beq	r20,zero,a008014 <__d2b+0xe8>
 a007f84:	d9000104 	addi	r4,sp,4
 a007f88:	dd000115 	stw	r20,4(sp)
 a007f8c:	a0075600 	call	a007560 <__lo0bits>
 a007f90:	d8c00017 	ldw	r3,0(sp)
 a007f94:	10002f1e 	bne	r2,zero,a008054 <__d2b+0x128>
 a007f98:	d9000117 	ldw	r4,4(sp)
 a007f9c:	99000515 	stw	r4,20(r19)
 a007fa0:	1821003a 	cmpeq	r16,r3,zero
 a007fa4:	01000084 	movi	r4,2
 a007fa8:	2421c83a 	sub	r16,r4,r16
 a007fac:	98c00615 	stw	r3,24(r19)
 a007fb0:	9c000415 	stw	r16,16(r19)
 a007fb4:	88001f1e 	bne	r17,zero,a008034 <__d2b+0x108>
 a007fb8:	10bef384 	addi	r2,r2,-1074
 a007fbc:	90800015 	stw	r2,0(r18)
 a007fc0:	00900034 	movhi	r2,16384
 a007fc4:	10bfffc4 	addi	r2,r2,-1
 a007fc8:	8085883a 	add	r2,r16,r2
 a007fcc:	1085883a 	add	r2,r2,r2
 a007fd0:	1085883a 	add	r2,r2,r2
 a007fd4:	9885883a 	add	r2,r19,r2
 a007fd8:	11000517 	ldw	r4,20(r2)
 a007fdc:	8020917a 	slli	r16,r16,5
 a007fe0:	a0074f80 	call	a0074f8 <__hi0bits>
 a007fe4:	d8c00817 	ldw	r3,32(sp)
 a007fe8:	8085c83a 	sub	r2,r16,r2
 a007fec:	18800015 	stw	r2,0(r3)
 a007ff0:	9805883a 	mov	r2,r19
 a007ff4:	dfc00717 	ldw	ra,28(sp)
 a007ff8:	dd000617 	ldw	r20,24(sp)
 a007ffc:	dcc00517 	ldw	r19,20(sp)
 a008000:	dc800417 	ldw	r18,16(sp)
 a008004:	dc400317 	ldw	r17,12(sp)
 a008008:	dc000217 	ldw	r16,8(sp)
 a00800c:	dec00804 	addi	sp,sp,32
 a008010:	f800283a 	ret
 a008014:	d809883a 	mov	r4,sp
 a008018:	a0075600 	call	a007560 <__lo0bits>
 a00801c:	d8c00017 	ldw	r3,0(sp)
 a008020:	04000044 	movi	r16,1
 a008024:	9c000415 	stw	r16,16(r19)
 a008028:	98c00515 	stw	r3,20(r19)
 a00802c:	10800804 	addi	r2,r2,32
 a008030:	883fe126 	beq	r17,zero,a007fb8 <__alt_mem_flash+0xfe006fb8>
 a008034:	00c00d44 	movi	r3,53
 a008038:	8c7ef344 	addi	r17,r17,-1075
 a00803c:	88a3883a 	add	r17,r17,r2
 a008040:	1885c83a 	sub	r2,r3,r2
 a008044:	d8c00817 	ldw	r3,32(sp)
 a008048:	94400015 	stw	r17,0(r18)
 a00804c:	18800015 	stw	r2,0(r3)
 a008050:	003fe706 	br	a007ff0 <__alt_mem_flash+0xfe006ff0>
 a008054:	01000804 	movi	r4,32
 a008058:	2089c83a 	sub	r4,r4,r2
 a00805c:	1908983a 	sll	r4,r3,r4
 a008060:	d9400117 	ldw	r5,4(sp)
 a008064:	1886d83a 	srl	r3,r3,r2
 a008068:	2148b03a 	or	r4,r4,r5
 a00806c:	99000515 	stw	r4,20(r19)
 a008070:	d8c00015 	stw	r3,0(sp)
 a008074:	003fca06 	br	a007fa0 <__alt_mem_flash+0xfe006fa0>

0a008078 <__ratio>:
 a008078:	defff904 	addi	sp,sp,-28
 a00807c:	dc400315 	stw	r17,12(sp)
 a008080:	2823883a 	mov	r17,r5
 a008084:	d9400104 	addi	r5,sp,4
 a008088:	dfc00615 	stw	ra,24(sp)
 a00808c:	dcc00515 	stw	r19,20(sp)
 a008090:	dc800415 	stw	r18,16(sp)
 a008094:	2027883a 	mov	r19,r4
 a008098:	dc000215 	stw	r16,8(sp)
 a00809c:	a007e200 	call	a007e20 <__b2d>
 a0080a0:	d80b883a 	mov	r5,sp
 a0080a4:	8809883a 	mov	r4,r17
 a0080a8:	1025883a 	mov	r18,r2
 a0080ac:	1821883a 	mov	r16,r3
 a0080b0:	a007e200 	call	a007e20 <__b2d>
 a0080b4:	8a000417 	ldw	r8,16(r17)
 a0080b8:	99000417 	ldw	r4,16(r19)
 a0080bc:	d9400117 	ldw	r5,4(sp)
 a0080c0:	2209c83a 	sub	r4,r4,r8
 a0080c4:	2010917a 	slli	r8,r4,5
 a0080c8:	d9000017 	ldw	r4,0(sp)
 a0080cc:	2909c83a 	sub	r4,r5,r4
 a0080d0:	4109883a 	add	r4,r8,r4
 a0080d4:	01000e0e 	bge	zero,r4,a008110 <__ratio+0x98>
 a0080d8:	2008953a 	slli	r4,r4,20
 a0080dc:	2421883a 	add	r16,r4,r16
 a0080e0:	100d883a 	mov	r6,r2
 a0080e4:	180f883a 	mov	r7,r3
 a0080e8:	9009883a 	mov	r4,r18
 a0080ec:	800b883a 	mov	r5,r16
 a0080f0:	a00bf4c0 	call	a00bf4c <__divdf3>
 a0080f4:	dfc00617 	ldw	ra,24(sp)
 a0080f8:	dcc00517 	ldw	r19,20(sp)
 a0080fc:	dc800417 	ldw	r18,16(sp)
 a008100:	dc400317 	ldw	r17,12(sp)
 a008104:	dc000217 	ldw	r16,8(sp)
 a008108:	dec00704 	addi	sp,sp,28
 a00810c:	f800283a 	ret
 a008110:	2008953a 	slli	r4,r4,20
 a008114:	1907c83a 	sub	r3,r3,r4
 a008118:	003ff106 	br	a0080e0 <__alt_mem_flash+0xfe0070e0>

0a00811c <_mprec_log10>:
 a00811c:	defffe04 	addi	sp,sp,-8
 a008120:	dc000015 	stw	r16,0(sp)
 a008124:	dfc00115 	stw	ra,4(sp)
 a008128:	008005c4 	movi	r2,23
 a00812c:	2021883a 	mov	r16,r4
 a008130:	11000d0e 	bge	r2,r4,a008168 <_mprec_log10+0x4c>
 a008134:	0005883a 	mov	r2,zero
 a008138:	00cffc34 	movhi	r3,16368
 a00813c:	843fffc4 	addi	r16,r16,-1
 a008140:	000d883a 	mov	r6,zero
 a008144:	01d00934 	movhi	r7,16420
 a008148:	1009883a 	mov	r4,r2
 a00814c:	180b883a 	mov	r5,r3
 a008150:	a000d400 	call	a000d40 <__muldf3>
 a008154:	803ff91e 	bne	r16,zero,a00813c <__alt_mem_flash+0xfe00713c>
 a008158:	dfc00117 	ldw	ra,4(sp)
 a00815c:	dc000017 	ldw	r16,0(sp)
 a008160:	dec00204 	addi	sp,sp,8
 a008164:	f800283a 	ret
 a008168:	202090fa 	slli	r16,r4,3
 a00816c:	00828074 	movhi	r2,2561
 a008170:	10873204 	addi	r2,r2,7368
 a008174:	1421883a 	add	r16,r2,r16
 a008178:	80800017 	ldw	r2,0(r16)
 a00817c:	80c00117 	ldw	r3,4(r16)
 a008180:	dfc00117 	ldw	ra,4(sp)
 a008184:	dc000017 	ldw	r16,0(sp)
 a008188:	dec00204 	addi	sp,sp,8
 a00818c:	f800283a 	ret

0a008190 <__copybits>:
 a008190:	297fffc4 	addi	r5,r5,-1
 a008194:	280fd17a 	srai	r7,r5,5
 a008198:	30c00417 	ldw	r3,16(r6)
 a00819c:	30800504 	addi	r2,r6,20
 a0081a0:	39c00044 	addi	r7,r7,1
 a0081a4:	18c7883a 	add	r3,r3,r3
 a0081a8:	39cf883a 	add	r7,r7,r7
 a0081ac:	18c7883a 	add	r3,r3,r3
 a0081b0:	39cf883a 	add	r7,r7,r7
 a0081b4:	10c7883a 	add	r3,r2,r3
 a0081b8:	21cf883a 	add	r7,r4,r7
 a0081bc:	10c00d2e 	bgeu	r2,r3,a0081f4 <__copybits+0x64>
 a0081c0:	200b883a 	mov	r5,r4
 a0081c4:	12000017 	ldw	r8,0(r2)
 a0081c8:	29400104 	addi	r5,r5,4
 a0081cc:	10800104 	addi	r2,r2,4
 a0081d0:	2a3fff15 	stw	r8,-4(r5)
 a0081d4:	10fffb36 	bltu	r2,r3,a0081c4 <__alt_mem_flash+0xfe0071c4>
 a0081d8:	1985c83a 	sub	r2,r3,r6
 a0081dc:	10bffac4 	addi	r2,r2,-21
 a0081e0:	1004d0ba 	srli	r2,r2,2
 a0081e4:	10800044 	addi	r2,r2,1
 a0081e8:	1085883a 	add	r2,r2,r2
 a0081ec:	1085883a 	add	r2,r2,r2
 a0081f0:	2089883a 	add	r4,r4,r2
 a0081f4:	21c0032e 	bgeu	r4,r7,a008204 <__copybits+0x74>
 a0081f8:	20000015 	stw	zero,0(r4)
 a0081fc:	21000104 	addi	r4,r4,4
 a008200:	21fffd36 	bltu	r4,r7,a0081f8 <__alt_mem_flash+0xfe0071f8>
 a008204:	f800283a 	ret

0a008208 <__any_on>:
 a008208:	20c00417 	ldw	r3,16(r4)
 a00820c:	2805d17a 	srai	r2,r5,5
 a008210:	21000504 	addi	r4,r4,20
 a008214:	18800d0e 	bge	r3,r2,a00824c <__any_on+0x44>
 a008218:	18c7883a 	add	r3,r3,r3
 a00821c:	18c7883a 	add	r3,r3,r3
 a008220:	20c7883a 	add	r3,r4,r3
 a008224:	20c0192e 	bgeu	r4,r3,a00828c <__any_on+0x84>
 a008228:	18bfff17 	ldw	r2,-4(r3)
 a00822c:	18ffff04 	addi	r3,r3,-4
 a008230:	1000041e 	bne	r2,zero,a008244 <__any_on+0x3c>
 a008234:	20c0142e 	bgeu	r4,r3,a008288 <__any_on+0x80>
 a008238:	18ffff04 	addi	r3,r3,-4
 a00823c:	19400017 	ldw	r5,0(r3)
 a008240:	283ffc26 	beq	r5,zero,a008234 <__alt_mem_flash+0xfe007234>
 a008244:	00800044 	movi	r2,1
 a008248:	f800283a 	ret
 a00824c:	10c00a0e 	bge	r2,r3,a008278 <__any_on+0x70>
 a008250:	1085883a 	add	r2,r2,r2
 a008254:	1085883a 	add	r2,r2,r2
 a008258:	294007cc 	andi	r5,r5,31
 a00825c:	2087883a 	add	r3,r4,r2
 a008260:	283ff026 	beq	r5,zero,a008224 <__alt_mem_flash+0xfe007224>
 a008264:	19800017 	ldw	r6,0(r3)
 a008268:	3144d83a 	srl	r2,r6,r5
 a00826c:	114a983a 	sll	r5,r2,r5
 a008270:	317ff41e 	bne	r6,r5,a008244 <__alt_mem_flash+0xfe007244>
 a008274:	003feb06 	br	a008224 <__alt_mem_flash+0xfe007224>
 a008278:	1085883a 	add	r2,r2,r2
 a00827c:	1085883a 	add	r2,r2,r2
 a008280:	2087883a 	add	r3,r4,r2
 a008284:	003fe706 	br	a008224 <__alt_mem_flash+0xfe007224>
 a008288:	f800283a 	ret
 a00828c:	0005883a 	mov	r2,zero
 a008290:	f800283a 	ret

0a008294 <__fpclassifyd>:
 a008294:	00a00034 	movhi	r2,32768
 a008298:	10bfffc4 	addi	r2,r2,-1
 a00829c:	2884703a 	and	r2,r5,r2
 a0082a0:	10000726 	beq	r2,zero,a0082c0 <__fpclassifyd+0x2c>
 a0082a4:	00fffc34 	movhi	r3,65520
 a0082a8:	019ff834 	movhi	r6,32736
 a0082ac:	28c7883a 	add	r3,r5,r3
 a0082b0:	31bfffc4 	addi	r6,r6,-1
 a0082b4:	30c00536 	bltu	r6,r3,a0082cc <__fpclassifyd+0x38>
 a0082b8:	00800104 	movi	r2,4
 a0082bc:	f800283a 	ret
 a0082c0:	2000021e 	bne	r4,zero,a0082cc <__fpclassifyd+0x38>
 a0082c4:	00800084 	movi	r2,2
 a0082c8:	f800283a 	ret
 a0082cc:	00dffc34 	movhi	r3,32752
 a0082d0:	019ff834 	movhi	r6,32736
 a0082d4:	28cb883a 	add	r5,r5,r3
 a0082d8:	31bfffc4 	addi	r6,r6,-1
 a0082dc:	317ff62e 	bgeu	r6,r5,a0082b8 <__alt_mem_flash+0xfe0072b8>
 a0082e0:	01400434 	movhi	r5,16
 a0082e4:	297fffc4 	addi	r5,r5,-1
 a0082e8:	28800236 	bltu	r5,r2,a0082f4 <__fpclassifyd+0x60>
 a0082ec:	008000c4 	movi	r2,3
 a0082f0:	f800283a 	ret
 a0082f4:	10c00226 	beq	r2,r3,a008300 <__fpclassifyd+0x6c>
 a0082f8:	0005883a 	mov	r2,zero
 a0082fc:	f800283a 	ret
 a008300:	2005003a 	cmpeq	r2,r4,zero
 a008304:	f800283a 	ret

0a008308 <_sbrk_r>:
 a008308:	defffd04 	addi	sp,sp,-12
 a00830c:	dc000015 	stw	r16,0(sp)
 a008310:	04028074 	movhi	r16,2561
 a008314:	dc400115 	stw	r17,4(sp)
 a008318:	8415e304 	addi	r16,r16,22412
 a00831c:	2023883a 	mov	r17,r4
 a008320:	2809883a 	mov	r4,r5
 a008324:	dfc00215 	stw	ra,8(sp)
 a008328:	80000015 	stw	zero,0(r16)
 a00832c:	a00dd400 	call	a00dd40 <sbrk>
 a008330:	00ffffc4 	movi	r3,-1
 a008334:	10c00526 	beq	r2,r3,a00834c <_sbrk_r+0x44>
 a008338:	dfc00217 	ldw	ra,8(sp)
 a00833c:	dc400117 	ldw	r17,4(sp)
 a008340:	dc000017 	ldw	r16,0(sp)
 a008344:	dec00304 	addi	sp,sp,12
 a008348:	f800283a 	ret
 a00834c:	80c00017 	ldw	r3,0(r16)
 a008350:	183ff926 	beq	r3,zero,a008338 <__alt_mem_flash+0xfe007338>
 a008354:	88c00015 	stw	r3,0(r17)
 a008358:	003ff706 	br	a008338 <__alt_mem_flash+0xfe007338>

0a00835c <__sread>:
 a00835c:	defffe04 	addi	sp,sp,-8
 a008360:	dc000015 	stw	r16,0(sp)
 a008364:	2821883a 	mov	r16,r5
 a008368:	2940038f 	ldh	r5,14(r5)
 a00836c:	dfc00115 	stw	ra,4(sp)
 a008370:	a00a8d40 	call	a00a8d4 <_read_r>
 a008374:	10000716 	blt	r2,zero,a008394 <__sread+0x38>
 a008378:	80c01417 	ldw	r3,80(r16)
 a00837c:	1887883a 	add	r3,r3,r2
 a008380:	80c01415 	stw	r3,80(r16)
 a008384:	dfc00117 	ldw	ra,4(sp)
 a008388:	dc000017 	ldw	r16,0(sp)
 a00838c:	dec00204 	addi	sp,sp,8
 a008390:	f800283a 	ret
 a008394:	80c0030b 	ldhu	r3,12(r16)
 a008398:	18fbffcc 	andi	r3,r3,61439
 a00839c:	80c0030d 	sth	r3,12(r16)
 a0083a0:	dfc00117 	ldw	ra,4(sp)
 a0083a4:	dc000017 	ldw	r16,0(sp)
 a0083a8:	dec00204 	addi	sp,sp,8
 a0083ac:	f800283a 	ret

0a0083b0 <__seofread>:
 a0083b0:	0005883a 	mov	r2,zero
 a0083b4:	f800283a 	ret

0a0083b8 <__swrite>:
 a0083b8:	2880030b 	ldhu	r2,12(r5)
 a0083bc:	defffb04 	addi	sp,sp,-20
 a0083c0:	dcc00315 	stw	r19,12(sp)
 a0083c4:	dc800215 	stw	r18,8(sp)
 a0083c8:	dc400115 	stw	r17,4(sp)
 a0083cc:	dc000015 	stw	r16,0(sp)
 a0083d0:	dfc00415 	stw	ra,16(sp)
 a0083d4:	10c0400c 	andi	r3,r2,256
 a0083d8:	2821883a 	mov	r16,r5
 a0083dc:	2023883a 	mov	r17,r4
 a0083e0:	3025883a 	mov	r18,r6
 a0083e4:	3827883a 	mov	r19,r7
 a0083e8:	18000526 	beq	r3,zero,a008400 <__swrite+0x48>
 a0083ec:	2940038f 	ldh	r5,14(r5)
 a0083f0:	01c00084 	movi	r7,2
 a0083f4:	000d883a 	mov	r6,zero
 a0083f8:	a00a7180 	call	a00a718 <_lseek_r>
 a0083fc:	8080030b 	ldhu	r2,12(r16)
 a008400:	8140038f 	ldh	r5,14(r16)
 a008404:	10bbffcc 	andi	r2,r2,61439
 a008408:	980f883a 	mov	r7,r19
 a00840c:	900d883a 	mov	r6,r18
 a008410:	8809883a 	mov	r4,r17
 a008414:	8080030d 	sth	r2,12(r16)
 a008418:	dfc00417 	ldw	ra,16(sp)
 a00841c:	dcc00317 	ldw	r19,12(sp)
 a008420:	dc800217 	ldw	r18,8(sp)
 a008424:	dc400117 	ldw	r17,4(sp)
 a008428:	dc000017 	ldw	r16,0(sp)
 a00842c:	dec00504 	addi	sp,sp,20
 a008430:	a009d041 	jmpi	a009d04 <_write_r>

0a008434 <__sseek>:
 a008434:	defffe04 	addi	sp,sp,-8
 a008438:	dc000015 	stw	r16,0(sp)
 a00843c:	2821883a 	mov	r16,r5
 a008440:	2940038f 	ldh	r5,14(r5)
 a008444:	dfc00115 	stw	ra,4(sp)
 a008448:	a00a7180 	call	a00a718 <_lseek_r>
 a00844c:	00ffffc4 	movi	r3,-1
 a008450:	10c00826 	beq	r2,r3,a008474 <__sseek+0x40>
 a008454:	80c0030b 	ldhu	r3,12(r16)
 a008458:	80801415 	stw	r2,80(r16)
 a00845c:	18c40014 	ori	r3,r3,4096
 a008460:	80c0030d 	sth	r3,12(r16)
 a008464:	dfc00117 	ldw	ra,4(sp)
 a008468:	dc000017 	ldw	r16,0(sp)
 a00846c:	dec00204 	addi	sp,sp,8
 a008470:	f800283a 	ret
 a008474:	80c0030b 	ldhu	r3,12(r16)
 a008478:	18fbffcc 	andi	r3,r3,61439
 a00847c:	80c0030d 	sth	r3,12(r16)
 a008480:	dfc00117 	ldw	ra,4(sp)
 a008484:	dc000017 	ldw	r16,0(sp)
 a008488:	dec00204 	addi	sp,sp,8
 a00848c:	f800283a 	ret

0a008490 <__sclose>:
 a008490:	2940038f 	ldh	r5,14(r5)
 a008494:	a009d641 	jmpi	a009d64 <_close_r>

0a008498 <strcmp>:
 a008498:	2144b03a 	or	r2,r4,r5
 a00849c:	108000cc 	andi	r2,r2,3
 a0084a0:	1000171e 	bne	r2,zero,a008500 <strcmp+0x68>
 a0084a4:	20800017 	ldw	r2,0(r4)
 a0084a8:	28c00017 	ldw	r3,0(r5)
 a0084ac:	10c0141e 	bne	r2,r3,a008500 <strcmp+0x68>
 a0084b0:	027fbff4 	movhi	r9,65279
 a0084b4:	4a7fbfc4 	addi	r9,r9,-257
 a0084b8:	0086303a 	nor	r3,zero,r2
 a0084bc:	02202074 	movhi	r8,32897
 a0084c0:	1245883a 	add	r2,r2,r9
 a0084c4:	42202004 	addi	r8,r8,-32640
 a0084c8:	10c4703a 	and	r2,r2,r3
 a0084cc:	1204703a 	and	r2,r2,r8
 a0084d0:	10000226 	beq	r2,zero,a0084dc <strcmp+0x44>
 a0084d4:	00002306 	br	a008564 <strcmp+0xcc>
 a0084d8:	1000221e 	bne	r2,zero,a008564 <strcmp+0xcc>
 a0084dc:	21000104 	addi	r4,r4,4
 a0084e0:	20c00017 	ldw	r3,0(r4)
 a0084e4:	29400104 	addi	r5,r5,4
 a0084e8:	29800017 	ldw	r6,0(r5)
 a0084ec:	1a4f883a 	add	r7,r3,r9
 a0084f0:	00c4303a 	nor	r2,zero,r3
 a0084f4:	3884703a 	and	r2,r7,r2
 a0084f8:	1204703a 	and	r2,r2,r8
 a0084fc:	19bff626 	beq	r3,r6,a0084d8 <__alt_mem_flash+0xfe0074d8>
 a008500:	20800003 	ldbu	r2,0(r4)
 a008504:	10c03fcc 	andi	r3,r2,255
 a008508:	18c0201c 	xori	r3,r3,128
 a00850c:	18ffe004 	addi	r3,r3,-128
 a008510:	18000c26 	beq	r3,zero,a008544 <strcmp+0xac>
 a008514:	29800007 	ldb	r6,0(r5)
 a008518:	19800326 	beq	r3,r6,a008528 <strcmp+0x90>
 a00851c:	00001306 	br	a00856c <strcmp+0xd4>
 a008520:	29800007 	ldb	r6,0(r5)
 a008524:	11800b1e 	bne	r2,r6,a008554 <strcmp+0xbc>
 a008528:	21000044 	addi	r4,r4,1
 a00852c:	20c00003 	ldbu	r3,0(r4)
 a008530:	29400044 	addi	r5,r5,1
 a008534:	18803fcc 	andi	r2,r3,255
 a008538:	1080201c 	xori	r2,r2,128
 a00853c:	10bfe004 	addi	r2,r2,-128
 a008540:	103ff71e 	bne	r2,zero,a008520 <__alt_mem_flash+0xfe007520>
 a008544:	0007883a 	mov	r3,zero
 a008548:	28800003 	ldbu	r2,0(r5)
 a00854c:	1885c83a 	sub	r2,r3,r2
 a008550:	f800283a 	ret
 a008554:	28800003 	ldbu	r2,0(r5)
 a008558:	18c03fcc 	andi	r3,r3,255
 a00855c:	1885c83a 	sub	r2,r3,r2
 a008560:	f800283a 	ret
 a008564:	0005883a 	mov	r2,zero
 a008568:	f800283a 	ret
 a00856c:	10c03fcc 	andi	r3,r2,255
 a008570:	003ff506 	br	a008548 <__alt_mem_flash+0xfe007548>

0a008574 <strlen>:
 a008574:	208000cc 	andi	r2,r4,3
 a008578:	10002026 	beq	r2,zero,a0085fc <strlen+0x88>
 a00857c:	20800007 	ldb	r2,0(r4)
 a008580:	10002026 	beq	r2,zero,a008604 <strlen+0x90>
 a008584:	2005883a 	mov	r2,r4
 a008588:	00000206 	br	a008594 <strlen+0x20>
 a00858c:	10c00007 	ldb	r3,0(r2)
 a008590:	18001826 	beq	r3,zero,a0085f4 <strlen+0x80>
 a008594:	10800044 	addi	r2,r2,1
 a008598:	10c000cc 	andi	r3,r2,3
 a00859c:	183ffb1e 	bne	r3,zero,a00858c <__alt_mem_flash+0xfe00758c>
 a0085a0:	10c00017 	ldw	r3,0(r2)
 a0085a4:	01ffbff4 	movhi	r7,65279
 a0085a8:	39ffbfc4 	addi	r7,r7,-257
 a0085ac:	00ca303a 	nor	r5,zero,r3
 a0085b0:	01a02074 	movhi	r6,32897
 a0085b4:	19c7883a 	add	r3,r3,r7
 a0085b8:	31a02004 	addi	r6,r6,-32640
 a0085bc:	1946703a 	and	r3,r3,r5
 a0085c0:	1986703a 	and	r3,r3,r6
 a0085c4:	1800091e 	bne	r3,zero,a0085ec <strlen+0x78>
 a0085c8:	10800104 	addi	r2,r2,4
 a0085cc:	10c00017 	ldw	r3,0(r2)
 a0085d0:	19cb883a 	add	r5,r3,r7
 a0085d4:	00c6303a 	nor	r3,zero,r3
 a0085d8:	28c6703a 	and	r3,r5,r3
 a0085dc:	1986703a 	and	r3,r3,r6
 a0085e0:	183ff926 	beq	r3,zero,a0085c8 <__alt_mem_flash+0xfe0075c8>
 a0085e4:	00000106 	br	a0085ec <strlen+0x78>
 a0085e8:	10800044 	addi	r2,r2,1
 a0085ec:	10c00007 	ldb	r3,0(r2)
 a0085f0:	183ffd1e 	bne	r3,zero,a0085e8 <__alt_mem_flash+0xfe0075e8>
 a0085f4:	1105c83a 	sub	r2,r2,r4
 a0085f8:	f800283a 	ret
 a0085fc:	2005883a 	mov	r2,r4
 a008600:	003fe706 	br	a0085a0 <__alt_mem_flash+0xfe0075a0>
 a008604:	0005883a 	mov	r2,zero
 a008608:	f800283a 	ret

0a00860c <__sprint_r.part.0>:
 a00860c:	28801917 	ldw	r2,100(r5)
 a008610:	defff604 	addi	sp,sp,-40
 a008614:	dd400515 	stw	r21,20(sp)
 a008618:	dfc00915 	stw	ra,36(sp)
 a00861c:	df000815 	stw	fp,32(sp)
 a008620:	ddc00715 	stw	r23,28(sp)
 a008624:	dd800615 	stw	r22,24(sp)
 a008628:	dd000415 	stw	r20,16(sp)
 a00862c:	dcc00315 	stw	r19,12(sp)
 a008630:	dc800215 	stw	r18,8(sp)
 a008634:	dc400115 	stw	r17,4(sp)
 a008638:	dc000015 	stw	r16,0(sp)
 a00863c:	1088000c 	andi	r2,r2,8192
 a008640:	302b883a 	mov	r21,r6
 a008644:	10002e26 	beq	r2,zero,a008700 <__sprint_r.part.0+0xf4>
 a008648:	30800217 	ldw	r2,8(r6)
 a00864c:	35800017 	ldw	r22,0(r6)
 a008650:	10002926 	beq	r2,zero,a0086f8 <__sprint_r.part.0+0xec>
 a008654:	2827883a 	mov	r19,r5
 a008658:	2029883a 	mov	r20,r4
 a00865c:	b5c00104 	addi	r23,r22,4
 a008660:	04bfffc4 	movi	r18,-1
 a008664:	bc400017 	ldw	r17,0(r23)
 a008668:	b4000017 	ldw	r16,0(r22)
 a00866c:	0039883a 	mov	fp,zero
 a008670:	8822d0ba 	srli	r17,r17,2
 a008674:	8800031e 	bne	r17,zero,a008684 <__sprint_r.part.0+0x78>
 a008678:	00001806 	br	a0086dc <__sprint_r.part.0+0xd0>
 a00867c:	84000104 	addi	r16,r16,4
 a008680:	8f001526 	beq	r17,fp,a0086d8 <__sprint_r.part.0+0xcc>
 a008684:	81400017 	ldw	r5,0(r16)
 a008688:	980d883a 	mov	r6,r19
 a00868c:	a009883a 	mov	r4,r20
 a008690:	a00a0fc0 	call	a00a0fc <_fputwc_r>
 a008694:	e7000044 	addi	fp,fp,1
 a008698:	14bff81e 	bne	r2,r18,a00867c <__alt_mem_flash+0xfe00767c>
 a00869c:	9005883a 	mov	r2,r18
 a0086a0:	a8000215 	stw	zero,8(r21)
 a0086a4:	a8000115 	stw	zero,4(r21)
 a0086a8:	dfc00917 	ldw	ra,36(sp)
 a0086ac:	df000817 	ldw	fp,32(sp)
 a0086b0:	ddc00717 	ldw	r23,28(sp)
 a0086b4:	dd800617 	ldw	r22,24(sp)
 a0086b8:	dd400517 	ldw	r21,20(sp)
 a0086bc:	dd000417 	ldw	r20,16(sp)
 a0086c0:	dcc00317 	ldw	r19,12(sp)
 a0086c4:	dc800217 	ldw	r18,8(sp)
 a0086c8:	dc400117 	ldw	r17,4(sp)
 a0086cc:	dc000017 	ldw	r16,0(sp)
 a0086d0:	dec00a04 	addi	sp,sp,40
 a0086d4:	f800283a 	ret
 a0086d8:	a8800217 	ldw	r2,8(r21)
 a0086dc:	8c63883a 	add	r17,r17,r17
 a0086e0:	8c63883a 	add	r17,r17,r17
 a0086e4:	1445c83a 	sub	r2,r2,r17
 a0086e8:	a8800215 	stw	r2,8(r21)
 a0086ec:	b5800204 	addi	r22,r22,8
 a0086f0:	bdc00204 	addi	r23,r23,8
 a0086f4:	103fdb1e 	bne	r2,zero,a008664 <__alt_mem_flash+0xfe007664>
 a0086f8:	0005883a 	mov	r2,zero
 a0086fc:	003fe806 	br	a0086a0 <__alt_mem_flash+0xfe0076a0>
 a008700:	a00a1fc0 	call	a00a1fc <__sfvwrite_r>
 a008704:	003fe606 	br	a0086a0 <__alt_mem_flash+0xfe0076a0>

0a008708 <__sprint_r>:
 a008708:	30c00217 	ldw	r3,8(r6)
 a00870c:	18000126 	beq	r3,zero,a008714 <__sprint_r+0xc>
 a008710:	a00860c1 	jmpi	a00860c <__sprint_r.part.0>
 a008714:	30000115 	stw	zero,4(r6)
 a008718:	0005883a 	mov	r2,zero
 a00871c:	f800283a 	ret

0a008720 <___vfiprintf_internal_r>:
 a008720:	deffca04 	addi	sp,sp,-216
 a008724:	dd403115 	stw	r21,196(sp)
 a008728:	dfc03515 	stw	ra,212(sp)
 a00872c:	df003415 	stw	fp,208(sp)
 a008730:	ddc03315 	stw	r23,204(sp)
 a008734:	dd803215 	stw	r22,200(sp)
 a008738:	dd003015 	stw	r20,192(sp)
 a00873c:	dcc02f15 	stw	r19,188(sp)
 a008740:	dc802e15 	stw	r18,184(sp)
 a008744:	dc402d15 	stw	r17,180(sp)
 a008748:	dc002c15 	stw	r16,176(sp)
 a00874c:	d9002115 	stw	r4,132(sp)
 a008750:	d9402015 	stw	r5,128(sp)
 a008754:	d9c02215 	stw	r7,136(sp)
 a008758:	302b883a 	mov	r21,r6
 a00875c:	20000226 	beq	r4,zero,a008768 <___vfiprintf_internal_r+0x48>
 a008760:	20800e17 	ldw	r2,56(r4)
 a008764:	1000cf26 	beq	r2,zero,a008aa4 <___vfiprintf_internal_r+0x384>
 a008768:	d8c02017 	ldw	r3,128(sp)
 a00876c:	1880030b 	ldhu	r2,12(r3)
 a008770:	10c8000c 	andi	r3,r2,8192
 a008774:	1800071e 	bne	r3,zero,a008794 <___vfiprintf_internal_r+0x74>
 a008778:	d9402017 	ldw	r5,128(sp)
 a00877c:	00f7ffc4 	movi	r3,-8193
 a008780:	10880014 	ori	r2,r2,8192
 a008784:	29001917 	ldw	r4,100(r5)
 a008788:	2880030d 	sth	r2,12(r5)
 a00878c:	20c6703a 	and	r3,r4,r3
 a008790:	28c01915 	stw	r3,100(r5)
 a008794:	10c0020c 	andi	r3,r2,8
 a008798:	1800a526 	beq	r3,zero,a008a30 <___vfiprintf_internal_r+0x310>
 a00879c:	d9002017 	ldw	r4,128(sp)
 a0087a0:	20c00417 	ldw	r3,16(r4)
 a0087a4:	1800a226 	beq	r3,zero,a008a30 <___vfiprintf_internal_r+0x310>
 a0087a8:	1080068c 	andi	r2,r2,26
 a0087ac:	00c00284 	movi	r3,10
 a0087b0:	10c0a826 	beq	r2,r3,a008a54 <___vfiprintf_internal_r+0x334>
 a0087b4:	d9001a04 	addi	r4,sp,104
 a0087b8:	d94019c4 	addi	r5,sp,103
 a0087bc:	04828074 	movhi	r18,2561
 a0087c0:	2145c83a 	sub	r2,r4,r5
 a0087c4:	94876404 	addi	r18,r18,7568
 a0087c8:	d9001e15 	stw	r4,120(sp)
 a0087cc:	d9401f15 	stw	r5,124(sp)
 a0087d0:	dec01a15 	stw	sp,104(sp)
 a0087d4:	d8001c15 	stw	zero,112(sp)
 a0087d8:	d8001b15 	stw	zero,108(sp)
 a0087dc:	d811883a 	mov	r8,sp
 a0087e0:	d8002615 	stw	zero,152(sp)
 a0087e4:	d8002415 	stw	zero,144(sp)
 a0087e8:	d8802815 	stw	r2,160(sp)
 a0087ec:	a82d883a 	mov	r22,r21
 a0087f0:	b0800007 	ldb	r2,0(r22)
 a0087f4:	10040d26 	beq	r2,zero,a00982c <___vfiprintf_internal_r+0x110c>
 a0087f8:	00c00944 	movi	r3,37
 a0087fc:	b029883a 	mov	r20,r22
 a008800:	10c0021e 	bne	r2,r3,a00880c <___vfiprintf_internal_r+0xec>
 a008804:	00001606 	br	a008860 <___vfiprintf_internal_r+0x140>
 a008808:	10c00326 	beq	r2,r3,a008818 <___vfiprintf_internal_r+0xf8>
 a00880c:	a5000044 	addi	r20,r20,1
 a008810:	a0800007 	ldb	r2,0(r20)
 a008814:	103ffc1e 	bne	r2,zero,a008808 <__alt_mem_flash+0xfe007808>
 a008818:	a5a1c83a 	sub	r16,r20,r22
 a00881c:	80001026 	beq	r16,zero,a008860 <___vfiprintf_internal_r+0x140>
 a008820:	d8c01c17 	ldw	r3,112(sp)
 a008824:	d8801b17 	ldw	r2,108(sp)
 a008828:	45800015 	stw	r22,0(r8)
 a00882c:	80c7883a 	add	r3,r16,r3
 a008830:	10800044 	addi	r2,r2,1
 a008834:	44000115 	stw	r16,4(r8)
 a008838:	d8c01c15 	stw	r3,112(sp)
 a00883c:	d8801b15 	stw	r2,108(sp)
 a008840:	010001c4 	movi	r4,7
 a008844:	2080750e 	bge	r4,r2,a008a1c <___vfiprintf_internal_r+0x2fc>
 a008848:	1803951e 	bne	r3,zero,a0096a0 <___vfiprintf_internal_r+0xf80>
 a00884c:	d8c02417 	ldw	r3,144(sp)
 a008850:	d8001b15 	stw	zero,108(sp)
 a008854:	d811883a 	mov	r8,sp
 a008858:	1c07883a 	add	r3,r3,r16
 a00885c:	d8c02415 	stw	r3,144(sp)
 a008860:	a0800007 	ldb	r2,0(r20)
 a008864:	1002e026 	beq	r2,zero,a0093e8 <___vfiprintf_internal_r+0xcc8>
 a008868:	a5800044 	addi	r22,r20,1
 a00886c:	a0c00047 	ldb	r3,1(r20)
 a008870:	d8001d85 	stb	zero,118(sp)
 a008874:	0027883a 	mov	r19,zero
 a008878:	d8002305 	stb	zero,140(sp)
 a00887c:	043fffc4 	movi	r16,-1
 a008880:	d8002515 	stw	zero,148(sp)
 a008884:	0023883a 	mov	r17,zero
 a008888:	05001604 	movi	r20,88
 a00888c:	05400244 	movi	r21,9
 a008890:	402f883a 	mov	r23,r8
 a008894:	b5800044 	addi	r22,r22,1
 a008898:	18bff804 	addi	r2,r3,-32
 a00889c:	a0827736 	bltu	r20,r2,a00927c <___vfiprintf_internal_r+0xb5c>
 a0088a0:	100490ba 	slli	r2,r2,2
 a0088a4:	01028074 	movhi	r4,2561
 a0088a8:	21222e04 	addi	r4,r4,-30536
 a0088ac:	1105883a 	add	r2,r2,r4
 a0088b0:	10800017 	ldw	r2,0(r2)
 a0088b4:	1000683a 	jmp	r2
 a0088b8:	0a008f7c 	xorhi	r8,at,573
 a0088bc:	0a00927c 	xorhi	r8,at,585
 a0088c0:	0a00927c 	xorhi	r8,at,585
 a0088c4:	0a008f98 	cmpnei	r8,at,574
 a0088c8:	0a00927c 	xorhi	r8,at,585
 a0088cc:	0a00927c 	xorhi	r8,at,585
 a0088d0:	0a00927c 	xorhi	r8,at,585
 a0088d4:	0a00927c 	xorhi	r8,at,585
 a0088d8:	0a00927c 	xorhi	r8,at,585
 a0088dc:	0a00927c 	xorhi	r8,at,585
 a0088e0:	0a0091a0 	cmpeqi	r8,at,582
 a0088e4:	0a0091c4 	addi	r8,at,583
 a0088e8:	0a00927c 	xorhi	r8,at,585
 a0088ec:	0a008abc 	xorhi	r8,at,554
 a0088f0:	0a0091d8 	cmpnei	r8,at,583
 a0088f4:	0a00927c 	xorhi	r8,at,585
 a0088f8:	0a008fa4 	muli	r8,at,574
 a0088fc:	0a008fb0 	cmpltui	r8,at,574
 a008900:	0a008fb0 	cmpltui	r8,at,574
 a008904:	0a008fb0 	cmpltui	r8,at,574
 a008908:	0a008fb0 	cmpltui	r8,at,574
 a00890c:	0a008fb0 	cmpltui	r8,at,574
 a008910:	0a008fb0 	cmpltui	r8,at,574
 a008914:	0a008fb0 	cmpltui	r8,at,574
 a008918:	0a008fb0 	cmpltui	r8,at,574
 a00891c:	0a008fb0 	cmpltui	r8,at,574
 a008920:	0a00927c 	xorhi	r8,at,585
 a008924:	0a00927c 	xorhi	r8,at,585
 a008928:	0a00927c 	xorhi	r8,at,585
 a00892c:	0a00927c 	xorhi	r8,at,585
 a008930:	0a00927c 	xorhi	r8,at,585
 a008934:	0a00927c 	xorhi	r8,at,585
 a008938:	0a00927c 	xorhi	r8,at,585
 a00893c:	0a00927c 	xorhi	r8,at,585
 a008940:	0a00927c 	xorhi	r8,at,585
 a008944:	0a00927c 	xorhi	r8,at,585
 a008948:	0a008ff0 	cmpltui	r8,at,575
 a00894c:	0a00927c 	xorhi	r8,at,585
 a008950:	0a00927c 	xorhi	r8,at,585
 a008954:	0a00927c 	xorhi	r8,at,585
 a008958:	0a00927c 	xorhi	r8,at,585
 a00895c:	0a00927c 	xorhi	r8,at,585
 a008960:	0a00927c 	xorhi	r8,at,585
 a008964:	0a00927c 	xorhi	r8,at,585
 a008968:	0a00927c 	xorhi	r8,at,585
 a00896c:	0a00927c 	xorhi	r8,at,585
 a008970:	0a00927c 	xorhi	r8,at,585
 a008974:	0a00902c 	andhi	r8,at,576
 a008978:	0a00927c 	xorhi	r8,at,585
 a00897c:	0a00927c 	xorhi	r8,at,585
 a008980:	0a00927c 	xorhi	r8,at,585
 a008984:	0a00927c 	xorhi	r8,at,585
 a008988:	0a00927c 	xorhi	r8,at,585
 a00898c:	0a009088 	cmpgei	r8,at,578
 a008990:	0a00927c 	xorhi	r8,at,585
 a008994:	0a00927c 	xorhi	r8,at,585
 a008998:	0a0090fc 	xorhi	r8,at,579
 a00899c:	0a00927c 	xorhi	r8,at,585
 a0089a0:	0a00927c 	xorhi	r8,at,585
 a0089a4:	0a00927c 	xorhi	r8,at,585
 a0089a8:	0a00927c 	xorhi	r8,at,585
 a0089ac:	0a00927c 	xorhi	r8,at,585
 a0089b0:	0a00927c 	xorhi	r8,at,585
 a0089b4:	0a00927c 	xorhi	r8,at,585
 a0089b8:	0a00927c 	xorhi	r8,at,585
 a0089bc:	0a00927c 	xorhi	r8,at,585
 a0089c0:	0a00927c 	xorhi	r8,at,585
 a0089c4:	0a008ea4 	muli	r8,at,570
 a0089c8:	0a008ed4 	ori	r8,at,571
 a0089cc:	0a00927c 	xorhi	r8,at,585
 a0089d0:	0a00927c 	xorhi	r8,at,585
 a0089d4:	0a00927c 	xorhi	r8,at,585
 a0089d8:	0a009224 	muli	r8,at,584
 a0089dc:	0a008ed4 	ori	r8,at,571
 a0089e0:	0a00927c 	xorhi	r8,at,585
 a0089e4:	0a00927c 	xorhi	r8,at,585
 a0089e8:	0a008d7c 	xorhi	r8,at,565
 a0089ec:	0a00927c 	xorhi	r8,at,585
 a0089f0:	0a008d90 	cmplti	r8,at,566
 a0089f4:	0a008dc8 	cmpgei	r8,at,567
 a0089f8:	0a008ac8 	cmpgei	r8,at,555
 a0089fc:	0a008d70 	cmpltui	r8,at,565
 a008a00:	0a00927c 	xorhi	r8,at,585
 a008a04:	0a00913c 	xorhi	r8,at,580
 a008a08:	0a00927c 	xorhi	r8,at,585
 a008a0c:	0a009188 	cmpgei	r8,at,582
 a008a10:	0a00927c 	xorhi	r8,at,585
 a008a14:	0a00927c 	xorhi	r8,at,585
 a008a18:	0a008e4c 	andi	r8,at,569
 a008a1c:	42000204 	addi	r8,r8,8
 a008a20:	d8c02417 	ldw	r3,144(sp)
 a008a24:	1c07883a 	add	r3,r3,r16
 a008a28:	d8c02415 	stw	r3,144(sp)
 a008a2c:	003f8c06 	br	a008860 <__alt_mem_flash+0xfe007860>
 a008a30:	d9402017 	ldw	r5,128(sp)
 a008a34:	d9002117 	ldw	r4,132(sp)
 a008a38:	a003dcc0 	call	a003dcc <__swsetup_r>
 a008a3c:	1003c11e 	bne	r2,zero,a009944 <___vfiprintf_internal_r+0x1224>
 a008a40:	d9402017 	ldw	r5,128(sp)
 a008a44:	00c00284 	movi	r3,10
 a008a48:	2880030b 	ldhu	r2,12(r5)
 a008a4c:	1080068c 	andi	r2,r2,26
 a008a50:	10ff581e 	bne	r2,r3,a0087b4 <__alt_mem_flash+0xfe0077b4>
 a008a54:	d8c02017 	ldw	r3,128(sp)
 a008a58:	1880038f 	ldh	r2,14(r3)
 a008a5c:	103f5516 	blt	r2,zero,a0087b4 <__alt_mem_flash+0xfe0077b4>
 a008a60:	d9c02217 	ldw	r7,136(sp)
 a008a64:	d9002117 	ldw	r4,132(sp)
 a008a68:	a80d883a 	mov	r6,r21
 a008a6c:	180b883a 	mov	r5,r3
 a008a70:	a009c480 	call	a009c48 <__sbprintf>
 a008a74:	dfc03517 	ldw	ra,212(sp)
 a008a78:	df003417 	ldw	fp,208(sp)
 a008a7c:	ddc03317 	ldw	r23,204(sp)
 a008a80:	dd803217 	ldw	r22,200(sp)
 a008a84:	dd403117 	ldw	r21,196(sp)
 a008a88:	dd003017 	ldw	r20,192(sp)
 a008a8c:	dcc02f17 	ldw	r19,188(sp)
 a008a90:	dc802e17 	ldw	r18,184(sp)
 a008a94:	dc402d17 	ldw	r17,180(sp)
 a008a98:	dc002c17 	ldw	r16,176(sp)
 a008a9c:	dec03604 	addi	sp,sp,216
 a008aa0:	f800283a 	ret
 a008aa4:	a005dd80 	call	a005dd8 <__sinit>
 a008aa8:	003f2f06 	br	a008768 <__alt_mem_flash+0xfe007768>
 a008aac:	d8c02517 	ldw	r3,148(sp)
 a008ab0:	d8802215 	stw	r2,136(sp)
 a008ab4:	00c7c83a 	sub	r3,zero,r3
 a008ab8:	d8c02515 	stw	r3,148(sp)
 a008abc:	8c400114 	ori	r17,r17,4
 a008ac0:	b0c00007 	ldb	r3,0(r22)
 a008ac4:	003f7306 	br	a008894 <__alt_mem_flash+0xfe007894>
 a008ac8:	00800c04 	movi	r2,48
 a008acc:	d9402217 	ldw	r5,136(sp)
 a008ad0:	d8801d05 	stb	r2,116(sp)
 a008ad4:	00801e04 	movi	r2,120
 a008ad8:	d8801d45 	stb	r2,117(sp)
 a008adc:	d8001d85 	stb	zero,118(sp)
 a008ae0:	b811883a 	mov	r8,r23
 a008ae4:	28c00104 	addi	r3,r5,4
 a008ae8:	2cc00017 	ldw	r19,0(r5)
 a008aec:	0029883a 	mov	r20,zero
 a008af0:	88800094 	ori	r2,r17,2
 a008af4:	80032516 	blt	r16,zero,a00978c <___vfiprintf_internal_r+0x106c>
 a008af8:	00bfdfc4 	movi	r2,-129
 a008afc:	88a2703a 	and	r17,r17,r2
 a008b00:	d8c02215 	stw	r3,136(sp)
 a008b04:	8c400094 	ori	r17,r17,2
 a008b08:	98032a1e 	bne	r19,zero,a0097b4 <___vfiprintf_internal_r+0x1094>
 a008b0c:	00828074 	movhi	r2,2561
 a008b10:	10870404 	addi	r2,r2,7184
 a008b14:	d8802615 	stw	r2,152(sp)
 a008b18:	002b883a 	mov	r21,zero
 a008b1c:	8001741e 	bne	r16,zero,a0090f0 <___vfiprintf_internal_r+0x9d0>
 a008b20:	0021883a 	mov	r16,zero
 a008b24:	0029883a 	mov	r20,zero
 a008b28:	ddc01a04 	addi	r23,sp,104
 a008b2c:	8027883a 	mov	r19,r16
 a008b30:	8500010e 	bge	r16,r20,a008b38 <___vfiprintf_internal_r+0x418>
 a008b34:	a027883a 	mov	r19,r20
 a008b38:	ad403fcc 	andi	r21,r21,255
 a008b3c:	ad40201c 	xori	r21,r21,128
 a008b40:	ad7fe004 	addi	r21,r21,-128
 a008b44:	a8000126 	beq	r21,zero,a008b4c <___vfiprintf_internal_r+0x42c>
 a008b48:	9cc00044 	addi	r19,r19,1
 a008b4c:	89c0008c 	andi	r7,r17,2
 a008b50:	38000126 	beq	r7,zero,a008b58 <___vfiprintf_internal_r+0x438>
 a008b54:	9cc00084 	addi	r19,r19,2
 a008b58:	88c0210c 	andi	r3,r17,132
 a008b5c:	1801dd1e 	bne	r3,zero,a0092d4 <___vfiprintf_internal_r+0xbb4>
 a008b60:	d9402517 	ldw	r5,148(sp)
 a008b64:	2cebc83a 	sub	r21,r5,r19
 a008b68:	0541da0e 	bge	zero,r21,a0092d4 <___vfiprintf_internal_r+0xbb4>
 a008b6c:	07000404 	movi	fp,16
 a008b70:	d8801c17 	ldw	r2,112(sp)
 a008b74:	e543be0e 	bge	fp,r21,a009a70 <___vfiprintf_internal_r+0x1350>
 a008b78:	01428074 	movhi	r5,2561
 a008b7c:	29476804 	addi	r5,r5,7584
 a008b80:	dc002715 	stw	r16,156(sp)
 a008b84:	d9801b17 	ldw	r6,108(sp)
 a008b88:	a821883a 	mov	r16,r21
 a008b8c:	d9402315 	stw	r5,140(sp)
 a008b90:	028001c4 	movi	r10,7
 a008b94:	d9c02915 	stw	r7,164(sp)
 a008b98:	182b883a 	mov	r21,r3
 a008b9c:	00000506 	br	a008bb4 <___vfiprintf_internal_r+0x494>
 a008ba0:	31000084 	addi	r4,r6,2
 a008ba4:	42000204 	addi	r8,r8,8
 a008ba8:	180d883a 	mov	r6,r3
 a008bac:	843ffc04 	addi	r16,r16,-16
 a008bb0:	e4000f0e 	bge	fp,r16,a008bf0 <___vfiprintf_internal_r+0x4d0>
 a008bb4:	01028074 	movhi	r4,2561
 a008bb8:	10800404 	addi	r2,r2,16
 a008bbc:	30c00044 	addi	r3,r6,1
 a008bc0:	21076804 	addi	r4,r4,7584
 a008bc4:	41000015 	stw	r4,0(r8)
 a008bc8:	47000115 	stw	fp,4(r8)
 a008bcc:	d8801c15 	stw	r2,112(sp)
 a008bd0:	d8c01b15 	stw	r3,108(sp)
 a008bd4:	50fff20e 	bge	r10,r3,a008ba0 <__alt_mem_flash+0xfe007ba0>
 a008bd8:	1001b21e 	bne	r2,zero,a0092a4 <___vfiprintf_internal_r+0xb84>
 a008bdc:	843ffc04 	addi	r16,r16,-16
 a008be0:	000d883a 	mov	r6,zero
 a008be4:	01000044 	movi	r4,1
 a008be8:	d811883a 	mov	r8,sp
 a008bec:	e43ff116 	blt	fp,r16,a008bb4 <__alt_mem_flash+0xfe007bb4>
 a008bf0:	a807883a 	mov	r3,r21
 a008bf4:	d9c02917 	ldw	r7,164(sp)
 a008bf8:	802b883a 	mov	r21,r16
 a008bfc:	dc002717 	ldw	r16,156(sp)
 a008c00:	d9402317 	ldw	r5,140(sp)
 a008c04:	a885883a 	add	r2,r21,r2
 a008c08:	45400115 	stw	r21,4(r8)
 a008c0c:	41400015 	stw	r5,0(r8)
 a008c10:	d8801c15 	stw	r2,112(sp)
 a008c14:	d9001b15 	stw	r4,108(sp)
 a008c18:	014001c4 	movi	r5,7
 a008c1c:	29026216 	blt	r5,r4,a0095a8 <___vfiprintf_internal_r+0xe88>
 a008c20:	d9801d87 	ldb	r6,118(sp)
 a008c24:	42000204 	addi	r8,r8,8
 a008c28:	21400044 	addi	r5,r4,1
 a008c2c:	3001ae1e 	bne	r6,zero,a0092e8 <___vfiprintf_internal_r+0xbc8>
 a008c30:	3801bb26 	beq	r7,zero,a009320 <___vfiprintf_internal_r+0xc00>
 a008c34:	d9001d04 	addi	r4,sp,116
 a008c38:	10800084 	addi	r2,r2,2
 a008c3c:	41000015 	stw	r4,0(r8)
 a008c40:	01000084 	movi	r4,2
 a008c44:	41000115 	stw	r4,4(r8)
 a008c48:	d8801c15 	stw	r2,112(sp)
 a008c4c:	d9401b15 	stw	r5,108(sp)
 a008c50:	010001c4 	movi	r4,7
 a008c54:	2142680e 	bge	r4,r5,a0095f8 <___vfiprintf_internal_r+0xed8>
 a008c58:	1002b11e 	bne	r2,zero,a009720 <___vfiprintf_internal_r+0x1000>
 a008c5c:	01802004 	movi	r6,128
 a008c60:	01400044 	movi	r5,1
 a008c64:	0009883a 	mov	r4,zero
 a008c68:	d811883a 	mov	r8,sp
 a008c6c:	1981ae1e 	bne	r3,r6,a009328 <___vfiprintf_internal_r+0xc08>
 a008c70:	d8c02517 	ldw	r3,148(sp)
 a008c74:	1cf9c83a 	sub	fp,r3,r19
 a008c78:	0701ab0e 	bge	zero,fp,a009328 <___vfiprintf_internal_r+0xc08>
 a008c7c:	05400404 	movi	r21,16
 a008c80:	af03a90e 	bge	r21,fp,a009b28 <___vfiprintf_internal_r+0x1408>
 a008c84:	01428074 	movhi	r5,2561
 a008c88:	29476404 	addi	r5,r5,7568
 a008c8c:	d9402315 	stw	r5,140(sp)
 a008c90:	01c001c4 	movi	r7,7
 a008c94:	00000506 	br	a008cac <___vfiprintf_internal_r+0x58c>
 a008c98:	21800084 	addi	r6,r4,2
 a008c9c:	42000204 	addi	r8,r8,8
 a008ca0:	1809883a 	mov	r4,r3
 a008ca4:	e73ffc04 	addi	fp,fp,-16
 a008ca8:	af000d0e 	bge	r21,fp,a008ce0 <___vfiprintf_internal_r+0x5c0>
 a008cac:	10800404 	addi	r2,r2,16
 a008cb0:	20c00044 	addi	r3,r4,1
 a008cb4:	44800015 	stw	r18,0(r8)
 a008cb8:	45400115 	stw	r21,4(r8)
 a008cbc:	d8801c15 	stw	r2,112(sp)
 a008cc0:	d8c01b15 	stw	r3,108(sp)
 a008cc4:	38fff40e 	bge	r7,r3,a008c98 <__alt_mem_flash+0xfe007c98>
 a008cc8:	10022b1e 	bne	r2,zero,a009578 <___vfiprintf_internal_r+0xe58>
 a008ccc:	e73ffc04 	addi	fp,fp,-16
 a008cd0:	01800044 	movi	r6,1
 a008cd4:	0009883a 	mov	r4,zero
 a008cd8:	d811883a 	mov	r8,sp
 a008cdc:	af3ff316 	blt	r21,fp,a008cac <__alt_mem_flash+0xfe007cac>
 a008ce0:	d8c02317 	ldw	r3,140(sp)
 a008ce4:	1705883a 	add	r2,r2,fp
 a008ce8:	47000115 	stw	fp,4(r8)
 a008cec:	40c00015 	stw	r3,0(r8)
 a008cf0:	d8801c15 	stw	r2,112(sp)
 a008cf4:	d9801b15 	stw	r6,108(sp)
 a008cf8:	00c001c4 	movi	r3,7
 a008cfc:	19829416 	blt	r3,r6,a009750 <___vfiprintf_internal_r+0x1030>
 a008d00:	8521c83a 	sub	r16,r16,r20
 a008d04:	42000204 	addi	r8,r8,8
 a008d08:	31400044 	addi	r5,r6,1
 a008d0c:	3009883a 	mov	r4,r6
 a008d10:	04018716 	blt	zero,r16,a009330 <___vfiprintf_internal_r+0xc10>
 a008d14:	a085883a 	add	r2,r20,r2
 a008d18:	45c00015 	stw	r23,0(r8)
 a008d1c:	45000115 	stw	r20,4(r8)
 a008d20:	d8801c15 	stw	r2,112(sp)
 a008d24:	d9401b15 	stw	r5,108(sp)
 a008d28:	00c001c4 	movi	r3,7
 a008d2c:	1941c20e 	bge	r3,r5,a009438 <___vfiprintf_internal_r+0xd18>
 a008d30:	1002531e 	bne	r2,zero,a009680 <___vfiprintf_internal_r+0xf60>
 a008d34:	d8001b15 	stw	zero,108(sp)
 a008d38:	8c40010c 	andi	r17,r17,4
 a008d3c:	88023226 	beq	r17,zero,a009608 <___vfiprintf_internal_r+0xee8>
 a008d40:	d9002517 	ldw	r4,148(sp)
 a008d44:	24e3c83a 	sub	r17,r4,r19
 a008d48:	04432916 	blt	zero,r17,a0099f0 <___vfiprintf_internal_r+0x12d0>
 a008d4c:	d8802517 	ldw	r2,148(sp)
 a008d50:	14c0010e 	bge	r2,r19,a008d58 <___vfiprintf_internal_r+0x638>
 a008d54:	9805883a 	mov	r2,r19
 a008d58:	d8c02417 	ldw	r3,144(sp)
 a008d5c:	1887883a 	add	r3,r3,r2
 a008d60:	d8c02415 	stw	r3,144(sp)
 a008d64:	d8001b15 	stw	zero,108(sp)
 a008d68:	d811883a 	mov	r8,sp
 a008d6c:	003ea006 	br	a0087f0 <__alt_mem_flash+0xfe0077f0>
 a008d70:	8c400814 	ori	r17,r17,32
 a008d74:	b0c00007 	ldb	r3,0(r22)
 a008d78:	003ec606 	br	a008894 <__alt_mem_flash+0xfe007894>
 a008d7c:	b0c00007 	ldb	r3,0(r22)
 a008d80:	00801b04 	movi	r2,108
 a008d84:	18832026 	beq	r3,r2,a009a08 <___vfiprintf_internal_r+0x12e8>
 a008d88:	8c400414 	ori	r17,r17,16
 a008d8c:	003ec106 	br	a008894 <__alt_mem_flash+0xfe007894>
 a008d90:	9cc03fcc 	andi	r19,r19,255
 a008d94:	b811883a 	mov	r8,r23
 a008d98:	9803981e 	bne	r19,zero,a009bfc <___vfiprintf_internal_r+0x14dc>
 a008d9c:	8880080c 	andi	r2,r17,32
 a008da0:	1002be26 	beq	r2,zero,a00989c <___vfiprintf_internal_r+0x117c>
 a008da4:	d9002217 	ldw	r4,136(sp)
 a008da8:	d9402417 	ldw	r5,144(sp)
 a008dac:	20800017 	ldw	r2,0(r4)
 a008db0:	2807d7fa 	srai	r3,r5,31
 a008db4:	21000104 	addi	r4,r4,4
 a008db8:	d9002215 	stw	r4,136(sp)
 a008dbc:	11400015 	stw	r5,0(r2)
 a008dc0:	10c00115 	stw	r3,4(r2)
 a008dc4:	003e8a06 	br	a0087f0 <__alt_mem_flash+0xfe0077f0>
 a008dc8:	9cc03fcc 	andi	r19,r19,255
 a008dcc:	b811883a 	mov	r8,r23
 a008dd0:	9803871e 	bne	r19,zero,a009bf0 <___vfiprintf_internal_r+0x14d0>
 a008dd4:	8880080c 	andi	r2,r17,32
 a008dd8:	10009a26 	beq	r2,zero,a009044 <___vfiprintf_internal_r+0x924>
 a008ddc:	d9002217 	ldw	r4,136(sp)
 a008de0:	d8001d85 	stb	zero,118(sp)
 a008de4:	20800204 	addi	r2,r4,8
 a008de8:	24c00017 	ldw	r19,0(r4)
 a008dec:	25000117 	ldw	r20,4(r4)
 a008df0:	8002a416 	blt	r16,zero,a009884 <___vfiprintf_internal_r+0x1164>
 a008df4:	013fdfc4 	movi	r4,-129
 a008df8:	9d06b03a 	or	r3,r19,r20
 a008dfc:	d8802215 	stw	r2,136(sp)
 a008e00:	8922703a 	and	r17,r17,r4
 a008e04:	18009b26 	beq	r3,zero,a009074 <___vfiprintf_internal_r+0x954>
 a008e08:	002b883a 	mov	r21,zero
 a008e0c:	ddc01a04 	addi	r23,sp,104
 a008e10:	9806d0fa 	srli	r3,r19,3
 a008e14:	a008977a 	slli	r4,r20,29
 a008e18:	a028d0fa 	srli	r20,r20,3
 a008e1c:	9cc001cc 	andi	r19,r19,7
 a008e20:	98800c04 	addi	r2,r19,48
 a008e24:	bdffffc4 	addi	r23,r23,-1
 a008e28:	20e6b03a 	or	r19,r4,r3
 a008e2c:	b8800005 	stb	r2,0(r23)
 a008e30:	9d06b03a 	or	r3,r19,r20
 a008e34:	183ff61e 	bne	r3,zero,a008e10 <__alt_mem_flash+0xfe007e10>
 a008e38:	88c0004c 	andi	r3,r17,1
 a008e3c:	18021f1e 	bne	r3,zero,a0096bc <___vfiprintf_internal_r+0xf9c>
 a008e40:	d9401e17 	ldw	r5,120(sp)
 a008e44:	2de9c83a 	sub	r20,r5,r23
 a008e48:	003f3806 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a008e4c:	9cc03fcc 	andi	r19,r19,255
 a008e50:	b811883a 	mov	r8,r23
 a008e54:	98034f1e 	bne	r19,zero,a009b94 <___vfiprintf_internal_r+0x1474>
 a008e58:	00828074 	movhi	r2,2561
 a008e5c:	10870404 	addi	r2,r2,7184
 a008e60:	d8802615 	stw	r2,152(sp)
 a008e64:	8880080c 	andi	r2,r17,32
 a008e68:	1000ac26 	beq	r2,zero,a00911c <___vfiprintf_internal_r+0x9fc>
 a008e6c:	d9002217 	ldw	r4,136(sp)
 a008e70:	24c00017 	ldw	r19,0(r4)
 a008e74:	25000117 	ldw	r20,4(r4)
 a008e78:	21000204 	addi	r4,r4,8
 a008e7c:	d9002215 	stw	r4,136(sp)
 a008e80:	8880004c 	andi	r2,r17,1
 a008e84:	1001e726 	beq	r2,zero,a009624 <___vfiprintf_internal_r+0xf04>
 a008e88:	9d04b03a 	or	r2,r19,r20
 a008e8c:	10025c1e 	bne	r2,zero,a009800 <___vfiprintf_internal_r+0x10e0>
 a008e90:	d8001d85 	stb	zero,118(sp)
 a008e94:	80024416 	blt	r16,zero,a0097a8 <___vfiprintf_internal_r+0x1088>
 a008e98:	00bfdfc4 	movi	r2,-129
 a008e9c:	88a2703a 	and	r17,r17,r2
 a008ea0:	003f1d06 	br	a008b18 <__alt_mem_flash+0xfe007b18>
 a008ea4:	d8c02217 	ldw	r3,136(sp)
 a008ea8:	04c00044 	movi	r19,1
 a008eac:	b811883a 	mov	r8,r23
 a008eb0:	18800017 	ldw	r2,0(r3)
 a008eb4:	18c00104 	addi	r3,r3,4
 a008eb8:	d8001d85 	stb	zero,118(sp)
 a008ebc:	d8801005 	stb	r2,64(sp)
 a008ec0:	d8c02215 	stw	r3,136(sp)
 a008ec4:	9829883a 	mov	r20,r19
 a008ec8:	ddc01004 	addi	r23,sp,64
 a008ecc:	0021883a 	mov	r16,zero
 a008ed0:	003f1e06 	br	a008b4c <__alt_mem_flash+0xfe007b4c>
 a008ed4:	9cc03fcc 	andi	r19,r19,255
 a008ed8:	b811883a 	mov	r8,r23
 a008edc:	9803331e 	bne	r19,zero,a009bac <___vfiprintf_internal_r+0x148c>
 a008ee0:	8880080c 	andi	r2,r17,32
 a008ee4:	10004826 	beq	r2,zero,a009008 <___vfiprintf_internal_r+0x8e8>
 a008ee8:	d9002217 	ldw	r4,136(sp)
 a008eec:	20800117 	ldw	r2,4(r4)
 a008ef0:	24c00017 	ldw	r19,0(r4)
 a008ef4:	21000204 	addi	r4,r4,8
 a008ef8:	d9002215 	stw	r4,136(sp)
 a008efc:	1029883a 	mov	r20,r2
 a008f00:	10024c16 	blt	r2,zero,a009834 <___vfiprintf_internal_r+0x1114>
 a008f04:	dd401d83 	ldbu	r21,118(sp)
 a008f08:	80007116 	blt	r16,zero,a0090d0 <___vfiprintf_internal_r+0x9b0>
 a008f0c:	00ffdfc4 	movi	r3,-129
 a008f10:	9d04b03a 	or	r2,r19,r20
 a008f14:	88e2703a 	and	r17,r17,r3
 a008f18:	1000d126 	beq	r2,zero,a009260 <___vfiprintf_internal_r+0xb40>
 a008f1c:	a0023526 	beq	r20,zero,a0097f4 <___vfiprintf_internal_r+0x10d4>
 a008f20:	ddc01a04 	addi	r23,sp,104
 a008f24:	4039883a 	mov	fp,r8
 a008f28:	9809883a 	mov	r4,r19
 a008f2c:	a00b883a 	mov	r5,r20
 a008f30:	01800284 	movi	r6,10
 a008f34:	000f883a 	mov	r7,zero
 a008f38:	a00b7d40 	call	a00b7d4 <__umoddi3>
 a008f3c:	10800c04 	addi	r2,r2,48
 a008f40:	bdffffc4 	addi	r23,r23,-1
 a008f44:	9809883a 	mov	r4,r19
 a008f48:	a00b883a 	mov	r5,r20
 a008f4c:	b8800005 	stb	r2,0(r23)
 a008f50:	01800284 	movi	r6,10
 a008f54:	000f883a 	mov	r7,zero
 a008f58:	a00b1d80 	call	a00b1d8 <__udivdi3>
 a008f5c:	1027883a 	mov	r19,r2
 a008f60:	10c4b03a 	or	r2,r2,r3
 a008f64:	1829883a 	mov	r20,r3
 a008f68:	103fef1e 	bne	r2,zero,a008f28 <__alt_mem_flash+0xfe007f28>
 a008f6c:	d9001e17 	ldw	r4,120(sp)
 a008f70:	e011883a 	mov	r8,fp
 a008f74:	25e9c83a 	sub	r20,r4,r23
 a008f78:	003eec06 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a008f7c:	d8802307 	ldb	r2,140(sp)
 a008f80:	1002361e 	bne	r2,zero,a00985c <___vfiprintf_internal_r+0x113c>
 a008f84:	00c00804 	movi	r3,32
 a008f88:	d8c02305 	stb	r3,140(sp)
 a008f8c:	04c00044 	movi	r19,1
 a008f90:	b0c00007 	ldb	r3,0(r22)
 a008f94:	003e3f06 	br	a008894 <__alt_mem_flash+0xfe007894>
 a008f98:	8c400054 	ori	r17,r17,1
 a008f9c:	b0c00007 	ldb	r3,0(r22)
 a008fa0:	003e3c06 	br	a008894 <__alt_mem_flash+0xfe007894>
 a008fa4:	8c402014 	ori	r17,r17,128
 a008fa8:	b0c00007 	ldb	r3,0(r22)
 a008fac:	003e3906 	br	a008894 <__alt_mem_flash+0xfe007894>
 a008fb0:	dc002715 	stw	r16,156(sp)
 a008fb4:	d8002515 	stw	zero,148(sp)
 a008fb8:	1f3ff404 	addi	fp,r3,-48
 a008fbc:	0009883a 	mov	r4,zero
 a008fc0:	b021883a 	mov	r16,r22
 a008fc4:	01400284 	movi	r5,10
 a008fc8:	a0019a40 	call	a0019a4 <__mulsi3>
 a008fcc:	80c00007 	ldb	r3,0(r16)
 a008fd0:	e089883a 	add	r4,fp,r2
 a008fd4:	b5800044 	addi	r22,r22,1
 a008fd8:	1f3ff404 	addi	fp,r3,-48
 a008fdc:	b021883a 	mov	r16,r22
 a008fe0:	af3ff82e 	bgeu	r21,fp,a008fc4 <__alt_mem_flash+0xfe007fc4>
 a008fe4:	d9002515 	stw	r4,148(sp)
 a008fe8:	dc002717 	ldw	r16,156(sp)
 a008fec:	003e2a06 	br	a008898 <__alt_mem_flash+0xfe007898>
 a008ff0:	9cc03fcc 	andi	r19,r19,255
 a008ff4:	b811883a 	mov	r8,r23
 a008ff8:	9802e91e 	bne	r19,zero,a009ba0 <___vfiprintf_internal_r+0x1480>
 a008ffc:	8c400414 	ori	r17,r17,16
 a009000:	8880080c 	andi	r2,r17,32
 a009004:	103fb81e 	bne	r2,zero,a008ee8 <__alt_mem_flash+0xfe007ee8>
 a009008:	8880040c 	andi	r2,r17,16
 a00900c:	10022e26 	beq	r2,zero,a0098c8 <___vfiprintf_internal_r+0x11a8>
 a009010:	d9402217 	ldw	r5,136(sp)
 a009014:	2cc00017 	ldw	r19,0(r5)
 a009018:	29400104 	addi	r5,r5,4
 a00901c:	d9402215 	stw	r5,136(sp)
 a009020:	9829d7fa 	srai	r20,r19,31
 a009024:	a005883a 	mov	r2,r20
 a009028:	003fb506 	br	a008f00 <__alt_mem_flash+0xfe007f00>
 a00902c:	9cc03fcc 	andi	r19,r19,255
 a009030:	b811883a 	mov	r8,r23
 a009034:	9802fa1e 	bne	r19,zero,a009c20 <___vfiprintf_internal_r+0x1500>
 a009038:	8c400414 	ori	r17,r17,16
 a00903c:	8880080c 	andi	r2,r17,32
 a009040:	103f661e 	bne	r2,zero,a008ddc <__alt_mem_flash+0xfe007ddc>
 a009044:	8880040c 	andi	r2,r17,16
 a009048:	10020626 	beq	r2,zero,a009864 <___vfiprintf_internal_r+0x1144>
 a00904c:	d9402217 	ldw	r5,136(sp)
 a009050:	d8001d85 	stb	zero,118(sp)
 a009054:	0029883a 	mov	r20,zero
 a009058:	28800104 	addi	r2,r5,4
 a00905c:	2cc00017 	ldw	r19,0(r5)
 a009060:	80020816 	blt	r16,zero,a009884 <___vfiprintf_internal_r+0x1164>
 a009064:	00ffdfc4 	movi	r3,-129
 a009068:	d8802215 	stw	r2,136(sp)
 a00906c:	88e2703a 	and	r17,r17,r3
 a009070:	983f651e 	bne	r19,zero,a008e08 <__alt_mem_flash+0xfe007e08>
 a009074:	002b883a 	mov	r21,zero
 a009078:	8002cf26 	beq	r16,zero,a009bb8 <___vfiprintf_internal_r+0x1498>
 a00907c:	0027883a 	mov	r19,zero
 a009080:	0029883a 	mov	r20,zero
 a009084:	003f6106 	br	a008e0c <__alt_mem_flash+0xfe007e0c>
 a009088:	9cc03fcc 	andi	r19,r19,255
 a00908c:	b811883a 	mov	r8,r23
 a009090:	9802e01e 	bne	r19,zero,a009c14 <___vfiprintf_internal_r+0x14f4>
 a009094:	8c400414 	ori	r17,r17,16
 a009098:	8880080c 	andi	r2,r17,32
 a00909c:	1000641e 	bne	r2,zero,a009230 <___vfiprintf_internal_r+0xb10>
 a0090a0:	8880040c 	andi	r2,r17,16
 a0090a4:	1001c81e 	bne	r2,zero,a0097c8 <___vfiprintf_internal_r+0x10a8>
 a0090a8:	8880100c 	andi	r2,r17,64
 a0090ac:	d8001d85 	stb	zero,118(sp)
 a0090b0:	1002281e 	bne	r2,zero,a009954 <___vfiprintf_internal_r+0x1234>
 a0090b4:	d9002217 	ldw	r4,136(sp)
 a0090b8:	0029883a 	mov	r20,zero
 a0090bc:	20800104 	addi	r2,r4,4
 a0090c0:	24c00017 	ldw	r19,0(r4)
 a0090c4:	8001c60e 	bge	r16,zero,a0097e0 <___vfiprintf_internal_r+0x10c0>
 a0090c8:	d8802215 	stw	r2,136(sp)
 a0090cc:	002b883a 	mov	r21,zero
 a0090d0:	9d04b03a 	or	r2,r19,r20
 a0090d4:	103f911e 	bne	r2,zero,a008f1c <__alt_mem_flash+0xfe007f1c>
 a0090d8:	00800044 	movi	r2,1
 a0090dc:	10803fcc 	andi	r2,r2,255
 a0090e0:	00c00044 	movi	r3,1
 a0090e4:	10c05f26 	beq	r2,r3,a009264 <___vfiprintf_internal_r+0xb44>
 a0090e8:	00c00084 	movi	r3,2
 a0090ec:	10ffe31e 	bne	r2,r3,a00907c <__alt_mem_flash+0xfe00807c>
 a0090f0:	0027883a 	mov	r19,zero
 a0090f4:	0029883a 	mov	r20,zero
 a0090f8:	00015106 	br	a009640 <___vfiprintf_internal_r+0xf20>
 a0090fc:	9cc03fcc 	andi	r19,r19,255
 a009100:	b811883a 	mov	r8,r23
 a009104:	9802c01e 	bne	r19,zero,a009c08 <___vfiprintf_internal_r+0x14e8>
 a009108:	01428074 	movhi	r5,2561
 a00910c:	2946ff04 	addi	r5,r5,7164
 a009110:	d9402615 	stw	r5,152(sp)
 a009114:	8880080c 	andi	r2,r17,32
 a009118:	103f541e 	bne	r2,zero,a008e6c <__alt_mem_flash+0xfe007e6c>
 a00911c:	8880040c 	andi	r2,r17,16
 a009120:	1001f226 	beq	r2,zero,a0098ec <___vfiprintf_internal_r+0x11cc>
 a009124:	d9402217 	ldw	r5,136(sp)
 a009128:	0029883a 	mov	r20,zero
 a00912c:	2cc00017 	ldw	r19,0(r5)
 a009130:	29400104 	addi	r5,r5,4
 a009134:	d9402215 	stw	r5,136(sp)
 a009138:	003f5106 	br	a008e80 <__alt_mem_flash+0xfe007e80>
 a00913c:	d8c02217 	ldw	r3,136(sp)
 a009140:	b811883a 	mov	r8,r23
 a009144:	d8001d85 	stb	zero,118(sp)
 a009148:	1dc00017 	ldw	r23,0(r3)
 a00914c:	1f000104 	addi	fp,r3,4
 a009150:	b8025926 	beq	r23,zero,a009ab8 <___vfiprintf_internal_r+0x1398>
 a009154:	80023316 	blt	r16,zero,a009a24 <___vfiprintf_internal_r+0x1304>
 a009158:	800d883a 	mov	r6,r16
 a00915c:	000b883a 	mov	r5,zero
 a009160:	b809883a 	mov	r4,r23
 a009164:	da002a15 	stw	r8,168(sp)
 a009168:	a006e880 	call	a006e88 <memchr>
 a00916c:	da002a17 	ldw	r8,168(sp)
 a009170:	10026826 	beq	r2,zero,a009b14 <___vfiprintf_internal_r+0x13f4>
 a009174:	15e9c83a 	sub	r20,r2,r23
 a009178:	dd401d83 	ldbu	r21,118(sp)
 a00917c:	df002215 	stw	fp,136(sp)
 a009180:	0021883a 	mov	r16,zero
 a009184:	003e6906 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a009188:	9cc03fcc 	andi	r19,r19,255
 a00918c:	b811883a 	mov	r8,r23
 a009190:	983fc126 	beq	r19,zero,a009098 <__alt_mem_flash+0xfe008098>
 a009194:	d8c02303 	ldbu	r3,140(sp)
 a009198:	d8c01d85 	stb	r3,118(sp)
 a00919c:	003fbe06 	br	a009098 <__alt_mem_flash+0xfe008098>
 a0091a0:	d9002217 	ldw	r4,136(sp)
 a0091a4:	d9402217 	ldw	r5,136(sp)
 a0091a8:	21000017 	ldw	r4,0(r4)
 a0091ac:	28800104 	addi	r2,r5,4
 a0091b0:	d9002515 	stw	r4,148(sp)
 a0091b4:	203e3d16 	blt	r4,zero,a008aac <__alt_mem_flash+0xfe007aac>
 a0091b8:	d8802215 	stw	r2,136(sp)
 a0091bc:	b0c00007 	ldb	r3,0(r22)
 a0091c0:	003db406 	br	a008894 <__alt_mem_flash+0xfe007894>
 a0091c4:	00c00ac4 	movi	r3,43
 a0091c8:	d8c02305 	stb	r3,140(sp)
 a0091cc:	04c00044 	movi	r19,1
 a0091d0:	b0c00007 	ldb	r3,0(r22)
 a0091d4:	003daf06 	br	a008894 <__alt_mem_flash+0xfe007894>
 a0091d8:	b0c00007 	ldb	r3,0(r22)
 a0091dc:	01000a84 	movi	r4,42
 a0091e0:	b4000044 	addi	r16,r22,1
 a0091e4:	19025e26 	beq	r3,r4,a009b60 <___vfiprintf_internal_r+0x1440>
 a0091e8:	1f3ff404 	addi	fp,r3,-48
 a0091ec:	0009883a 	mov	r4,zero
 a0091f0:	af025236 	bltu	r21,fp,a009b3c <___vfiprintf_internal_r+0x141c>
 a0091f4:	01400284 	movi	r5,10
 a0091f8:	a0019a40 	call	a0019a4 <__mulsi3>
 a0091fc:	80c00007 	ldb	r3,0(r16)
 a009200:	1709883a 	add	r4,r2,fp
 a009204:	85800044 	addi	r22,r16,1
 a009208:	1f3ff404 	addi	fp,r3,-48
 a00920c:	b021883a 	mov	r16,r22
 a009210:	af3ff82e 	bgeu	r21,fp,a0091f4 <__alt_mem_flash+0xfe0081f4>
 a009214:	2021883a 	mov	r16,r4
 a009218:	203d9f0e 	bge	r4,zero,a008898 <__alt_mem_flash+0xfe007898>
 a00921c:	043fffc4 	movi	r16,-1
 a009220:	003d9d06 	br	a008898 <__alt_mem_flash+0xfe007898>
 a009224:	8c401014 	ori	r17,r17,64
 a009228:	b0c00007 	ldb	r3,0(r22)
 a00922c:	003d9906 	br	a008894 <__alt_mem_flash+0xfe007894>
 a009230:	d9002217 	ldw	r4,136(sp)
 a009234:	d8001d85 	stb	zero,118(sp)
 a009238:	20c00204 	addi	r3,r4,8
 a00923c:	24c00017 	ldw	r19,0(r4)
 a009240:	25000117 	ldw	r20,4(r4)
 a009244:	8001e716 	blt	r16,zero,a0099e4 <___vfiprintf_internal_r+0x12c4>
 a009248:	013fdfc4 	movi	r4,-129
 a00924c:	9d04b03a 	or	r2,r19,r20
 a009250:	d8c02215 	stw	r3,136(sp)
 a009254:	8922703a 	and	r17,r17,r4
 a009258:	002b883a 	mov	r21,zero
 a00925c:	103f2f1e 	bne	r2,zero,a008f1c <__alt_mem_flash+0xfe007f1c>
 a009260:	803e2f26 	beq	r16,zero,a008b20 <__alt_mem_flash+0xfe007b20>
 a009264:	0027883a 	mov	r19,zero
 a009268:	9cc00c04 	addi	r19,r19,48
 a00926c:	dcc019c5 	stb	r19,103(sp)
 a009270:	dd002817 	ldw	r20,160(sp)
 a009274:	ddc019c4 	addi	r23,sp,103
 a009278:	003e2c06 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a00927c:	9cc03fcc 	andi	r19,r19,255
 a009280:	b811883a 	mov	r8,r23
 a009284:	9802571e 	bne	r19,zero,a009be4 <___vfiprintf_internal_r+0x14c4>
 a009288:	18005726 	beq	r3,zero,a0093e8 <___vfiprintf_internal_r+0xcc8>
 a00928c:	04c00044 	movi	r19,1
 a009290:	d8c01005 	stb	r3,64(sp)
 a009294:	d8001d85 	stb	zero,118(sp)
 a009298:	9829883a 	mov	r20,r19
 a00929c:	ddc01004 	addi	r23,sp,64
 a0092a0:	003f0a06 	br	a008ecc <__alt_mem_flash+0xfe007ecc>
 a0092a4:	d9402017 	ldw	r5,128(sp)
 a0092a8:	d9002117 	ldw	r4,132(sp)
 a0092ac:	d9801a04 	addi	r6,sp,104
 a0092b0:	da802a15 	stw	r10,168(sp)
 a0092b4:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a0092b8:	da802a17 	ldw	r10,168(sp)
 a0092bc:	1000501e 	bne	r2,zero,a009400 <___vfiprintf_internal_r+0xce0>
 a0092c0:	d9801b17 	ldw	r6,108(sp)
 a0092c4:	d8801c17 	ldw	r2,112(sp)
 a0092c8:	d811883a 	mov	r8,sp
 a0092cc:	31000044 	addi	r4,r6,1
 a0092d0:	003e3606 	br	a008bac <__alt_mem_flash+0xfe007bac>
 a0092d4:	d9001b17 	ldw	r4,108(sp)
 a0092d8:	d8801c17 	ldw	r2,112(sp)
 a0092dc:	21400044 	addi	r5,r4,1
 a0092e0:	d9801d87 	ldb	r6,118(sp)
 a0092e4:	303e5226 	beq	r6,zero,a008c30 <__alt_mem_flash+0xfe007c30>
 a0092e8:	01800044 	movi	r6,1
 a0092ec:	d9001d84 	addi	r4,sp,118
 a0092f0:	1185883a 	add	r2,r2,r6
 a0092f4:	41000015 	stw	r4,0(r8)
 a0092f8:	41800115 	stw	r6,4(r8)
 a0092fc:	d8801c15 	stw	r2,112(sp)
 a009300:	d9401b15 	stw	r5,108(sp)
 a009304:	010001c4 	movi	r4,7
 a009308:	2140b00e 	bge	r4,r5,a0095cc <___vfiprintf_internal_r+0xeac>
 a00930c:	1000f61e 	bne	r2,zero,a0096e8 <___vfiprintf_internal_r+0xfc8>
 a009310:	3800b31e 	bne	r7,zero,a0095e0 <___vfiprintf_internal_r+0xec0>
 a009314:	0009883a 	mov	r4,zero
 a009318:	300b883a 	mov	r5,r6
 a00931c:	d811883a 	mov	r8,sp
 a009320:	01802004 	movi	r6,128
 a009324:	19be5226 	beq	r3,r6,a008c70 <__alt_mem_flash+0xfe007c70>
 a009328:	8521c83a 	sub	r16,r16,r20
 a00932c:	043e790e 	bge	zero,r16,a008d14 <__alt_mem_flash+0xfe007d14>
 a009330:	05400404 	movi	r21,16
 a009334:	ac01b00e 	bge	r21,r16,a0099f8 <___vfiprintf_internal_r+0x12d8>
 a009338:	01428074 	movhi	r5,2561
 a00933c:	29476404 	addi	r5,r5,7568
 a009340:	d9402315 	stw	r5,140(sp)
 a009344:	070001c4 	movi	fp,7
 a009348:	00000506 	br	a009360 <___vfiprintf_internal_r+0xc40>
 a00934c:	21400084 	addi	r5,r4,2
 a009350:	42000204 	addi	r8,r8,8
 a009354:	1809883a 	mov	r4,r3
 a009358:	843ffc04 	addi	r16,r16,-16
 a00935c:	ac000d0e 	bge	r21,r16,a009394 <___vfiprintf_internal_r+0xc74>
 a009360:	10800404 	addi	r2,r2,16
 a009364:	20c00044 	addi	r3,r4,1
 a009368:	44800015 	stw	r18,0(r8)
 a00936c:	45400115 	stw	r21,4(r8)
 a009370:	d8801c15 	stw	r2,112(sp)
 a009374:	d8c01b15 	stw	r3,108(sp)
 a009378:	e0fff40e 	bge	fp,r3,a00934c <__alt_mem_flash+0xfe00834c>
 a00937c:	1000101e 	bne	r2,zero,a0093c0 <___vfiprintf_internal_r+0xca0>
 a009380:	843ffc04 	addi	r16,r16,-16
 a009384:	01400044 	movi	r5,1
 a009388:	0009883a 	mov	r4,zero
 a00938c:	d811883a 	mov	r8,sp
 a009390:	ac3ff316 	blt	r21,r16,a009360 <__alt_mem_flash+0xfe008360>
 a009394:	d8c02317 	ldw	r3,140(sp)
 a009398:	1405883a 	add	r2,r2,r16
 a00939c:	44000115 	stw	r16,4(r8)
 a0093a0:	40c00015 	stw	r3,0(r8)
 a0093a4:	d8801c15 	stw	r2,112(sp)
 a0093a8:	d9401b15 	stw	r5,108(sp)
 a0093ac:	00c001c4 	movi	r3,7
 a0093b0:	19401916 	blt	r3,r5,a009418 <___vfiprintf_internal_r+0xcf8>
 a0093b4:	42000204 	addi	r8,r8,8
 a0093b8:	29400044 	addi	r5,r5,1
 a0093bc:	003e5506 	br	a008d14 <__alt_mem_flash+0xfe007d14>
 a0093c0:	d9402017 	ldw	r5,128(sp)
 a0093c4:	d9002117 	ldw	r4,132(sp)
 a0093c8:	d9801a04 	addi	r6,sp,104
 a0093cc:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a0093d0:	10000b1e 	bne	r2,zero,a009400 <___vfiprintf_internal_r+0xce0>
 a0093d4:	d9001b17 	ldw	r4,108(sp)
 a0093d8:	d8801c17 	ldw	r2,112(sp)
 a0093dc:	d811883a 	mov	r8,sp
 a0093e0:	21400044 	addi	r5,r4,1
 a0093e4:	003fdc06 	br	a009358 <__alt_mem_flash+0xfe008358>
 a0093e8:	d8801c17 	ldw	r2,112(sp)
 a0093ec:	10000426 	beq	r2,zero,a009400 <___vfiprintf_internal_r+0xce0>
 a0093f0:	d9402017 	ldw	r5,128(sp)
 a0093f4:	d9002117 	ldw	r4,132(sp)
 a0093f8:	d9801a04 	addi	r6,sp,104
 a0093fc:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009400:	d9402017 	ldw	r5,128(sp)
 a009404:	2880030b 	ldhu	r2,12(r5)
 a009408:	1080100c 	andi	r2,r2,64
 a00940c:	10014d1e 	bne	r2,zero,a009944 <___vfiprintf_internal_r+0x1224>
 a009410:	d8802417 	ldw	r2,144(sp)
 a009414:	003d9706 	br	a008a74 <__alt_mem_flash+0xfe007a74>
 a009418:	1000d21e 	bne	r2,zero,a009764 <___vfiprintf_internal_r+0x1044>
 a00941c:	00c00044 	movi	r3,1
 a009420:	a005883a 	mov	r2,r20
 a009424:	ddc00015 	stw	r23,0(sp)
 a009428:	dd000115 	stw	r20,4(sp)
 a00942c:	dd001c15 	stw	r20,112(sp)
 a009430:	d8c01b15 	stw	r3,108(sp)
 a009434:	d811883a 	mov	r8,sp
 a009438:	42000204 	addi	r8,r8,8
 a00943c:	8c40010c 	andi	r17,r17,4
 a009440:	88004026 	beq	r17,zero,a009544 <___vfiprintf_internal_r+0xe24>
 a009444:	d9002517 	ldw	r4,148(sp)
 a009448:	24e3c83a 	sub	r17,r4,r19
 a00944c:	04403d0e 	bge	zero,r17,a009544 <___vfiprintf_internal_r+0xe24>
 a009450:	04000404 	movi	r16,16
 a009454:	8441a90e 	bge	r16,r17,a009afc <___vfiprintf_internal_r+0x13dc>
 a009458:	00c28074 	movhi	r3,2561
 a00945c:	18c76804 	addi	r3,r3,7584
 a009460:	d9001b17 	ldw	r4,108(sp)
 a009464:	d8c02315 	stw	r3,140(sp)
 a009468:	050001c4 	movi	r20,7
 a00946c:	dd402117 	ldw	r21,132(sp)
 a009470:	ddc02017 	ldw	r23,128(sp)
 a009474:	00000506 	br	a00948c <___vfiprintf_internal_r+0xd6c>
 a009478:	21400084 	addi	r5,r4,2
 a00947c:	42000204 	addi	r8,r8,8
 a009480:	1809883a 	mov	r4,r3
 a009484:	8c7ffc04 	addi	r17,r17,-16
 a009488:	84400f0e 	bge	r16,r17,a0094c8 <___vfiprintf_internal_r+0xda8>
 a00948c:	01428074 	movhi	r5,2561
 a009490:	10800404 	addi	r2,r2,16
 a009494:	20c00044 	addi	r3,r4,1
 a009498:	29476804 	addi	r5,r5,7584
 a00949c:	41400015 	stw	r5,0(r8)
 a0094a0:	44000115 	stw	r16,4(r8)
 a0094a4:	d8801c15 	stw	r2,112(sp)
 a0094a8:	d8c01b15 	stw	r3,108(sp)
 a0094ac:	a0fff20e 	bge	r20,r3,a009478 <__alt_mem_flash+0xfe008478>
 a0094b0:	1000141e 	bne	r2,zero,a009504 <___vfiprintf_internal_r+0xde4>
 a0094b4:	8c7ffc04 	addi	r17,r17,-16
 a0094b8:	01400044 	movi	r5,1
 a0094bc:	0009883a 	mov	r4,zero
 a0094c0:	d811883a 	mov	r8,sp
 a0094c4:	847ff116 	blt	r16,r17,a00948c <__alt_mem_flash+0xfe00848c>
 a0094c8:	d8c02317 	ldw	r3,140(sp)
 a0094cc:	1445883a 	add	r2,r2,r17
 a0094d0:	44400115 	stw	r17,4(r8)
 a0094d4:	40c00015 	stw	r3,0(r8)
 a0094d8:	d8801c15 	stw	r2,112(sp)
 a0094dc:	d9401b15 	stw	r5,108(sp)
 a0094e0:	00c001c4 	movi	r3,7
 a0094e4:	1940170e 	bge	r3,r5,a009544 <___vfiprintf_internal_r+0xe24>
 a0094e8:	1000101e 	bne	r2,zero,a00952c <___vfiprintf_internal_r+0xe0c>
 a0094ec:	d8802517 	ldw	r2,148(sp)
 a0094f0:	14c11616 	blt	r2,r19,a00994c <___vfiprintf_internal_r+0x122c>
 a0094f4:	d9002417 	ldw	r4,144(sp)
 a0094f8:	2089883a 	add	r4,r4,r2
 a0094fc:	d9002415 	stw	r4,144(sp)
 a009500:	003e1806 	br	a008d64 <__alt_mem_flash+0xfe007d64>
 a009504:	d9801a04 	addi	r6,sp,104
 a009508:	b80b883a 	mov	r5,r23
 a00950c:	a809883a 	mov	r4,r21
 a009510:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009514:	103fba1e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a009518:	d9001b17 	ldw	r4,108(sp)
 a00951c:	d8801c17 	ldw	r2,112(sp)
 a009520:	d811883a 	mov	r8,sp
 a009524:	21400044 	addi	r5,r4,1
 a009528:	003fd606 	br	a009484 <__alt_mem_flash+0xfe008484>
 a00952c:	d9402017 	ldw	r5,128(sp)
 a009530:	d9002117 	ldw	r4,132(sp)
 a009534:	d9801a04 	addi	r6,sp,104
 a009538:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a00953c:	103fb01e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a009540:	d8801c17 	ldw	r2,112(sp)
 a009544:	d8c02517 	ldw	r3,148(sp)
 a009548:	1cc0010e 	bge	r3,r19,a009550 <___vfiprintf_internal_r+0xe30>
 a00954c:	9807883a 	mov	r3,r19
 a009550:	d9002417 	ldw	r4,144(sp)
 a009554:	20c9883a 	add	r4,r4,r3
 a009558:	d9002415 	stw	r4,144(sp)
 a00955c:	103e0126 	beq	r2,zero,a008d64 <__alt_mem_flash+0xfe007d64>
 a009560:	d9402017 	ldw	r5,128(sp)
 a009564:	d9002117 	ldw	r4,132(sp)
 a009568:	d9801a04 	addi	r6,sp,104
 a00956c:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009570:	103dfc26 	beq	r2,zero,a008d64 <__alt_mem_flash+0xfe007d64>
 a009574:	003fa206 	br	a009400 <__alt_mem_flash+0xfe008400>
 a009578:	d9402017 	ldw	r5,128(sp)
 a00957c:	d9002117 	ldw	r4,132(sp)
 a009580:	d9801a04 	addi	r6,sp,104
 a009584:	d9c02b15 	stw	r7,172(sp)
 a009588:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a00958c:	d9c02b17 	ldw	r7,172(sp)
 a009590:	103f9b1e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a009594:	d9001b17 	ldw	r4,108(sp)
 a009598:	d8801c17 	ldw	r2,112(sp)
 a00959c:	d811883a 	mov	r8,sp
 a0095a0:	21800044 	addi	r6,r4,1
 a0095a4:	003dbf06 	br	a008ca4 <__alt_mem_flash+0xfe007ca4>
 a0095a8:	1000d81e 	bne	r2,zero,a00990c <___vfiprintf_internal_r+0x11ec>
 a0095ac:	d9001d87 	ldb	r4,118(sp)
 a0095b0:	20000a26 	beq	r4,zero,a0095dc <___vfiprintf_internal_r+0xebc>
 a0095b4:	00800044 	movi	r2,1
 a0095b8:	d9001d84 	addi	r4,sp,118
 a0095bc:	100b883a 	mov	r5,r2
 a0095c0:	d9000015 	stw	r4,0(sp)
 a0095c4:	d8800115 	stw	r2,4(sp)
 a0095c8:	d811883a 	mov	r8,sp
 a0095cc:	2809883a 	mov	r4,r5
 a0095d0:	42000204 	addi	r8,r8,8
 a0095d4:	29400044 	addi	r5,r5,1
 a0095d8:	003d9506 	br	a008c30 <__alt_mem_flash+0xfe007c30>
 a0095dc:	3800fd26 	beq	r7,zero,a0099d4 <___vfiprintf_internal_r+0x12b4>
 a0095e0:	00800084 	movi	r2,2
 a0095e4:	d9001d04 	addi	r4,sp,116
 a0095e8:	d9000015 	stw	r4,0(sp)
 a0095ec:	d8800115 	stw	r2,4(sp)
 a0095f0:	01400044 	movi	r5,1
 a0095f4:	d811883a 	mov	r8,sp
 a0095f8:	2809883a 	mov	r4,r5
 a0095fc:	42000204 	addi	r8,r8,8
 a009600:	29400044 	addi	r5,r5,1
 a009604:	003f4606 	br	a009320 <__alt_mem_flash+0xfe008320>
 a009608:	d8802517 	ldw	r2,148(sp)
 a00960c:	14c0010e 	bge	r2,r19,a009614 <___vfiprintf_internal_r+0xef4>
 a009610:	9805883a 	mov	r2,r19
 a009614:	d9402417 	ldw	r5,144(sp)
 a009618:	288b883a 	add	r5,r5,r2
 a00961c:	d9402415 	stw	r5,144(sp)
 a009620:	003dd006 	br	a008d64 <__alt_mem_flash+0xfe007d64>
 a009624:	d8001d85 	stb	zero,118(sp)
 a009628:	80005d16 	blt	r16,zero,a0097a0 <___vfiprintf_internal_r+0x1080>
 a00962c:	00ffdfc4 	movi	r3,-129
 a009630:	9d04b03a 	or	r2,r19,r20
 a009634:	88e2703a 	and	r17,r17,r3
 a009638:	103d3726 	beq	r2,zero,a008b18 <__alt_mem_flash+0xfe007b18>
 a00963c:	002b883a 	mov	r21,zero
 a009640:	d9002617 	ldw	r4,152(sp)
 a009644:	ddc01a04 	addi	r23,sp,104
 a009648:	988003cc 	andi	r2,r19,15
 a00964c:	a006973a 	slli	r3,r20,28
 a009650:	2085883a 	add	r2,r4,r2
 a009654:	9826d13a 	srli	r19,r19,4
 a009658:	10800003 	ldbu	r2,0(r2)
 a00965c:	a028d13a 	srli	r20,r20,4
 a009660:	bdffffc4 	addi	r23,r23,-1
 a009664:	1ce6b03a 	or	r19,r3,r19
 a009668:	b8800005 	stb	r2,0(r23)
 a00966c:	9d04b03a 	or	r2,r19,r20
 a009670:	103ff51e 	bne	r2,zero,a009648 <__alt_mem_flash+0xfe008648>
 a009674:	d8801e17 	ldw	r2,120(sp)
 a009678:	15e9c83a 	sub	r20,r2,r23
 a00967c:	003d2b06 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a009680:	d9402017 	ldw	r5,128(sp)
 a009684:	d9002117 	ldw	r4,132(sp)
 a009688:	d9801a04 	addi	r6,sp,104
 a00968c:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009690:	103f5b1e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a009694:	d8801c17 	ldw	r2,112(sp)
 a009698:	d811883a 	mov	r8,sp
 a00969c:	003f6706 	br	a00943c <__alt_mem_flash+0xfe00843c>
 a0096a0:	d9402017 	ldw	r5,128(sp)
 a0096a4:	d9002117 	ldw	r4,132(sp)
 a0096a8:	d9801a04 	addi	r6,sp,104
 a0096ac:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a0096b0:	103f531e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a0096b4:	d811883a 	mov	r8,sp
 a0096b8:	003cd906 	br	a008a20 <__alt_mem_flash+0xfe007a20>
 a0096bc:	10803fcc 	andi	r2,r2,255
 a0096c0:	1080201c 	xori	r2,r2,128
 a0096c4:	10bfe004 	addi	r2,r2,-128
 a0096c8:	00c00c04 	movi	r3,48
 a0096cc:	10ffe926 	beq	r2,r3,a009674 <__alt_mem_flash+0xfe008674>
 a0096d0:	b8ffffc5 	stb	r3,-1(r23)
 a0096d4:	d8c01e17 	ldw	r3,120(sp)
 a0096d8:	b8bfffc4 	addi	r2,r23,-1
 a0096dc:	102f883a 	mov	r23,r2
 a0096e0:	18a9c83a 	sub	r20,r3,r2
 a0096e4:	003d1106 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a0096e8:	d9402017 	ldw	r5,128(sp)
 a0096ec:	d9002117 	ldw	r4,132(sp)
 a0096f0:	d9801a04 	addi	r6,sp,104
 a0096f4:	d8c02a15 	stw	r3,168(sp)
 a0096f8:	d9c02b15 	stw	r7,172(sp)
 a0096fc:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009700:	d8c02a17 	ldw	r3,168(sp)
 a009704:	d9c02b17 	ldw	r7,172(sp)
 a009708:	103f3d1e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a00970c:	d9001b17 	ldw	r4,108(sp)
 a009710:	d8801c17 	ldw	r2,112(sp)
 a009714:	d811883a 	mov	r8,sp
 a009718:	21400044 	addi	r5,r4,1
 a00971c:	003d4406 	br	a008c30 <__alt_mem_flash+0xfe007c30>
 a009720:	d9402017 	ldw	r5,128(sp)
 a009724:	d9002117 	ldw	r4,132(sp)
 a009728:	d9801a04 	addi	r6,sp,104
 a00972c:	d8c02a15 	stw	r3,168(sp)
 a009730:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009734:	d8c02a17 	ldw	r3,168(sp)
 a009738:	103f311e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a00973c:	d9001b17 	ldw	r4,108(sp)
 a009740:	d8801c17 	ldw	r2,112(sp)
 a009744:	d811883a 	mov	r8,sp
 a009748:	21400044 	addi	r5,r4,1
 a00974c:	003ef406 	br	a009320 <__alt_mem_flash+0xfe008320>
 a009750:	1000bd1e 	bne	r2,zero,a009a48 <___vfiprintf_internal_r+0x1328>
 a009754:	01400044 	movi	r5,1
 a009758:	0009883a 	mov	r4,zero
 a00975c:	d811883a 	mov	r8,sp
 a009760:	003ef106 	br	a009328 <__alt_mem_flash+0xfe008328>
 a009764:	d9402017 	ldw	r5,128(sp)
 a009768:	d9002117 	ldw	r4,132(sp)
 a00976c:	d9801a04 	addi	r6,sp,104
 a009770:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009774:	103f221e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a009778:	d9401b17 	ldw	r5,108(sp)
 a00977c:	d8801c17 	ldw	r2,112(sp)
 a009780:	d811883a 	mov	r8,sp
 a009784:	29400044 	addi	r5,r5,1
 a009788:	003d6206 	br	a008d14 <__alt_mem_flash+0xfe007d14>
 a00978c:	01428074 	movhi	r5,2561
 a009790:	29470404 	addi	r5,r5,7184
 a009794:	d9402615 	stw	r5,152(sp)
 a009798:	d8c02215 	stw	r3,136(sp)
 a00979c:	1023883a 	mov	r17,r2
 a0097a0:	9d04b03a 	or	r2,r19,r20
 a0097a4:	103fa51e 	bne	r2,zero,a00963c <__alt_mem_flash+0xfe00863c>
 a0097a8:	002b883a 	mov	r21,zero
 a0097ac:	00800084 	movi	r2,2
 a0097b0:	003e4a06 	br	a0090dc <__alt_mem_flash+0xfe0080dc>
 a0097b4:	01428074 	movhi	r5,2561
 a0097b8:	29470404 	addi	r5,r5,7184
 a0097bc:	002b883a 	mov	r21,zero
 a0097c0:	d9402615 	stw	r5,152(sp)
 a0097c4:	003f9e06 	br	a009640 <__alt_mem_flash+0xfe008640>
 a0097c8:	d9402217 	ldw	r5,136(sp)
 a0097cc:	d8001d85 	stb	zero,118(sp)
 a0097d0:	0029883a 	mov	r20,zero
 a0097d4:	28800104 	addi	r2,r5,4
 a0097d8:	2cc00017 	ldw	r19,0(r5)
 a0097dc:	803e3a16 	blt	r16,zero,a0090c8 <__alt_mem_flash+0xfe0080c8>
 a0097e0:	00ffdfc4 	movi	r3,-129
 a0097e4:	d8802215 	stw	r2,136(sp)
 a0097e8:	88e2703a 	and	r17,r17,r3
 a0097ec:	002b883a 	mov	r21,zero
 a0097f0:	983e9b26 	beq	r19,zero,a009260 <__alt_mem_flash+0xfe008260>
 a0097f4:	00800244 	movi	r2,9
 a0097f8:	14fdc936 	bltu	r2,r19,a008f20 <__alt_mem_flash+0xfe007f20>
 a0097fc:	003e9a06 	br	a009268 <__alt_mem_flash+0xfe008268>
 a009800:	00800c04 	movi	r2,48
 a009804:	d8c01d45 	stb	r3,117(sp)
 a009808:	d8801d05 	stb	r2,116(sp)
 a00980c:	d8001d85 	stb	zero,118(sp)
 a009810:	88c00094 	ori	r3,r17,2
 a009814:	80009c16 	blt	r16,zero,a009a88 <___vfiprintf_internal_r+0x1368>
 a009818:	00bfdfc4 	movi	r2,-129
 a00981c:	88a2703a 	and	r17,r17,r2
 a009820:	8c400094 	ori	r17,r17,2
 a009824:	002b883a 	mov	r21,zero
 a009828:	003f8506 	br	a009640 <__alt_mem_flash+0xfe008640>
 a00982c:	b029883a 	mov	r20,r22
 a009830:	003c0b06 	br	a008860 <__alt_mem_flash+0xfe007860>
 a009834:	04e7c83a 	sub	r19,zero,r19
 a009838:	05400b44 	movi	r21,45
 a00983c:	9804c03a 	cmpne	r2,r19,zero
 a009840:	0529c83a 	sub	r20,zero,r20
 a009844:	dd401d85 	stb	r21,118(sp)
 a009848:	a0a9c83a 	sub	r20,r20,r2
 a00984c:	80009716 	blt	r16,zero,a009aac <___vfiprintf_internal_r+0x138c>
 a009850:	00bfdfc4 	movi	r2,-129
 a009854:	88a2703a 	and	r17,r17,r2
 a009858:	003db006 	br	a008f1c <__alt_mem_flash+0xfe007f1c>
 a00985c:	b0c00007 	ldb	r3,0(r22)
 a009860:	003c0c06 	br	a008894 <__alt_mem_flash+0xfe007894>
 a009864:	8880100c 	andi	r2,r17,64
 a009868:	d8001d85 	stb	zero,118(sp)
 a00986c:	1000461e 	bne	r2,zero,a009988 <___vfiprintf_internal_r+0x1268>
 a009870:	d9002217 	ldw	r4,136(sp)
 a009874:	0029883a 	mov	r20,zero
 a009878:	20800104 	addi	r2,r4,4
 a00987c:	24c00017 	ldw	r19,0(r4)
 a009880:	803df80e 	bge	r16,zero,a009064 <__alt_mem_flash+0xfe008064>
 a009884:	9d06b03a 	or	r3,r19,r20
 a009888:	d8802215 	stw	r2,136(sp)
 a00988c:	183d5e1e 	bne	r3,zero,a008e08 <__alt_mem_flash+0xfe007e08>
 a009890:	002b883a 	mov	r21,zero
 a009894:	0005883a 	mov	r2,zero
 a009898:	003e1006 	br	a0090dc <__alt_mem_flash+0xfe0080dc>
 a00989c:	8880040c 	andi	r2,r17,16
 a0098a0:	1000321e 	bne	r2,zero,a00996c <___vfiprintf_internal_r+0x124c>
 a0098a4:	8c40100c 	andi	r17,r17,64
 a0098a8:	88008d26 	beq	r17,zero,a009ae0 <___vfiprintf_internal_r+0x13c0>
 a0098ac:	d9402217 	ldw	r5,136(sp)
 a0098b0:	d8c02417 	ldw	r3,144(sp)
 a0098b4:	28800017 	ldw	r2,0(r5)
 a0098b8:	29400104 	addi	r5,r5,4
 a0098bc:	d9402215 	stw	r5,136(sp)
 a0098c0:	10c0000d 	sth	r3,0(r2)
 a0098c4:	003bca06 	br	a0087f0 <__alt_mem_flash+0xfe0077f0>
 a0098c8:	8880100c 	andi	r2,r17,64
 a0098cc:	10003a26 	beq	r2,zero,a0099b8 <___vfiprintf_internal_r+0x1298>
 a0098d0:	d8802217 	ldw	r2,136(sp)
 a0098d4:	14c0000f 	ldh	r19,0(r2)
 a0098d8:	10800104 	addi	r2,r2,4
 a0098dc:	d8802215 	stw	r2,136(sp)
 a0098e0:	9829d7fa 	srai	r20,r19,31
 a0098e4:	a005883a 	mov	r2,r20
 a0098e8:	003d8506 	br	a008f00 <__alt_mem_flash+0xfe007f00>
 a0098ec:	8880100c 	andi	r2,r17,64
 a0098f0:	10002b26 	beq	r2,zero,a0099a0 <___vfiprintf_internal_r+0x1280>
 a0098f4:	d8802217 	ldw	r2,136(sp)
 a0098f8:	0029883a 	mov	r20,zero
 a0098fc:	14c0000b 	ldhu	r19,0(r2)
 a009900:	10800104 	addi	r2,r2,4
 a009904:	d8802215 	stw	r2,136(sp)
 a009908:	003d5d06 	br	a008e80 <__alt_mem_flash+0xfe007e80>
 a00990c:	d9402017 	ldw	r5,128(sp)
 a009910:	d9002117 	ldw	r4,132(sp)
 a009914:	d9801a04 	addi	r6,sp,104
 a009918:	d8c02a15 	stw	r3,168(sp)
 a00991c:	d9c02b15 	stw	r7,172(sp)
 a009920:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009924:	d8c02a17 	ldw	r3,168(sp)
 a009928:	d9c02b17 	ldw	r7,172(sp)
 a00992c:	103eb41e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a009930:	d9001b17 	ldw	r4,108(sp)
 a009934:	d8801c17 	ldw	r2,112(sp)
 a009938:	d811883a 	mov	r8,sp
 a00993c:	21400044 	addi	r5,r4,1
 a009940:	003e6706 	br	a0092e0 <__alt_mem_flash+0xfe0082e0>
 a009944:	00bfffc4 	movi	r2,-1
 a009948:	003c4a06 	br	a008a74 <__alt_mem_flash+0xfe007a74>
 a00994c:	9805883a 	mov	r2,r19
 a009950:	003ee806 	br	a0094f4 <__alt_mem_flash+0xfe0084f4>
 a009954:	d8c02217 	ldw	r3,136(sp)
 a009958:	0029883a 	mov	r20,zero
 a00995c:	18800104 	addi	r2,r3,4
 a009960:	1cc0000b 	ldhu	r19,0(r3)
 a009964:	803f9e0e 	bge	r16,zero,a0097e0 <__alt_mem_flash+0xfe0087e0>
 a009968:	003dd706 	br	a0090c8 <__alt_mem_flash+0xfe0080c8>
 a00996c:	d8c02217 	ldw	r3,136(sp)
 a009970:	d9002417 	ldw	r4,144(sp)
 a009974:	18800017 	ldw	r2,0(r3)
 a009978:	18c00104 	addi	r3,r3,4
 a00997c:	d8c02215 	stw	r3,136(sp)
 a009980:	11000015 	stw	r4,0(r2)
 a009984:	003b9a06 	br	a0087f0 <__alt_mem_flash+0xfe0077f0>
 a009988:	d8c02217 	ldw	r3,136(sp)
 a00998c:	0029883a 	mov	r20,zero
 a009990:	18800104 	addi	r2,r3,4
 a009994:	1cc0000b 	ldhu	r19,0(r3)
 a009998:	803db20e 	bge	r16,zero,a009064 <__alt_mem_flash+0xfe008064>
 a00999c:	003fb906 	br	a009884 <__alt_mem_flash+0xfe008884>
 a0099a0:	d9002217 	ldw	r4,136(sp)
 a0099a4:	0029883a 	mov	r20,zero
 a0099a8:	24c00017 	ldw	r19,0(r4)
 a0099ac:	21000104 	addi	r4,r4,4
 a0099b0:	d9002215 	stw	r4,136(sp)
 a0099b4:	003d3206 	br	a008e80 <__alt_mem_flash+0xfe007e80>
 a0099b8:	d8c02217 	ldw	r3,136(sp)
 a0099bc:	1cc00017 	ldw	r19,0(r3)
 a0099c0:	18c00104 	addi	r3,r3,4
 a0099c4:	d8c02215 	stw	r3,136(sp)
 a0099c8:	9829d7fa 	srai	r20,r19,31
 a0099cc:	a005883a 	mov	r2,r20
 a0099d0:	003d4b06 	br	a008f00 <__alt_mem_flash+0xfe007f00>
 a0099d4:	0009883a 	mov	r4,zero
 a0099d8:	01400044 	movi	r5,1
 a0099dc:	d811883a 	mov	r8,sp
 a0099e0:	003e4f06 	br	a009320 <__alt_mem_flash+0xfe008320>
 a0099e4:	d8c02215 	stw	r3,136(sp)
 a0099e8:	002b883a 	mov	r21,zero
 a0099ec:	003db806 	br	a0090d0 <__alt_mem_flash+0xfe0080d0>
 a0099f0:	d811883a 	mov	r8,sp
 a0099f4:	003e9606 	br	a009450 <__alt_mem_flash+0xfe008450>
 a0099f8:	01028074 	movhi	r4,2561
 a0099fc:	21076404 	addi	r4,r4,7568
 a009a00:	d9002315 	stw	r4,140(sp)
 a009a04:	003e6306 	br	a009394 <__alt_mem_flash+0xfe008394>
 a009a08:	b0c00043 	ldbu	r3,1(r22)
 a009a0c:	8c400814 	ori	r17,r17,32
 a009a10:	b5800044 	addi	r22,r22,1
 a009a14:	18c03fcc 	andi	r3,r3,255
 a009a18:	18c0201c 	xori	r3,r3,128
 a009a1c:	18ffe004 	addi	r3,r3,-128
 a009a20:	003b9c06 	br	a008894 <__alt_mem_flash+0xfe007894>
 a009a24:	b809883a 	mov	r4,r23
 a009a28:	da002a15 	stw	r8,168(sp)
 a009a2c:	a0085740 	call	a008574 <strlen>
 a009a30:	1029883a 	mov	r20,r2
 a009a34:	dd401d83 	ldbu	r21,118(sp)
 a009a38:	df002215 	stw	fp,136(sp)
 a009a3c:	0021883a 	mov	r16,zero
 a009a40:	da002a17 	ldw	r8,168(sp)
 a009a44:	003c3906 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a009a48:	d9402017 	ldw	r5,128(sp)
 a009a4c:	d9002117 	ldw	r4,132(sp)
 a009a50:	d9801a04 	addi	r6,sp,104
 a009a54:	a00860c0 	call	a00860c <__sprint_r.part.0>
 a009a58:	103e691e 	bne	r2,zero,a009400 <__alt_mem_flash+0xfe008400>
 a009a5c:	d9001b17 	ldw	r4,108(sp)
 a009a60:	d8801c17 	ldw	r2,112(sp)
 a009a64:	d811883a 	mov	r8,sp
 a009a68:	21400044 	addi	r5,r4,1
 a009a6c:	003e2e06 	br	a009328 <__alt_mem_flash+0xfe008328>
 a009a70:	01028074 	movhi	r4,2561
 a009a74:	21076804 	addi	r4,r4,7584
 a009a78:	d9002315 	stw	r4,140(sp)
 a009a7c:	d9001b17 	ldw	r4,108(sp)
 a009a80:	21000044 	addi	r4,r4,1
 a009a84:	003c5e06 	br	a008c00 <__alt_mem_flash+0xfe007c00>
 a009a88:	002b883a 	mov	r21,zero
 a009a8c:	00800084 	movi	r2,2
 a009a90:	10803fcc 	andi	r2,r2,255
 a009a94:	01000044 	movi	r4,1
 a009a98:	11002b26 	beq	r2,r4,a009b48 <___vfiprintf_internal_r+0x1428>
 a009a9c:	01000084 	movi	r4,2
 a009aa0:	11002b1e 	bne	r2,r4,a009b50 <___vfiprintf_internal_r+0x1430>
 a009aa4:	1823883a 	mov	r17,r3
 a009aa8:	003ee506 	br	a009640 <__alt_mem_flash+0xfe008640>
 a009aac:	8807883a 	mov	r3,r17
 a009ab0:	00800044 	movi	r2,1
 a009ab4:	003ff606 	br	a009a90 <__alt_mem_flash+0xfe008a90>
 a009ab8:	00800184 	movi	r2,6
 a009abc:	1400012e 	bgeu	r2,r16,a009ac4 <___vfiprintf_internal_r+0x13a4>
 a009ac0:	1021883a 	mov	r16,r2
 a009ac4:	8029883a 	mov	r20,r16
 a009ac8:	8027883a 	mov	r19,r16
 a009acc:	80002216 	blt	r16,zero,a009b58 <___vfiprintf_internal_r+0x1438>
 a009ad0:	05c28074 	movhi	r23,2561
 a009ad4:	df002215 	stw	fp,136(sp)
 a009ad8:	bdc70904 	addi	r23,r23,7204
 a009adc:	003cfb06 	br	a008ecc <__alt_mem_flash+0xfe007ecc>
 a009ae0:	d9002217 	ldw	r4,136(sp)
 a009ae4:	d9402417 	ldw	r5,144(sp)
 a009ae8:	20800017 	ldw	r2,0(r4)
 a009aec:	21000104 	addi	r4,r4,4
 a009af0:	d9002215 	stw	r4,136(sp)
 a009af4:	11400015 	stw	r5,0(r2)
 a009af8:	003b3d06 	br	a0087f0 <__alt_mem_flash+0xfe0077f0>
 a009afc:	01428074 	movhi	r5,2561
 a009b00:	29476804 	addi	r5,r5,7584
 a009b04:	d9402315 	stw	r5,140(sp)
 a009b08:	d9401b17 	ldw	r5,108(sp)
 a009b0c:	29400044 	addi	r5,r5,1
 a009b10:	003e6d06 	br	a0094c8 <__alt_mem_flash+0xfe0084c8>
 a009b14:	8029883a 	mov	r20,r16
 a009b18:	dd401d83 	ldbu	r21,118(sp)
 a009b1c:	df002215 	stw	fp,136(sp)
 a009b20:	0021883a 	mov	r16,zero
 a009b24:	003c0106 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a009b28:	00c28074 	movhi	r3,2561
 a009b2c:	18c76404 	addi	r3,r3,7568
 a009b30:	d8c02315 	stw	r3,140(sp)
 a009b34:	280d883a 	mov	r6,r5
 a009b38:	003c6906 	br	a008ce0 <__alt_mem_flash+0xfe007ce0>
 a009b3c:	802d883a 	mov	r22,r16
 a009b40:	0021883a 	mov	r16,zero
 a009b44:	003b5406 	br	a008898 <__alt_mem_flash+0xfe007898>
 a009b48:	1823883a 	mov	r17,r3
 a009b4c:	003cf306 	br	a008f1c <__alt_mem_flash+0xfe007f1c>
 a009b50:	1823883a 	mov	r17,r3
 a009b54:	003cad06 	br	a008e0c <__alt_mem_flash+0xfe007e0c>
 a009b58:	0027883a 	mov	r19,zero
 a009b5c:	003fdc06 	br	a009ad0 <__alt_mem_flash+0xfe008ad0>
 a009b60:	d9402217 	ldw	r5,136(sp)
 a009b64:	8005883a 	mov	r2,r16
 a009b68:	b0c00043 	ldbu	r3,1(r22)
 a009b6c:	2c000017 	ldw	r16,0(r5)
 a009b70:	29000104 	addi	r4,r5,4
 a009b74:	d9002215 	stw	r4,136(sp)
 a009b78:	102d883a 	mov	r22,r2
 a009b7c:	803fa50e 	bge	r16,zero,a009a14 <__alt_mem_flash+0xfe008a14>
 a009b80:	18c03fcc 	andi	r3,r3,255
 a009b84:	18c0201c 	xori	r3,r3,128
 a009b88:	043fffc4 	movi	r16,-1
 a009b8c:	18ffe004 	addi	r3,r3,-128
 a009b90:	003b4006 	br	a008894 <__alt_mem_flash+0xfe007894>
 a009b94:	d9402303 	ldbu	r5,140(sp)
 a009b98:	d9401d85 	stb	r5,118(sp)
 a009b9c:	003cae06 	br	a008e58 <__alt_mem_flash+0xfe007e58>
 a009ba0:	d8c02303 	ldbu	r3,140(sp)
 a009ba4:	d8c01d85 	stb	r3,118(sp)
 a009ba8:	003d1406 	br	a008ffc <__alt_mem_flash+0xfe007ffc>
 a009bac:	d8c02303 	ldbu	r3,140(sp)
 a009bb0:	d8c01d85 	stb	r3,118(sp)
 a009bb4:	003cca06 	br	a008ee0 <__alt_mem_flash+0xfe007ee0>
 a009bb8:	8880004c 	andi	r2,r17,1
 a009bbc:	002b883a 	mov	r21,zero
 a009bc0:	10000526 	beq	r2,zero,a009bd8 <___vfiprintf_internal_r+0x14b8>
 a009bc4:	00800c04 	movi	r2,48
 a009bc8:	d88019c5 	stb	r2,103(sp)
 a009bcc:	dd002817 	ldw	r20,160(sp)
 a009bd0:	ddc019c4 	addi	r23,sp,103
 a009bd4:	003bd506 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a009bd8:	0029883a 	mov	r20,zero
 a009bdc:	ddc01a04 	addi	r23,sp,104
 a009be0:	003bd206 	br	a008b2c <__alt_mem_flash+0xfe007b2c>
 a009be4:	d9002303 	ldbu	r4,140(sp)
 a009be8:	d9001d85 	stb	r4,118(sp)
 a009bec:	003da606 	br	a009288 <__alt_mem_flash+0xfe008288>
 a009bf0:	d8c02303 	ldbu	r3,140(sp)
 a009bf4:	d8c01d85 	stb	r3,118(sp)
 a009bf8:	003c7606 	br	a008dd4 <__alt_mem_flash+0xfe007dd4>
 a009bfc:	d8c02303 	ldbu	r3,140(sp)
 a009c00:	d8c01d85 	stb	r3,118(sp)
 a009c04:	003c6506 	br	a008d9c <__alt_mem_flash+0xfe007d9c>
 a009c08:	d9002303 	ldbu	r4,140(sp)
 a009c0c:	d9001d85 	stb	r4,118(sp)
 a009c10:	003d3d06 	br	a009108 <__alt_mem_flash+0xfe008108>
 a009c14:	d8c02303 	ldbu	r3,140(sp)
 a009c18:	d8c01d85 	stb	r3,118(sp)
 a009c1c:	003d1d06 	br	a009094 <__alt_mem_flash+0xfe008094>
 a009c20:	d8c02303 	ldbu	r3,140(sp)
 a009c24:	d8c01d85 	stb	r3,118(sp)
 a009c28:	003d0306 	br	a009038 <__alt_mem_flash+0xfe008038>

0a009c2c <__vfiprintf_internal>:
 a009c2c:	00828074 	movhi	r2,2561
 a009c30:	108ea004 	addi	r2,r2,14976
 a009c34:	300f883a 	mov	r7,r6
 a009c38:	280d883a 	mov	r6,r5
 a009c3c:	200b883a 	mov	r5,r4
 a009c40:	11000017 	ldw	r4,0(r2)
 a009c44:	a0087201 	jmpi	a008720 <___vfiprintf_internal_r>

0a009c48 <__sbprintf>:
 a009c48:	2880030b 	ldhu	r2,12(r5)
 a009c4c:	2ac01917 	ldw	r11,100(r5)
 a009c50:	2a80038b 	ldhu	r10,14(r5)
 a009c54:	2a400717 	ldw	r9,28(r5)
 a009c58:	2a000917 	ldw	r8,36(r5)
 a009c5c:	defee204 	addi	sp,sp,-1144
 a009c60:	00c10004 	movi	r3,1024
 a009c64:	dc011a15 	stw	r16,1128(sp)
 a009c68:	10bfff4c 	andi	r2,r2,65533
 a009c6c:	2821883a 	mov	r16,r5
 a009c70:	d8cb883a 	add	r5,sp,r3
 a009c74:	dc811c15 	stw	r18,1136(sp)
 a009c78:	dc411b15 	stw	r17,1132(sp)
 a009c7c:	dfc11d15 	stw	ra,1140(sp)
 a009c80:	2025883a 	mov	r18,r4
 a009c84:	d881030d 	sth	r2,1036(sp)
 a009c88:	dac11915 	stw	r11,1124(sp)
 a009c8c:	da81038d 	sth	r10,1038(sp)
 a009c90:	da410715 	stw	r9,1052(sp)
 a009c94:	da010915 	stw	r8,1060(sp)
 a009c98:	dec10015 	stw	sp,1024(sp)
 a009c9c:	dec10415 	stw	sp,1040(sp)
 a009ca0:	d8c10215 	stw	r3,1032(sp)
 a009ca4:	d8c10515 	stw	r3,1044(sp)
 a009ca8:	d8010615 	stw	zero,1048(sp)
 a009cac:	a0087200 	call	a008720 <___vfiprintf_internal_r>
 a009cb0:	1023883a 	mov	r17,r2
 a009cb4:	10000416 	blt	r2,zero,a009cc8 <__sbprintf+0x80>
 a009cb8:	d9410004 	addi	r5,sp,1024
 a009cbc:	9009883a 	mov	r4,r18
 a009cc0:	a0059ec0 	call	a0059ec <_fflush_r>
 a009cc4:	10000d1e 	bne	r2,zero,a009cfc <__sbprintf+0xb4>
 a009cc8:	d881030b 	ldhu	r2,1036(sp)
 a009ccc:	1080100c 	andi	r2,r2,64
 a009cd0:	10000326 	beq	r2,zero,a009ce0 <__sbprintf+0x98>
 a009cd4:	8080030b 	ldhu	r2,12(r16)
 a009cd8:	10801014 	ori	r2,r2,64
 a009cdc:	8080030d 	sth	r2,12(r16)
 a009ce0:	8805883a 	mov	r2,r17
 a009ce4:	dfc11d17 	ldw	ra,1140(sp)
 a009ce8:	dc811c17 	ldw	r18,1136(sp)
 a009cec:	dc411b17 	ldw	r17,1132(sp)
 a009cf0:	dc011a17 	ldw	r16,1128(sp)
 a009cf4:	dec11e04 	addi	sp,sp,1144
 a009cf8:	f800283a 	ret
 a009cfc:	047fffc4 	movi	r17,-1
 a009d00:	003ff106 	br	a009cc8 <__alt_mem_flash+0xfe008cc8>

0a009d04 <_write_r>:
 a009d04:	defffd04 	addi	sp,sp,-12
 a009d08:	2805883a 	mov	r2,r5
 a009d0c:	dc000015 	stw	r16,0(sp)
 a009d10:	04028074 	movhi	r16,2561
 a009d14:	dc400115 	stw	r17,4(sp)
 a009d18:	300b883a 	mov	r5,r6
 a009d1c:	8415e304 	addi	r16,r16,22412
 a009d20:	2023883a 	mov	r17,r4
 a009d24:	380d883a 	mov	r6,r7
 a009d28:	1009883a 	mov	r4,r2
 a009d2c:	dfc00215 	stw	ra,8(sp)
 a009d30:	80000015 	stw	zero,0(r16)
 a009d34:	a00de5c0 	call	a00de5c <write>
 a009d38:	00ffffc4 	movi	r3,-1
 a009d3c:	10c00526 	beq	r2,r3,a009d54 <_write_r+0x50>
 a009d40:	dfc00217 	ldw	ra,8(sp)
 a009d44:	dc400117 	ldw	r17,4(sp)
 a009d48:	dc000017 	ldw	r16,0(sp)
 a009d4c:	dec00304 	addi	sp,sp,12
 a009d50:	f800283a 	ret
 a009d54:	80c00017 	ldw	r3,0(r16)
 a009d58:	183ff926 	beq	r3,zero,a009d40 <__alt_mem_flash+0xfe008d40>
 a009d5c:	88c00015 	stw	r3,0(r17)
 a009d60:	003ff706 	br	a009d40 <__alt_mem_flash+0xfe008d40>

0a009d64 <_close_r>:
 a009d64:	defffd04 	addi	sp,sp,-12
 a009d68:	dc000015 	stw	r16,0(sp)
 a009d6c:	04028074 	movhi	r16,2561
 a009d70:	dc400115 	stw	r17,4(sp)
 a009d74:	8415e304 	addi	r16,r16,22412
 a009d78:	2023883a 	mov	r17,r4
 a009d7c:	2809883a 	mov	r4,r5
 a009d80:	dfc00215 	stw	ra,8(sp)
 a009d84:	80000015 	stw	zero,0(r16)
 a009d88:	a00d5d40 	call	a00d5d4 <close>
 a009d8c:	00ffffc4 	movi	r3,-1
 a009d90:	10c00526 	beq	r2,r3,a009da8 <_close_r+0x44>
 a009d94:	dfc00217 	ldw	ra,8(sp)
 a009d98:	dc400117 	ldw	r17,4(sp)
 a009d9c:	dc000017 	ldw	r16,0(sp)
 a009da0:	dec00304 	addi	sp,sp,12
 a009da4:	f800283a 	ret
 a009da8:	80c00017 	ldw	r3,0(r16)
 a009dac:	183ff926 	beq	r3,zero,a009d94 <__alt_mem_flash+0xfe008d94>
 a009db0:	88c00015 	stw	r3,0(r17)
 a009db4:	003ff706 	br	a009d94 <__alt_mem_flash+0xfe008d94>

0a009db8 <_calloc_r>:
 a009db8:	defffe04 	addi	sp,sp,-8
 a009dbc:	2805883a 	mov	r2,r5
 a009dc0:	dc000015 	stw	r16,0(sp)
 a009dc4:	300b883a 	mov	r5,r6
 a009dc8:	2021883a 	mov	r16,r4
 a009dcc:	1009883a 	mov	r4,r2
 a009dd0:	dfc00115 	stw	ra,4(sp)
 a009dd4:	a0019a40 	call	a0019a4 <__mulsi3>
 a009dd8:	100b883a 	mov	r5,r2
 a009ddc:	8009883a 	mov	r4,r16
 a009de0:	a00667c0 	call	a00667c <_malloc_r>
 a009de4:	10002926 	beq	r2,zero,a009e8c <_calloc_r+0xd4>
 a009de8:	11bfff17 	ldw	r6,-4(r2)
 a009dec:	1021883a 	mov	r16,r2
 a009df0:	00bfff04 	movi	r2,-4
 a009df4:	308c703a 	and	r6,r6,r2
 a009df8:	00c00904 	movi	r3,36
 a009dfc:	308d883a 	add	r6,r6,r2
 a009e00:	19801636 	bltu	r3,r6,a009e5c <_calloc_r+0xa4>
 a009e04:	008004c4 	movi	r2,19
 a009e08:	11800b2e 	bgeu	r2,r6,a009e38 <_calloc_r+0x80>
 a009e0c:	80000015 	stw	zero,0(r16)
 a009e10:	80000115 	stw	zero,4(r16)
 a009e14:	008006c4 	movi	r2,27
 a009e18:	11801a2e 	bgeu	r2,r6,a009e84 <_calloc_r+0xcc>
 a009e1c:	80000215 	stw	zero,8(r16)
 a009e20:	80000315 	stw	zero,12(r16)
 a009e24:	30c0151e 	bne	r6,r3,a009e7c <_calloc_r+0xc4>
 a009e28:	80000415 	stw	zero,16(r16)
 a009e2c:	80800604 	addi	r2,r16,24
 a009e30:	80000515 	stw	zero,20(r16)
 a009e34:	00000106 	br	a009e3c <_calloc_r+0x84>
 a009e38:	8005883a 	mov	r2,r16
 a009e3c:	10000015 	stw	zero,0(r2)
 a009e40:	10000115 	stw	zero,4(r2)
 a009e44:	10000215 	stw	zero,8(r2)
 a009e48:	8005883a 	mov	r2,r16
 a009e4c:	dfc00117 	ldw	ra,4(sp)
 a009e50:	dc000017 	ldw	r16,0(sp)
 a009e54:	dec00204 	addi	sp,sp,8
 a009e58:	f800283a 	ret
 a009e5c:	000b883a 	mov	r5,zero
 a009e60:	8009883a 	mov	r4,r16
 a009e64:	a0070b40 	call	a0070b4 <memset>
 a009e68:	8005883a 	mov	r2,r16
 a009e6c:	dfc00117 	ldw	ra,4(sp)
 a009e70:	dc000017 	ldw	r16,0(sp)
 a009e74:	dec00204 	addi	sp,sp,8
 a009e78:	f800283a 	ret
 a009e7c:	80800404 	addi	r2,r16,16
 a009e80:	003fee06 	br	a009e3c <__alt_mem_flash+0xfe008e3c>
 a009e84:	80800204 	addi	r2,r16,8
 a009e88:	003fec06 	br	a009e3c <__alt_mem_flash+0xfe008e3c>
 a009e8c:	0005883a 	mov	r2,zero
 a009e90:	003fee06 	br	a009e4c <__alt_mem_flash+0xfe008e4c>

0a009e94 <_fclose_r>:
 a009e94:	28003926 	beq	r5,zero,a009f7c <_fclose_r+0xe8>
 a009e98:	defffc04 	addi	sp,sp,-16
 a009e9c:	dc400115 	stw	r17,4(sp)
 a009ea0:	dc000015 	stw	r16,0(sp)
 a009ea4:	dfc00315 	stw	ra,12(sp)
 a009ea8:	dc800215 	stw	r18,8(sp)
 a009eac:	2023883a 	mov	r17,r4
 a009eb0:	2821883a 	mov	r16,r5
 a009eb4:	20000226 	beq	r4,zero,a009ec0 <_fclose_r+0x2c>
 a009eb8:	20800e17 	ldw	r2,56(r4)
 a009ebc:	10002726 	beq	r2,zero,a009f5c <_fclose_r+0xc8>
 a009ec0:	8080030f 	ldh	r2,12(r16)
 a009ec4:	1000071e 	bne	r2,zero,a009ee4 <_fclose_r+0x50>
 a009ec8:	0005883a 	mov	r2,zero
 a009ecc:	dfc00317 	ldw	ra,12(sp)
 a009ed0:	dc800217 	ldw	r18,8(sp)
 a009ed4:	dc400117 	ldw	r17,4(sp)
 a009ed8:	dc000017 	ldw	r16,0(sp)
 a009edc:	dec00404 	addi	sp,sp,16
 a009ee0:	f800283a 	ret
 a009ee4:	800b883a 	mov	r5,r16
 a009ee8:	8809883a 	mov	r4,r17
 a009eec:	a0057d00 	call	a0057d0 <__sflush_r>
 a009ef0:	1025883a 	mov	r18,r2
 a009ef4:	80800b17 	ldw	r2,44(r16)
 a009ef8:	10000426 	beq	r2,zero,a009f0c <_fclose_r+0x78>
 a009efc:	81400717 	ldw	r5,28(r16)
 a009f00:	8809883a 	mov	r4,r17
 a009f04:	103ee83a 	callr	r2
 a009f08:	10001616 	blt	r2,zero,a009f64 <_fclose_r+0xd0>
 a009f0c:	8080030b 	ldhu	r2,12(r16)
 a009f10:	1080200c 	andi	r2,r2,128
 a009f14:	1000151e 	bne	r2,zero,a009f6c <_fclose_r+0xd8>
 a009f18:	81400c17 	ldw	r5,48(r16)
 a009f1c:	28000526 	beq	r5,zero,a009f34 <_fclose_r+0xa0>
 a009f20:	80801004 	addi	r2,r16,64
 a009f24:	28800226 	beq	r5,r2,a009f30 <_fclose_r+0x9c>
 a009f28:	8809883a 	mov	r4,r17
 a009f2c:	a005f4c0 	call	a005f4c <_free_r>
 a009f30:	80000c15 	stw	zero,48(r16)
 a009f34:	81401117 	ldw	r5,68(r16)
 a009f38:	28000326 	beq	r5,zero,a009f48 <_fclose_r+0xb4>
 a009f3c:	8809883a 	mov	r4,r17
 a009f40:	a005f4c0 	call	a005f4c <_free_r>
 a009f44:	80001115 	stw	zero,68(r16)
 a009f48:	a005de80 	call	a005de8 <__sfp_lock_acquire>
 a009f4c:	8000030d 	sth	zero,12(r16)
 a009f50:	a005dec0 	call	a005dec <__sfp_lock_release>
 a009f54:	9005883a 	mov	r2,r18
 a009f58:	003fdc06 	br	a009ecc <__alt_mem_flash+0xfe008ecc>
 a009f5c:	a005dd80 	call	a005dd8 <__sinit>
 a009f60:	003fd706 	br	a009ec0 <__alt_mem_flash+0xfe008ec0>
 a009f64:	04bfffc4 	movi	r18,-1
 a009f68:	003fe806 	br	a009f0c <__alt_mem_flash+0xfe008f0c>
 a009f6c:	81400417 	ldw	r5,16(r16)
 a009f70:	8809883a 	mov	r4,r17
 a009f74:	a005f4c0 	call	a005f4c <_free_r>
 a009f78:	003fe706 	br	a009f18 <__alt_mem_flash+0xfe008f18>
 a009f7c:	0005883a 	mov	r2,zero
 a009f80:	f800283a 	ret

0a009f84 <fclose>:
 a009f84:	00828074 	movhi	r2,2561
 a009f88:	108ea004 	addi	r2,r2,14976
 a009f8c:	200b883a 	mov	r5,r4
 a009f90:	11000017 	ldw	r4,0(r2)
 a009f94:	a009e941 	jmpi	a009e94 <_fclose_r>

0a009f98 <__fputwc>:
 a009f98:	defff804 	addi	sp,sp,-32
 a009f9c:	dcc00415 	stw	r19,16(sp)
 a009fa0:	dc800315 	stw	r18,12(sp)
 a009fa4:	dc000115 	stw	r16,4(sp)
 a009fa8:	dfc00715 	stw	ra,28(sp)
 a009fac:	dd400615 	stw	r21,24(sp)
 a009fb0:	dd000515 	stw	r20,20(sp)
 a009fb4:	dc400215 	stw	r17,8(sp)
 a009fb8:	2027883a 	mov	r19,r4
 a009fbc:	2825883a 	mov	r18,r5
 a009fc0:	3021883a 	mov	r16,r6
 a009fc4:	a00646c0 	call	a00646c <__locale_mb_cur_max>
 a009fc8:	00c00044 	movi	r3,1
 a009fcc:	10c03e26 	beq	r2,r3,a00a0c8 <__fputwc+0x130>
 a009fd0:	81c01704 	addi	r7,r16,92
 a009fd4:	900d883a 	mov	r6,r18
 a009fd8:	d80b883a 	mov	r5,sp
 a009fdc:	9809883a 	mov	r4,r19
 a009fe0:	a00aff00 	call	a00aff0 <_wcrtomb_r>
 a009fe4:	1029883a 	mov	r20,r2
 a009fe8:	00bfffc4 	movi	r2,-1
 a009fec:	a0802026 	beq	r20,r2,a00a070 <__fputwc+0xd8>
 a009ff0:	d9400003 	ldbu	r5,0(sp)
 a009ff4:	a0001c26 	beq	r20,zero,a00a068 <__fputwc+0xd0>
 a009ff8:	0023883a 	mov	r17,zero
 a009ffc:	05400284 	movi	r21,10
 a00a000:	00000906 	br	a00a028 <__fputwc+0x90>
 a00a004:	80800017 	ldw	r2,0(r16)
 a00a008:	11400005 	stb	r5,0(r2)
 a00a00c:	80c00017 	ldw	r3,0(r16)
 a00a010:	18c00044 	addi	r3,r3,1
 a00a014:	80c00015 	stw	r3,0(r16)
 a00a018:	8c400044 	addi	r17,r17,1
 a00a01c:	dc45883a 	add	r2,sp,r17
 a00a020:	8d00112e 	bgeu	r17,r20,a00a068 <__fputwc+0xd0>
 a00a024:	11400003 	ldbu	r5,0(r2)
 a00a028:	80c00217 	ldw	r3,8(r16)
 a00a02c:	18ffffc4 	addi	r3,r3,-1
 a00a030:	80c00215 	stw	r3,8(r16)
 a00a034:	183ff30e 	bge	r3,zero,a00a004 <__alt_mem_flash+0xfe009004>
 a00a038:	80800617 	ldw	r2,24(r16)
 a00a03c:	18801916 	blt	r3,r2,a00a0a4 <__fputwc+0x10c>
 a00a040:	80800017 	ldw	r2,0(r16)
 a00a044:	11400005 	stb	r5,0(r2)
 a00a048:	80800017 	ldw	r2,0(r16)
 a00a04c:	10c00003 	ldbu	r3,0(r2)
 a00a050:	10800044 	addi	r2,r2,1
 a00a054:	1d402326 	beq	r3,r21,a00a0e4 <__fputwc+0x14c>
 a00a058:	80800015 	stw	r2,0(r16)
 a00a05c:	8c400044 	addi	r17,r17,1
 a00a060:	dc45883a 	add	r2,sp,r17
 a00a064:	8d3fef36 	bltu	r17,r20,a00a024 <__alt_mem_flash+0xfe009024>
 a00a068:	9005883a 	mov	r2,r18
 a00a06c:	00000406 	br	a00a080 <__fputwc+0xe8>
 a00a070:	80c0030b 	ldhu	r3,12(r16)
 a00a074:	a005883a 	mov	r2,r20
 a00a078:	18c01014 	ori	r3,r3,64
 a00a07c:	80c0030d 	sth	r3,12(r16)
 a00a080:	dfc00717 	ldw	ra,28(sp)
 a00a084:	dd400617 	ldw	r21,24(sp)
 a00a088:	dd000517 	ldw	r20,20(sp)
 a00a08c:	dcc00417 	ldw	r19,16(sp)
 a00a090:	dc800317 	ldw	r18,12(sp)
 a00a094:	dc400217 	ldw	r17,8(sp)
 a00a098:	dc000117 	ldw	r16,4(sp)
 a00a09c:	dec00804 	addi	sp,sp,32
 a00a0a0:	f800283a 	ret
 a00a0a4:	800d883a 	mov	r6,r16
 a00a0a8:	29403fcc 	andi	r5,r5,255
 a00a0ac:	9809883a 	mov	r4,r19
 a00a0b0:	a00ae980 	call	a00ae98 <__swbuf_r>
 a00a0b4:	10bfffe0 	cmpeqi	r2,r2,-1
 a00a0b8:	10803fcc 	andi	r2,r2,255
 a00a0bc:	103fd626 	beq	r2,zero,a00a018 <__alt_mem_flash+0xfe009018>
 a00a0c0:	00bfffc4 	movi	r2,-1
 a00a0c4:	003fee06 	br	a00a080 <__alt_mem_flash+0xfe009080>
 a00a0c8:	90ffffc4 	addi	r3,r18,-1
 a00a0cc:	01003f84 	movi	r4,254
 a00a0d0:	20ffbf36 	bltu	r4,r3,a009fd0 <__alt_mem_flash+0xfe008fd0>
 a00a0d4:	900b883a 	mov	r5,r18
 a00a0d8:	dc800005 	stb	r18,0(sp)
 a00a0dc:	1029883a 	mov	r20,r2
 a00a0e0:	003fc506 	br	a009ff8 <__alt_mem_flash+0xfe008ff8>
 a00a0e4:	800d883a 	mov	r6,r16
 a00a0e8:	a80b883a 	mov	r5,r21
 a00a0ec:	9809883a 	mov	r4,r19
 a00a0f0:	a00ae980 	call	a00ae98 <__swbuf_r>
 a00a0f4:	10bfffe0 	cmpeqi	r2,r2,-1
 a00a0f8:	003fef06 	br	a00a0b8 <__alt_mem_flash+0xfe0090b8>

0a00a0fc <_fputwc_r>:
 a00a0fc:	3080030b 	ldhu	r2,12(r6)
 a00a100:	10c8000c 	andi	r3,r2,8192
 a00a104:	1800051e 	bne	r3,zero,a00a11c <_fputwc_r+0x20>
 a00a108:	30c01917 	ldw	r3,100(r6)
 a00a10c:	10880014 	ori	r2,r2,8192
 a00a110:	3080030d 	sth	r2,12(r6)
 a00a114:	18880014 	ori	r2,r3,8192
 a00a118:	30801915 	stw	r2,100(r6)
 a00a11c:	a009f981 	jmpi	a009f98 <__fputwc>

0a00a120 <fputwc>:
 a00a120:	00828074 	movhi	r2,2561
 a00a124:	defffc04 	addi	sp,sp,-16
 a00a128:	108ea004 	addi	r2,r2,14976
 a00a12c:	dc000115 	stw	r16,4(sp)
 a00a130:	14000017 	ldw	r16,0(r2)
 a00a134:	dc400215 	stw	r17,8(sp)
 a00a138:	dfc00315 	stw	ra,12(sp)
 a00a13c:	2023883a 	mov	r17,r4
 a00a140:	80000226 	beq	r16,zero,a00a14c <fputwc+0x2c>
 a00a144:	80800e17 	ldw	r2,56(r16)
 a00a148:	10001026 	beq	r2,zero,a00a18c <fputwc+0x6c>
 a00a14c:	2880030b 	ldhu	r2,12(r5)
 a00a150:	10c8000c 	andi	r3,r2,8192
 a00a154:	1800051e 	bne	r3,zero,a00a16c <fputwc+0x4c>
 a00a158:	28c01917 	ldw	r3,100(r5)
 a00a15c:	10880014 	ori	r2,r2,8192
 a00a160:	2880030d 	sth	r2,12(r5)
 a00a164:	18880014 	ori	r2,r3,8192
 a00a168:	28801915 	stw	r2,100(r5)
 a00a16c:	280d883a 	mov	r6,r5
 a00a170:	8009883a 	mov	r4,r16
 a00a174:	880b883a 	mov	r5,r17
 a00a178:	dfc00317 	ldw	ra,12(sp)
 a00a17c:	dc400217 	ldw	r17,8(sp)
 a00a180:	dc000117 	ldw	r16,4(sp)
 a00a184:	dec00404 	addi	sp,sp,16
 a00a188:	a009f981 	jmpi	a009f98 <__fputwc>
 a00a18c:	8009883a 	mov	r4,r16
 a00a190:	d9400015 	stw	r5,0(sp)
 a00a194:	a005dd80 	call	a005dd8 <__sinit>
 a00a198:	d9400017 	ldw	r5,0(sp)
 a00a19c:	003feb06 	br	a00a14c <__alt_mem_flash+0xfe00914c>

0a00a1a0 <_fstat_r>:
 a00a1a0:	defffd04 	addi	sp,sp,-12
 a00a1a4:	2805883a 	mov	r2,r5
 a00a1a8:	dc000015 	stw	r16,0(sp)
 a00a1ac:	04028074 	movhi	r16,2561
 a00a1b0:	dc400115 	stw	r17,4(sp)
 a00a1b4:	8415e304 	addi	r16,r16,22412
 a00a1b8:	2023883a 	mov	r17,r4
 a00a1bc:	300b883a 	mov	r5,r6
 a00a1c0:	1009883a 	mov	r4,r2
 a00a1c4:	dfc00215 	stw	ra,8(sp)
 a00a1c8:	80000015 	stw	zero,0(r16)
 a00a1cc:	a00d7140 	call	a00d714 <fstat>
 a00a1d0:	00ffffc4 	movi	r3,-1
 a00a1d4:	10c00526 	beq	r2,r3,a00a1ec <_fstat_r+0x4c>
 a00a1d8:	dfc00217 	ldw	ra,8(sp)
 a00a1dc:	dc400117 	ldw	r17,4(sp)
 a00a1e0:	dc000017 	ldw	r16,0(sp)
 a00a1e4:	dec00304 	addi	sp,sp,12
 a00a1e8:	f800283a 	ret
 a00a1ec:	80c00017 	ldw	r3,0(r16)
 a00a1f0:	183ff926 	beq	r3,zero,a00a1d8 <__alt_mem_flash+0xfe0091d8>
 a00a1f4:	88c00015 	stw	r3,0(r17)
 a00a1f8:	003ff706 	br	a00a1d8 <__alt_mem_flash+0xfe0091d8>

0a00a1fc <__sfvwrite_r>:
 a00a1fc:	30800217 	ldw	r2,8(r6)
 a00a200:	10006726 	beq	r2,zero,a00a3a0 <__sfvwrite_r+0x1a4>
 a00a204:	28c0030b 	ldhu	r3,12(r5)
 a00a208:	defff404 	addi	sp,sp,-48
 a00a20c:	dd400715 	stw	r21,28(sp)
 a00a210:	dd000615 	stw	r20,24(sp)
 a00a214:	dc000215 	stw	r16,8(sp)
 a00a218:	dfc00b15 	stw	ra,44(sp)
 a00a21c:	df000a15 	stw	fp,40(sp)
 a00a220:	ddc00915 	stw	r23,36(sp)
 a00a224:	dd800815 	stw	r22,32(sp)
 a00a228:	dcc00515 	stw	r19,20(sp)
 a00a22c:	dc800415 	stw	r18,16(sp)
 a00a230:	dc400315 	stw	r17,12(sp)
 a00a234:	1880020c 	andi	r2,r3,8
 a00a238:	2821883a 	mov	r16,r5
 a00a23c:	202b883a 	mov	r21,r4
 a00a240:	3029883a 	mov	r20,r6
 a00a244:	10002726 	beq	r2,zero,a00a2e4 <__sfvwrite_r+0xe8>
 a00a248:	28800417 	ldw	r2,16(r5)
 a00a24c:	10002526 	beq	r2,zero,a00a2e4 <__sfvwrite_r+0xe8>
 a00a250:	1880008c 	andi	r2,r3,2
 a00a254:	a4400017 	ldw	r17,0(r20)
 a00a258:	10002a26 	beq	r2,zero,a00a304 <__sfvwrite_r+0x108>
 a00a25c:	05a00034 	movhi	r22,32768
 a00a260:	0027883a 	mov	r19,zero
 a00a264:	0025883a 	mov	r18,zero
 a00a268:	b5bf0004 	addi	r22,r22,-1024
 a00a26c:	980d883a 	mov	r6,r19
 a00a270:	a809883a 	mov	r4,r21
 a00a274:	90004626 	beq	r18,zero,a00a390 <__sfvwrite_r+0x194>
 a00a278:	900f883a 	mov	r7,r18
 a00a27c:	b480022e 	bgeu	r22,r18,a00a288 <__sfvwrite_r+0x8c>
 a00a280:	01e00034 	movhi	r7,32768
 a00a284:	39ff0004 	addi	r7,r7,-1024
 a00a288:	80800917 	ldw	r2,36(r16)
 a00a28c:	81400717 	ldw	r5,28(r16)
 a00a290:	103ee83a 	callr	r2
 a00a294:	00805a0e 	bge	zero,r2,a00a400 <__sfvwrite_r+0x204>
 a00a298:	a0c00217 	ldw	r3,8(r20)
 a00a29c:	98a7883a 	add	r19,r19,r2
 a00a2a0:	90a5c83a 	sub	r18,r18,r2
 a00a2a4:	1885c83a 	sub	r2,r3,r2
 a00a2a8:	a0800215 	stw	r2,8(r20)
 a00a2ac:	103fef1e 	bne	r2,zero,a00a26c <__alt_mem_flash+0xfe00926c>
 a00a2b0:	0005883a 	mov	r2,zero
 a00a2b4:	dfc00b17 	ldw	ra,44(sp)
 a00a2b8:	df000a17 	ldw	fp,40(sp)
 a00a2bc:	ddc00917 	ldw	r23,36(sp)
 a00a2c0:	dd800817 	ldw	r22,32(sp)
 a00a2c4:	dd400717 	ldw	r21,28(sp)
 a00a2c8:	dd000617 	ldw	r20,24(sp)
 a00a2cc:	dcc00517 	ldw	r19,20(sp)
 a00a2d0:	dc800417 	ldw	r18,16(sp)
 a00a2d4:	dc400317 	ldw	r17,12(sp)
 a00a2d8:	dc000217 	ldw	r16,8(sp)
 a00a2dc:	dec00c04 	addi	sp,sp,48
 a00a2e0:	f800283a 	ret
 a00a2e4:	800b883a 	mov	r5,r16
 a00a2e8:	a809883a 	mov	r4,r21
 a00a2ec:	a003dcc0 	call	a003dcc <__swsetup_r>
 a00a2f0:	1000ee1e 	bne	r2,zero,a00a6ac <__sfvwrite_r+0x4b0>
 a00a2f4:	80c0030b 	ldhu	r3,12(r16)
 a00a2f8:	a4400017 	ldw	r17,0(r20)
 a00a2fc:	1880008c 	andi	r2,r3,2
 a00a300:	103fd61e 	bne	r2,zero,a00a25c <__alt_mem_flash+0xfe00925c>
 a00a304:	1880004c 	andi	r2,r3,1
 a00a308:	1000421e 	bne	r2,zero,a00a414 <__sfvwrite_r+0x218>
 a00a30c:	0039883a 	mov	fp,zero
 a00a310:	0025883a 	mov	r18,zero
 a00a314:	90001a26 	beq	r18,zero,a00a380 <__sfvwrite_r+0x184>
 a00a318:	1880800c 	andi	r2,r3,512
 a00a31c:	84c00217 	ldw	r19,8(r16)
 a00a320:	10002126 	beq	r2,zero,a00a3a8 <__sfvwrite_r+0x1ac>
 a00a324:	982f883a 	mov	r23,r19
 a00a328:	94c09636 	bltu	r18,r19,a00a584 <__sfvwrite_r+0x388>
 a00a32c:	1881200c 	andi	r2,r3,1152
 a00a330:	1000a11e 	bne	r2,zero,a00a5b8 <__sfvwrite_r+0x3bc>
 a00a334:	81000017 	ldw	r4,0(r16)
 a00a338:	b80d883a 	mov	r6,r23
 a00a33c:	e00b883a 	mov	r5,fp
 a00a340:	a00a7780 	call	a00a778 <memmove>
 a00a344:	80c00217 	ldw	r3,8(r16)
 a00a348:	81000017 	ldw	r4,0(r16)
 a00a34c:	9005883a 	mov	r2,r18
 a00a350:	1ce7c83a 	sub	r19,r3,r19
 a00a354:	25cf883a 	add	r7,r4,r23
 a00a358:	84c00215 	stw	r19,8(r16)
 a00a35c:	81c00015 	stw	r7,0(r16)
 a00a360:	a0c00217 	ldw	r3,8(r20)
 a00a364:	e0b9883a 	add	fp,fp,r2
 a00a368:	90a5c83a 	sub	r18,r18,r2
 a00a36c:	18a7c83a 	sub	r19,r3,r2
 a00a370:	a4c00215 	stw	r19,8(r20)
 a00a374:	983fce26 	beq	r19,zero,a00a2b0 <__alt_mem_flash+0xfe0092b0>
 a00a378:	80c0030b 	ldhu	r3,12(r16)
 a00a37c:	903fe61e 	bne	r18,zero,a00a318 <__alt_mem_flash+0xfe009318>
 a00a380:	8f000017 	ldw	fp,0(r17)
 a00a384:	8c800117 	ldw	r18,4(r17)
 a00a388:	8c400204 	addi	r17,r17,8
 a00a38c:	003fe106 	br	a00a314 <__alt_mem_flash+0xfe009314>
 a00a390:	8cc00017 	ldw	r19,0(r17)
 a00a394:	8c800117 	ldw	r18,4(r17)
 a00a398:	8c400204 	addi	r17,r17,8
 a00a39c:	003fb306 	br	a00a26c <__alt_mem_flash+0xfe00926c>
 a00a3a0:	0005883a 	mov	r2,zero
 a00a3a4:	f800283a 	ret
 a00a3a8:	81000017 	ldw	r4,0(r16)
 a00a3ac:	80800417 	ldw	r2,16(r16)
 a00a3b0:	11005a36 	bltu	r2,r4,a00a51c <__sfvwrite_r+0x320>
 a00a3b4:	85c00517 	ldw	r23,20(r16)
 a00a3b8:	95c05836 	bltu	r18,r23,a00a51c <__sfvwrite_r+0x320>
 a00a3bc:	00a00034 	movhi	r2,32768
 a00a3c0:	10bfffc4 	addi	r2,r2,-1
 a00a3c4:	9009883a 	mov	r4,r18
 a00a3c8:	1480012e 	bgeu	r2,r18,a00a3d0 <__sfvwrite_r+0x1d4>
 a00a3cc:	1009883a 	mov	r4,r2
 a00a3d0:	b80b883a 	mov	r5,r23
 a00a3d4:	a00bd980 	call	a00bd98 <__divsi3>
 a00a3d8:	b80b883a 	mov	r5,r23
 a00a3dc:	1009883a 	mov	r4,r2
 a00a3e0:	a0019a40 	call	a0019a4 <__mulsi3>
 a00a3e4:	81400717 	ldw	r5,28(r16)
 a00a3e8:	80c00917 	ldw	r3,36(r16)
 a00a3ec:	100f883a 	mov	r7,r2
 a00a3f0:	e00d883a 	mov	r6,fp
 a00a3f4:	a809883a 	mov	r4,r21
 a00a3f8:	183ee83a 	callr	r3
 a00a3fc:	00bfd816 	blt	zero,r2,a00a360 <__alt_mem_flash+0xfe009360>
 a00a400:	8080030b 	ldhu	r2,12(r16)
 a00a404:	10801014 	ori	r2,r2,64
 a00a408:	8080030d 	sth	r2,12(r16)
 a00a40c:	00bfffc4 	movi	r2,-1
 a00a410:	003fa806 	br	a00a2b4 <__alt_mem_flash+0xfe0092b4>
 a00a414:	0027883a 	mov	r19,zero
 a00a418:	0011883a 	mov	r8,zero
 a00a41c:	0039883a 	mov	fp,zero
 a00a420:	0025883a 	mov	r18,zero
 a00a424:	90001f26 	beq	r18,zero,a00a4a4 <__sfvwrite_r+0x2a8>
 a00a428:	40005a26 	beq	r8,zero,a00a594 <__sfvwrite_r+0x398>
 a00a42c:	982d883a 	mov	r22,r19
 a00a430:	94c0012e 	bgeu	r18,r19,a00a438 <__sfvwrite_r+0x23c>
 a00a434:	902d883a 	mov	r22,r18
 a00a438:	81000017 	ldw	r4,0(r16)
 a00a43c:	80800417 	ldw	r2,16(r16)
 a00a440:	b02f883a 	mov	r23,r22
 a00a444:	81c00517 	ldw	r7,20(r16)
 a00a448:	1100032e 	bgeu	r2,r4,a00a458 <__sfvwrite_r+0x25c>
 a00a44c:	80c00217 	ldw	r3,8(r16)
 a00a450:	38c7883a 	add	r3,r7,r3
 a00a454:	1d801816 	blt	r3,r22,a00a4b8 <__sfvwrite_r+0x2bc>
 a00a458:	b1c03e16 	blt	r22,r7,a00a554 <__sfvwrite_r+0x358>
 a00a45c:	80800917 	ldw	r2,36(r16)
 a00a460:	81400717 	ldw	r5,28(r16)
 a00a464:	e00d883a 	mov	r6,fp
 a00a468:	da000115 	stw	r8,4(sp)
 a00a46c:	a809883a 	mov	r4,r21
 a00a470:	103ee83a 	callr	r2
 a00a474:	102f883a 	mov	r23,r2
 a00a478:	da000117 	ldw	r8,4(sp)
 a00a47c:	00bfe00e 	bge	zero,r2,a00a400 <__alt_mem_flash+0xfe009400>
 a00a480:	9de7c83a 	sub	r19,r19,r23
 a00a484:	98001f26 	beq	r19,zero,a00a504 <__sfvwrite_r+0x308>
 a00a488:	a0800217 	ldw	r2,8(r20)
 a00a48c:	e5f9883a 	add	fp,fp,r23
 a00a490:	95e5c83a 	sub	r18,r18,r23
 a00a494:	15efc83a 	sub	r23,r2,r23
 a00a498:	a5c00215 	stw	r23,8(r20)
 a00a49c:	b83f8426 	beq	r23,zero,a00a2b0 <__alt_mem_flash+0xfe0092b0>
 a00a4a0:	903fe11e 	bne	r18,zero,a00a428 <__alt_mem_flash+0xfe009428>
 a00a4a4:	8f000017 	ldw	fp,0(r17)
 a00a4a8:	8c800117 	ldw	r18,4(r17)
 a00a4ac:	0011883a 	mov	r8,zero
 a00a4b0:	8c400204 	addi	r17,r17,8
 a00a4b4:	003fdb06 	br	a00a424 <__alt_mem_flash+0xfe009424>
 a00a4b8:	180d883a 	mov	r6,r3
 a00a4bc:	e00b883a 	mov	r5,fp
 a00a4c0:	da000115 	stw	r8,4(sp)
 a00a4c4:	d8c00015 	stw	r3,0(sp)
 a00a4c8:	a00a7780 	call	a00a778 <memmove>
 a00a4cc:	d8c00017 	ldw	r3,0(sp)
 a00a4d0:	80800017 	ldw	r2,0(r16)
 a00a4d4:	800b883a 	mov	r5,r16
 a00a4d8:	a809883a 	mov	r4,r21
 a00a4dc:	10c5883a 	add	r2,r2,r3
 a00a4e0:	80800015 	stw	r2,0(r16)
 a00a4e4:	d8c00015 	stw	r3,0(sp)
 a00a4e8:	a0059ec0 	call	a0059ec <_fflush_r>
 a00a4ec:	d8c00017 	ldw	r3,0(sp)
 a00a4f0:	da000117 	ldw	r8,4(sp)
 a00a4f4:	103fc21e 	bne	r2,zero,a00a400 <__alt_mem_flash+0xfe009400>
 a00a4f8:	182f883a 	mov	r23,r3
 a00a4fc:	9de7c83a 	sub	r19,r19,r23
 a00a500:	983fe11e 	bne	r19,zero,a00a488 <__alt_mem_flash+0xfe009488>
 a00a504:	800b883a 	mov	r5,r16
 a00a508:	a809883a 	mov	r4,r21
 a00a50c:	a0059ec0 	call	a0059ec <_fflush_r>
 a00a510:	103fbb1e 	bne	r2,zero,a00a400 <__alt_mem_flash+0xfe009400>
 a00a514:	0011883a 	mov	r8,zero
 a00a518:	003fdb06 	br	a00a488 <__alt_mem_flash+0xfe009488>
 a00a51c:	94c0012e 	bgeu	r18,r19,a00a524 <__sfvwrite_r+0x328>
 a00a520:	9027883a 	mov	r19,r18
 a00a524:	980d883a 	mov	r6,r19
 a00a528:	e00b883a 	mov	r5,fp
 a00a52c:	a00a7780 	call	a00a778 <memmove>
 a00a530:	80800217 	ldw	r2,8(r16)
 a00a534:	80c00017 	ldw	r3,0(r16)
 a00a538:	14c5c83a 	sub	r2,r2,r19
 a00a53c:	1cc7883a 	add	r3,r3,r19
 a00a540:	80800215 	stw	r2,8(r16)
 a00a544:	80c00015 	stw	r3,0(r16)
 a00a548:	10004326 	beq	r2,zero,a00a658 <__sfvwrite_r+0x45c>
 a00a54c:	9805883a 	mov	r2,r19
 a00a550:	003f8306 	br	a00a360 <__alt_mem_flash+0xfe009360>
 a00a554:	b00d883a 	mov	r6,r22
 a00a558:	e00b883a 	mov	r5,fp
 a00a55c:	da000115 	stw	r8,4(sp)
 a00a560:	a00a7780 	call	a00a778 <memmove>
 a00a564:	80800217 	ldw	r2,8(r16)
 a00a568:	80c00017 	ldw	r3,0(r16)
 a00a56c:	da000117 	ldw	r8,4(sp)
 a00a570:	1585c83a 	sub	r2,r2,r22
 a00a574:	1dad883a 	add	r22,r3,r22
 a00a578:	80800215 	stw	r2,8(r16)
 a00a57c:	85800015 	stw	r22,0(r16)
 a00a580:	003fbf06 	br	a00a480 <__alt_mem_flash+0xfe009480>
 a00a584:	81000017 	ldw	r4,0(r16)
 a00a588:	9027883a 	mov	r19,r18
 a00a58c:	902f883a 	mov	r23,r18
 a00a590:	003f6906 	br	a00a338 <__alt_mem_flash+0xfe009338>
 a00a594:	900d883a 	mov	r6,r18
 a00a598:	01400284 	movi	r5,10
 a00a59c:	e009883a 	mov	r4,fp
 a00a5a0:	a006e880 	call	a006e88 <memchr>
 a00a5a4:	10003e26 	beq	r2,zero,a00a6a0 <__sfvwrite_r+0x4a4>
 a00a5a8:	10800044 	addi	r2,r2,1
 a00a5ac:	1727c83a 	sub	r19,r2,fp
 a00a5b0:	02000044 	movi	r8,1
 a00a5b4:	003f9d06 	br	a00a42c <__alt_mem_flash+0xfe00942c>
 a00a5b8:	80800517 	ldw	r2,20(r16)
 a00a5bc:	81400417 	ldw	r5,16(r16)
 a00a5c0:	81c00017 	ldw	r7,0(r16)
 a00a5c4:	10a7883a 	add	r19,r2,r2
 a00a5c8:	9885883a 	add	r2,r19,r2
 a00a5cc:	1026d7fa 	srli	r19,r2,31
 a00a5d0:	396dc83a 	sub	r22,r7,r5
 a00a5d4:	b1000044 	addi	r4,r22,1
 a00a5d8:	9885883a 	add	r2,r19,r2
 a00a5dc:	1027d07a 	srai	r19,r2,1
 a00a5e0:	2485883a 	add	r2,r4,r18
 a00a5e4:	980d883a 	mov	r6,r19
 a00a5e8:	9880022e 	bgeu	r19,r2,a00a5f4 <__sfvwrite_r+0x3f8>
 a00a5ec:	1027883a 	mov	r19,r2
 a00a5f0:	100d883a 	mov	r6,r2
 a00a5f4:	18c1000c 	andi	r3,r3,1024
 a00a5f8:	18001c26 	beq	r3,zero,a00a66c <__sfvwrite_r+0x470>
 a00a5fc:	300b883a 	mov	r5,r6
 a00a600:	a809883a 	mov	r4,r21
 a00a604:	a00667c0 	call	a00667c <_malloc_r>
 a00a608:	102f883a 	mov	r23,r2
 a00a60c:	10002926 	beq	r2,zero,a00a6b4 <__sfvwrite_r+0x4b8>
 a00a610:	81400417 	ldw	r5,16(r16)
 a00a614:	b00d883a 	mov	r6,r22
 a00a618:	1009883a 	mov	r4,r2
 a00a61c:	a006f6c0 	call	a006f6c <memcpy>
 a00a620:	8080030b 	ldhu	r2,12(r16)
 a00a624:	00fedfc4 	movi	r3,-1153
 a00a628:	10c4703a 	and	r2,r2,r3
 a00a62c:	10802014 	ori	r2,r2,128
 a00a630:	8080030d 	sth	r2,12(r16)
 a00a634:	bd89883a 	add	r4,r23,r22
 a00a638:	9d8fc83a 	sub	r7,r19,r22
 a00a63c:	85c00415 	stw	r23,16(r16)
 a00a640:	84c00515 	stw	r19,20(r16)
 a00a644:	81000015 	stw	r4,0(r16)
 a00a648:	9027883a 	mov	r19,r18
 a00a64c:	81c00215 	stw	r7,8(r16)
 a00a650:	902f883a 	mov	r23,r18
 a00a654:	003f3806 	br	a00a338 <__alt_mem_flash+0xfe009338>
 a00a658:	800b883a 	mov	r5,r16
 a00a65c:	a809883a 	mov	r4,r21
 a00a660:	a0059ec0 	call	a0059ec <_fflush_r>
 a00a664:	103fb926 	beq	r2,zero,a00a54c <__alt_mem_flash+0xfe00954c>
 a00a668:	003f6506 	br	a00a400 <__alt_mem_flash+0xfe009400>
 a00a66c:	a809883a 	mov	r4,r21
 a00a670:	a00a9340 	call	a00a934 <_realloc_r>
 a00a674:	102f883a 	mov	r23,r2
 a00a678:	103fee1e 	bne	r2,zero,a00a634 <__alt_mem_flash+0xfe009634>
 a00a67c:	81400417 	ldw	r5,16(r16)
 a00a680:	a809883a 	mov	r4,r21
 a00a684:	a005f4c0 	call	a005f4c <_free_r>
 a00a688:	8080030b 	ldhu	r2,12(r16)
 a00a68c:	00ffdfc4 	movi	r3,-129
 a00a690:	1884703a 	and	r2,r3,r2
 a00a694:	00c00304 	movi	r3,12
 a00a698:	a8c00015 	stw	r3,0(r21)
 a00a69c:	003f5906 	br	a00a404 <__alt_mem_flash+0xfe009404>
 a00a6a0:	94c00044 	addi	r19,r18,1
 a00a6a4:	02000044 	movi	r8,1
 a00a6a8:	003f6006 	br	a00a42c <__alt_mem_flash+0xfe00942c>
 a00a6ac:	00bfffc4 	movi	r2,-1
 a00a6b0:	003f0006 	br	a00a2b4 <__alt_mem_flash+0xfe0092b4>
 a00a6b4:	00800304 	movi	r2,12
 a00a6b8:	a8800015 	stw	r2,0(r21)
 a00a6bc:	8080030b 	ldhu	r2,12(r16)
 a00a6c0:	003f5006 	br	a00a404 <__alt_mem_flash+0xfe009404>

0a00a6c4 <_isatty_r>:
 a00a6c4:	defffd04 	addi	sp,sp,-12
 a00a6c8:	dc000015 	stw	r16,0(sp)
 a00a6cc:	04028074 	movhi	r16,2561
 a00a6d0:	dc400115 	stw	r17,4(sp)
 a00a6d4:	8415e304 	addi	r16,r16,22412
 a00a6d8:	2023883a 	mov	r17,r4
 a00a6dc:	2809883a 	mov	r4,r5
 a00a6e0:	dfc00215 	stw	ra,8(sp)
 a00a6e4:	80000015 	stw	zero,0(r16)
 a00a6e8:	a00d8080 	call	a00d808 <isatty>
 a00a6ec:	00ffffc4 	movi	r3,-1
 a00a6f0:	10c00526 	beq	r2,r3,a00a708 <_isatty_r+0x44>
 a00a6f4:	dfc00217 	ldw	ra,8(sp)
 a00a6f8:	dc400117 	ldw	r17,4(sp)
 a00a6fc:	dc000017 	ldw	r16,0(sp)
 a00a700:	dec00304 	addi	sp,sp,12
 a00a704:	f800283a 	ret
 a00a708:	80c00017 	ldw	r3,0(r16)
 a00a70c:	183ff926 	beq	r3,zero,a00a6f4 <__alt_mem_flash+0xfe0096f4>
 a00a710:	88c00015 	stw	r3,0(r17)
 a00a714:	003ff706 	br	a00a6f4 <__alt_mem_flash+0xfe0096f4>

0a00a718 <_lseek_r>:
 a00a718:	defffd04 	addi	sp,sp,-12
 a00a71c:	2805883a 	mov	r2,r5
 a00a720:	dc000015 	stw	r16,0(sp)
 a00a724:	04028074 	movhi	r16,2561
 a00a728:	dc400115 	stw	r17,4(sp)
 a00a72c:	300b883a 	mov	r5,r6
 a00a730:	8415e304 	addi	r16,r16,22412
 a00a734:	2023883a 	mov	r17,r4
 a00a738:	380d883a 	mov	r6,r7
 a00a73c:	1009883a 	mov	r4,r2
 a00a740:	dfc00215 	stw	ra,8(sp)
 a00a744:	80000015 	stw	zero,0(r16)
 a00a748:	a00d9dc0 	call	a00d9dc <lseek>
 a00a74c:	00ffffc4 	movi	r3,-1
 a00a750:	10c00526 	beq	r2,r3,a00a768 <_lseek_r+0x50>
 a00a754:	dfc00217 	ldw	ra,8(sp)
 a00a758:	dc400117 	ldw	r17,4(sp)
 a00a75c:	dc000017 	ldw	r16,0(sp)
 a00a760:	dec00304 	addi	sp,sp,12
 a00a764:	f800283a 	ret
 a00a768:	80c00017 	ldw	r3,0(r16)
 a00a76c:	183ff926 	beq	r3,zero,a00a754 <__alt_mem_flash+0xfe009754>
 a00a770:	88c00015 	stw	r3,0(r17)
 a00a774:	003ff706 	br	a00a754 <__alt_mem_flash+0xfe009754>

0a00a778 <memmove>:
 a00a778:	2005883a 	mov	r2,r4
 a00a77c:	29000b2e 	bgeu	r5,r4,a00a7ac <memmove+0x34>
 a00a780:	298f883a 	add	r7,r5,r6
 a00a784:	21c0092e 	bgeu	r4,r7,a00a7ac <memmove+0x34>
 a00a788:	2187883a 	add	r3,r4,r6
 a00a78c:	198bc83a 	sub	r5,r3,r6
 a00a790:	30004826 	beq	r6,zero,a00a8b4 <memmove+0x13c>
 a00a794:	39ffffc4 	addi	r7,r7,-1
 a00a798:	39000003 	ldbu	r4,0(r7)
 a00a79c:	18ffffc4 	addi	r3,r3,-1
 a00a7a0:	19000005 	stb	r4,0(r3)
 a00a7a4:	28fffb1e 	bne	r5,r3,a00a794 <__alt_mem_flash+0xfe009794>
 a00a7a8:	f800283a 	ret
 a00a7ac:	00c003c4 	movi	r3,15
 a00a7b0:	1980412e 	bgeu	r3,r6,a00a8b8 <memmove+0x140>
 a00a7b4:	2886b03a 	or	r3,r5,r2
 a00a7b8:	18c000cc 	andi	r3,r3,3
 a00a7bc:	1800401e 	bne	r3,zero,a00a8c0 <memmove+0x148>
 a00a7c0:	33fffc04 	addi	r15,r6,-16
 a00a7c4:	781ed13a 	srli	r15,r15,4
 a00a7c8:	28c00104 	addi	r3,r5,4
 a00a7cc:	13400104 	addi	r13,r2,4
 a00a7d0:	781c913a 	slli	r14,r15,4
 a00a7d4:	2b000204 	addi	r12,r5,8
 a00a7d8:	12c00204 	addi	r11,r2,8
 a00a7dc:	73800504 	addi	r14,r14,20
 a00a7e0:	2a800304 	addi	r10,r5,12
 a00a7e4:	12400304 	addi	r9,r2,12
 a00a7e8:	2b9d883a 	add	r14,r5,r14
 a00a7ec:	2811883a 	mov	r8,r5
 a00a7f0:	100f883a 	mov	r7,r2
 a00a7f4:	41000017 	ldw	r4,0(r8)
 a00a7f8:	39c00404 	addi	r7,r7,16
 a00a7fc:	18c00404 	addi	r3,r3,16
 a00a800:	393ffc15 	stw	r4,-16(r7)
 a00a804:	193ffc17 	ldw	r4,-16(r3)
 a00a808:	6b400404 	addi	r13,r13,16
 a00a80c:	5ac00404 	addi	r11,r11,16
 a00a810:	693ffc15 	stw	r4,-16(r13)
 a00a814:	61000017 	ldw	r4,0(r12)
 a00a818:	4a400404 	addi	r9,r9,16
 a00a81c:	42000404 	addi	r8,r8,16
 a00a820:	593ffc15 	stw	r4,-16(r11)
 a00a824:	51000017 	ldw	r4,0(r10)
 a00a828:	63000404 	addi	r12,r12,16
 a00a82c:	52800404 	addi	r10,r10,16
 a00a830:	493ffc15 	stw	r4,-16(r9)
 a00a834:	1bbfef1e 	bne	r3,r14,a00a7f4 <__alt_mem_flash+0xfe0097f4>
 a00a838:	79000044 	addi	r4,r15,1
 a00a83c:	2008913a 	slli	r4,r4,4
 a00a840:	328003cc 	andi	r10,r6,15
 a00a844:	02c000c4 	movi	r11,3
 a00a848:	1107883a 	add	r3,r2,r4
 a00a84c:	290b883a 	add	r5,r5,r4
 a00a850:	5a801e2e 	bgeu	r11,r10,a00a8cc <memmove+0x154>
 a00a854:	1813883a 	mov	r9,r3
 a00a858:	2811883a 	mov	r8,r5
 a00a85c:	500f883a 	mov	r7,r10
 a00a860:	41000017 	ldw	r4,0(r8)
 a00a864:	4a400104 	addi	r9,r9,4
 a00a868:	39ffff04 	addi	r7,r7,-4
 a00a86c:	493fff15 	stw	r4,-4(r9)
 a00a870:	42000104 	addi	r8,r8,4
 a00a874:	59fffa36 	bltu	r11,r7,a00a860 <__alt_mem_flash+0xfe009860>
 a00a878:	513fff04 	addi	r4,r10,-4
 a00a87c:	2008d0ba 	srli	r4,r4,2
 a00a880:	318000cc 	andi	r6,r6,3
 a00a884:	21000044 	addi	r4,r4,1
 a00a888:	2109883a 	add	r4,r4,r4
 a00a88c:	2109883a 	add	r4,r4,r4
 a00a890:	1907883a 	add	r3,r3,r4
 a00a894:	290b883a 	add	r5,r5,r4
 a00a898:	30000b26 	beq	r6,zero,a00a8c8 <memmove+0x150>
 a00a89c:	198d883a 	add	r6,r3,r6
 a00a8a0:	29c00003 	ldbu	r7,0(r5)
 a00a8a4:	18c00044 	addi	r3,r3,1
 a00a8a8:	29400044 	addi	r5,r5,1
 a00a8ac:	19ffffc5 	stb	r7,-1(r3)
 a00a8b0:	19bffb1e 	bne	r3,r6,a00a8a0 <__alt_mem_flash+0xfe0098a0>
 a00a8b4:	f800283a 	ret
 a00a8b8:	1007883a 	mov	r3,r2
 a00a8bc:	003ff606 	br	a00a898 <__alt_mem_flash+0xfe009898>
 a00a8c0:	1007883a 	mov	r3,r2
 a00a8c4:	003ff506 	br	a00a89c <__alt_mem_flash+0xfe00989c>
 a00a8c8:	f800283a 	ret
 a00a8cc:	500d883a 	mov	r6,r10
 a00a8d0:	003ff106 	br	a00a898 <__alt_mem_flash+0xfe009898>

0a00a8d4 <_read_r>:
 a00a8d4:	defffd04 	addi	sp,sp,-12
 a00a8d8:	2805883a 	mov	r2,r5
 a00a8dc:	dc000015 	stw	r16,0(sp)
 a00a8e0:	04028074 	movhi	r16,2561
 a00a8e4:	dc400115 	stw	r17,4(sp)
 a00a8e8:	300b883a 	mov	r5,r6
 a00a8ec:	8415e304 	addi	r16,r16,22412
 a00a8f0:	2023883a 	mov	r17,r4
 a00a8f4:	380d883a 	mov	r6,r7
 a00a8f8:	1009883a 	mov	r4,r2
 a00a8fc:	dfc00215 	stw	ra,8(sp)
 a00a900:	80000015 	stw	zero,0(r16)
 a00a904:	a00dbb80 	call	a00dbb8 <read>
 a00a908:	00ffffc4 	movi	r3,-1
 a00a90c:	10c00526 	beq	r2,r3,a00a924 <_read_r+0x50>
 a00a910:	dfc00217 	ldw	ra,8(sp)
 a00a914:	dc400117 	ldw	r17,4(sp)
 a00a918:	dc000017 	ldw	r16,0(sp)
 a00a91c:	dec00304 	addi	sp,sp,12
 a00a920:	f800283a 	ret
 a00a924:	80c00017 	ldw	r3,0(r16)
 a00a928:	183ff926 	beq	r3,zero,a00a910 <__alt_mem_flash+0xfe009910>
 a00a92c:	88c00015 	stw	r3,0(r17)
 a00a930:	003ff706 	br	a00a910 <__alt_mem_flash+0xfe009910>

0a00a934 <_realloc_r>:
 a00a934:	defff604 	addi	sp,sp,-40
 a00a938:	dc800215 	stw	r18,8(sp)
 a00a93c:	dfc00915 	stw	ra,36(sp)
 a00a940:	df000815 	stw	fp,32(sp)
 a00a944:	ddc00715 	stw	r23,28(sp)
 a00a948:	dd800615 	stw	r22,24(sp)
 a00a94c:	dd400515 	stw	r21,20(sp)
 a00a950:	dd000415 	stw	r20,16(sp)
 a00a954:	dcc00315 	stw	r19,12(sp)
 a00a958:	dc400115 	stw	r17,4(sp)
 a00a95c:	dc000015 	stw	r16,0(sp)
 a00a960:	3025883a 	mov	r18,r6
 a00a964:	2800b726 	beq	r5,zero,a00ac44 <_realloc_r+0x310>
 a00a968:	282b883a 	mov	r21,r5
 a00a96c:	2029883a 	mov	r20,r4
 a00a970:	a00db340 	call	a00db34 <__malloc_lock>
 a00a974:	a8bfff17 	ldw	r2,-4(r21)
 a00a978:	043fff04 	movi	r16,-4
 a00a97c:	90c002c4 	addi	r3,r18,11
 a00a980:	01000584 	movi	r4,22
 a00a984:	acfffe04 	addi	r19,r21,-8
 a00a988:	1420703a 	and	r16,r2,r16
 a00a98c:	20c0332e 	bgeu	r4,r3,a00aa5c <_realloc_r+0x128>
 a00a990:	047ffe04 	movi	r17,-8
 a00a994:	1c62703a 	and	r17,r3,r17
 a00a998:	8807883a 	mov	r3,r17
 a00a99c:	88005816 	blt	r17,zero,a00ab00 <_realloc_r+0x1cc>
 a00a9a0:	8c805736 	bltu	r17,r18,a00ab00 <_realloc_r+0x1cc>
 a00a9a4:	80c0300e 	bge	r16,r3,a00aa68 <_realloc_r+0x134>
 a00a9a8:	07028074 	movhi	fp,2561
 a00a9ac:	e708ac04 	addi	fp,fp,8880
 a00a9b0:	e1c00217 	ldw	r7,8(fp)
 a00a9b4:	9c09883a 	add	r4,r19,r16
 a00a9b8:	22000117 	ldw	r8,4(r4)
 a00a9bc:	21c06326 	beq	r4,r7,a00ab4c <_realloc_r+0x218>
 a00a9c0:	017fff84 	movi	r5,-2
 a00a9c4:	414a703a 	and	r5,r8,r5
 a00a9c8:	214b883a 	add	r5,r4,r5
 a00a9cc:	29800117 	ldw	r6,4(r5)
 a00a9d0:	3180004c 	andi	r6,r6,1
 a00a9d4:	30003f26 	beq	r6,zero,a00aad4 <_realloc_r+0x1a0>
 a00a9d8:	1080004c 	andi	r2,r2,1
 a00a9dc:	10008326 	beq	r2,zero,a00abec <_realloc_r+0x2b8>
 a00a9e0:	900b883a 	mov	r5,r18
 a00a9e4:	a009883a 	mov	r4,r20
 a00a9e8:	a00667c0 	call	a00667c <_malloc_r>
 a00a9ec:	1025883a 	mov	r18,r2
 a00a9f0:	10011e26 	beq	r2,zero,a00ae6c <_realloc_r+0x538>
 a00a9f4:	a93fff17 	ldw	r4,-4(r21)
 a00a9f8:	10fffe04 	addi	r3,r2,-8
 a00a9fc:	00bfff84 	movi	r2,-2
 a00aa00:	2084703a 	and	r2,r4,r2
 a00aa04:	9885883a 	add	r2,r19,r2
 a00aa08:	1880ee26 	beq	r3,r2,a00adc4 <_realloc_r+0x490>
 a00aa0c:	81bfff04 	addi	r6,r16,-4
 a00aa10:	00800904 	movi	r2,36
 a00aa14:	1180b836 	bltu	r2,r6,a00acf8 <_realloc_r+0x3c4>
 a00aa18:	00c004c4 	movi	r3,19
 a00aa1c:	19809636 	bltu	r3,r6,a00ac78 <_realloc_r+0x344>
 a00aa20:	9005883a 	mov	r2,r18
 a00aa24:	a807883a 	mov	r3,r21
 a00aa28:	19000017 	ldw	r4,0(r3)
 a00aa2c:	11000015 	stw	r4,0(r2)
 a00aa30:	19000117 	ldw	r4,4(r3)
 a00aa34:	11000115 	stw	r4,4(r2)
 a00aa38:	18c00217 	ldw	r3,8(r3)
 a00aa3c:	10c00215 	stw	r3,8(r2)
 a00aa40:	a80b883a 	mov	r5,r21
 a00aa44:	a009883a 	mov	r4,r20
 a00aa48:	a005f4c0 	call	a005f4c <_free_r>
 a00aa4c:	a009883a 	mov	r4,r20
 a00aa50:	a00db580 	call	a00db58 <__malloc_unlock>
 a00aa54:	9005883a 	mov	r2,r18
 a00aa58:	00001206 	br	a00aaa4 <_realloc_r+0x170>
 a00aa5c:	00c00404 	movi	r3,16
 a00aa60:	1823883a 	mov	r17,r3
 a00aa64:	003fce06 	br	a00a9a0 <__alt_mem_flash+0xfe0099a0>
 a00aa68:	a825883a 	mov	r18,r21
 a00aa6c:	8445c83a 	sub	r2,r16,r17
 a00aa70:	00c003c4 	movi	r3,15
 a00aa74:	18802636 	bltu	r3,r2,a00ab10 <_realloc_r+0x1dc>
 a00aa78:	99800117 	ldw	r6,4(r19)
 a00aa7c:	9c07883a 	add	r3,r19,r16
 a00aa80:	3180004c 	andi	r6,r6,1
 a00aa84:	3420b03a 	or	r16,r6,r16
 a00aa88:	9c000115 	stw	r16,4(r19)
 a00aa8c:	18800117 	ldw	r2,4(r3)
 a00aa90:	10800054 	ori	r2,r2,1
 a00aa94:	18800115 	stw	r2,4(r3)
 a00aa98:	a009883a 	mov	r4,r20
 a00aa9c:	a00db580 	call	a00db58 <__malloc_unlock>
 a00aaa0:	9005883a 	mov	r2,r18
 a00aaa4:	dfc00917 	ldw	ra,36(sp)
 a00aaa8:	df000817 	ldw	fp,32(sp)
 a00aaac:	ddc00717 	ldw	r23,28(sp)
 a00aab0:	dd800617 	ldw	r22,24(sp)
 a00aab4:	dd400517 	ldw	r21,20(sp)
 a00aab8:	dd000417 	ldw	r20,16(sp)
 a00aabc:	dcc00317 	ldw	r19,12(sp)
 a00aac0:	dc800217 	ldw	r18,8(sp)
 a00aac4:	dc400117 	ldw	r17,4(sp)
 a00aac8:	dc000017 	ldw	r16,0(sp)
 a00aacc:	dec00a04 	addi	sp,sp,40
 a00aad0:	f800283a 	ret
 a00aad4:	017fff04 	movi	r5,-4
 a00aad8:	414a703a 	and	r5,r8,r5
 a00aadc:	814d883a 	add	r6,r16,r5
 a00aae0:	30c01f16 	blt	r6,r3,a00ab60 <_realloc_r+0x22c>
 a00aae4:	20800317 	ldw	r2,12(r4)
 a00aae8:	20c00217 	ldw	r3,8(r4)
 a00aaec:	a825883a 	mov	r18,r21
 a00aaf0:	3021883a 	mov	r16,r6
 a00aaf4:	18800315 	stw	r2,12(r3)
 a00aaf8:	10c00215 	stw	r3,8(r2)
 a00aafc:	003fdb06 	br	a00aa6c <__alt_mem_flash+0xfe009a6c>
 a00ab00:	00800304 	movi	r2,12
 a00ab04:	a0800015 	stw	r2,0(r20)
 a00ab08:	0005883a 	mov	r2,zero
 a00ab0c:	003fe506 	br	a00aaa4 <__alt_mem_flash+0xfe009aa4>
 a00ab10:	98c00117 	ldw	r3,4(r19)
 a00ab14:	9c4b883a 	add	r5,r19,r17
 a00ab18:	11000054 	ori	r4,r2,1
 a00ab1c:	18c0004c 	andi	r3,r3,1
 a00ab20:	1c62b03a 	or	r17,r3,r17
 a00ab24:	9c400115 	stw	r17,4(r19)
 a00ab28:	29000115 	stw	r4,4(r5)
 a00ab2c:	2885883a 	add	r2,r5,r2
 a00ab30:	10c00117 	ldw	r3,4(r2)
 a00ab34:	29400204 	addi	r5,r5,8
 a00ab38:	a009883a 	mov	r4,r20
 a00ab3c:	18c00054 	ori	r3,r3,1
 a00ab40:	10c00115 	stw	r3,4(r2)
 a00ab44:	a005f4c0 	call	a005f4c <_free_r>
 a00ab48:	003fd306 	br	a00aa98 <__alt_mem_flash+0xfe009a98>
 a00ab4c:	017fff04 	movi	r5,-4
 a00ab50:	414a703a 	and	r5,r8,r5
 a00ab54:	89800404 	addi	r6,r17,16
 a00ab58:	8151883a 	add	r8,r16,r5
 a00ab5c:	4180590e 	bge	r8,r6,a00acc4 <_realloc_r+0x390>
 a00ab60:	1080004c 	andi	r2,r2,1
 a00ab64:	103f9e1e 	bne	r2,zero,a00a9e0 <__alt_mem_flash+0xfe0099e0>
 a00ab68:	adbffe17 	ldw	r22,-8(r21)
 a00ab6c:	00bfff04 	movi	r2,-4
 a00ab70:	9dadc83a 	sub	r22,r19,r22
 a00ab74:	b1800117 	ldw	r6,4(r22)
 a00ab78:	3084703a 	and	r2,r6,r2
 a00ab7c:	20002026 	beq	r4,zero,a00ac00 <_realloc_r+0x2cc>
 a00ab80:	80af883a 	add	r23,r16,r2
 a00ab84:	b96f883a 	add	r23,r23,r5
 a00ab88:	21c05f26 	beq	r4,r7,a00ad08 <_realloc_r+0x3d4>
 a00ab8c:	b8c01c16 	blt	r23,r3,a00ac00 <_realloc_r+0x2cc>
 a00ab90:	20800317 	ldw	r2,12(r4)
 a00ab94:	20c00217 	ldw	r3,8(r4)
 a00ab98:	81bfff04 	addi	r6,r16,-4
 a00ab9c:	01000904 	movi	r4,36
 a00aba0:	18800315 	stw	r2,12(r3)
 a00aba4:	10c00215 	stw	r3,8(r2)
 a00aba8:	b0c00217 	ldw	r3,8(r22)
 a00abac:	b0800317 	ldw	r2,12(r22)
 a00abb0:	b4800204 	addi	r18,r22,8
 a00abb4:	18800315 	stw	r2,12(r3)
 a00abb8:	10c00215 	stw	r3,8(r2)
 a00abbc:	21801b36 	bltu	r4,r6,a00ac2c <_realloc_r+0x2f8>
 a00abc0:	008004c4 	movi	r2,19
 a00abc4:	1180352e 	bgeu	r2,r6,a00ac9c <_realloc_r+0x368>
 a00abc8:	a8800017 	ldw	r2,0(r21)
 a00abcc:	b0800215 	stw	r2,8(r22)
 a00abd0:	a8800117 	ldw	r2,4(r21)
 a00abd4:	b0800315 	stw	r2,12(r22)
 a00abd8:	008006c4 	movi	r2,27
 a00abdc:	11807f36 	bltu	r2,r6,a00addc <_realloc_r+0x4a8>
 a00abe0:	b0800404 	addi	r2,r22,16
 a00abe4:	ad400204 	addi	r21,r21,8
 a00abe8:	00002d06 	br	a00aca0 <_realloc_r+0x36c>
 a00abec:	adbffe17 	ldw	r22,-8(r21)
 a00abf0:	00bfff04 	movi	r2,-4
 a00abf4:	9dadc83a 	sub	r22,r19,r22
 a00abf8:	b1000117 	ldw	r4,4(r22)
 a00abfc:	2084703a 	and	r2,r4,r2
 a00ac00:	b03f7726 	beq	r22,zero,a00a9e0 <__alt_mem_flash+0xfe0099e0>
 a00ac04:	80af883a 	add	r23,r16,r2
 a00ac08:	b8ff7516 	blt	r23,r3,a00a9e0 <__alt_mem_flash+0xfe0099e0>
 a00ac0c:	b0800317 	ldw	r2,12(r22)
 a00ac10:	b0c00217 	ldw	r3,8(r22)
 a00ac14:	81bfff04 	addi	r6,r16,-4
 a00ac18:	01000904 	movi	r4,36
 a00ac1c:	18800315 	stw	r2,12(r3)
 a00ac20:	10c00215 	stw	r3,8(r2)
 a00ac24:	b4800204 	addi	r18,r22,8
 a00ac28:	21bfe52e 	bgeu	r4,r6,a00abc0 <__alt_mem_flash+0xfe009bc0>
 a00ac2c:	a80b883a 	mov	r5,r21
 a00ac30:	9009883a 	mov	r4,r18
 a00ac34:	a00a7780 	call	a00a778 <memmove>
 a00ac38:	b821883a 	mov	r16,r23
 a00ac3c:	b027883a 	mov	r19,r22
 a00ac40:	003f8a06 	br	a00aa6c <__alt_mem_flash+0xfe009a6c>
 a00ac44:	300b883a 	mov	r5,r6
 a00ac48:	dfc00917 	ldw	ra,36(sp)
 a00ac4c:	df000817 	ldw	fp,32(sp)
 a00ac50:	ddc00717 	ldw	r23,28(sp)
 a00ac54:	dd800617 	ldw	r22,24(sp)
 a00ac58:	dd400517 	ldw	r21,20(sp)
 a00ac5c:	dd000417 	ldw	r20,16(sp)
 a00ac60:	dcc00317 	ldw	r19,12(sp)
 a00ac64:	dc800217 	ldw	r18,8(sp)
 a00ac68:	dc400117 	ldw	r17,4(sp)
 a00ac6c:	dc000017 	ldw	r16,0(sp)
 a00ac70:	dec00a04 	addi	sp,sp,40
 a00ac74:	a00667c1 	jmpi	a00667c <_malloc_r>
 a00ac78:	a8c00017 	ldw	r3,0(r21)
 a00ac7c:	90c00015 	stw	r3,0(r18)
 a00ac80:	a8c00117 	ldw	r3,4(r21)
 a00ac84:	90c00115 	stw	r3,4(r18)
 a00ac88:	00c006c4 	movi	r3,27
 a00ac8c:	19804536 	bltu	r3,r6,a00ada4 <_realloc_r+0x470>
 a00ac90:	90800204 	addi	r2,r18,8
 a00ac94:	a8c00204 	addi	r3,r21,8
 a00ac98:	003f6306 	br	a00aa28 <__alt_mem_flash+0xfe009a28>
 a00ac9c:	9005883a 	mov	r2,r18
 a00aca0:	a8c00017 	ldw	r3,0(r21)
 a00aca4:	b821883a 	mov	r16,r23
 a00aca8:	b027883a 	mov	r19,r22
 a00acac:	10c00015 	stw	r3,0(r2)
 a00acb0:	a8c00117 	ldw	r3,4(r21)
 a00acb4:	10c00115 	stw	r3,4(r2)
 a00acb8:	a8c00217 	ldw	r3,8(r21)
 a00acbc:	10c00215 	stw	r3,8(r2)
 a00acc0:	003f6a06 	br	a00aa6c <__alt_mem_flash+0xfe009a6c>
 a00acc4:	9c67883a 	add	r19,r19,r17
 a00acc8:	4445c83a 	sub	r2,r8,r17
 a00accc:	e4c00215 	stw	r19,8(fp)
 a00acd0:	10800054 	ori	r2,r2,1
 a00acd4:	98800115 	stw	r2,4(r19)
 a00acd8:	a8bfff17 	ldw	r2,-4(r21)
 a00acdc:	a009883a 	mov	r4,r20
 a00ace0:	1080004c 	andi	r2,r2,1
 a00ace4:	1462b03a 	or	r17,r2,r17
 a00ace8:	ac7fff15 	stw	r17,-4(r21)
 a00acec:	a00db580 	call	a00db58 <__malloc_unlock>
 a00acf0:	a805883a 	mov	r2,r21
 a00acf4:	003f6b06 	br	a00aaa4 <__alt_mem_flash+0xfe009aa4>
 a00acf8:	a80b883a 	mov	r5,r21
 a00acfc:	9009883a 	mov	r4,r18
 a00ad00:	a00a7780 	call	a00a778 <memmove>
 a00ad04:	003f4e06 	br	a00aa40 <__alt_mem_flash+0xfe009a40>
 a00ad08:	89000404 	addi	r4,r17,16
 a00ad0c:	b93fbc16 	blt	r23,r4,a00ac00 <__alt_mem_flash+0xfe009c00>
 a00ad10:	b0800317 	ldw	r2,12(r22)
 a00ad14:	b0c00217 	ldw	r3,8(r22)
 a00ad18:	81bfff04 	addi	r6,r16,-4
 a00ad1c:	01000904 	movi	r4,36
 a00ad20:	18800315 	stw	r2,12(r3)
 a00ad24:	10c00215 	stw	r3,8(r2)
 a00ad28:	b4800204 	addi	r18,r22,8
 a00ad2c:	21804336 	bltu	r4,r6,a00ae3c <_realloc_r+0x508>
 a00ad30:	008004c4 	movi	r2,19
 a00ad34:	11803f2e 	bgeu	r2,r6,a00ae34 <_realloc_r+0x500>
 a00ad38:	a8800017 	ldw	r2,0(r21)
 a00ad3c:	b0800215 	stw	r2,8(r22)
 a00ad40:	a8800117 	ldw	r2,4(r21)
 a00ad44:	b0800315 	stw	r2,12(r22)
 a00ad48:	008006c4 	movi	r2,27
 a00ad4c:	11803f36 	bltu	r2,r6,a00ae4c <_realloc_r+0x518>
 a00ad50:	b0800404 	addi	r2,r22,16
 a00ad54:	ad400204 	addi	r21,r21,8
 a00ad58:	a8c00017 	ldw	r3,0(r21)
 a00ad5c:	10c00015 	stw	r3,0(r2)
 a00ad60:	a8c00117 	ldw	r3,4(r21)
 a00ad64:	10c00115 	stw	r3,4(r2)
 a00ad68:	a8c00217 	ldw	r3,8(r21)
 a00ad6c:	10c00215 	stw	r3,8(r2)
 a00ad70:	b447883a 	add	r3,r22,r17
 a00ad74:	bc45c83a 	sub	r2,r23,r17
 a00ad78:	e0c00215 	stw	r3,8(fp)
 a00ad7c:	10800054 	ori	r2,r2,1
 a00ad80:	18800115 	stw	r2,4(r3)
 a00ad84:	b0800117 	ldw	r2,4(r22)
 a00ad88:	a009883a 	mov	r4,r20
 a00ad8c:	1080004c 	andi	r2,r2,1
 a00ad90:	1462b03a 	or	r17,r2,r17
 a00ad94:	b4400115 	stw	r17,4(r22)
 a00ad98:	a00db580 	call	a00db58 <__malloc_unlock>
 a00ad9c:	9005883a 	mov	r2,r18
 a00ada0:	003f4006 	br	a00aaa4 <__alt_mem_flash+0xfe009aa4>
 a00ada4:	a8c00217 	ldw	r3,8(r21)
 a00ada8:	90c00215 	stw	r3,8(r18)
 a00adac:	a8c00317 	ldw	r3,12(r21)
 a00adb0:	90c00315 	stw	r3,12(r18)
 a00adb4:	30801126 	beq	r6,r2,a00adfc <_realloc_r+0x4c8>
 a00adb8:	90800404 	addi	r2,r18,16
 a00adbc:	a8c00404 	addi	r3,r21,16
 a00adc0:	003f1906 	br	a00aa28 <__alt_mem_flash+0xfe009a28>
 a00adc4:	90ffff17 	ldw	r3,-4(r18)
 a00adc8:	00bfff04 	movi	r2,-4
 a00adcc:	a825883a 	mov	r18,r21
 a00add0:	1884703a 	and	r2,r3,r2
 a00add4:	80a1883a 	add	r16,r16,r2
 a00add8:	003f2406 	br	a00aa6c <__alt_mem_flash+0xfe009a6c>
 a00addc:	a8800217 	ldw	r2,8(r21)
 a00ade0:	b0800415 	stw	r2,16(r22)
 a00ade4:	a8800317 	ldw	r2,12(r21)
 a00ade8:	b0800515 	stw	r2,20(r22)
 a00adec:	31000a26 	beq	r6,r4,a00ae18 <_realloc_r+0x4e4>
 a00adf0:	b0800604 	addi	r2,r22,24
 a00adf4:	ad400404 	addi	r21,r21,16
 a00adf8:	003fa906 	br	a00aca0 <__alt_mem_flash+0xfe009ca0>
 a00adfc:	a9000417 	ldw	r4,16(r21)
 a00ae00:	90800604 	addi	r2,r18,24
 a00ae04:	a8c00604 	addi	r3,r21,24
 a00ae08:	91000415 	stw	r4,16(r18)
 a00ae0c:	a9000517 	ldw	r4,20(r21)
 a00ae10:	91000515 	stw	r4,20(r18)
 a00ae14:	003f0406 	br	a00aa28 <__alt_mem_flash+0xfe009a28>
 a00ae18:	a8c00417 	ldw	r3,16(r21)
 a00ae1c:	ad400604 	addi	r21,r21,24
 a00ae20:	b0800804 	addi	r2,r22,32
 a00ae24:	b0c00615 	stw	r3,24(r22)
 a00ae28:	a8ffff17 	ldw	r3,-4(r21)
 a00ae2c:	b0c00715 	stw	r3,28(r22)
 a00ae30:	003f9b06 	br	a00aca0 <__alt_mem_flash+0xfe009ca0>
 a00ae34:	9005883a 	mov	r2,r18
 a00ae38:	003fc706 	br	a00ad58 <__alt_mem_flash+0xfe009d58>
 a00ae3c:	a80b883a 	mov	r5,r21
 a00ae40:	9009883a 	mov	r4,r18
 a00ae44:	a00a7780 	call	a00a778 <memmove>
 a00ae48:	003fc906 	br	a00ad70 <__alt_mem_flash+0xfe009d70>
 a00ae4c:	a8800217 	ldw	r2,8(r21)
 a00ae50:	b0800415 	stw	r2,16(r22)
 a00ae54:	a8800317 	ldw	r2,12(r21)
 a00ae58:	b0800515 	stw	r2,20(r22)
 a00ae5c:	31000726 	beq	r6,r4,a00ae7c <_realloc_r+0x548>
 a00ae60:	b0800604 	addi	r2,r22,24
 a00ae64:	ad400404 	addi	r21,r21,16
 a00ae68:	003fbb06 	br	a00ad58 <__alt_mem_flash+0xfe009d58>
 a00ae6c:	a009883a 	mov	r4,r20
 a00ae70:	a00db580 	call	a00db58 <__malloc_unlock>
 a00ae74:	0005883a 	mov	r2,zero
 a00ae78:	003f0a06 	br	a00aaa4 <__alt_mem_flash+0xfe009aa4>
 a00ae7c:	a8c00417 	ldw	r3,16(r21)
 a00ae80:	ad400604 	addi	r21,r21,24
 a00ae84:	b0800804 	addi	r2,r22,32
 a00ae88:	b0c00615 	stw	r3,24(r22)
 a00ae8c:	a8ffff17 	ldw	r3,-4(r21)
 a00ae90:	b0c00715 	stw	r3,28(r22)
 a00ae94:	003fb006 	br	a00ad58 <__alt_mem_flash+0xfe009d58>

0a00ae98 <__swbuf_r>:
 a00ae98:	defffb04 	addi	sp,sp,-20
 a00ae9c:	dcc00315 	stw	r19,12(sp)
 a00aea0:	dc800215 	stw	r18,8(sp)
 a00aea4:	dc000015 	stw	r16,0(sp)
 a00aea8:	dfc00415 	stw	ra,16(sp)
 a00aeac:	dc400115 	stw	r17,4(sp)
 a00aeb0:	2025883a 	mov	r18,r4
 a00aeb4:	2827883a 	mov	r19,r5
 a00aeb8:	3021883a 	mov	r16,r6
 a00aebc:	20000226 	beq	r4,zero,a00aec8 <__swbuf_r+0x30>
 a00aec0:	20800e17 	ldw	r2,56(r4)
 a00aec4:	10004226 	beq	r2,zero,a00afd0 <__swbuf_r+0x138>
 a00aec8:	80800617 	ldw	r2,24(r16)
 a00aecc:	8100030b 	ldhu	r4,12(r16)
 a00aed0:	80800215 	stw	r2,8(r16)
 a00aed4:	2080020c 	andi	r2,r4,8
 a00aed8:	10003626 	beq	r2,zero,a00afb4 <__swbuf_r+0x11c>
 a00aedc:	80c00417 	ldw	r3,16(r16)
 a00aee0:	18003426 	beq	r3,zero,a00afb4 <__swbuf_r+0x11c>
 a00aee4:	2088000c 	andi	r2,r4,8192
 a00aee8:	9c403fcc 	andi	r17,r19,255
 a00aeec:	10001a26 	beq	r2,zero,a00af58 <__swbuf_r+0xc0>
 a00aef0:	80800017 	ldw	r2,0(r16)
 a00aef4:	81000517 	ldw	r4,20(r16)
 a00aef8:	10c7c83a 	sub	r3,r2,r3
 a00aefc:	1900200e 	bge	r3,r4,a00af80 <__swbuf_r+0xe8>
 a00af00:	18c00044 	addi	r3,r3,1
 a00af04:	81000217 	ldw	r4,8(r16)
 a00af08:	11400044 	addi	r5,r2,1
 a00af0c:	81400015 	stw	r5,0(r16)
 a00af10:	213fffc4 	addi	r4,r4,-1
 a00af14:	81000215 	stw	r4,8(r16)
 a00af18:	14c00005 	stb	r19,0(r2)
 a00af1c:	80800517 	ldw	r2,20(r16)
 a00af20:	10c01e26 	beq	r2,r3,a00af9c <__swbuf_r+0x104>
 a00af24:	8080030b 	ldhu	r2,12(r16)
 a00af28:	1080004c 	andi	r2,r2,1
 a00af2c:	10000226 	beq	r2,zero,a00af38 <__swbuf_r+0xa0>
 a00af30:	00800284 	movi	r2,10
 a00af34:	88801926 	beq	r17,r2,a00af9c <__swbuf_r+0x104>
 a00af38:	8805883a 	mov	r2,r17
 a00af3c:	dfc00417 	ldw	ra,16(sp)
 a00af40:	dcc00317 	ldw	r19,12(sp)
 a00af44:	dc800217 	ldw	r18,8(sp)
 a00af48:	dc400117 	ldw	r17,4(sp)
 a00af4c:	dc000017 	ldw	r16,0(sp)
 a00af50:	dec00504 	addi	sp,sp,20
 a00af54:	f800283a 	ret
 a00af58:	81401917 	ldw	r5,100(r16)
 a00af5c:	00b7ffc4 	movi	r2,-8193
 a00af60:	21080014 	ori	r4,r4,8192
 a00af64:	2884703a 	and	r2,r5,r2
 a00af68:	80801915 	stw	r2,100(r16)
 a00af6c:	80800017 	ldw	r2,0(r16)
 a00af70:	8100030d 	sth	r4,12(r16)
 a00af74:	81000517 	ldw	r4,20(r16)
 a00af78:	10c7c83a 	sub	r3,r2,r3
 a00af7c:	193fe016 	blt	r3,r4,a00af00 <__alt_mem_flash+0xfe009f00>
 a00af80:	800b883a 	mov	r5,r16
 a00af84:	9009883a 	mov	r4,r18
 a00af88:	a0059ec0 	call	a0059ec <_fflush_r>
 a00af8c:	1000071e 	bne	r2,zero,a00afac <__swbuf_r+0x114>
 a00af90:	80800017 	ldw	r2,0(r16)
 a00af94:	00c00044 	movi	r3,1
 a00af98:	003fda06 	br	a00af04 <__alt_mem_flash+0xfe009f04>
 a00af9c:	800b883a 	mov	r5,r16
 a00afa0:	9009883a 	mov	r4,r18
 a00afa4:	a0059ec0 	call	a0059ec <_fflush_r>
 a00afa8:	103fe326 	beq	r2,zero,a00af38 <__alt_mem_flash+0xfe009f38>
 a00afac:	00bfffc4 	movi	r2,-1
 a00afb0:	003fe206 	br	a00af3c <__alt_mem_flash+0xfe009f3c>
 a00afb4:	800b883a 	mov	r5,r16
 a00afb8:	9009883a 	mov	r4,r18
 a00afbc:	a003dcc0 	call	a003dcc <__swsetup_r>
 a00afc0:	103ffa1e 	bne	r2,zero,a00afac <__alt_mem_flash+0xfe009fac>
 a00afc4:	8100030b 	ldhu	r4,12(r16)
 a00afc8:	80c00417 	ldw	r3,16(r16)
 a00afcc:	003fc506 	br	a00aee4 <__alt_mem_flash+0xfe009ee4>
 a00afd0:	a005dd80 	call	a005dd8 <__sinit>
 a00afd4:	003fbc06 	br	a00aec8 <__alt_mem_flash+0xfe009ec8>

0a00afd8 <__swbuf>:
 a00afd8:	00828074 	movhi	r2,2561
 a00afdc:	108ea004 	addi	r2,r2,14976
 a00afe0:	280d883a 	mov	r6,r5
 a00afe4:	200b883a 	mov	r5,r4
 a00afe8:	11000017 	ldw	r4,0(r2)
 a00afec:	a00ae981 	jmpi	a00ae98 <__swbuf_r>

0a00aff0 <_wcrtomb_r>:
 a00aff0:	defff604 	addi	sp,sp,-40
 a00aff4:	00828074 	movhi	r2,2561
 a00aff8:	dc800815 	stw	r18,32(sp)
 a00affc:	dc400715 	stw	r17,28(sp)
 a00b000:	dc000615 	stw	r16,24(sp)
 a00b004:	108ea404 	addi	r2,r2,14992
 a00b008:	dfc00915 	stw	ra,36(sp)
 a00b00c:	2021883a 	mov	r16,r4
 a00b010:	3823883a 	mov	r17,r7
 a00b014:	14800017 	ldw	r18,0(r2)
 a00b018:	28001426 	beq	r5,zero,a00b06c <_wcrtomb_r+0x7c>
 a00b01c:	d9400415 	stw	r5,16(sp)
 a00b020:	d9800515 	stw	r6,20(sp)
 a00b024:	a0064600 	call	a006460 <__locale_charset>
 a00b028:	d9800517 	ldw	r6,20(sp)
 a00b02c:	d9400417 	ldw	r5,16(sp)
 a00b030:	100f883a 	mov	r7,r2
 a00b034:	dc400015 	stw	r17,0(sp)
 a00b038:	8009883a 	mov	r4,r16
 a00b03c:	903ee83a 	callr	r18
 a00b040:	00ffffc4 	movi	r3,-1
 a00b044:	10c0031e 	bne	r2,r3,a00b054 <_wcrtomb_r+0x64>
 a00b048:	88000015 	stw	zero,0(r17)
 a00b04c:	00c02284 	movi	r3,138
 a00b050:	80c00015 	stw	r3,0(r16)
 a00b054:	dfc00917 	ldw	ra,36(sp)
 a00b058:	dc800817 	ldw	r18,32(sp)
 a00b05c:	dc400717 	ldw	r17,28(sp)
 a00b060:	dc000617 	ldw	r16,24(sp)
 a00b064:	dec00a04 	addi	sp,sp,40
 a00b068:	f800283a 	ret
 a00b06c:	a0064600 	call	a006460 <__locale_charset>
 a00b070:	100f883a 	mov	r7,r2
 a00b074:	dc400015 	stw	r17,0(sp)
 a00b078:	000d883a 	mov	r6,zero
 a00b07c:	d9400104 	addi	r5,sp,4
 a00b080:	8009883a 	mov	r4,r16
 a00b084:	903ee83a 	callr	r18
 a00b088:	003fed06 	br	a00b040 <__alt_mem_flash+0xfe00a040>

0a00b08c <wcrtomb>:
 a00b08c:	defff604 	addi	sp,sp,-40
 a00b090:	00828074 	movhi	r2,2561
 a00b094:	dc800615 	stw	r18,24(sp)
 a00b098:	dc400515 	stw	r17,20(sp)
 a00b09c:	108ea004 	addi	r2,r2,14976
 a00b0a0:	dfc00915 	stw	ra,36(sp)
 a00b0a4:	dd000815 	stw	r20,32(sp)
 a00b0a8:	dcc00715 	stw	r19,28(sp)
 a00b0ac:	dc000415 	stw	r16,16(sp)
 a00b0b0:	3025883a 	mov	r18,r6
 a00b0b4:	14400017 	ldw	r17,0(r2)
 a00b0b8:	20001926 	beq	r4,zero,a00b120 <wcrtomb+0x94>
 a00b0bc:	00828074 	movhi	r2,2561
 a00b0c0:	108ea404 	addi	r2,r2,14992
 a00b0c4:	15000017 	ldw	r20,0(r2)
 a00b0c8:	2021883a 	mov	r16,r4
 a00b0cc:	2827883a 	mov	r19,r5
 a00b0d0:	a0064600 	call	a006460 <__locale_charset>
 a00b0d4:	100f883a 	mov	r7,r2
 a00b0d8:	dc800015 	stw	r18,0(sp)
 a00b0dc:	980d883a 	mov	r6,r19
 a00b0e0:	800b883a 	mov	r5,r16
 a00b0e4:	8809883a 	mov	r4,r17
 a00b0e8:	a03ee83a 	callr	r20
 a00b0ec:	00ffffc4 	movi	r3,-1
 a00b0f0:	10c0031e 	bne	r2,r3,a00b100 <wcrtomb+0x74>
 a00b0f4:	90000015 	stw	zero,0(r18)
 a00b0f8:	00c02284 	movi	r3,138
 a00b0fc:	88c00015 	stw	r3,0(r17)
 a00b100:	dfc00917 	ldw	ra,36(sp)
 a00b104:	dd000817 	ldw	r20,32(sp)
 a00b108:	dcc00717 	ldw	r19,28(sp)
 a00b10c:	dc800617 	ldw	r18,24(sp)
 a00b110:	dc400517 	ldw	r17,20(sp)
 a00b114:	dc000417 	ldw	r16,16(sp)
 a00b118:	dec00a04 	addi	sp,sp,40
 a00b11c:	f800283a 	ret
 a00b120:	00828074 	movhi	r2,2561
 a00b124:	108ea404 	addi	r2,r2,14992
 a00b128:	14000017 	ldw	r16,0(r2)
 a00b12c:	a0064600 	call	a006460 <__locale_charset>
 a00b130:	100f883a 	mov	r7,r2
 a00b134:	dc800015 	stw	r18,0(sp)
 a00b138:	000d883a 	mov	r6,zero
 a00b13c:	d9400104 	addi	r5,sp,4
 a00b140:	8809883a 	mov	r4,r17
 a00b144:	803ee83a 	callr	r16
 a00b148:	003fe806 	br	a00b0ec <__alt_mem_flash+0xfe00a0ec>

0a00b14c <__ascii_wctomb>:
 a00b14c:	28000526 	beq	r5,zero,a00b164 <__ascii_wctomb+0x18>
 a00b150:	00803fc4 	movi	r2,255
 a00b154:	11800536 	bltu	r2,r6,a00b16c <__ascii_wctomb+0x20>
 a00b158:	29800005 	stb	r6,0(r5)
 a00b15c:	00800044 	movi	r2,1
 a00b160:	f800283a 	ret
 a00b164:	0005883a 	mov	r2,zero
 a00b168:	f800283a 	ret
 a00b16c:	00802284 	movi	r2,138
 a00b170:	20800015 	stw	r2,0(r4)
 a00b174:	00bfffc4 	movi	r2,-1
 a00b178:	f800283a 	ret

0a00b17c <_wctomb_r>:
 a00b17c:	00828074 	movhi	r2,2561
 a00b180:	defff904 	addi	sp,sp,-28
 a00b184:	108ea404 	addi	r2,r2,14992
 a00b188:	dfc00615 	stw	ra,24(sp)
 a00b18c:	dc400515 	stw	r17,20(sp)
 a00b190:	dc000415 	stw	r16,16(sp)
 a00b194:	3823883a 	mov	r17,r7
 a00b198:	14000017 	ldw	r16,0(r2)
 a00b19c:	d9000115 	stw	r4,4(sp)
 a00b1a0:	d9400215 	stw	r5,8(sp)
 a00b1a4:	d9800315 	stw	r6,12(sp)
 a00b1a8:	a0064600 	call	a006460 <__locale_charset>
 a00b1ac:	d9800317 	ldw	r6,12(sp)
 a00b1b0:	d9400217 	ldw	r5,8(sp)
 a00b1b4:	d9000117 	ldw	r4,4(sp)
 a00b1b8:	100f883a 	mov	r7,r2
 a00b1bc:	dc400015 	stw	r17,0(sp)
 a00b1c0:	803ee83a 	callr	r16
 a00b1c4:	dfc00617 	ldw	ra,24(sp)
 a00b1c8:	dc400517 	ldw	r17,20(sp)
 a00b1cc:	dc000417 	ldw	r16,16(sp)
 a00b1d0:	dec00704 	addi	sp,sp,28
 a00b1d4:	f800283a 	ret

0a00b1d8 <__udivdi3>:
 a00b1d8:	defff404 	addi	sp,sp,-48
 a00b1dc:	dcc00515 	stw	r19,20(sp)
 a00b1e0:	dc000215 	stw	r16,8(sp)
 a00b1e4:	dfc00b15 	stw	ra,44(sp)
 a00b1e8:	df000a15 	stw	fp,40(sp)
 a00b1ec:	ddc00915 	stw	r23,36(sp)
 a00b1f0:	dd800815 	stw	r22,32(sp)
 a00b1f4:	dd400715 	stw	r21,28(sp)
 a00b1f8:	dd000615 	stw	r20,24(sp)
 a00b1fc:	dc800415 	stw	r18,16(sp)
 a00b200:	dc400315 	stw	r17,12(sp)
 a00b204:	2027883a 	mov	r19,r4
 a00b208:	2821883a 	mov	r16,r5
 a00b20c:	3800461e 	bne	r7,zero,a00b328 <__udivdi3+0x150>
 a00b210:	3023883a 	mov	r17,r6
 a00b214:	2025883a 	mov	r18,r4
 a00b218:	2980572e 	bgeu	r5,r6,a00b378 <__udivdi3+0x1a0>
 a00b21c:	00bfffd4 	movui	r2,65535
 a00b220:	282d883a 	mov	r22,r5
 a00b224:	1180b236 	bltu	r2,r6,a00b4f0 <__udivdi3+0x318>
 a00b228:	00803fc4 	movi	r2,255
 a00b22c:	1185803a 	cmpltu	r2,r2,r6
 a00b230:	100490fa 	slli	r2,r2,3
 a00b234:	3086d83a 	srl	r3,r6,r2
 a00b238:	01028074 	movhi	r4,2561
 a00b23c:	2106ba04 	addi	r4,r4,6888
 a00b240:	20c7883a 	add	r3,r4,r3
 a00b244:	18c00003 	ldbu	r3,0(r3)
 a00b248:	1885883a 	add	r2,r3,r2
 a00b24c:	00c00804 	movi	r3,32
 a00b250:	1887c83a 	sub	r3,r3,r2
 a00b254:	18000526 	beq	r3,zero,a00b26c <__udivdi3+0x94>
 a00b258:	80e0983a 	sll	r16,r16,r3
 a00b25c:	9884d83a 	srl	r2,r19,r2
 a00b260:	30e2983a 	sll	r17,r6,r3
 a00b264:	98e4983a 	sll	r18,r19,r3
 a00b268:	142cb03a 	or	r22,r2,r16
 a00b26c:	882ad43a 	srli	r21,r17,16
 a00b270:	b009883a 	mov	r4,r22
 a00b274:	8d3fffcc 	andi	r20,r17,65535
 a00b278:	a80b883a 	mov	r5,r21
 a00b27c:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b280:	b009883a 	mov	r4,r22
 a00b284:	a80b883a 	mov	r5,r21
 a00b288:	1027883a 	mov	r19,r2
 a00b28c:	a00be900 	call	a00be90 <__udivsi3>
 a00b290:	100b883a 	mov	r5,r2
 a00b294:	a009883a 	mov	r4,r20
 a00b298:	102d883a 	mov	r22,r2
 a00b29c:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b2a0:	9826943a 	slli	r19,r19,16
 a00b2a4:	9006d43a 	srli	r3,r18,16
 a00b2a8:	1cc6b03a 	or	r3,r3,r19
 a00b2ac:	1880052e 	bgeu	r3,r2,a00b2c4 <__udivdi3+0xec>
 a00b2b0:	1c47883a 	add	r3,r3,r17
 a00b2b4:	b13fffc4 	addi	r4,r22,-1
 a00b2b8:	1c400136 	bltu	r3,r17,a00b2c0 <__udivdi3+0xe8>
 a00b2bc:	18814236 	bltu	r3,r2,a00b7c8 <__udivdi3+0x5f0>
 a00b2c0:	202d883a 	mov	r22,r4
 a00b2c4:	18a1c83a 	sub	r16,r3,r2
 a00b2c8:	8009883a 	mov	r4,r16
 a00b2cc:	a80b883a 	mov	r5,r21
 a00b2d0:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b2d4:	1027883a 	mov	r19,r2
 a00b2d8:	8009883a 	mov	r4,r16
 a00b2dc:	a80b883a 	mov	r5,r21
 a00b2e0:	9826943a 	slli	r19,r19,16
 a00b2e4:	a00be900 	call	a00be90 <__udivsi3>
 a00b2e8:	100b883a 	mov	r5,r2
 a00b2ec:	a009883a 	mov	r4,r20
 a00b2f0:	94bfffcc 	andi	r18,r18,65535
 a00b2f4:	1021883a 	mov	r16,r2
 a00b2f8:	94e4b03a 	or	r18,r18,r19
 a00b2fc:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b300:	9080052e 	bgeu	r18,r2,a00b318 <__udivdi3+0x140>
 a00b304:	8ca5883a 	add	r18,r17,r18
 a00b308:	80ffffc4 	addi	r3,r16,-1
 a00b30c:	94410c36 	bltu	r18,r17,a00b740 <__udivdi3+0x568>
 a00b310:	90810b2e 	bgeu	r18,r2,a00b740 <__udivdi3+0x568>
 a00b314:	843fff84 	addi	r16,r16,-2
 a00b318:	b004943a 	slli	r2,r22,16
 a00b31c:	0007883a 	mov	r3,zero
 a00b320:	1404b03a 	or	r2,r2,r16
 a00b324:	00005e06 	br	a00b4a0 <__udivdi3+0x2c8>
 a00b328:	29c05b36 	bltu	r5,r7,a00b498 <__udivdi3+0x2c0>
 a00b32c:	00bfffd4 	movui	r2,65535
 a00b330:	11c0672e 	bgeu	r2,r7,a00b4d0 <__udivdi3+0x2f8>
 a00b334:	00804034 	movhi	r2,256
 a00b338:	10bfffc4 	addi	r2,r2,-1
 a00b33c:	11c10a36 	bltu	r2,r7,a00b768 <__udivdi3+0x590>
 a00b340:	00800404 	movi	r2,16
 a00b344:	3886d83a 	srl	r3,r7,r2
 a00b348:	01028074 	movhi	r4,2561
 a00b34c:	2106ba04 	addi	r4,r4,6888
 a00b350:	20c7883a 	add	r3,r4,r3
 a00b354:	18c00003 	ldbu	r3,0(r3)
 a00b358:	05c00804 	movi	r23,32
 a00b35c:	1885883a 	add	r2,r3,r2
 a00b360:	b8afc83a 	sub	r23,r23,r2
 a00b364:	b800671e 	bne	r23,zero,a00b504 <__udivdi3+0x32c>
 a00b368:	3c010536 	bltu	r7,r16,a00b780 <__udivdi3+0x5a8>
 a00b36c:	9985403a 	cmpgeu	r2,r19,r6
 a00b370:	0007883a 	mov	r3,zero
 a00b374:	00004a06 	br	a00b4a0 <__udivdi3+0x2c8>
 a00b378:	3000041e 	bne	r6,zero,a00b38c <__udivdi3+0x1b4>
 a00b37c:	000b883a 	mov	r5,zero
 a00b380:	01000044 	movi	r4,1
 a00b384:	a00be900 	call	a00be90 <__udivsi3>
 a00b388:	1023883a 	mov	r17,r2
 a00b38c:	00bfffd4 	movui	r2,65535
 a00b390:	1440532e 	bgeu	r2,r17,a00b4e0 <__udivdi3+0x308>
 a00b394:	00804034 	movhi	r2,256
 a00b398:	10bfffc4 	addi	r2,r2,-1
 a00b39c:	1440f436 	bltu	r2,r17,a00b770 <__udivdi3+0x598>
 a00b3a0:	00800404 	movi	r2,16
 a00b3a4:	8886d83a 	srl	r3,r17,r2
 a00b3a8:	01028074 	movhi	r4,2561
 a00b3ac:	2106ba04 	addi	r4,r4,6888
 a00b3b0:	20c7883a 	add	r3,r4,r3
 a00b3b4:	18c00003 	ldbu	r3,0(r3)
 a00b3b8:	1885883a 	add	r2,r3,r2
 a00b3bc:	00c00804 	movi	r3,32
 a00b3c0:	1887c83a 	sub	r3,r3,r2
 a00b3c4:	1800a51e 	bne	r3,zero,a00b65c <__udivdi3+0x484>
 a00b3c8:	882ad43a 	srli	r21,r17,16
 a00b3cc:	8461c83a 	sub	r16,r16,r17
 a00b3d0:	8d3fffcc 	andi	r20,r17,65535
 a00b3d4:	00c00044 	movi	r3,1
 a00b3d8:	a80b883a 	mov	r5,r21
 a00b3dc:	8009883a 	mov	r4,r16
 a00b3e0:	d8c00115 	stw	r3,4(sp)
 a00b3e4:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b3e8:	a80b883a 	mov	r5,r21
 a00b3ec:	8009883a 	mov	r4,r16
 a00b3f0:	1027883a 	mov	r19,r2
 a00b3f4:	a00be900 	call	a00be90 <__udivsi3>
 a00b3f8:	a00b883a 	mov	r5,r20
 a00b3fc:	1009883a 	mov	r4,r2
 a00b400:	102d883a 	mov	r22,r2
 a00b404:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b408:	9826943a 	slli	r19,r19,16
 a00b40c:	900ed43a 	srli	r7,r18,16
 a00b410:	d8c00117 	ldw	r3,4(sp)
 a00b414:	3cceb03a 	or	r7,r7,r19
 a00b418:	3880052e 	bgeu	r7,r2,a00b430 <__udivdi3+0x258>
 a00b41c:	3c4f883a 	add	r7,r7,r17
 a00b420:	b13fffc4 	addi	r4,r22,-1
 a00b424:	3c400136 	bltu	r7,r17,a00b42c <__udivdi3+0x254>
 a00b428:	3880e436 	bltu	r7,r2,a00b7bc <__udivdi3+0x5e4>
 a00b42c:	202d883a 	mov	r22,r4
 a00b430:	38a1c83a 	sub	r16,r7,r2
 a00b434:	8009883a 	mov	r4,r16
 a00b438:	a80b883a 	mov	r5,r21
 a00b43c:	d8c00115 	stw	r3,4(sp)
 a00b440:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b444:	1027883a 	mov	r19,r2
 a00b448:	8009883a 	mov	r4,r16
 a00b44c:	a80b883a 	mov	r5,r21
 a00b450:	9826943a 	slli	r19,r19,16
 a00b454:	a00be900 	call	a00be90 <__udivsi3>
 a00b458:	a00b883a 	mov	r5,r20
 a00b45c:	1009883a 	mov	r4,r2
 a00b460:	94bfffcc 	andi	r18,r18,65535
 a00b464:	1021883a 	mov	r16,r2
 a00b468:	94e4b03a 	or	r18,r18,r19
 a00b46c:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b470:	d8c00117 	ldw	r3,4(sp)
 a00b474:	9080052e 	bgeu	r18,r2,a00b48c <__udivdi3+0x2b4>
 a00b478:	8ca5883a 	add	r18,r17,r18
 a00b47c:	813fffc4 	addi	r4,r16,-1
 a00b480:	9440ad36 	bltu	r18,r17,a00b738 <__udivdi3+0x560>
 a00b484:	9080ac2e 	bgeu	r18,r2,a00b738 <__udivdi3+0x560>
 a00b488:	843fff84 	addi	r16,r16,-2
 a00b48c:	b004943a 	slli	r2,r22,16
 a00b490:	1404b03a 	or	r2,r2,r16
 a00b494:	00000206 	br	a00b4a0 <__udivdi3+0x2c8>
 a00b498:	0007883a 	mov	r3,zero
 a00b49c:	0005883a 	mov	r2,zero
 a00b4a0:	dfc00b17 	ldw	ra,44(sp)
 a00b4a4:	df000a17 	ldw	fp,40(sp)
 a00b4a8:	ddc00917 	ldw	r23,36(sp)
 a00b4ac:	dd800817 	ldw	r22,32(sp)
 a00b4b0:	dd400717 	ldw	r21,28(sp)
 a00b4b4:	dd000617 	ldw	r20,24(sp)
 a00b4b8:	dcc00517 	ldw	r19,20(sp)
 a00b4bc:	dc800417 	ldw	r18,16(sp)
 a00b4c0:	dc400317 	ldw	r17,12(sp)
 a00b4c4:	dc000217 	ldw	r16,8(sp)
 a00b4c8:	dec00c04 	addi	sp,sp,48
 a00b4cc:	f800283a 	ret
 a00b4d0:	00803fc4 	movi	r2,255
 a00b4d4:	11c5803a 	cmpltu	r2,r2,r7
 a00b4d8:	100490fa 	slli	r2,r2,3
 a00b4dc:	003f9906 	br	a00b344 <__alt_mem_flash+0xfe00a344>
 a00b4e0:	00803fc4 	movi	r2,255
 a00b4e4:	1445803a 	cmpltu	r2,r2,r17
 a00b4e8:	100490fa 	slli	r2,r2,3
 a00b4ec:	003fad06 	br	a00b3a4 <__alt_mem_flash+0xfe00a3a4>
 a00b4f0:	00804034 	movhi	r2,256
 a00b4f4:	10bfffc4 	addi	r2,r2,-1
 a00b4f8:	11809f36 	bltu	r2,r6,a00b778 <__udivdi3+0x5a0>
 a00b4fc:	00800404 	movi	r2,16
 a00b500:	003f4c06 	br	a00b234 <__alt_mem_flash+0xfe00a234>
 a00b504:	3dce983a 	sll	r7,r7,r23
 a00b508:	30b8d83a 	srl	fp,r6,r2
 a00b50c:	80a2d83a 	srl	r17,r16,r2
 a00b510:	35cc983a 	sll	r6,r6,r23
 a00b514:	3f38b03a 	or	fp,r7,fp
 a00b518:	e024d43a 	srli	r18,fp,16
 a00b51c:	9884d83a 	srl	r2,r19,r2
 a00b520:	85e0983a 	sll	r16,r16,r23
 a00b524:	8809883a 	mov	r4,r17
 a00b528:	900b883a 	mov	r5,r18
 a00b52c:	d9800015 	stw	r6,0(sp)
 a00b530:	1420b03a 	or	r16,r2,r16
 a00b534:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b538:	900b883a 	mov	r5,r18
 a00b53c:	8809883a 	mov	r4,r17
 a00b540:	1029883a 	mov	r20,r2
 a00b544:	e5bfffcc 	andi	r22,fp,65535
 a00b548:	a00be900 	call	a00be90 <__udivsi3>
 a00b54c:	100b883a 	mov	r5,r2
 a00b550:	b009883a 	mov	r4,r22
 a00b554:	102b883a 	mov	r21,r2
 a00b558:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b55c:	a028943a 	slli	r20,r20,16
 a00b560:	8006d43a 	srli	r3,r16,16
 a00b564:	1d06b03a 	or	r3,r3,r20
 a00b568:	1880042e 	bgeu	r3,r2,a00b57c <__udivdi3+0x3a4>
 a00b56c:	1f07883a 	add	r3,r3,fp
 a00b570:	a93fffc4 	addi	r4,r21,-1
 a00b574:	1f00892e 	bgeu	r3,fp,a00b79c <__udivdi3+0x5c4>
 a00b578:	202b883a 	mov	r21,r4
 a00b57c:	18a3c83a 	sub	r17,r3,r2
 a00b580:	8809883a 	mov	r4,r17
 a00b584:	900b883a 	mov	r5,r18
 a00b588:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b58c:	1029883a 	mov	r20,r2
 a00b590:	8809883a 	mov	r4,r17
 a00b594:	900b883a 	mov	r5,r18
 a00b598:	a028943a 	slli	r20,r20,16
 a00b59c:	a00be900 	call	a00be90 <__udivsi3>
 a00b5a0:	100b883a 	mov	r5,r2
 a00b5a4:	b009883a 	mov	r4,r22
 a00b5a8:	843fffcc 	andi	r16,r16,65535
 a00b5ac:	1023883a 	mov	r17,r2
 a00b5b0:	8520b03a 	or	r16,r16,r20
 a00b5b4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b5b8:	8080042e 	bgeu	r16,r2,a00b5cc <__udivdi3+0x3f4>
 a00b5bc:	8721883a 	add	r16,r16,fp
 a00b5c0:	88ffffc4 	addi	r3,r17,-1
 a00b5c4:	8700712e 	bgeu	r16,fp,a00b78c <__udivdi3+0x5b4>
 a00b5c8:	1823883a 	mov	r17,r3
 a00b5cc:	a80e943a 	slli	r7,r21,16
 a00b5d0:	d8c00017 	ldw	r3,0(sp)
 a00b5d4:	80a1c83a 	sub	r16,r16,r2
 a00b5d8:	3c64b03a 	or	r18,r7,r17
 a00b5dc:	1d3fffcc 	andi	r20,r3,65535
 a00b5e0:	9022d43a 	srli	r17,r18,16
 a00b5e4:	95bfffcc 	andi	r22,r18,65535
 a00b5e8:	a00b883a 	mov	r5,r20
 a00b5ec:	b009883a 	mov	r4,r22
 a00b5f0:	182ad43a 	srli	r21,r3,16
 a00b5f4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b5f8:	a00b883a 	mov	r5,r20
 a00b5fc:	8809883a 	mov	r4,r17
 a00b600:	1039883a 	mov	fp,r2
 a00b604:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b608:	8809883a 	mov	r4,r17
 a00b60c:	a80b883a 	mov	r5,r21
 a00b610:	1029883a 	mov	r20,r2
 a00b614:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b618:	a80b883a 	mov	r5,r21
 a00b61c:	b009883a 	mov	r4,r22
 a00b620:	1023883a 	mov	r17,r2
 a00b624:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b628:	e006d43a 	srli	r3,fp,16
 a00b62c:	1505883a 	add	r2,r2,r20
 a00b630:	1887883a 	add	r3,r3,r2
 a00b634:	1d00022e 	bgeu	r3,r20,a00b640 <__udivdi3+0x468>
 a00b638:	00800074 	movhi	r2,1
 a00b63c:	88a3883a 	add	r17,r17,r2
 a00b640:	1804d43a 	srli	r2,r3,16
 a00b644:	1463883a 	add	r17,r2,r17
 a00b648:	84404436 	bltu	r16,r17,a00b75c <__udivdi3+0x584>
 a00b64c:	84403e26 	beq	r16,r17,a00b748 <__udivdi3+0x570>
 a00b650:	9005883a 	mov	r2,r18
 a00b654:	0007883a 	mov	r3,zero
 a00b658:	003f9106 	br	a00b4a0 <__alt_mem_flash+0xfe00a4a0>
 a00b65c:	88e2983a 	sll	r17,r17,r3
 a00b660:	80aed83a 	srl	r23,r16,r2
 a00b664:	80e0983a 	sll	r16,r16,r3
 a00b668:	882ad43a 	srli	r21,r17,16
 a00b66c:	9884d83a 	srl	r2,r19,r2
 a00b670:	b809883a 	mov	r4,r23
 a00b674:	a80b883a 	mov	r5,r21
 a00b678:	98e4983a 	sll	r18,r19,r3
 a00b67c:	142cb03a 	or	r22,r2,r16
 a00b680:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b684:	b809883a 	mov	r4,r23
 a00b688:	a80b883a 	mov	r5,r21
 a00b68c:	1027883a 	mov	r19,r2
 a00b690:	8d3fffcc 	andi	r20,r17,65535
 a00b694:	a00be900 	call	a00be90 <__udivsi3>
 a00b698:	a009883a 	mov	r4,r20
 a00b69c:	100b883a 	mov	r5,r2
 a00b6a0:	102f883a 	mov	r23,r2
 a00b6a4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b6a8:	9826943a 	slli	r19,r19,16
 a00b6ac:	b008d43a 	srli	r4,r22,16
 a00b6b0:	24c8b03a 	or	r4,r4,r19
 a00b6b4:	2080062e 	bgeu	r4,r2,a00b6d0 <__udivdi3+0x4f8>
 a00b6b8:	2449883a 	add	r4,r4,r17
 a00b6bc:	b8ffffc4 	addi	r3,r23,-1
 a00b6c0:	24403c36 	bltu	r4,r17,a00b7b4 <__udivdi3+0x5dc>
 a00b6c4:	20803b2e 	bgeu	r4,r2,a00b7b4 <__udivdi3+0x5dc>
 a00b6c8:	bdffff84 	addi	r23,r23,-2
 a00b6cc:	2449883a 	add	r4,r4,r17
 a00b6d0:	20a1c83a 	sub	r16,r4,r2
 a00b6d4:	a80b883a 	mov	r5,r21
 a00b6d8:	8009883a 	mov	r4,r16
 a00b6dc:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b6e0:	a80b883a 	mov	r5,r21
 a00b6e4:	8009883a 	mov	r4,r16
 a00b6e8:	1027883a 	mov	r19,r2
 a00b6ec:	a00be900 	call	a00be90 <__udivsi3>
 a00b6f0:	a009883a 	mov	r4,r20
 a00b6f4:	100b883a 	mov	r5,r2
 a00b6f8:	9826943a 	slli	r19,r19,16
 a00b6fc:	1039883a 	mov	fp,r2
 a00b700:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b704:	b13fffcc 	andi	r4,r22,65535
 a00b708:	24c8b03a 	or	r4,r4,r19
 a00b70c:	2080062e 	bgeu	r4,r2,a00b728 <__udivdi3+0x550>
 a00b710:	2449883a 	add	r4,r4,r17
 a00b714:	e0ffffc4 	addi	r3,fp,-1
 a00b718:	24402436 	bltu	r4,r17,a00b7ac <__udivdi3+0x5d4>
 a00b71c:	2080232e 	bgeu	r4,r2,a00b7ac <__udivdi3+0x5d4>
 a00b720:	e73fff84 	addi	fp,fp,-2
 a00b724:	2449883a 	add	r4,r4,r17
 a00b728:	b82e943a 	slli	r23,r23,16
 a00b72c:	20a1c83a 	sub	r16,r4,r2
 a00b730:	bf06b03a 	or	r3,r23,fp
 a00b734:	003f2806 	br	a00b3d8 <__alt_mem_flash+0xfe00a3d8>
 a00b738:	2021883a 	mov	r16,r4
 a00b73c:	003f5306 	br	a00b48c <__alt_mem_flash+0xfe00a48c>
 a00b740:	1821883a 	mov	r16,r3
 a00b744:	003ef406 	br	a00b318 <__alt_mem_flash+0xfe00a318>
 a00b748:	1806943a 	slli	r3,r3,16
 a00b74c:	9de6983a 	sll	r19,r19,r23
 a00b750:	e73fffcc 	andi	fp,fp,65535
 a00b754:	1f07883a 	add	r3,r3,fp
 a00b758:	98ffbd2e 	bgeu	r19,r3,a00b650 <__alt_mem_flash+0xfe00a650>
 a00b75c:	90bfffc4 	addi	r2,r18,-1
 a00b760:	0007883a 	mov	r3,zero
 a00b764:	003f4e06 	br	a00b4a0 <__alt_mem_flash+0xfe00a4a0>
 a00b768:	00800604 	movi	r2,24
 a00b76c:	003ef506 	br	a00b344 <__alt_mem_flash+0xfe00a344>
 a00b770:	00800604 	movi	r2,24
 a00b774:	003f0b06 	br	a00b3a4 <__alt_mem_flash+0xfe00a3a4>
 a00b778:	00800604 	movi	r2,24
 a00b77c:	003ead06 	br	a00b234 <__alt_mem_flash+0xfe00a234>
 a00b780:	0007883a 	mov	r3,zero
 a00b784:	00800044 	movi	r2,1
 a00b788:	003f4506 	br	a00b4a0 <__alt_mem_flash+0xfe00a4a0>
 a00b78c:	80bf8e2e 	bgeu	r16,r2,a00b5c8 <__alt_mem_flash+0xfe00a5c8>
 a00b790:	8c7fff84 	addi	r17,r17,-2
 a00b794:	8721883a 	add	r16,r16,fp
 a00b798:	003f8c06 	br	a00b5cc <__alt_mem_flash+0xfe00a5cc>
 a00b79c:	18bf762e 	bgeu	r3,r2,a00b578 <__alt_mem_flash+0xfe00a578>
 a00b7a0:	ad7fff84 	addi	r21,r21,-2
 a00b7a4:	1f07883a 	add	r3,r3,fp
 a00b7a8:	003f7406 	br	a00b57c <__alt_mem_flash+0xfe00a57c>
 a00b7ac:	1839883a 	mov	fp,r3
 a00b7b0:	003fdd06 	br	a00b728 <__alt_mem_flash+0xfe00a728>
 a00b7b4:	182f883a 	mov	r23,r3
 a00b7b8:	003fc506 	br	a00b6d0 <__alt_mem_flash+0xfe00a6d0>
 a00b7bc:	b5bfff84 	addi	r22,r22,-2
 a00b7c0:	3c4f883a 	add	r7,r7,r17
 a00b7c4:	003f1a06 	br	a00b430 <__alt_mem_flash+0xfe00a430>
 a00b7c8:	b5bfff84 	addi	r22,r22,-2
 a00b7cc:	1c47883a 	add	r3,r3,r17
 a00b7d0:	003ebc06 	br	a00b2c4 <__alt_mem_flash+0xfe00a2c4>

0a00b7d4 <__umoddi3>:
 a00b7d4:	defff304 	addi	sp,sp,-52
 a00b7d8:	df000b15 	stw	fp,44(sp)
 a00b7dc:	dc400415 	stw	r17,16(sp)
 a00b7e0:	dc000315 	stw	r16,12(sp)
 a00b7e4:	dfc00c15 	stw	ra,48(sp)
 a00b7e8:	ddc00a15 	stw	r23,40(sp)
 a00b7ec:	dd800915 	stw	r22,36(sp)
 a00b7f0:	dd400815 	stw	r21,32(sp)
 a00b7f4:	dd000715 	stw	r20,28(sp)
 a00b7f8:	dcc00615 	stw	r19,24(sp)
 a00b7fc:	dc800515 	stw	r18,20(sp)
 a00b800:	2021883a 	mov	r16,r4
 a00b804:	2823883a 	mov	r17,r5
 a00b808:	2839883a 	mov	fp,r5
 a00b80c:	3800401e 	bne	r7,zero,a00b910 <__umoddi3+0x13c>
 a00b810:	3027883a 	mov	r19,r6
 a00b814:	2029883a 	mov	r20,r4
 a00b818:	2980552e 	bgeu	r5,r6,a00b970 <__umoddi3+0x19c>
 a00b81c:	00bfffd4 	movui	r2,65535
 a00b820:	1180a236 	bltu	r2,r6,a00baac <__umoddi3+0x2d8>
 a00b824:	01003fc4 	movi	r4,255
 a00b828:	2189803a 	cmpltu	r4,r4,r6
 a00b82c:	200890fa 	slli	r4,r4,3
 a00b830:	3104d83a 	srl	r2,r6,r4
 a00b834:	00c28074 	movhi	r3,2561
 a00b838:	18c6ba04 	addi	r3,r3,6888
 a00b83c:	1885883a 	add	r2,r3,r2
 a00b840:	10c00003 	ldbu	r3,0(r2)
 a00b844:	00800804 	movi	r2,32
 a00b848:	1909883a 	add	r4,r3,r4
 a00b84c:	1125c83a 	sub	r18,r2,r4
 a00b850:	90000526 	beq	r18,zero,a00b868 <__umoddi3+0x94>
 a00b854:	8ca2983a 	sll	r17,r17,r18
 a00b858:	8108d83a 	srl	r4,r16,r4
 a00b85c:	34a6983a 	sll	r19,r6,r18
 a00b860:	84a8983a 	sll	r20,r16,r18
 a00b864:	2478b03a 	or	fp,r4,r17
 a00b868:	982cd43a 	srli	r22,r19,16
 a00b86c:	e009883a 	mov	r4,fp
 a00b870:	9dffffcc 	andi	r23,r19,65535
 a00b874:	b00b883a 	mov	r5,r22
 a00b878:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b87c:	b00b883a 	mov	r5,r22
 a00b880:	e009883a 	mov	r4,fp
 a00b884:	102b883a 	mov	r21,r2
 a00b888:	a00be900 	call	a00be90 <__udivsi3>
 a00b88c:	100b883a 	mov	r5,r2
 a00b890:	b809883a 	mov	r4,r23
 a00b894:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b898:	a82a943a 	slli	r21,r21,16
 a00b89c:	a006d43a 	srli	r3,r20,16
 a00b8a0:	1d46b03a 	or	r3,r3,r21
 a00b8a4:	1880032e 	bgeu	r3,r2,a00b8b4 <__umoddi3+0xe0>
 a00b8a8:	1cc7883a 	add	r3,r3,r19
 a00b8ac:	1cc00136 	bltu	r3,r19,a00b8b4 <__umoddi3+0xe0>
 a00b8b0:	18813136 	bltu	r3,r2,a00bd78 <__umoddi3+0x5a4>
 a00b8b4:	18a1c83a 	sub	r16,r3,r2
 a00b8b8:	b00b883a 	mov	r5,r22
 a00b8bc:	8009883a 	mov	r4,r16
 a00b8c0:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b8c4:	b00b883a 	mov	r5,r22
 a00b8c8:	8009883a 	mov	r4,r16
 a00b8cc:	1023883a 	mov	r17,r2
 a00b8d0:	a00be900 	call	a00be90 <__udivsi3>
 a00b8d4:	100b883a 	mov	r5,r2
 a00b8d8:	b809883a 	mov	r4,r23
 a00b8dc:	8822943a 	slli	r17,r17,16
 a00b8e0:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b8e4:	a0ffffcc 	andi	r3,r20,65535
 a00b8e8:	1c46b03a 	or	r3,r3,r17
 a00b8ec:	1880042e 	bgeu	r3,r2,a00b900 <__umoddi3+0x12c>
 a00b8f0:	1cc7883a 	add	r3,r3,r19
 a00b8f4:	1cc00236 	bltu	r3,r19,a00b900 <__umoddi3+0x12c>
 a00b8f8:	1880012e 	bgeu	r3,r2,a00b900 <__umoddi3+0x12c>
 a00b8fc:	1cc7883a 	add	r3,r3,r19
 a00b900:	1885c83a 	sub	r2,r3,r2
 a00b904:	1484d83a 	srl	r2,r2,r18
 a00b908:	0007883a 	mov	r3,zero
 a00b90c:	00005306 	br	a00ba5c <__umoddi3+0x288>
 a00b910:	29c05036 	bltu	r5,r7,a00ba54 <__umoddi3+0x280>
 a00b914:	00bfffd4 	movui	r2,65535
 a00b918:	11c05c2e 	bgeu	r2,r7,a00ba8c <__umoddi3+0x2b8>
 a00b91c:	00804034 	movhi	r2,256
 a00b920:	10bfffc4 	addi	r2,r2,-1
 a00b924:	11c10636 	bltu	r2,r7,a00bd40 <__umoddi3+0x56c>
 a00b928:	01000404 	movi	r4,16
 a00b92c:	3904d83a 	srl	r2,r7,r4
 a00b930:	00c28074 	movhi	r3,2561
 a00b934:	18c6ba04 	addi	r3,r3,6888
 a00b938:	1885883a 	add	r2,r3,r2
 a00b93c:	14c00003 	ldbu	r19,0(r2)
 a00b940:	00c00804 	movi	r3,32
 a00b944:	9927883a 	add	r19,r19,r4
 a00b948:	1ce9c83a 	sub	r20,r3,r19
 a00b94c:	a0005c1e 	bne	r20,zero,a00bac0 <__umoddi3+0x2ec>
 a00b950:	3c400136 	bltu	r7,r17,a00b958 <__umoddi3+0x184>
 a00b954:	81810a36 	bltu	r16,r6,a00bd80 <__umoddi3+0x5ac>
 a00b958:	8185c83a 	sub	r2,r16,r6
 a00b95c:	89e3c83a 	sub	r17,r17,r7
 a00b960:	8089803a 	cmpltu	r4,r16,r2
 a00b964:	8939c83a 	sub	fp,r17,r4
 a00b968:	e007883a 	mov	r3,fp
 a00b96c:	00003b06 	br	a00ba5c <__umoddi3+0x288>
 a00b970:	3000041e 	bne	r6,zero,a00b984 <__umoddi3+0x1b0>
 a00b974:	000b883a 	mov	r5,zero
 a00b978:	01000044 	movi	r4,1
 a00b97c:	a00be900 	call	a00be90 <__udivsi3>
 a00b980:	1027883a 	mov	r19,r2
 a00b984:	00bfffd4 	movui	r2,65535
 a00b988:	14c0442e 	bgeu	r2,r19,a00ba9c <__umoddi3+0x2c8>
 a00b98c:	00804034 	movhi	r2,256
 a00b990:	10bfffc4 	addi	r2,r2,-1
 a00b994:	14c0ec36 	bltu	r2,r19,a00bd48 <__umoddi3+0x574>
 a00b998:	00800404 	movi	r2,16
 a00b99c:	9886d83a 	srl	r3,r19,r2
 a00b9a0:	01028074 	movhi	r4,2561
 a00b9a4:	2106ba04 	addi	r4,r4,6888
 a00b9a8:	20c7883a 	add	r3,r4,r3
 a00b9ac:	18c00003 	ldbu	r3,0(r3)
 a00b9b0:	1887883a 	add	r3,r3,r2
 a00b9b4:	00800804 	movi	r2,32
 a00b9b8:	10e5c83a 	sub	r18,r2,r3
 a00b9bc:	9000ab1e 	bne	r18,zero,a00bc6c <__umoddi3+0x498>
 a00b9c0:	982cd43a 	srli	r22,r19,16
 a00b9c4:	8ce3c83a 	sub	r17,r17,r19
 a00b9c8:	9dffffcc 	andi	r23,r19,65535
 a00b9cc:	b00b883a 	mov	r5,r22
 a00b9d0:	8809883a 	mov	r4,r17
 a00b9d4:	a00bef40 	call	a00bef4 <__umodsi3>
 a00b9d8:	b00b883a 	mov	r5,r22
 a00b9dc:	8809883a 	mov	r4,r17
 a00b9e0:	102b883a 	mov	r21,r2
 a00b9e4:	a00be900 	call	a00be90 <__udivsi3>
 a00b9e8:	b80b883a 	mov	r5,r23
 a00b9ec:	1009883a 	mov	r4,r2
 a00b9f0:	a0019a40 	call	a0019a4 <__mulsi3>
 a00b9f4:	a82a943a 	slli	r21,r21,16
 a00b9f8:	a006d43a 	srli	r3,r20,16
 a00b9fc:	1d46b03a 	or	r3,r3,r21
 a00ba00:	1880042e 	bgeu	r3,r2,a00ba14 <__umoddi3+0x240>
 a00ba04:	1cc7883a 	add	r3,r3,r19
 a00ba08:	1cc00236 	bltu	r3,r19,a00ba14 <__umoddi3+0x240>
 a00ba0c:	1880012e 	bgeu	r3,r2,a00ba14 <__umoddi3+0x240>
 a00ba10:	1cc7883a 	add	r3,r3,r19
 a00ba14:	18a1c83a 	sub	r16,r3,r2
 a00ba18:	b00b883a 	mov	r5,r22
 a00ba1c:	8009883a 	mov	r4,r16
 a00ba20:	a00bef40 	call	a00bef4 <__umodsi3>
 a00ba24:	1023883a 	mov	r17,r2
 a00ba28:	b00b883a 	mov	r5,r22
 a00ba2c:	8009883a 	mov	r4,r16
 a00ba30:	a00be900 	call	a00be90 <__udivsi3>
 a00ba34:	8822943a 	slli	r17,r17,16
 a00ba38:	b80b883a 	mov	r5,r23
 a00ba3c:	1009883a 	mov	r4,r2
 a00ba40:	a0019a40 	call	a0019a4 <__mulsi3>
 a00ba44:	a53fffcc 	andi	r20,r20,65535
 a00ba48:	a446b03a 	or	r3,r20,r17
 a00ba4c:	18bfac2e 	bgeu	r3,r2,a00b900 <__alt_mem_flash+0xfe00a900>
 a00ba50:	003fa706 	br	a00b8f0 <__alt_mem_flash+0xfe00a8f0>
 a00ba54:	2005883a 	mov	r2,r4
 a00ba58:	2807883a 	mov	r3,r5
 a00ba5c:	dfc00c17 	ldw	ra,48(sp)
 a00ba60:	df000b17 	ldw	fp,44(sp)
 a00ba64:	ddc00a17 	ldw	r23,40(sp)
 a00ba68:	dd800917 	ldw	r22,36(sp)
 a00ba6c:	dd400817 	ldw	r21,32(sp)
 a00ba70:	dd000717 	ldw	r20,28(sp)
 a00ba74:	dcc00617 	ldw	r19,24(sp)
 a00ba78:	dc800517 	ldw	r18,20(sp)
 a00ba7c:	dc400417 	ldw	r17,16(sp)
 a00ba80:	dc000317 	ldw	r16,12(sp)
 a00ba84:	dec00d04 	addi	sp,sp,52
 a00ba88:	f800283a 	ret
 a00ba8c:	04c03fc4 	movi	r19,255
 a00ba90:	99c9803a 	cmpltu	r4,r19,r7
 a00ba94:	200890fa 	slli	r4,r4,3
 a00ba98:	003fa406 	br	a00b92c <__alt_mem_flash+0xfe00a92c>
 a00ba9c:	00803fc4 	movi	r2,255
 a00baa0:	14c5803a 	cmpltu	r2,r2,r19
 a00baa4:	100490fa 	slli	r2,r2,3
 a00baa8:	003fbc06 	br	a00b99c <__alt_mem_flash+0xfe00a99c>
 a00baac:	00804034 	movhi	r2,256
 a00bab0:	10bfffc4 	addi	r2,r2,-1
 a00bab4:	1180a636 	bltu	r2,r6,a00bd50 <__umoddi3+0x57c>
 a00bab8:	01000404 	movi	r4,16
 a00babc:	003f5c06 	br	a00b830 <__alt_mem_flash+0xfe00a830>
 a00bac0:	3d0e983a 	sll	r7,r7,r20
 a00bac4:	34ead83a 	srl	r21,r6,r19
 a00bac8:	8cc6d83a 	srl	r3,r17,r19
 a00bacc:	8d10983a 	sll	r8,r17,r20
 a00bad0:	3d6ab03a 	or	r21,r7,r21
 a00bad4:	a82cd43a 	srli	r22,r21,16
 a00bad8:	84e2d83a 	srl	r17,r16,r19
 a00badc:	1809883a 	mov	r4,r3
 a00bae0:	b00b883a 	mov	r5,r22
 a00bae4:	8a22b03a 	or	r17,r17,r8
 a00bae8:	3524983a 	sll	r18,r6,r20
 a00baec:	dc400015 	stw	r17,0(sp)
 a00baf0:	d8c00115 	stw	r3,4(sp)
 a00baf4:	a00bef40 	call	a00bef4 <__umodsi3>
 a00baf8:	d8c00117 	ldw	r3,4(sp)
 a00bafc:	b00b883a 	mov	r5,r22
 a00bb00:	1039883a 	mov	fp,r2
 a00bb04:	1809883a 	mov	r4,r3
 a00bb08:	a00be900 	call	a00be90 <__udivsi3>
 a00bb0c:	adffffcc 	andi	r23,r21,65535
 a00bb10:	100b883a 	mov	r5,r2
 a00bb14:	b809883a 	mov	r4,r23
 a00bb18:	1023883a 	mov	r17,r2
 a00bb1c:	a0019a40 	call	a0019a4 <__mulsi3>
 a00bb20:	d9400017 	ldw	r5,0(sp)
 a00bb24:	e008943a 	slli	r4,fp,16
 a00bb28:	8520983a 	sll	r16,r16,r20
 a00bb2c:	2806d43a 	srli	r3,r5,16
 a00bb30:	1906b03a 	or	r3,r3,r4
 a00bb34:	1880042e 	bgeu	r3,r2,a00bb48 <__umoddi3+0x374>
 a00bb38:	1d47883a 	add	r3,r3,r21
 a00bb3c:	893fffc4 	addi	r4,r17,-1
 a00bb40:	1d40892e 	bgeu	r3,r21,a00bd68 <__umoddi3+0x594>
 a00bb44:	2023883a 	mov	r17,r4
 a00bb48:	18b9c83a 	sub	fp,r3,r2
 a00bb4c:	b00b883a 	mov	r5,r22
 a00bb50:	e009883a 	mov	r4,fp
 a00bb54:	a00bef40 	call	a00bef4 <__umodsi3>
 a00bb58:	b00b883a 	mov	r5,r22
 a00bb5c:	e009883a 	mov	r4,fp
 a00bb60:	d8800215 	stw	r2,8(sp)
 a00bb64:	a00be900 	call	a00be90 <__udivsi3>
 a00bb68:	100b883a 	mov	r5,r2
 a00bb6c:	b809883a 	mov	r4,r23
 a00bb70:	102d883a 	mov	r22,r2
 a00bb74:	a0019a40 	call	a0019a4 <__mulsi3>
 a00bb78:	d9800217 	ldw	r6,8(sp)
 a00bb7c:	d8c00017 	ldw	r3,0(sp)
 a00bb80:	300c943a 	slli	r6,r6,16
 a00bb84:	1a3fffcc 	andi	r8,r3,65535
 a00bb88:	4190b03a 	or	r8,r8,r6
 a00bb8c:	4080042e 	bgeu	r8,r2,a00bba0 <__umoddi3+0x3cc>
 a00bb90:	4551883a 	add	r8,r8,r21
 a00bb94:	b0ffffc4 	addi	r3,r22,-1
 a00bb98:	45406f2e 	bgeu	r8,r21,a00bd58 <__umoddi3+0x584>
 a00bb9c:	182d883a 	mov	r22,r3
 a00bba0:	880e943a 	slli	r7,r17,16
 a00bba4:	9006d43a 	srli	r3,r18,16
 a00bba8:	91bfffcc 	andi	r6,r18,65535
 a00bbac:	3dacb03a 	or	r22,r7,r22
 a00bbb0:	b02ed43a 	srli	r23,r22,16
 a00bbb4:	b5bfffcc 	andi	r22,r22,65535
 a00bbb8:	300b883a 	mov	r5,r6
 a00bbbc:	b009883a 	mov	r4,r22
 a00bbc0:	40a3c83a 	sub	r17,r8,r2
 a00bbc4:	d8c00115 	stw	r3,4(sp)
 a00bbc8:	d9800215 	stw	r6,8(sp)
 a00bbcc:	a0019a40 	call	a0019a4 <__mulsi3>
 a00bbd0:	d9800217 	ldw	r6,8(sp)
 a00bbd4:	b809883a 	mov	r4,r23
 a00bbd8:	1039883a 	mov	fp,r2
 a00bbdc:	300b883a 	mov	r5,r6
 a00bbe0:	a0019a40 	call	a0019a4 <__mulsi3>
 a00bbe4:	d8c00117 	ldw	r3,4(sp)
 a00bbe8:	b809883a 	mov	r4,r23
 a00bbec:	d8800215 	stw	r2,8(sp)
 a00bbf0:	180b883a 	mov	r5,r3
 a00bbf4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00bbf8:	d8c00117 	ldw	r3,4(sp)
 a00bbfc:	b009883a 	mov	r4,r22
 a00bc00:	102f883a 	mov	r23,r2
 a00bc04:	180b883a 	mov	r5,r3
 a00bc08:	a0019a40 	call	a0019a4 <__mulsi3>
 a00bc0c:	d9800217 	ldw	r6,8(sp)
 a00bc10:	e006d43a 	srli	r3,fp,16
 a00bc14:	1185883a 	add	r2,r2,r6
 a00bc18:	1885883a 	add	r2,r3,r2
 a00bc1c:	1180022e 	bgeu	r2,r6,a00bc28 <__umoddi3+0x454>
 a00bc20:	00c00074 	movhi	r3,1
 a00bc24:	b8ef883a 	add	r23,r23,r3
 a00bc28:	1006d43a 	srli	r3,r2,16
 a00bc2c:	1004943a 	slli	r2,r2,16
 a00bc30:	e73fffcc 	andi	fp,fp,65535
 a00bc34:	1dc7883a 	add	r3,r3,r23
 a00bc38:	1739883a 	add	fp,r2,fp
 a00bc3c:	88c03a36 	bltu	r17,r3,a00bd28 <__umoddi3+0x554>
 a00bc40:	88c05126 	beq	r17,r3,a00bd88 <__umoddi3+0x5b4>
 a00bc44:	88c9c83a 	sub	r4,r17,r3
 a00bc48:	e00f883a 	mov	r7,fp
 a00bc4c:	81cfc83a 	sub	r7,r16,r7
 a00bc50:	81c7803a 	cmpltu	r3,r16,r7
 a00bc54:	20c7c83a 	sub	r3,r4,r3
 a00bc58:	1cc4983a 	sll	r2,r3,r19
 a00bc5c:	3d0ed83a 	srl	r7,r7,r20
 a00bc60:	1d06d83a 	srl	r3,r3,r20
 a00bc64:	11c4b03a 	or	r2,r2,r7
 a00bc68:	003f7c06 	br	a00ba5c <__alt_mem_flash+0xfe00aa5c>
 a00bc6c:	9ca6983a 	sll	r19,r19,r18
 a00bc70:	88f8d83a 	srl	fp,r17,r3
 a00bc74:	80c4d83a 	srl	r2,r16,r3
 a00bc78:	982cd43a 	srli	r22,r19,16
 a00bc7c:	8ca2983a 	sll	r17,r17,r18
 a00bc80:	e009883a 	mov	r4,fp
 a00bc84:	b00b883a 	mov	r5,r22
 a00bc88:	146ab03a 	or	r21,r2,r17
 a00bc8c:	a00bef40 	call	a00bef4 <__umodsi3>
 a00bc90:	b00b883a 	mov	r5,r22
 a00bc94:	e009883a 	mov	r4,fp
 a00bc98:	1029883a 	mov	r20,r2
 a00bc9c:	9dffffcc 	andi	r23,r19,65535
 a00bca0:	a00be900 	call	a00be90 <__udivsi3>
 a00bca4:	b809883a 	mov	r4,r23
 a00bca8:	100b883a 	mov	r5,r2
 a00bcac:	a0019a40 	call	a0019a4 <__mulsi3>
 a00bcb0:	a008943a 	slli	r4,r20,16
 a00bcb4:	a806d43a 	srli	r3,r21,16
 a00bcb8:	84a8983a 	sll	r20,r16,r18
 a00bcbc:	1906b03a 	or	r3,r3,r4
 a00bcc0:	1880042e 	bgeu	r3,r2,a00bcd4 <__umoddi3+0x500>
 a00bcc4:	1cc7883a 	add	r3,r3,r19
 a00bcc8:	1cc00236 	bltu	r3,r19,a00bcd4 <__umoddi3+0x500>
 a00bccc:	1880012e 	bgeu	r3,r2,a00bcd4 <__umoddi3+0x500>
 a00bcd0:	1cc7883a 	add	r3,r3,r19
 a00bcd4:	18a3c83a 	sub	r17,r3,r2
 a00bcd8:	b00b883a 	mov	r5,r22
 a00bcdc:	8809883a 	mov	r4,r17
 a00bce0:	a00bef40 	call	a00bef4 <__umodsi3>
 a00bce4:	b00b883a 	mov	r5,r22
 a00bce8:	8809883a 	mov	r4,r17
 a00bcec:	1021883a 	mov	r16,r2
 a00bcf0:	a00be900 	call	a00be90 <__udivsi3>
 a00bcf4:	100b883a 	mov	r5,r2
 a00bcf8:	b809883a 	mov	r4,r23
 a00bcfc:	8020943a 	slli	r16,r16,16
 a00bd00:	a0019a40 	call	a0019a4 <__mulsi3>
 a00bd04:	a8ffffcc 	andi	r3,r21,65535
 a00bd08:	1c06b03a 	or	r3,r3,r16
 a00bd0c:	1880042e 	bgeu	r3,r2,a00bd20 <__umoddi3+0x54c>
 a00bd10:	1cc7883a 	add	r3,r3,r19
 a00bd14:	1cc00236 	bltu	r3,r19,a00bd20 <__umoddi3+0x54c>
 a00bd18:	1880012e 	bgeu	r3,r2,a00bd20 <__umoddi3+0x54c>
 a00bd1c:	1cc7883a 	add	r3,r3,r19
 a00bd20:	18a3c83a 	sub	r17,r3,r2
 a00bd24:	003f2906 	br	a00b9cc <__alt_mem_flash+0xfe00a9cc>
 a00bd28:	e48fc83a 	sub	r7,fp,r18
 a00bd2c:	1d49c83a 	sub	r4,r3,r21
 a00bd30:	e1f9803a 	cmpltu	fp,fp,r7
 a00bd34:	2739c83a 	sub	fp,r4,fp
 a00bd38:	8f09c83a 	sub	r4,r17,fp
 a00bd3c:	003fc306 	br	a00bc4c <__alt_mem_flash+0xfe00ac4c>
 a00bd40:	01000604 	movi	r4,24
 a00bd44:	003ef906 	br	a00b92c <__alt_mem_flash+0xfe00a92c>
 a00bd48:	00800604 	movi	r2,24
 a00bd4c:	003f1306 	br	a00b99c <__alt_mem_flash+0xfe00a99c>
 a00bd50:	01000604 	movi	r4,24
 a00bd54:	003eb606 	br	a00b830 <__alt_mem_flash+0xfe00a830>
 a00bd58:	40bf902e 	bgeu	r8,r2,a00bb9c <__alt_mem_flash+0xfe00ab9c>
 a00bd5c:	b5bfff84 	addi	r22,r22,-2
 a00bd60:	4551883a 	add	r8,r8,r21
 a00bd64:	003f8e06 	br	a00bba0 <__alt_mem_flash+0xfe00aba0>
 a00bd68:	18bf762e 	bgeu	r3,r2,a00bb44 <__alt_mem_flash+0xfe00ab44>
 a00bd6c:	8c7fff84 	addi	r17,r17,-2
 a00bd70:	1d47883a 	add	r3,r3,r21
 a00bd74:	003f7406 	br	a00bb48 <__alt_mem_flash+0xfe00ab48>
 a00bd78:	1cc7883a 	add	r3,r3,r19
 a00bd7c:	003ecd06 	br	a00b8b4 <__alt_mem_flash+0xfe00a8b4>
 a00bd80:	8005883a 	mov	r2,r16
 a00bd84:	003ef806 	br	a00b968 <__alt_mem_flash+0xfe00a968>
 a00bd88:	873fe736 	bltu	r16,fp,a00bd28 <__alt_mem_flash+0xfe00ad28>
 a00bd8c:	e00f883a 	mov	r7,fp
 a00bd90:	0009883a 	mov	r4,zero
 a00bd94:	003fad06 	br	a00bc4c <__alt_mem_flash+0xfe00ac4c>

0a00bd98 <__divsi3>:
 a00bd98:	20001b16 	blt	r4,zero,a00be08 <__divsi3+0x70>
 a00bd9c:	000f883a 	mov	r7,zero
 a00bda0:	28001616 	blt	r5,zero,a00bdfc <__divsi3+0x64>
 a00bda4:	200d883a 	mov	r6,r4
 a00bda8:	29001a2e 	bgeu	r5,r4,a00be14 <__divsi3+0x7c>
 a00bdac:	00800804 	movi	r2,32
 a00bdb0:	00c00044 	movi	r3,1
 a00bdb4:	00000106 	br	a00bdbc <__divsi3+0x24>
 a00bdb8:	10000d26 	beq	r2,zero,a00bdf0 <__divsi3+0x58>
 a00bdbc:	294b883a 	add	r5,r5,r5
 a00bdc0:	10bfffc4 	addi	r2,r2,-1
 a00bdc4:	18c7883a 	add	r3,r3,r3
 a00bdc8:	293ffb36 	bltu	r5,r4,a00bdb8 <__alt_mem_flash+0xfe00adb8>
 a00bdcc:	0005883a 	mov	r2,zero
 a00bdd0:	18000726 	beq	r3,zero,a00bdf0 <__divsi3+0x58>
 a00bdd4:	0005883a 	mov	r2,zero
 a00bdd8:	31400236 	bltu	r6,r5,a00bde4 <__divsi3+0x4c>
 a00bddc:	314dc83a 	sub	r6,r6,r5
 a00bde0:	10c4b03a 	or	r2,r2,r3
 a00bde4:	1806d07a 	srli	r3,r3,1
 a00bde8:	280ad07a 	srli	r5,r5,1
 a00bdec:	183ffa1e 	bne	r3,zero,a00bdd8 <__alt_mem_flash+0xfe00add8>
 a00bdf0:	38000126 	beq	r7,zero,a00bdf8 <__divsi3+0x60>
 a00bdf4:	0085c83a 	sub	r2,zero,r2
 a00bdf8:	f800283a 	ret
 a00bdfc:	014bc83a 	sub	r5,zero,r5
 a00be00:	39c0005c 	xori	r7,r7,1
 a00be04:	003fe706 	br	a00bda4 <__alt_mem_flash+0xfe00ada4>
 a00be08:	0109c83a 	sub	r4,zero,r4
 a00be0c:	01c00044 	movi	r7,1
 a00be10:	003fe306 	br	a00bda0 <__alt_mem_flash+0xfe00ada0>
 a00be14:	00c00044 	movi	r3,1
 a00be18:	003fee06 	br	a00bdd4 <__alt_mem_flash+0xfe00add4>

0a00be1c <__modsi3>:
 a00be1c:	20001716 	blt	r4,zero,a00be7c <__modsi3+0x60>
 a00be20:	000f883a 	mov	r7,zero
 a00be24:	2005883a 	mov	r2,r4
 a00be28:	28001216 	blt	r5,zero,a00be74 <__modsi3+0x58>
 a00be2c:	2900162e 	bgeu	r5,r4,a00be88 <__modsi3+0x6c>
 a00be30:	01800804 	movi	r6,32
 a00be34:	00c00044 	movi	r3,1
 a00be38:	00000106 	br	a00be40 <__modsi3+0x24>
 a00be3c:	30000a26 	beq	r6,zero,a00be68 <__modsi3+0x4c>
 a00be40:	294b883a 	add	r5,r5,r5
 a00be44:	31bfffc4 	addi	r6,r6,-1
 a00be48:	18c7883a 	add	r3,r3,r3
 a00be4c:	293ffb36 	bltu	r5,r4,a00be3c <__alt_mem_flash+0xfe00ae3c>
 a00be50:	18000526 	beq	r3,zero,a00be68 <__modsi3+0x4c>
 a00be54:	1806d07a 	srli	r3,r3,1
 a00be58:	11400136 	bltu	r2,r5,a00be60 <__modsi3+0x44>
 a00be5c:	1145c83a 	sub	r2,r2,r5
 a00be60:	280ad07a 	srli	r5,r5,1
 a00be64:	183ffb1e 	bne	r3,zero,a00be54 <__alt_mem_flash+0xfe00ae54>
 a00be68:	38000126 	beq	r7,zero,a00be70 <__modsi3+0x54>
 a00be6c:	0085c83a 	sub	r2,zero,r2
 a00be70:	f800283a 	ret
 a00be74:	014bc83a 	sub	r5,zero,r5
 a00be78:	003fec06 	br	a00be2c <__alt_mem_flash+0xfe00ae2c>
 a00be7c:	0109c83a 	sub	r4,zero,r4
 a00be80:	01c00044 	movi	r7,1
 a00be84:	003fe706 	br	a00be24 <__alt_mem_flash+0xfe00ae24>
 a00be88:	00c00044 	movi	r3,1
 a00be8c:	003ff106 	br	a00be54 <__alt_mem_flash+0xfe00ae54>

0a00be90 <__udivsi3>:
 a00be90:	200d883a 	mov	r6,r4
 a00be94:	2900152e 	bgeu	r5,r4,a00beec <__udivsi3+0x5c>
 a00be98:	28001416 	blt	r5,zero,a00beec <__udivsi3+0x5c>
 a00be9c:	00800804 	movi	r2,32
 a00bea0:	00c00044 	movi	r3,1
 a00bea4:	00000206 	br	a00beb0 <__udivsi3+0x20>
 a00bea8:	10000e26 	beq	r2,zero,a00bee4 <__udivsi3+0x54>
 a00beac:	28000516 	blt	r5,zero,a00bec4 <__udivsi3+0x34>
 a00beb0:	294b883a 	add	r5,r5,r5
 a00beb4:	10bfffc4 	addi	r2,r2,-1
 a00beb8:	18c7883a 	add	r3,r3,r3
 a00bebc:	293ffa36 	bltu	r5,r4,a00bea8 <__alt_mem_flash+0xfe00aea8>
 a00bec0:	18000826 	beq	r3,zero,a00bee4 <__udivsi3+0x54>
 a00bec4:	0005883a 	mov	r2,zero
 a00bec8:	31400236 	bltu	r6,r5,a00bed4 <__udivsi3+0x44>
 a00becc:	314dc83a 	sub	r6,r6,r5
 a00bed0:	10c4b03a 	or	r2,r2,r3
 a00bed4:	1806d07a 	srli	r3,r3,1
 a00bed8:	280ad07a 	srli	r5,r5,1
 a00bedc:	183ffa1e 	bne	r3,zero,a00bec8 <__alt_mem_flash+0xfe00aec8>
 a00bee0:	f800283a 	ret
 a00bee4:	0005883a 	mov	r2,zero
 a00bee8:	f800283a 	ret
 a00beec:	00c00044 	movi	r3,1
 a00bef0:	003ff406 	br	a00bec4 <__alt_mem_flash+0xfe00aec4>

0a00bef4 <__umodsi3>:
 a00bef4:	2005883a 	mov	r2,r4
 a00bef8:	2900122e 	bgeu	r5,r4,a00bf44 <__umodsi3+0x50>
 a00befc:	28001116 	blt	r5,zero,a00bf44 <__umodsi3+0x50>
 a00bf00:	01800804 	movi	r6,32
 a00bf04:	00c00044 	movi	r3,1
 a00bf08:	00000206 	br	a00bf14 <__umodsi3+0x20>
 a00bf0c:	30000c26 	beq	r6,zero,a00bf40 <__umodsi3+0x4c>
 a00bf10:	28000516 	blt	r5,zero,a00bf28 <__umodsi3+0x34>
 a00bf14:	294b883a 	add	r5,r5,r5
 a00bf18:	31bfffc4 	addi	r6,r6,-1
 a00bf1c:	18c7883a 	add	r3,r3,r3
 a00bf20:	293ffa36 	bltu	r5,r4,a00bf0c <__alt_mem_flash+0xfe00af0c>
 a00bf24:	18000626 	beq	r3,zero,a00bf40 <__umodsi3+0x4c>
 a00bf28:	1806d07a 	srli	r3,r3,1
 a00bf2c:	11400136 	bltu	r2,r5,a00bf34 <__umodsi3+0x40>
 a00bf30:	1145c83a 	sub	r2,r2,r5
 a00bf34:	280ad07a 	srli	r5,r5,1
 a00bf38:	183ffb1e 	bne	r3,zero,a00bf28 <__alt_mem_flash+0xfe00af28>
 a00bf3c:	f800283a 	ret
 a00bf40:	f800283a 	ret
 a00bf44:	00c00044 	movi	r3,1
 a00bf48:	003ff706 	br	a00bf28 <__alt_mem_flash+0xfe00af28>

0a00bf4c <__divdf3>:
 a00bf4c:	defff004 	addi	sp,sp,-64
 a00bf50:	dc800815 	stw	r18,32(sp)
 a00bf54:	2824d53a 	srli	r18,r5,20
 a00bf58:	dd800c15 	stw	r22,48(sp)
 a00bf5c:	282cd7fa 	srli	r22,r5,31
 a00bf60:	dc000615 	stw	r16,24(sp)
 a00bf64:	04000434 	movhi	r16,16
 a00bf68:	843fffc4 	addi	r16,r16,-1
 a00bf6c:	dfc00f15 	stw	ra,60(sp)
 a00bf70:	df000e15 	stw	fp,56(sp)
 a00bf74:	ddc00d15 	stw	r23,52(sp)
 a00bf78:	dd400b15 	stw	r21,44(sp)
 a00bf7c:	dd000a15 	stw	r20,40(sp)
 a00bf80:	dcc00915 	stw	r19,36(sp)
 a00bf84:	dc400715 	stw	r17,28(sp)
 a00bf88:	9481ffcc 	andi	r18,r18,2047
 a00bf8c:	2c20703a 	and	r16,r5,r16
 a00bf90:	b2003fcc 	andi	r8,r22,255
 a00bf94:	90006126 	beq	r18,zero,a00c11c <__divdf3+0x1d0>
 a00bf98:	0081ffc4 	movi	r2,2047
 a00bf9c:	202b883a 	mov	r21,r4
 a00bfa0:	90803726 	beq	r18,r2,a00c080 <__divdf3+0x134>
 a00bfa4:	80800434 	orhi	r2,r16,16
 a00bfa8:	100490fa 	slli	r2,r2,3
 a00bfac:	2020d77a 	srli	r16,r4,29
 a00bfb0:	202a90fa 	slli	r21,r4,3
 a00bfb4:	94bf0044 	addi	r18,r18,-1023
 a00bfb8:	80a0b03a 	or	r16,r16,r2
 a00bfbc:	0013883a 	mov	r9,zero
 a00bfc0:	000b883a 	mov	r5,zero
 a00bfc4:	3806d53a 	srli	r3,r7,20
 a00bfc8:	382ed7fa 	srli	r23,r7,31
 a00bfcc:	04400434 	movhi	r17,16
 a00bfd0:	8c7fffc4 	addi	r17,r17,-1
 a00bfd4:	18c1ffcc 	andi	r3,r3,2047
 a00bfd8:	3029883a 	mov	r20,r6
 a00bfdc:	3c62703a 	and	r17,r7,r17
 a00bfe0:	bf003fcc 	andi	fp,r23,255
 a00bfe4:	18006e26 	beq	r3,zero,a00c1a0 <__divdf3+0x254>
 a00bfe8:	0081ffc4 	movi	r2,2047
 a00bfec:	18806626 	beq	r3,r2,a00c188 <__divdf3+0x23c>
 a00bff0:	88800434 	orhi	r2,r17,16
 a00bff4:	100490fa 	slli	r2,r2,3
 a00bff8:	3022d77a 	srli	r17,r6,29
 a00bffc:	302890fa 	slli	r20,r6,3
 a00c000:	18ff0044 	addi	r3,r3,-1023
 a00c004:	88a2b03a 	or	r17,r17,r2
 a00c008:	000f883a 	mov	r7,zero
 a00c00c:	b5e6f03a 	xor	r19,r22,r23
 a00c010:	3a4cb03a 	or	r6,r7,r9
 a00c014:	008003c4 	movi	r2,15
 a00c018:	9809883a 	mov	r4,r19
 a00c01c:	90c7c83a 	sub	r3,r18,r3
 a00c020:	9cc03fcc 	andi	r19,r19,255
 a00c024:	11809636 	bltu	r2,r6,a00c280 <__divdf3+0x334>
 a00c028:	300c90ba 	slli	r6,r6,2
 a00c02c:	00828074 	movhi	r2,2561
 a00c030:	10b01004 	addi	r2,r2,-16320
 a00c034:	308d883a 	add	r6,r6,r2
 a00c038:	30800017 	ldw	r2,0(r6)
 a00c03c:	1000683a 	jmp	r2
 a00c040:	0a00c280 	call	a00c28 <__alt_mem_onchip-0x35ff3d8>
 a00c044:	0a00c0b8 	rdprs	r8,at,770
 a00c048:	0a00c270 	cmpltui	r8,at,777
 a00c04c:	0a00c0ac 	andhi	r8,at,770
 a00c050:	0a00c270 	cmpltui	r8,at,777
 a00c054:	0a00c244 	addi	r8,at,777
 a00c058:	0a00c270 	cmpltui	r8,at,777
 a00c05c:	0a00c0ac 	andhi	r8,at,770
 a00c060:	0a00c0b8 	rdprs	r8,at,770
 a00c064:	0a00c0b8 	rdprs	r8,at,770
 a00c068:	0a00c244 	addi	r8,at,777
 a00c06c:	0a00c0ac 	andhi	r8,at,770
 a00c070:	0a00c09c 	xori	r8,at,770
 a00c074:	0a00c09c 	xori	r8,at,770
 a00c078:	0a00c09c 	xori	r8,at,770
 a00c07c:	0a00c608 	cmpgei	r8,at,792
 a00c080:	2404b03a 	or	r2,r4,r16
 a00c084:	10006c1e 	bne	r2,zero,a00c238 <__divdf3+0x2ec>
 a00c088:	02400204 	movi	r9,8
 a00c08c:	0021883a 	mov	r16,zero
 a00c090:	002b883a 	mov	r21,zero
 a00c094:	01400084 	movi	r5,2
 a00c098:	003fca06 	br	a00bfc4 <__alt_mem_flash+0xfe00afc4>
 a00c09c:	8023883a 	mov	r17,r16
 a00c0a0:	a829883a 	mov	r20,r21
 a00c0a4:	4039883a 	mov	fp,r8
 a00c0a8:	280f883a 	mov	r7,r5
 a00c0ac:	00800084 	movi	r2,2
 a00c0b0:	3881601e 	bne	r7,r2,a00c634 <__divdf3+0x6e8>
 a00c0b4:	e027883a 	mov	r19,fp
 a00c0b8:	9900004c 	andi	r4,r19,1
 a00c0bc:	0081ffc4 	movi	r2,2047
 a00c0c0:	0021883a 	mov	r16,zero
 a00c0c4:	002b883a 	mov	r21,zero
 a00c0c8:	1004953a 	slli	r2,r2,20
 a00c0cc:	20c03fcc 	andi	r3,r4,255
 a00c0d0:	01400434 	movhi	r5,16
 a00c0d4:	297fffc4 	addi	r5,r5,-1
 a00c0d8:	180697fa 	slli	r3,r3,31
 a00c0dc:	8160703a 	and	r16,r16,r5
 a00c0e0:	80a0b03a 	or	r16,r16,r2
 a00c0e4:	80c6b03a 	or	r3,r16,r3
 a00c0e8:	a805883a 	mov	r2,r21
 a00c0ec:	dfc00f17 	ldw	ra,60(sp)
 a00c0f0:	df000e17 	ldw	fp,56(sp)
 a00c0f4:	ddc00d17 	ldw	r23,52(sp)
 a00c0f8:	dd800c17 	ldw	r22,48(sp)
 a00c0fc:	dd400b17 	ldw	r21,44(sp)
 a00c100:	dd000a17 	ldw	r20,40(sp)
 a00c104:	dcc00917 	ldw	r19,36(sp)
 a00c108:	dc800817 	ldw	r18,32(sp)
 a00c10c:	dc400717 	ldw	r17,28(sp)
 a00c110:	dc000617 	ldw	r16,24(sp)
 a00c114:	dec01004 	addi	sp,sp,64
 a00c118:	f800283a 	ret
 a00c11c:	2404b03a 	or	r2,r4,r16
 a00c120:	2023883a 	mov	r17,r4
 a00c124:	10003f26 	beq	r2,zero,a00c224 <__divdf3+0x2d8>
 a00c128:	80015e26 	beq	r16,zero,a00c6a4 <__divdf3+0x758>
 a00c12c:	8009883a 	mov	r4,r16
 a00c130:	d9800215 	stw	r6,8(sp)
 a00c134:	d9c00515 	stw	r7,20(sp)
 a00c138:	da000415 	stw	r8,16(sp)
 a00c13c:	a0019400 	call	a001940 <__clzsi2>
 a00c140:	d9800217 	ldw	r6,8(sp)
 a00c144:	d9c00517 	ldw	r7,20(sp)
 a00c148:	da000417 	ldw	r8,16(sp)
 a00c14c:	113ffd44 	addi	r4,r2,-11
 a00c150:	00c00704 	movi	r3,28
 a00c154:	19014f16 	blt	r3,r4,a00c694 <__divdf3+0x748>
 a00c158:	00c00744 	movi	r3,29
 a00c15c:	157ffe04 	addi	r21,r2,-8
 a00c160:	1907c83a 	sub	r3,r3,r4
 a00c164:	8560983a 	sll	r16,r16,r21
 a00c168:	88c6d83a 	srl	r3,r17,r3
 a00c16c:	8d6a983a 	sll	r21,r17,r21
 a00c170:	1c20b03a 	or	r16,r3,r16
 a00c174:	1080fcc4 	addi	r2,r2,1011
 a00c178:	00a5c83a 	sub	r18,zero,r2
 a00c17c:	0013883a 	mov	r9,zero
 a00c180:	000b883a 	mov	r5,zero
 a00c184:	003f8f06 	br	a00bfc4 <__alt_mem_flash+0xfe00afc4>
 a00c188:	3444b03a 	or	r2,r6,r17
 a00c18c:	1000231e 	bne	r2,zero,a00c21c <__divdf3+0x2d0>
 a00c190:	0023883a 	mov	r17,zero
 a00c194:	0029883a 	mov	r20,zero
 a00c198:	01c00084 	movi	r7,2
 a00c19c:	003f9b06 	br	a00c00c <__alt_mem_flash+0xfe00b00c>
 a00c1a0:	3444b03a 	or	r2,r6,r17
 a00c1a4:	10001926 	beq	r2,zero,a00c20c <__divdf3+0x2c0>
 a00c1a8:	88014b26 	beq	r17,zero,a00c6d8 <__divdf3+0x78c>
 a00c1ac:	8809883a 	mov	r4,r17
 a00c1b0:	d9400115 	stw	r5,4(sp)
 a00c1b4:	d9800215 	stw	r6,8(sp)
 a00c1b8:	da000415 	stw	r8,16(sp)
 a00c1bc:	da400315 	stw	r9,12(sp)
 a00c1c0:	a0019400 	call	a001940 <__clzsi2>
 a00c1c4:	d9400117 	ldw	r5,4(sp)
 a00c1c8:	d9800217 	ldw	r6,8(sp)
 a00c1cc:	da000417 	ldw	r8,16(sp)
 a00c1d0:	da400317 	ldw	r9,12(sp)
 a00c1d4:	113ffd44 	addi	r4,r2,-11
 a00c1d8:	00c00704 	movi	r3,28
 a00c1dc:	19013a16 	blt	r3,r4,a00c6c8 <__divdf3+0x77c>
 a00c1e0:	00c00744 	movi	r3,29
 a00c1e4:	153ffe04 	addi	r20,r2,-8
 a00c1e8:	1907c83a 	sub	r3,r3,r4
 a00c1ec:	8d22983a 	sll	r17,r17,r20
 a00c1f0:	30c6d83a 	srl	r3,r6,r3
 a00c1f4:	3528983a 	sll	r20,r6,r20
 a00c1f8:	1c62b03a 	or	r17,r3,r17
 a00c1fc:	1080fcc4 	addi	r2,r2,1011
 a00c200:	0087c83a 	sub	r3,zero,r2
 a00c204:	000f883a 	mov	r7,zero
 a00c208:	003f8006 	br	a00c00c <__alt_mem_flash+0xfe00b00c>
 a00c20c:	0023883a 	mov	r17,zero
 a00c210:	0029883a 	mov	r20,zero
 a00c214:	01c00044 	movi	r7,1
 a00c218:	003f7c06 	br	a00c00c <__alt_mem_flash+0xfe00b00c>
 a00c21c:	01c000c4 	movi	r7,3
 a00c220:	003f7a06 	br	a00c00c <__alt_mem_flash+0xfe00b00c>
 a00c224:	02400104 	movi	r9,4
 a00c228:	0021883a 	mov	r16,zero
 a00c22c:	002b883a 	mov	r21,zero
 a00c230:	01400044 	movi	r5,1
 a00c234:	003f6306 	br	a00bfc4 <__alt_mem_flash+0xfe00afc4>
 a00c238:	02400304 	movi	r9,12
 a00c23c:	014000c4 	movi	r5,3
 a00c240:	003f6006 	br	a00bfc4 <__alt_mem_flash+0xfe00afc4>
 a00c244:	04000434 	movhi	r16,16
 a00c248:	0009883a 	mov	r4,zero
 a00c24c:	843fffc4 	addi	r16,r16,-1
 a00c250:	057fffc4 	movi	r21,-1
 a00c254:	0081ffc4 	movi	r2,2047
 a00c258:	003f9b06 	br	a00c0c8 <__alt_mem_flash+0xfe00b0c8>
 a00c25c:	00c00044 	movi	r3,1
 a00c260:	1887c83a 	sub	r3,r3,r2
 a00c264:	01000e04 	movi	r4,56
 a00c268:	20c1530e 	bge	r4,r3,a00c7b8 <__divdf3+0x86c>
 a00c26c:	9900004c 	andi	r4,r19,1
 a00c270:	0005883a 	mov	r2,zero
 a00c274:	0021883a 	mov	r16,zero
 a00c278:	002b883a 	mov	r21,zero
 a00c27c:	003f9206 	br	a00c0c8 <__alt_mem_flash+0xfe00b0c8>
 a00c280:	8c012e36 	bltu	r17,r16,a00c73c <__divdf3+0x7f0>
 a00c284:	84412c26 	beq	r16,r17,a00c738 <__divdf3+0x7ec>
 a00c288:	a82f883a 	mov	r23,r21
 a00c28c:	18ffffc4 	addi	r3,r3,-1
 a00c290:	002b883a 	mov	r21,zero
 a00c294:	a004d63a 	srli	r2,r20,24
 a00c298:	8822923a 	slli	r17,r17,8
 a00c29c:	a028923a 	slli	r20,r20,8
 a00c2a0:	8009883a 	mov	r4,r16
 a00c2a4:	88acb03a 	or	r22,r17,r2
 a00c2a8:	dd000015 	stw	r20,0(sp)
 a00c2ac:	b028d43a 	srli	r20,r22,16
 a00c2b0:	d8c00215 	stw	r3,8(sp)
 a00c2b4:	b4bfffcc 	andi	r18,r22,65535
 a00c2b8:	a00b883a 	mov	r5,r20
 a00c2bc:	a00be900 	call	a00be90 <__udivsi3>
 a00c2c0:	100b883a 	mov	r5,r2
 a00c2c4:	9009883a 	mov	r4,r18
 a00c2c8:	1023883a 	mov	r17,r2
 a00c2cc:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c2d0:	8009883a 	mov	r4,r16
 a00c2d4:	a00b883a 	mov	r5,r20
 a00c2d8:	1039883a 	mov	fp,r2
 a00c2dc:	a00bef40 	call	a00bef4 <__umodsi3>
 a00c2e0:	1004943a 	slli	r2,r2,16
 a00c2e4:	b808d43a 	srli	r4,r23,16
 a00c2e8:	d8c00217 	ldw	r3,8(sp)
 a00c2ec:	2084b03a 	or	r2,r4,r2
 a00c2f0:	1700062e 	bgeu	r2,fp,a00c30c <__divdf3+0x3c0>
 a00c2f4:	1585883a 	add	r2,r2,r22
 a00c2f8:	893fffc4 	addi	r4,r17,-1
 a00c2fc:	15811d36 	bltu	r2,r22,a00c774 <__divdf3+0x828>
 a00c300:	17011c2e 	bgeu	r2,fp,a00c774 <__divdf3+0x828>
 a00c304:	8c7fff84 	addi	r17,r17,-2
 a00c308:	1585883a 	add	r2,r2,r22
 a00c30c:	1739c83a 	sub	fp,r2,fp
 a00c310:	a00b883a 	mov	r5,r20
 a00c314:	e009883a 	mov	r4,fp
 a00c318:	d8c00215 	stw	r3,8(sp)
 a00c31c:	a00be900 	call	a00be90 <__udivsi3>
 a00c320:	100b883a 	mov	r5,r2
 a00c324:	9009883a 	mov	r4,r18
 a00c328:	1021883a 	mov	r16,r2
 a00c32c:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c330:	a00b883a 	mov	r5,r20
 a00c334:	e009883a 	mov	r4,fp
 a00c338:	d8800415 	stw	r2,16(sp)
 a00c33c:	a00bef40 	call	a00bef4 <__umodsi3>
 a00c340:	1004943a 	slli	r2,r2,16
 a00c344:	da000417 	ldw	r8,16(sp)
 a00c348:	bdffffcc 	andi	r23,r23,65535
 a00c34c:	b884b03a 	or	r2,r23,r2
 a00c350:	d8c00217 	ldw	r3,8(sp)
 a00c354:	1200062e 	bgeu	r2,r8,a00c370 <__divdf3+0x424>
 a00c358:	1585883a 	add	r2,r2,r22
 a00c35c:	813fffc4 	addi	r4,r16,-1
 a00c360:	15810236 	bltu	r2,r22,a00c76c <__divdf3+0x820>
 a00c364:	1201012e 	bgeu	r2,r8,a00c76c <__divdf3+0x820>
 a00c368:	843fff84 	addi	r16,r16,-2
 a00c36c:	1585883a 	add	r2,r2,r22
 a00c370:	8822943a 	slli	r17,r17,16
 a00c374:	d9800017 	ldw	r6,0(sp)
 a00c378:	1211c83a 	sub	r8,r2,r8
 a00c37c:	8c22b03a 	or	r17,r17,r16
 a00c380:	373fffcc 	andi	fp,r6,65535
 a00c384:	8abfffcc 	andi	r10,r17,65535
 a00c388:	8820d43a 	srli	r16,r17,16
 a00c38c:	5009883a 	mov	r4,r10
 a00c390:	e00b883a 	mov	r5,fp
 a00c394:	302ed43a 	srli	r23,r6,16
 a00c398:	d8c00215 	stw	r3,8(sp)
 a00c39c:	da000415 	stw	r8,16(sp)
 a00c3a0:	da800115 	stw	r10,4(sp)
 a00c3a4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c3a8:	800b883a 	mov	r5,r16
 a00c3ac:	e009883a 	mov	r4,fp
 a00c3b0:	d8800515 	stw	r2,20(sp)
 a00c3b4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c3b8:	8009883a 	mov	r4,r16
 a00c3bc:	b80b883a 	mov	r5,r23
 a00c3c0:	d8800315 	stw	r2,12(sp)
 a00c3c4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c3c8:	da800117 	ldw	r10,4(sp)
 a00c3cc:	b80b883a 	mov	r5,r23
 a00c3d0:	1021883a 	mov	r16,r2
 a00c3d4:	5009883a 	mov	r4,r10
 a00c3d8:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c3dc:	d9c00517 	ldw	r7,20(sp)
 a00c3e0:	da400317 	ldw	r9,12(sp)
 a00c3e4:	d8c00217 	ldw	r3,8(sp)
 a00c3e8:	3808d43a 	srli	r4,r7,16
 a00c3ec:	1245883a 	add	r2,r2,r9
 a00c3f0:	da000417 	ldw	r8,16(sp)
 a00c3f4:	2085883a 	add	r2,r4,r2
 a00c3f8:	1240022e 	bgeu	r2,r9,a00c404 <__divdf3+0x4b8>
 a00c3fc:	01000074 	movhi	r4,1
 a00c400:	8121883a 	add	r16,r16,r4
 a00c404:	1008d43a 	srli	r4,r2,16
 a00c408:	1004943a 	slli	r2,r2,16
 a00c40c:	39ffffcc 	andi	r7,r7,65535
 a00c410:	2409883a 	add	r4,r4,r16
 a00c414:	11c5883a 	add	r2,r2,r7
 a00c418:	4100bb36 	bltu	r8,r4,a00c708 <__divdf3+0x7bc>
 a00c41c:	4100d726 	beq	r8,r4,a00c77c <__divdf3+0x830>
 a00c420:	4109c83a 	sub	r4,r8,r4
 a00c424:	a8a1c83a 	sub	r16,r21,r2
 a00c428:	ac2b803a 	cmpltu	r21,r21,r16
 a00c42c:	256bc83a 	sub	r21,r4,r21
 a00c430:	b540d926 	beq	r22,r21,a00c798 <__divdf3+0x84c>
 a00c434:	a00b883a 	mov	r5,r20
 a00c438:	a809883a 	mov	r4,r21
 a00c43c:	d8c00215 	stw	r3,8(sp)
 a00c440:	a00be900 	call	a00be90 <__udivsi3>
 a00c444:	100b883a 	mov	r5,r2
 a00c448:	9009883a 	mov	r4,r18
 a00c44c:	d8800515 	stw	r2,20(sp)
 a00c450:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c454:	a809883a 	mov	r4,r21
 a00c458:	a00b883a 	mov	r5,r20
 a00c45c:	d8800415 	stw	r2,16(sp)
 a00c460:	a00bef40 	call	a00bef4 <__umodsi3>
 a00c464:	1004943a 	slli	r2,r2,16
 a00c468:	8008d43a 	srli	r4,r16,16
 a00c46c:	da000417 	ldw	r8,16(sp)
 a00c470:	d8c00217 	ldw	r3,8(sp)
 a00c474:	2084b03a 	or	r2,r4,r2
 a00c478:	d9c00517 	ldw	r7,20(sp)
 a00c47c:	1200062e 	bgeu	r2,r8,a00c498 <__divdf3+0x54c>
 a00c480:	1585883a 	add	r2,r2,r22
 a00c484:	393fffc4 	addi	r4,r7,-1
 a00c488:	1580c536 	bltu	r2,r22,a00c7a0 <__divdf3+0x854>
 a00c48c:	1200c42e 	bgeu	r2,r8,a00c7a0 <__divdf3+0x854>
 a00c490:	39ffff84 	addi	r7,r7,-2
 a00c494:	1585883a 	add	r2,r2,r22
 a00c498:	122bc83a 	sub	r21,r2,r8
 a00c49c:	a00b883a 	mov	r5,r20
 a00c4a0:	a809883a 	mov	r4,r21
 a00c4a4:	d8c00215 	stw	r3,8(sp)
 a00c4a8:	d9c00515 	stw	r7,20(sp)
 a00c4ac:	a00be900 	call	a00be90 <__udivsi3>
 a00c4b0:	9009883a 	mov	r4,r18
 a00c4b4:	100b883a 	mov	r5,r2
 a00c4b8:	d8800415 	stw	r2,16(sp)
 a00c4bc:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c4c0:	a809883a 	mov	r4,r21
 a00c4c4:	a00b883a 	mov	r5,r20
 a00c4c8:	1025883a 	mov	r18,r2
 a00c4cc:	a00bef40 	call	a00bef4 <__umodsi3>
 a00c4d0:	1004943a 	slli	r2,r2,16
 a00c4d4:	813fffcc 	andi	r4,r16,65535
 a00c4d8:	d8c00217 	ldw	r3,8(sp)
 a00c4dc:	20a0b03a 	or	r16,r4,r2
 a00c4e0:	d9c00517 	ldw	r7,20(sp)
 a00c4e4:	da000417 	ldw	r8,16(sp)
 a00c4e8:	8480062e 	bgeu	r16,r18,a00c504 <__divdf3+0x5b8>
 a00c4ec:	85a1883a 	add	r16,r16,r22
 a00c4f0:	40bfffc4 	addi	r2,r8,-1
 a00c4f4:	8580ac36 	bltu	r16,r22,a00c7a8 <__divdf3+0x85c>
 a00c4f8:	8480ab2e 	bgeu	r16,r18,a00c7a8 <__divdf3+0x85c>
 a00c4fc:	423fff84 	addi	r8,r8,-2
 a00c500:	85a1883a 	add	r16,r16,r22
 a00c504:	3804943a 	slli	r2,r7,16
 a00c508:	84a1c83a 	sub	r16,r16,r18
 a00c50c:	e009883a 	mov	r4,fp
 a00c510:	1228b03a 	or	r20,r2,r8
 a00c514:	a1ffffcc 	andi	r7,r20,65535
 a00c518:	a024d43a 	srli	r18,r20,16
 a00c51c:	380b883a 	mov	r5,r7
 a00c520:	d8c00215 	stw	r3,8(sp)
 a00c524:	d9c00515 	stw	r7,20(sp)
 a00c528:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c52c:	900b883a 	mov	r5,r18
 a00c530:	e009883a 	mov	r4,fp
 a00c534:	102b883a 	mov	r21,r2
 a00c538:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c53c:	900b883a 	mov	r5,r18
 a00c540:	b809883a 	mov	r4,r23
 a00c544:	1039883a 	mov	fp,r2
 a00c548:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c54c:	d9c00517 	ldw	r7,20(sp)
 a00c550:	b80b883a 	mov	r5,r23
 a00c554:	1025883a 	mov	r18,r2
 a00c558:	3809883a 	mov	r4,r7
 a00c55c:	a0019a40 	call	a0019a4 <__mulsi3>
 a00c560:	a808d43a 	srli	r4,r21,16
 a00c564:	1705883a 	add	r2,r2,fp
 a00c568:	d8c00217 	ldw	r3,8(sp)
 a00c56c:	2085883a 	add	r2,r4,r2
 a00c570:	1700022e 	bgeu	r2,fp,a00c57c <__divdf3+0x630>
 a00c574:	01000074 	movhi	r4,1
 a00c578:	9125883a 	add	r18,r18,r4
 a00c57c:	1008d43a 	srli	r4,r2,16
 a00c580:	1004943a 	slli	r2,r2,16
 a00c584:	ad7fffcc 	andi	r21,r21,65535
 a00c588:	2489883a 	add	r4,r4,r18
 a00c58c:	1545883a 	add	r2,r2,r21
 a00c590:	81003836 	bltu	r16,r4,a00c674 <__divdf3+0x728>
 a00c594:	81003626 	beq	r16,r4,a00c670 <__divdf3+0x724>
 a00c598:	a5000054 	ori	r20,r20,1
 a00c59c:	1880ffc4 	addi	r2,r3,1023
 a00c5a0:	00bf2e0e 	bge	zero,r2,a00c25c <__alt_mem_flash+0xfe00b25c>
 a00c5a4:	a10001cc 	andi	r4,r20,7
 a00c5a8:	20000726 	beq	r4,zero,a00c5c8 <__divdf3+0x67c>
 a00c5ac:	a10003cc 	andi	r4,r20,15
 a00c5b0:	01400104 	movi	r5,4
 a00c5b4:	21400426 	beq	r4,r5,a00c5c8 <__divdf3+0x67c>
 a00c5b8:	a149883a 	add	r4,r20,r5
 a00c5bc:	2529803a 	cmpltu	r20,r4,r20
 a00c5c0:	8d23883a 	add	r17,r17,r20
 a00c5c4:	2029883a 	mov	r20,r4
 a00c5c8:	8900402c 	andhi	r4,r17,256
 a00c5cc:	20000426 	beq	r4,zero,a00c5e0 <__divdf3+0x694>
 a00c5d0:	18810004 	addi	r2,r3,1024
 a00c5d4:	00ffc034 	movhi	r3,65280
 a00c5d8:	18ffffc4 	addi	r3,r3,-1
 a00c5dc:	88e2703a 	and	r17,r17,r3
 a00c5e0:	00c1ff84 	movi	r3,2046
 a00c5e4:	18beb416 	blt	r3,r2,a00c0b8 <__alt_mem_flash+0xfe00b0b8>
 a00c5e8:	a028d0fa 	srli	r20,r20,3
 a00c5ec:	882a977a 	slli	r21,r17,29
 a00c5f0:	8820927a 	slli	r16,r17,9
 a00c5f4:	1081ffcc 	andi	r2,r2,2047
 a00c5f8:	ad2ab03a 	or	r21,r21,r20
 a00c5fc:	8020d33a 	srli	r16,r16,12
 a00c600:	9900004c 	andi	r4,r19,1
 a00c604:	003eb006 	br	a00c0c8 <__alt_mem_flash+0xfe00b0c8>
 a00c608:	8080022c 	andhi	r2,r16,8
 a00c60c:	10001226 	beq	r2,zero,a00c658 <__divdf3+0x70c>
 a00c610:	8880022c 	andhi	r2,r17,8
 a00c614:	1000101e 	bne	r2,zero,a00c658 <__divdf3+0x70c>
 a00c618:	00800434 	movhi	r2,16
 a00c61c:	8c000234 	orhi	r16,r17,8
 a00c620:	10bfffc4 	addi	r2,r2,-1
 a00c624:	b809883a 	mov	r4,r23
 a00c628:	80a0703a 	and	r16,r16,r2
 a00c62c:	a02b883a 	mov	r21,r20
 a00c630:	003f0806 	br	a00c254 <__alt_mem_flash+0xfe00b254>
 a00c634:	008000c4 	movi	r2,3
 a00c638:	3880b126 	beq	r7,r2,a00c900 <__divdf3+0x9b4>
 a00c63c:	00800044 	movi	r2,1
 a00c640:	38805b1e 	bne	r7,r2,a00c7b0 <__divdf3+0x864>
 a00c644:	e009883a 	mov	r4,fp
 a00c648:	0005883a 	mov	r2,zero
 a00c64c:	0021883a 	mov	r16,zero
 a00c650:	002b883a 	mov	r21,zero
 a00c654:	003e9c06 	br	a00c0c8 <__alt_mem_flash+0xfe00b0c8>
 a00c658:	00800434 	movhi	r2,16
 a00c65c:	84000234 	orhi	r16,r16,8
 a00c660:	10bfffc4 	addi	r2,r2,-1
 a00c664:	b009883a 	mov	r4,r22
 a00c668:	80a0703a 	and	r16,r16,r2
 a00c66c:	003ef906 	br	a00c254 <__alt_mem_flash+0xfe00b254>
 a00c670:	103fca26 	beq	r2,zero,a00c59c <__alt_mem_flash+0xfe00b59c>
 a00c674:	b421883a 	add	r16,r22,r16
 a00c678:	a17fffc4 	addi	r5,r20,-1
 a00c67c:	8580422e 	bgeu	r16,r22,a00c788 <__divdf3+0x83c>
 a00c680:	2829883a 	mov	r20,r5
 a00c684:	813fc41e 	bne	r16,r4,a00c598 <__alt_mem_flash+0xfe00b598>
 a00c688:	d9800017 	ldw	r6,0(sp)
 a00c68c:	30bfc21e 	bne	r6,r2,a00c598 <__alt_mem_flash+0xfe00b598>
 a00c690:	003fc206 	br	a00c59c <__alt_mem_flash+0xfe00b59c>
 a00c694:	143ff604 	addi	r16,r2,-40
 a00c698:	8c20983a 	sll	r16,r17,r16
 a00c69c:	002b883a 	mov	r21,zero
 a00c6a0:	003eb406 	br	a00c174 <__alt_mem_flash+0xfe00b174>
 a00c6a4:	d9800215 	stw	r6,8(sp)
 a00c6a8:	d9c00515 	stw	r7,20(sp)
 a00c6ac:	da000415 	stw	r8,16(sp)
 a00c6b0:	a0019400 	call	a001940 <__clzsi2>
 a00c6b4:	10800804 	addi	r2,r2,32
 a00c6b8:	da000417 	ldw	r8,16(sp)
 a00c6bc:	d9c00517 	ldw	r7,20(sp)
 a00c6c0:	d9800217 	ldw	r6,8(sp)
 a00c6c4:	003ea106 	br	a00c14c <__alt_mem_flash+0xfe00b14c>
 a00c6c8:	147ff604 	addi	r17,r2,-40
 a00c6cc:	3462983a 	sll	r17,r6,r17
 a00c6d0:	0029883a 	mov	r20,zero
 a00c6d4:	003ec906 	br	a00c1fc <__alt_mem_flash+0xfe00b1fc>
 a00c6d8:	3009883a 	mov	r4,r6
 a00c6dc:	d9400115 	stw	r5,4(sp)
 a00c6e0:	d9800215 	stw	r6,8(sp)
 a00c6e4:	da000415 	stw	r8,16(sp)
 a00c6e8:	da400315 	stw	r9,12(sp)
 a00c6ec:	a0019400 	call	a001940 <__clzsi2>
 a00c6f0:	10800804 	addi	r2,r2,32
 a00c6f4:	da400317 	ldw	r9,12(sp)
 a00c6f8:	da000417 	ldw	r8,16(sp)
 a00c6fc:	d9800217 	ldw	r6,8(sp)
 a00c700:	d9400117 	ldw	r5,4(sp)
 a00c704:	003eb306 	br	a00c1d4 <__alt_mem_flash+0xfe00b1d4>
 a00c708:	d9800017 	ldw	r6,0(sp)
 a00c70c:	a9ab883a 	add	r21,r21,r6
 a00c710:	a98b803a 	cmpltu	r5,r21,r6
 a00c714:	2d8b883a 	add	r5,r5,r22
 a00c718:	2a11883a 	add	r8,r5,r8
 a00c71c:	897fffc4 	addi	r5,r17,-1
 a00c720:	b2000c2e 	bgeu	r22,r8,a00c754 <__divdf3+0x808>
 a00c724:	41003f36 	bltu	r8,r4,a00c824 <__divdf3+0x8d8>
 a00c728:	22006c26 	beq	r4,r8,a00c8dc <__divdf3+0x990>
 a00c72c:	4109c83a 	sub	r4,r8,r4
 a00c730:	2823883a 	mov	r17,r5
 a00c734:	003f3b06 	br	a00c424 <__alt_mem_flash+0xfe00b424>
 a00c738:	ad3ed336 	bltu	r21,r20,a00c288 <__alt_mem_flash+0xfe00b288>
 a00c73c:	a804d07a 	srli	r2,r21,1
 a00c740:	802e97fa 	slli	r23,r16,31
 a00c744:	a82a97fa 	slli	r21,r21,31
 a00c748:	8020d07a 	srli	r16,r16,1
 a00c74c:	b8aeb03a 	or	r23,r23,r2
 a00c750:	003ed006 	br	a00c294 <__alt_mem_flash+0xfe00b294>
 a00c754:	b23ff51e 	bne	r22,r8,a00c72c <__alt_mem_flash+0xfe00b72c>
 a00c758:	d9800017 	ldw	r6,0(sp)
 a00c75c:	a9bff12e 	bgeu	r21,r6,a00c724 <__alt_mem_flash+0xfe00b724>
 a00c760:	b109c83a 	sub	r4,r22,r4
 a00c764:	2823883a 	mov	r17,r5
 a00c768:	003f2e06 	br	a00c424 <__alt_mem_flash+0xfe00b424>
 a00c76c:	2021883a 	mov	r16,r4
 a00c770:	003eff06 	br	a00c370 <__alt_mem_flash+0xfe00b370>
 a00c774:	2023883a 	mov	r17,r4
 a00c778:	003ee406 	br	a00c30c <__alt_mem_flash+0xfe00b30c>
 a00c77c:	a8bfe236 	bltu	r21,r2,a00c708 <__alt_mem_flash+0xfe00b708>
 a00c780:	0009883a 	mov	r4,zero
 a00c784:	003f2706 	br	a00c424 <__alt_mem_flash+0xfe00b424>
 a00c788:	81002d36 	bltu	r16,r4,a00c840 <__divdf3+0x8f4>
 a00c78c:	24005626 	beq	r4,r16,a00c8e8 <__divdf3+0x99c>
 a00c790:	2829883a 	mov	r20,r5
 a00c794:	003f8006 	br	a00c598 <__alt_mem_flash+0xfe00b598>
 a00c798:	053fffc4 	movi	r20,-1
 a00c79c:	003f7f06 	br	a00c59c <__alt_mem_flash+0xfe00b59c>
 a00c7a0:	200f883a 	mov	r7,r4
 a00c7a4:	003f3c06 	br	a00c498 <__alt_mem_flash+0xfe00b498>
 a00c7a8:	1011883a 	mov	r8,r2
 a00c7ac:	003f5506 	br	a00c504 <__alt_mem_flash+0xfe00b504>
 a00c7b0:	e027883a 	mov	r19,fp
 a00c7b4:	003f7906 	br	a00c59c <__alt_mem_flash+0xfe00b59c>
 a00c7b8:	010007c4 	movi	r4,31
 a00c7bc:	20c02816 	blt	r4,r3,a00c860 <__divdf3+0x914>
 a00c7c0:	00800804 	movi	r2,32
 a00c7c4:	10c5c83a 	sub	r2,r2,r3
 a00c7c8:	888a983a 	sll	r5,r17,r2
 a00c7cc:	a0c8d83a 	srl	r4,r20,r3
 a00c7d0:	a084983a 	sll	r2,r20,r2
 a00c7d4:	88e2d83a 	srl	r17,r17,r3
 a00c7d8:	2906b03a 	or	r3,r5,r4
 a00c7dc:	1004c03a 	cmpne	r2,r2,zero
 a00c7e0:	1886b03a 	or	r3,r3,r2
 a00c7e4:	188001cc 	andi	r2,r3,7
 a00c7e8:	10000726 	beq	r2,zero,a00c808 <__divdf3+0x8bc>
 a00c7ec:	188003cc 	andi	r2,r3,15
 a00c7f0:	01000104 	movi	r4,4
 a00c7f4:	11000426 	beq	r2,r4,a00c808 <__divdf3+0x8bc>
 a00c7f8:	1805883a 	mov	r2,r3
 a00c7fc:	10c00104 	addi	r3,r2,4
 a00c800:	1885803a 	cmpltu	r2,r3,r2
 a00c804:	88a3883a 	add	r17,r17,r2
 a00c808:	8880202c 	andhi	r2,r17,128
 a00c80c:	10002926 	beq	r2,zero,a00c8b4 <__divdf3+0x968>
 a00c810:	9900004c 	andi	r4,r19,1
 a00c814:	00800044 	movi	r2,1
 a00c818:	0021883a 	mov	r16,zero
 a00c81c:	002b883a 	mov	r21,zero
 a00c820:	003e2906 	br	a00c0c8 <__alt_mem_flash+0xfe00b0c8>
 a00c824:	d9800017 	ldw	r6,0(sp)
 a00c828:	8c7fff84 	addi	r17,r17,-2
 a00c82c:	a9ab883a 	add	r21,r21,r6
 a00c830:	a98b803a 	cmpltu	r5,r21,r6
 a00c834:	2d8b883a 	add	r5,r5,r22
 a00c838:	2a11883a 	add	r8,r5,r8
 a00c83c:	003ef806 	br	a00c420 <__alt_mem_flash+0xfe00b420>
 a00c840:	d9800017 	ldw	r6,0(sp)
 a00c844:	318f883a 	add	r7,r6,r6
 a00c848:	398b803a 	cmpltu	r5,r7,r6
 a00c84c:	2d8d883a 	add	r6,r5,r22
 a00c850:	81a1883a 	add	r16,r16,r6
 a00c854:	a17fff84 	addi	r5,r20,-2
 a00c858:	d9c00015 	stw	r7,0(sp)
 a00c85c:	003f8806 	br	a00c680 <__alt_mem_flash+0xfe00b680>
 a00c860:	013ff844 	movi	r4,-31
 a00c864:	2085c83a 	sub	r2,r4,r2
 a00c868:	8888d83a 	srl	r4,r17,r2
 a00c86c:	00800804 	movi	r2,32
 a00c870:	18802126 	beq	r3,r2,a00c8f8 <__divdf3+0x9ac>
 a00c874:	04001004 	movi	r16,64
 a00c878:	80c7c83a 	sub	r3,r16,r3
 a00c87c:	88e0983a 	sll	r16,r17,r3
 a00c880:	8504b03a 	or	r2,r16,r20
 a00c884:	1004c03a 	cmpne	r2,r2,zero
 a00c888:	2084b03a 	or	r2,r4,r2
 a00c88c:	144001cc 	andi	r17,r2,7
 a00c890:	88000d1e 	bne	r17,zero,a00c8c8 <__divdf3+0x97c>
 a00c894:	0021883a 	mov	r16,zero
 a00c898:	102ad0fa 	srli	r21,r2,3
 a00c89c:	9900004c 	andi	r4,r19,1
 a00c8a0:	0005883a 	mov	r2,zero
 a00c8a4:	ac6ab03a 	or	r21,r21,r17
 a00c8a8:	003e0706 	br	a00c0c8 <__alt_mem_flash+0xfe00b0c8>
 a00c8ac:	1007883a 	mov	r3,r2
 a00c8b0:	0023883a 	mov	r17,zero
 a00c8b4:	8820927a 	slli	r16,r17,9
 a00c8b8:	1805883a 	mov	r2,r3
 a00c8bc:	8822977a 	slli	r17,r17,29
 a00c8c0:	8020d33a 	srli	r16,r16,12
 a00c8c4:	003ff406 	br	a00c898 <__alt_mem_flash+0xfe00b898>
 a00c8c8:	10c003cc 	andi	r3,r2,15
 a00c8cc:	01000104 	movi	r4,4
 a00c8d0:	193ff626 	beq	r3,r4,a00c8ac <__alt_mem_flash+0xfe00b8ac>
 a00c8d4:	0023883a 	mov	r17,zero
 a00c8d8:	003fc806 	br	a00c7fc <__alt_mem_flash+0xfe00b7fc>
 a00c8dc:	a8bfd136 	bltu	r21,r2,a00c824 <__alt_mem_flash+0xfe00b824>
 a00c8e0:	2823883a 	mov	r17,r5
 a00c8e4:	003fa606 	br	a00c780 <__alt_mem_flash+0xfe00b780>
 a00c8e8:	d9800017 	ldw	r6,0(sp)
 a00c8ec:	30bfd436 	bltu	r6,r2,a00c840 <__alt_mem_flash+0xfe00b840>
 a00c8f0:	2829883a 	mov	r20,r5
 a00c8f4:	003f6406 	br	a00c688 <__alt_mem_flash+0xfe00b688>
 a00c8f8:	0021883a 	mov	r16,zero
 a00c8fc:	003fe006 	br	a00c880 <__alt_mem_flash+0xfe00b880>
 a00c900:	00800434 	movhi	r2,16
 a00c904:	8c000234 	orhi	r16,r17,8
 a00c908:	10bfffc4 	addi	r2,r2,-1
 a00c90c:	e009883a 	mov	r4,fp
 a00c910:	80a0703a 	and	r16,r16,r2
 a00c914:	a02b883a 	mov	r21,r20
 a00c918:	003e4e06 	br	a00c254 <__alt_mem_flash+0xfe00b254>

0a00c91c <__eqdf2>:
 a00c91c:	2804d53a 	srli	r2,r5,20
 a00c920:	3806d53a 	srli	r3,r7,20
 a00c924:	02000434 	movhi	r8,16
 a00c928:	423fffc4 	addi	r8,r8,-1
 a00c92c:	1081ffcc 	andi	r2,r2,2047
 a00c930:	0281ffc4 	movi	r10,2047
 a00c934:	2a12703a 	and	r9,r5,r8
 a00c938:	18c1ffcc 	andi	r3,r3,2047
 a00c93c:	3a10703a 	and	r8,r7,r8
 a00c940:	280ad7fa 	srli	r5,r5,31
 a00c944:	380ed7fa 	srli	r7,r7,31
 a00c948:	12801026 	beq	r2,r10,a00c98c <__eqdf2+0x70>
 a00c94c:	0281ffc4 	movi	r10,2047
 a00c950:	1a800a26 	beq	r3,r10,a00c97c <__eqdf2+0x60>
 a00c954:	10c00226 	beq	r2,r3,a00c960 <__eqdf2+0x44>
 a00c958:	00800044 	movi	r2,1
 a00c95c:	f800283a 	ret
 a00c960:	4a3ffd1e 	bne	r9,r8,a00c958 <__alt_mem_flash+0xfe00b958>
 a00c964:	21bffc1e 	bne	r4,r6,a00c958 <__alt_mem_flash+0xfe00b958>
 a00c968:	29c00c26 	beq	r5,r7,a00c99c <__eqdf2+0x80>
 a00c96c:	103ffa1e 	bne	r2,zero,a00c958 <__alt_mem_flash+0xfe00b958>
 a00c970:	2244b03a 	or	r2,r4,r9
 a00c974:	1004c03a 	cmpne	r2,r2,zero
 a00c978:	f800283a 	ret
 a00c97c:	3214b03a 	or	r10,r6,r8
 a00c980:	503ff426 	beq	r10,zero,a00c954 <__alt_mem_flash+0xfe00b954>
 a00c984:	00800044 	movi	r2,1
 a00c988:	f800283a 	ret
 a00c98c:	2254b03a 	or	r10,r4,r9
 a00c990:	503fee26 	beq	r10,zero,a00c94c <__alt_mem_flash+0xfe00b94c>
 a00c994:	00800044 	movi	r2,1
 a00c998:	f800283a 	ret
 a00c99c:	0005883a 	mov	r2,zero
 a00c9a0:	f800283a 	ret

0a00c9a4 <__gedf2>:
 a00c9a4:	2804d53a 	srli	r2,r5,20
 a00c9a8:	3806d53a 	srli	r3,r7,20
 a00c9ac:	02000434 	movhi	r8,16
 a00c9b0:	423fffc4 	addi	r8,r8,-1
 a00c9b4:	1081ffcc 	andi	r2,r2,2047
 a00c9b8:	0241ffc4 	movi	r9,2047
 a00c9bc:	2a14703a 	and	r10,r5,r8
 a00c9c0:	18c1ffcc 	andi	r3,r3,2047
 a00c9c4:	3a10703a 	and	r8,r7,r8
 a00c9c8:	280ad7fa 	srli	r5,r5,31
 a00c9cc:	380ed7fa 	srli	r7,r7,31
 a00c9d0:	12401d26 	beq	r2,r9,a00ca48 <__gedf2+0xa4>
 a00c9d4:	0241ffc4 	movi	r9,2047
 a00c9d8:	1a401226 	beq	r3,r9,a00ca24 <__gedf2+0x80>
 a00c9dc:	1000081e 	bne	r2,zero,a00ca00 <__gedf2+0x5c>
 a00c9e0:	2296b03a 	or	r11,r4,r10
 a00c9e4:	5813003a 	cmpeq	r9,r11,zero
 a00c9e8:	1800091e 	bne	r3,zero,a00ca10 <__gedf2+0x6c>
 a00c9ec:	3218b03a 	or	r12,r6,r8
 a00c9f0:	6000071e 	bne	r12,zero,a00ca10 <__gedf2+0x6c>
 a00c9f4:	0005883a 	mov	r2,zero
 a00c9f8:	5800101e 	bne	r11,zero,a00ca3c <__gedf2+0x98>
 a00c9fc:	f800283a 	ret
 a00ca00:	18000c1e 	bne	r3,zero,a00ca34 <__gedf2+0x90>
 a00ca04:	3212b03a 	or	r9,r6,r8
 a00ca08:	48000c26 	beq	r9,zero,a00ca3c <__gedf2+0x98>
 a00ca0c:	0013883a 	mov	r9,zero
 a00ca10:	39c03fcc 	andi	r7,r7,255
 a00ca14:	48000826 	beq	r9,zero,a00ca38 <__gedf2+0x94>
 a00ca18:	38000926 	beq	r7,zero,a00ca40 <__gedf2+0x9c>
 a00ca1c:	00800044 	movi	r2,1
 a00ca20:	f800283a 	ret
 a00ca24:	3212b03a 	or	r9,r6,r8
 a00ca28:	483fec26 	beq	r9,zero,a00c9dc <__alt_mem_flash+0xfe00b9dc>
 a00ca2c:	00bfff84 	movi	r2,-2
 a00ca30:	f800283a 	ret
 a00ca34:	39c03fcc 	andi	r7,r7,255
 a00ca38:	29c00626 	beq	r5,r7,a00ca54 <__gedf2+0xb0>
 a00ca3c:	283ff726 	beq	r5,zero,a00ca1c <__alt_mem_flash+0xfe00ba1c>
 a00ca40:	00bfffc4 	movi	r2,-1
 a00ca44:	f800283a 	ret
 a00ca48:	2292b03a 	or	r9,r4,r10
 a00ca4c:	483fe126 	beq	r9,zero,a00c9d4 <__alt_mem_flash+0xfe00b9d4>
 a00ca50:	003ff606 	br	a00ca2c <__alt_mem_flash+0xfe00ba2c>
 a00ca54:	18bff916 	blt	r3,r2,a00ca3c <__alt_mem_flash+0xfe00ba3c>
 a00ca58:	10c00316 	blt	r2,r3,a00ca68 <__gedf2+0xc4>
 a00ca5c:	42bff736 	bltu	r8,r10,a00ca3c <__alt_mem_flash+0xfe00ba3c>
 a00ca60:	52000326 	beq	r10,r8,a00ca70 <__gedf2+0xcc>
 a00ca64:	5200042e 	bgeu	r10,r8,a00ca78 <__gedf2+0xd4>
 a00ca68:	283fec1e 	bne	r5,zero,a00ca1c <__alt_mem_flash+0xfe00ba1c>
 a00ca6c:	003ff406 	br	a00ca40 <__alt_mem_flash+0xfe00ba40>
 a00ca70:	313ff236 	bltu	r6,r4,a00ca3c <__alt_mem_flash+0xfe00ba3c>
 a00ca74:	21bffc36 	bltu	r4,r6,a00ca68 <__alt_mem_flash+0xfe00ba68>
 a00ca78:	0005883a 	mov	r2,zero
 a00ca7c:	f800283a 	ret

0a00ca80 <__ledf2>:
 a00ca80:	2804d53a 	srli	r2,r5,20
 a00ca84:	3810d53a 	srli	r8,r7,20
 a00ca88:	00c00434 	movhi	r3,16
 a00ca8c:	18ffffc4 	addi	r3,r3,-1
 a00ca90:	1081ffcc 	andi	r2,r2,2047
 a00ca94:	0241ffc4 	movi	r9,2047
 a00ca98:	28d4703a 	and	r10,r5,r3
 a00ca9c:	4201ffcc 	andi	r8,r8,2047
 a00caa0:	38c6703a 	and	r3,r7,r3
 a00caa4:	280ad7fa 	srli	r5,r5,31
 a00caa8:	380ed7fa 	srli	r7,r7,31
 a00caac:	12401f26 	beq	r2,r9,a00cb2c <__ledf2+0xac>
 a00cab0:	0241ffc4 	movi	r9,2047
 a00cab4:	42401426 	beq	r8,r9,a00cb08 <__ledf2+0x88>
 a00cab8:	1000091e 	bne	r2,zero,a00cae0 <__ledf2+0x60>
 a00cabc:	2296b03a 	or	r11,r4,r10
 a00cac0:	5813003a 	cmpeq	r9,r11,zero
 a00cac4:	29403fcc 	andi	r5,r5,255
 a00cac8:	40000a1e 	bne	r8,zero,a00caf4 <__ledf2+0x74>
 a00cacc:	30d8b03a 	or	r12,r6,r3
 a00cad0:	6000081e 	bne	r12,zero,a00caf4 <__ledf2+0x74>
 a00cad4:	0005883a 	mov	r2,zero
 a00cad8:	5800111e 	bne	r11,zero,a00cb20 <__ledf2+0xa0>
 a00cadc:	f800283a 	ret
 a00cae0:	29403fcc 	andi	r5,r5,255
 a00cae4:	40000c1e 	bne	r8,zero,a00cb18 <__ledf2+0x98>
 a00cae8:	30d2b03a 	or	r9,r6,r3
 a00caec:	48000c26 	beq	r9,zero,a00cb20 <__ledf2+0xa0>
 a00caf0:	0013883a 	mov	r9,zero
 a00caf4:	39c03fcc 	andi	r7,r7,255
 a00caf8:	48000826 	beq	r9,zero,a00cb1c <__ledf2+0x9c>
 a00cafc:	38001126 	beq	r7,zero,a00cb44 <__ledf2+0xc4>
 a00cb00:	00800044 	movi	r2,1
 a00cb04:	f800283a 	ret
 a00cb08:	30d2b03a 	or	r9,r6,r3
 a00cb0c:	483fea26 	beq	r9,zero,a00cab8 <__alt_mem_flash+0xfe00bab8>
 a00cb10:	00800084 	movi	r2,2
 a00cb14:	f800283a 	ret
 a00cb18:	39c03fcc 	andi	r7,r7,255
 a00cb1c:	39400726 	beq	r7,r5,a00cb3c <__ledf2+0xbc>
 a00cb20:	2800081e 	bne	r5,zero,a00cb44 <__ledf2+0xc4>
 a00cb24:	00800044 	movi	r2,1
 a00cb28:	f800283a 	ret
 a00cb2c:	2292b03a 	or	r9,r4,r10
 a00cb30:	483fdf26 	beq	r9,zero,a00cab0 <__alt_mem_flash+0xfe00bab0>
 a00cb34:	00800084 	movi	r2,2
 a00cb38:	f800283a 	ret
 a00cb3c:	4080030e 	bge	r8,r2,a00cb4c <__ledf2+0xcc>
 a00cb40:	383fef26 	beq	r7,zero,a00cb00 <__alt_mem_flash+0xfe00bb00>
 a00cb44:	00bfffc4 	movi	r2,-1
 a00cb48:	f800283a 	ret
 a00cb4c:	123feb16 	blt	r2,r8,a00cafc <__alt_mem_flash+0xfe00bafc>
 a00cb50:	1abff336 	bltu	r3,r10,a00cb20 <__alt_mem_flash+0xfe00bb20>
 a00cb54:	50c00326 	beq	r10,r3,a00cb64 <__ledf2+0xe4>
 a00cb58:	50c0042e 	bgeu	r10,r3,a00cb6c <__ledf2+0xec>
 a00cb5c:	283fe81e 	bne	r5,zero,a00cb00 <__alt_mem_flash+0xfe00bb00>
 a00cb60:	003ff806 	br	a00cb44 <__alt_mem_flash+0xfe00bb44>
 a00cb64:	313fee36 	bltu	r6,r4,a00cb20 <__alt_mem_flash+0xfe00bb20>
 a00cb68:	21bffc36 	bltu	r4,r6,a00cb5c <__alt_mem_flash+0xfe00bb5c>
 a00cb6c:	0005883a 	mov	r2,zero
 a00cb70:	f800283a 	ret

0a00cb74 <__subdf3>:
 a00cb74:	02000434 	movhi	r8,16
 a00cb78:	423fffc4 	addi	r8,r8,-1
 a00cb7c:	defffb04 	addi	sp,sp,-20
 a00cb80:	2a14703a 	and	r10,r5,r8
 a00cb84:	3812d53a 	srli	r9,r7,20
 a00cb88:	3a10703a 	and	r8,r7,r8
 a00cb8c:	2006d77a 	srli	r3,r4,29
 a00cb90:	3004d77a 	srli	r2,r6,29
 a00cb94:	dc000015 	stw	r16,0(sp)
 a00cb98:	501490fa 	slli	r10,r10,3
 a00cb9c:	2820d53a 	srli	r16,r5,20
 a00cba0:	401090fa 	slli	r8,r8,3
 a00cba4:	dc800215 	stw	r18,8(sp)
 a00cba8:	dc400115 	stw	r17,4(sp)
 a00cbac:	dfc00415 	stw	ra,16(sp)
 a00cbb0:	202290fa 	slli	r17,r4,3
 a00cbb4:	dcc00315 	stw	r19,12(sp)
 a00cbb8:	4a41ffcc 	andi	r9,r9,2047
 a00cbbc:	0101ffc4 	movi	r4,2047
 a00cbc0:	2824d7fa 	srli	r18,r5,31
 a00cbc4:	8401ffcc 	andi	r16,r16,2047
 a00cbc8:	50c6b03a 	or	r3,r10,r3
 a00cbcc:	380ed7fa 	srli	r7,r7,31
 a00cbd0:	408ab03a 	or	r5,r8,r2
 a00cbd4:	300c90fa 	slli	r6,r6,3
 a00cbd8:	49009626 	beq	r9,r4,a00ce34 <__subdf3+0x2c0>
 a00cbdc:	39c0005c 	xori	r7,r7,1
 a00cbe0:	8245c83a 	sub	r2,r16,r9
 a00cbe4:	3c807426 	beq	r7,r18,a00cdb8 <__subdf3+0x244>
 a00cbe8:	0080af0e 	bge	zero,r2,a00cea8 <__subdf3+0x334>
 a00cbec:	48002a1e 	bne	r9,zero,a00cc98 <__subdf3+0x124>
 a00cbf0:	2988b03a 	or	r4,r5,r6
 a00cbf4:	20009a1e 	bne	r4,zero,a00ce60 <__subdf3+0x2ec>
 a00cbf8:	888001cc 	andi	r2,r17,7
 a00cbfc:	10000726 	beq	r2,zero,a00cc1c <__subdf3+0xa8>
 a00cc00:	888003cc 	andi	r2,r17,15
 a00cc04:	01000104 	movi	r4,4
 a00cc08:	11000426 	beq	r2,r4,a00cc1c <__subdf3+0xa8>
 a00cc0c:	890b883a 	add	r5,r17,r4
 a00cc10:	2c63803a 	cmpltu	r17,r5,r17
 a00cc14:	1c47883a 	add	r3,r3,r17
 a00cc18:	2823883a 	mov	r17,r5
 a00cc1c:	1880202c 	andhi	r2,r3,128
 a00cc20:	10005926 	beq	r2,zero,a00cd88 <__subdf3+0x214>
 a00cc24:	84000044 	addi	r16,r16,1
 a00cc28:	0081ffc4 	movi	r2,2047
 a00cc2c:	8080be26 	beq	r16,r2,a00cf28 <__subdf3+0x3b4>
 a00cc30:	017fe034 	movhi	r5,65408
 a00cc34:	297fffc4 	addi	r5,r5,-1
 a00cc38:	1946703a 	and	r3,r3,r5
 a00cc3c:	1804977a 	slli	r2,r3,29
 a00cc40:	1806927a 	slli	r3,r3,9
 a00cc44:	8822d0fa 	srli	r17,r17,3
 a00cc48:	8401ffcc 	andi	r16,r16,2047
 a00cc4c:	180ad33a 	srli	r5,r3,12
 a00cc50:	9100004c 	andi	r4,r18,1
 a00cc54:	1444b03a 	or	r2,r2,r17
 a00cc58:	80c1ffcc 	andi	r3,r16,2047
 a00cc5c:	1820953a 	slli	r16,r3,20
 a00cc60:	20c03fcc 	andi	r3,r4,255
 a00cc64:	180897fa 	slli	r4,r3,31
 a00cc68:	00c00434 	movhi	r3,16
 a00cc6c:	18ffffc4 	addi	r3,r3,-1
 a00cc70:	28c6703a 	and	r3,r5,r3
 a00cc74:	1c06b03a 	or	r3,r3,r16
 a00cc78:	1906b03a 	or	r3,r3,r4
 a00cc7c:	dfc00417 	ldw	ra,16(sp)
 a00cc80:	dcc00317 	ldw	r19,12(sp)
 a00cc84:	dc800217 	ldw	r18,8(sp)
 a00cc88:	dc400117 	ldw	r17,4(sp)
 a00cc8c:	dc000017 	ldw	r16,0(sp)
 a00cc90:	dec00504 	addi	sp,sp,20
 a00cc94:	f800283a 	ret
 a00cc98:	0101ffc4 	movi	r4,2047
 a00cc9c:	813fd626 	beq	r16,r4,a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00cca0:	29402034 	orhi	r5,r5,128
 a00cca4:	01000e04 	movi	r4,56
 a00cca8:	2080a316 	blt	r4,r2,a00cf38 <__subdf3+0x3c4>
 a00ccac:	010007c4 	movi	r4,31
 a00ccb0:	2080c616 	blt	r4,r2,a00cfcc <__subdf3+0x458>
 a00ccb4:	01000804 	movi	r4,32
 a00ccb8:	2089c83a 	sub	r4,r4,r2
 a00ccbc:	2910983a 	sll	r8,r5,r4
 a00ccc0:	308ed83a 	srl	r7,r6,r2
 a00ccc4:	3108983a 	sll	r4,r6,r4
 a00ccc8:	2884d83a 	srl	r2,r5,r2
 a00cccc:	41ccb03a 	or	r6,r8,r7
 a00ccd0:	2008c03a 	cmpne	r4,r4,zero
 a00ccd4:	310cb03a 	or	r6,r6,r4
 a00ccd8:	898dc83a 	sub	r6,r17,r6
 a00ccdc:	89a3803a 	cmpltu	r17,r17,r6
 a00cce0:	1887c83a 	sub	r3,r3,r2
 a00cce4:	1c47c83a 	sub	r3,r3,r17
 a00cce8:	3023883a 	mov	r17,r6
 a00ccec:	1880202c 	andhi	r2,r3,128
 a00ccf0:	10002326 	beq	r2,zero,a00cd80 <__subdf3+0x20c>
 a00ccf4:	04c02034 	movhi	r19,128
 a00ccf8:	9cffffc4 	addi	r19,r19,-1
 a00ccfc:	1ce6703a 	and	r19,r3,r19
 a00cd00:	98007a26 	beq	r19,zero,a00ceec <__subdf3+0x378>
 a00cd04:	9809883a 	mov	r4,r19
 a00cd08:	a0019400 	call	a001940 <__clzsi2>
 a00cd0c:	113ffe04 	addi	r4,r2,-8
 a00cd10:	00c007c4 	movi	r3,31
 a00cd14:	19007b16 	blt	r3,r4,a00cf04 <__subdf3+0x390>
 a00cd18:	00800804 	movi	r2,32
 a00cd1c:	1105c83a 	sub	r2,r2,r4
 a00cd20:	8884d83a 	srl	r2,r17,r2
 a00cd24:	9906983a 	sll	r3,r19,r4
 a00cd28:	8922983a 	sll	r17,r17,r4
 a00cd2c:	10c4b03a 	or	r2,r2,r3
 a00cd30:	24007816 	blt	r4,r16,a00cf14 <__subdf3+0x3a0>
 a00cd34:	2421c83a 	sub	r16,r4,r16
 a00cd38:	80c00044 	addi	r3,r16,1
 a00cd3c:	010007c4 	movi	r4,31
 a00cd40:	20c09516 	blt	r4,r3,a00cf98 <__subdf3+0x424>
 a00cd44:	01400804 	movi	r5,32
 a00cd48:	28cbc83a 	sub	r5,r5,r3
 a00cd4c:	88c8d83a 	srl	r4,r17,r3
 a00cd50:	8962983a 	sll	r17,r17,r5
 a00cd54:	114a983a 	sll	r5,r2,r5
 a00cd58:	10c6d83a 	srl	r3,r2,r3
 a00cd5c:	8804c03a 	cmpne	r2,r17,zero
 a00cd60:	290ab03a 	or	r5,r5,r4
 a00cd64:	28a2b03a 	or	r17,r5,r2
 a00cd68:	0021883a 	mov	r16,zero
 a00cd6c:	003fa206 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00cd70:	2090b03a 	or	r8,r4,r2
 a00cd74:	40018e26 	beq	r8,zero,a00d3b0 <__subdf3+0x83c>
 a00cd78:	1007883a 	mov	r3,r2
 a00cd7c:	2023883a 	mov	r17,r4
 a00cd80:	888001cc 	andi	r2,r17,7
 a00cd84:	103f9e1e 	bne	r2,zero,a00cc00 <__alt_mem_flash+0xfe00bc00>
 a00cd88:	1804977a 	slli	r2,r3,29
 a00cd8c:	8822d0fa 	srli	r17,r17,3
 a00cd90:	1810d0fa 	srli	r8,r3,3
 a00cd94:	9100004c 	andi	r4,r18,1
 a00cd98:	1444b03a 	or	r2,r2,r17
 a00cd9c:	00c1ffc4 	movi	r3,2047
 a00cda0:	80c02826 	beq	r16,r3,a00ce44 <__subdf3+0x2d0>
 a00cda4:	01400434 	movhi	r5,16
 a00cda8:	297fffc4 	addi	r5,r5,-1
 a00cdac:	80e0703a 	and	r16,r16,r3
 a00cdb0:	414a703a 	and	r5,r8,r5
 a00cdb4:	003fa806 	br	a00cc58 <__alt_mem_flash+0xfe00bc58>
 a00cdb8:	0080630e 	bge	zero,r2,a00cf48 <__subdf3+0x3d4>
 a00cdbc:	48003026 	beq	r9,zero,a00ce80 <__subdf3+0x30c>
 a00cdc0:	0101ffc4 	movi	r4,2047
 a00cdc4:	813f8c26 	beq	r16,r4,a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00cdc8:	29402034 	orhi	r5,r5,128
 a00cdcc:	01000e04 	movi	r4,56
 a00cdd0:	2080a90e 	bge	r4,r2,a00d078 <__subdf3+0x504>
 a00cdd4:	298cb03a 	or	r6,r5,r6
 a00cdd8:	3012c03a 	cmpne	r9,r6,zero
 a00cddc:	0005883a 	mov	r2,zero
 a00cde0:	4c53883a 	add	r9,r9,r17
 a00cde4:	4c63803a 	cmpltu	r17,r9,r17
 a00cde8:	10c7883a 	add	r3,r2,r3
 a00cdec:	88c7883a 	add	r3,r17,r3
 a00cdf0:	4823883a 	mov	r17,r9
 a00cdf4:	1880202c 	andhi	r2,r3,128
 a00cdf8:	1000d026 	beq	r2,zero,a00d13c <__subdf3+0x5c8>
 a00cdfc:	84000044 	addi	r16,r16,1
 a00ce00:	0081ffc4 	movi	r2,2047
 a00ce04:	8080fe26 	beq	r16,r2,a00d200 <__subdf3+0x68c>
 a00ce08:	00bfe034 	movhi	r2,65408
 a00ce0c:	10bfffc4 	addi	r2,r2,-1
 a00ce10:	1886703a 	and	r3,r3,r2
 a00ce14:	880ad07a 	srli	r5,r17,1
 a00ce18:	180497fa 	slli	r2,r3,31
 a00ce1c:	8900004c 	andi	r4,r17,1
 a00ce20:	2922b03a 	or	r17,r5,r4
 a00ce24:	1806d07a 	srli	r3,r3,1
 a00ce28:	1462b03a 	or	r17,r2,r17
 a00ce2c:	3825883a 	mov	r18,r7
 a00ce30:	003f7106 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00ce34:	2984b03a 	or	r2,r5,r6
 a00ce38:	103f6826 	beq	r2,zero,a00cbdc <__alt_mem_flash+0xfe00bbdc>
 a00ce3c:	39c03fcc 	andi	r7,r7,255
 a00ce40:	003f6706 	br	a00cbe0 <__alt_mem_flash+0xfe00bbe0>
 a00ce44:	4086b03a 	or	r3,r8,r2
 a00ce48:	18015226 	beq	r3,zero,a00d394 <__subdf3+0x820>
 a00ce4c:	00c00434 	movhi	r3,16
 a00ce50:	41400234 	orhi	r5,r8,8
 a00ce54:	18ffffc4 	addi	r3,r3,-1
 a00ce58:	28ca703a 	and	r5,r5,r3
 a00ce5c:	003f7e06 	br	a00cc58 <__alt_mem_flash+0xfe00bc58>
 a00ce60:	10bfffc4 	addi	r2,r2,-1
 a00ce64:	1000491e 	bne	r2,zero,a00cf8c <__subdf3+0x418>
 a00ce68:	898fc83a 	sub	r7,r17,r6
 a00ce6c:	89e3803a 	cmpltu	r17,r17,r7
 a00ce70:	1947c83a 	sub	r3,r3,r5
 a00ce74:	1c47c83a 	sub	r3,r3,r17
 a00ce78:	3823883a 	mov	r17,r7
 a00ce7c:	003f9b06 	br	a00ccec <__alt_mem_flash+0xfe00bcec>
 a00ce80:	2988b03a 	or	r4,r5,r6
 a00ce84:	203f5c26 	beq	r4,zero,a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00ce88:	10bfffc4 	addi	r2,r2,-1
 a00ce8c:	1000931e 	bne	r2,zero,a00d0dc <__subdf3+0x568>
 a00ce90:	898d883a 	add	r6,r17,r6
 a00ce94:	3463803a 	cmpltu	r17,r6,r17
 a00ce98:	1947883a 	add	r3,r3,r5
 a00ce9c:	88c7883a 	add	r3,r17,r3
 a00cea0:	3023883a 	mov	r17,r6
 a00cea4:	003fd306 	br	a00cdf4 <__alt_mem_flash+0xfe00bdf4>
 a00cea8:	1000541e 	bne	r2,zero,a00cffc <__subdf3+0x488>
 a00ceac:	80800044 	addi	r2,r16,1
 a00ceb0:	1081ffcc 	andi	r2,r2,2047
 a00ceb4:	01000044 	movi	r4,1
 a00ceb8:	2080a20e 	bge	r4,r2,a00d144 <__subdf3+0x5d0>
 a00cebc:	8989c83a 	sub	r4,r17,r6
 a00cec0:	8905803a 	cmpltu	r2,r17,r4
 a00cec4:	1967c83a 	sub	r19,r3,r5
 a00cec8:	98a7c83a 	sub	r19,r19,r2
 a00cecc:	9880202c 	andhi	r2,r19,128
 a00ced0:	10006326 	beq	r2,zero,a00d060 <__subdf3+0x4ec>
 a00ced4:	3463c83a 	sub	r17,r6,r17
 a00ced8:	28c7c83a 	sub	r3,r5,r3
 a00cedc:	344d803a 	cmpltu	r6,r6,r17
 a00cee0:	19a7c83a 	sub	r19,r3,r6
 a00cee4:	3825883a 	mov	r18,r7
 a00cee8:	983f861e 	bne	r19,zero,a00cd04 <__alt_mem_flash+0xfe00bd04>
 a00ceec:	8809883a 	mov	r4,r17
 a00cef0:	a0019400 	call	a001940 <__clzsi2>
 a00cef4:	10800804 	addi	r2,r2,32
 a00cef8:	113ffe04 	addi	r4,r2,-8
 a00cefc:	00c007c4 	movi	r3,31
 a00cf00:	193f850e 	bge	r3,r4,a00cd18 <__alt_mem_flash+0xfe00bd18>
 a00cf04:	10bff604 	addi	r2,r2,-40
 a00cf08:	8884983a 	sll	r2,r17,r2
 a00cf0c:	0023883a 	mov	r17,zero
 a00cf10:	243f880e 	bge	r4,r16,a00cd34 <__alt_mem_flash+0xfe00bd34>
 a00cf14:	00ffe034 	movhi	r3,65408
 a00cf18:	18ffffc4 	addi	r3,r3,-1
 a00cf1c:	8121c83a 	sub	r16,r16,r4
 a00cf20:	10c6703a 	and	r3,r2,r3
 a00cf24:	003f3406 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00cf28:	9100004c 	andi	r4,r18,1
 a00cf2c:	000b883a 	mov	r5,zero
 a00cf30:	0005883a 	mov	r2,zero
 a00cf34:	003f4806 	br	a00cc58 <__alt_mem_flash+0xfe00bc58>
 a00cf38:	298cb03a 	or	r6,r5,r6
 a00cf3c:	300cc03a 	cmpne	r6,r6,zero
 a00cf40:	0005883a 	mov	r2,zero
 a00cf44:	003f6406 	br	a00ccd8 <__alt_mem_flash+0xfe00bcd8>
 a00cf48:	10009a1e 	bne	r2,zero,a00d1b4 <__subdf3+0x640>
 a00cf4c:	82400044 	addi	r9,r16,1
 a00cf50:	4881ffcc 	andi	r2,r9,2047
 a00cf54:	02800044 	movi	r10,1
 a00cf58:	5080670e 	bge	r10,r2,a00d0f8 <__subdf3+0x584>
 a00cf5c:	0081ffc4 	movi	r2,2047
 a00cf60:	4880af26 	beq	r9,r2,a00d220 <__subdf3+0x6ac>
 a00cf64:	898d883a 	add	r6,r17,r6
 a00cf68:	1945883a 	add	r2,r3,r5
 a00cf6c:	3447803a 	cmpltu	r3,r6,r17
 a00cf70:	1887883a 	add	r3,r3,r2
 a00cf74:	182297fa 	slli	r17,r3,31
 a00cf78:	300cd07a 	srli	r6,r6,1
 a00cf7c:	1806d07a 	srli	r3,r3,1
 a00cf80:	4821883a 	mov	r16,r9
 a00cf84:	89a2b03a 	or	r17,r17,r6
 a00cf88:	003f1b06 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00cf8c:	0101ffc4 	movi	r4,2047
 a00cf90:	813f441e 	bne	r16,r4,a00cca4 <__alt_mem_flash+0xfe00bca4>
 a00cf94:	003f1806 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00cf98:	843ff844 	addi	r16,r16,-31
 a00cf9c:	01400804 	movi	r5,32
 a00cfa0:	1408d83a 	srl	r4,r2,r16
 a00cfa4:	19405026 	beq	r3,r5,a00d0e8 <__subdf3+0x574>
 a00cfa8:	01401004 	movi	r5,64
 a00cfac:	28c7c83a 	sub	r3,r5,r3
 a00cfb0:	10c4983a 	sll	r2,r2,r3
 a00cfb4:	88a2b03a 	or	r17,r17,r2
 a00cfb8:	8822c03a 	cmpne	r17,r17,zero
 a00cfbc:	2462b03a 	or	r17,r4,r17
 a00cfc0:	0007883a 	mov	r3,zero
 a00cfc4:	0021883a 	mov	r16,zero
 a00cfc8:	003f6d06 	br	a00cd80 <__alt_mem_flash+0xfe00bd80>
 a00cfcc:	11fff804 	addi	r7,r2,-32
 a00cfd0:	01000804 	movi	r4,32
 a00cfd4:	29ced83a 	srl	r7,r5,r7
 a00cfd8:	11004526 	beq	r2,r4,a00d0f0 <__subdf3+0x57c>
 a00cfdc:	01001004 	movi	r4,64
 a00cfe0:	2089c83a 	sub	r4,r4,r2
 a00cfe4:	2904983a 	sll	r2,r5,r4
 a00cfe8:	118cb03a 	or	r6,r2,r6
 a00cfec:	300cc03a 	cmpne	r6,r6,zero
 a00cff0:	398cb03a 	or	r6,r7,r6
 a00cff4:	0005883a 	mov	r2,zero
 a00cff8:	003f3706 	br	a00ccd8 <__alt_mem_flash+0xfe00bcd8>
 a00cffc:	80002a26 	beq	r16,zero,a00d0a8 <__subdf3+0x534>
 a00d000:	0101ffc4 	movi	r4,2047
 a00d004:	49006626 	beq	r9,r4,a00d1a0 <__subdf3+0x62c>
 a00d008:	0085c83a 	sub	r2,zero,r2
 a00d00c:	18c02034 	orhi	r3,r3,128
 a00d010:	01000e04 	movi	r4,56
 a00d014:	20807e16 	blt	r4,r2,a00d210 <__subdf3+0x69c>
 a00d018:	010007c4 	movi	r4,31
 a00d01c:	2080e716 	blt	r4,r2,a00d3bc <__subdf3+0x848>
 a00d020:	01000804 	movi	r4,32
 a00d024:	2089c83a 	sub	r4,r4,r2
 a00d028:	1914983a 	sll	r10,r3,r4
 a00d02c:	8890d83a 	srl	r8,r17,r2
 a00d030:	8908983a 	sll	r4,r17,r4
 a00d034:	1884d83a 	srl	r2,r3,r2
 a00d038:	5222b03a 	or	r17,r10,r8
 a00d03c:	2006c03a 	cmpne	r3,r4,zero
 a00d040:	88e2b03a 	or	r17,r17,r3
 a00d044:	3463c83a 	sub	r17,r6,r17
 a00d048:	2885c83a 	sub	r2,r5,r2
 a00d04c:	344d803a 	cmpltu	r6,r6,r17
 a00d050:	1187c83a 	sub	r3,r2,r6
 a00d054:	4821883a 	mov	r16,r9
 a00d058:	3825883a 	mov	r18,r7
 a00d05c:	003f2306 	br	a00ccec <__alt_mem_flash+0xfe00bcec>
 a00d060:	24d0b03a 	or	r8,r4,r19
 a00d064:	40001b1e 	bne	r8,zero,a00d0d4 <__subdf3+0x560>
 a00d068:	0005883a 	mov	r2,zero
 a00d06c:	0009883a 	mov	r4,zero
 a00d070:	0021883a 	mov	r16,zero
 a00d074:	003f4906 	br	a00cd9c <__alt_mem_flash+0xfe00bd9c>
 a00d078:	010007c4 	movi	r4,31
 a00d07c:	20803a16 	blt	r4,r2,a00d168 <__subdf3+0x5f4>
 a00d080:	01000804 	movi	r4,32
 a00d084:	2089c83a 	sub	r4,r4,r2
 a00d088:	2912983a 	sll	r9,r5,r4
 a00d08c:	3090d83a 	srl	r8,r6,r2
 a00d090:	3108983a 	sll	r4,r6,r4
 a00d094:	2884d83a 	srl	r2,r5,r2
 a00d098:	4a12b03a 	or	r9,r9,r8
 a00d09c:	2008c03a 	cmpne	r4,r4,zero
 a00d0a0:	4912b03a 	or	r9,r9,r4
 a00d0a4:	003f4e06 	br	a00cde0 <__alt_mem_flash+0xfe00bde0>
 a00d0a8:	1c48b03a 	or	r4,r3,r17
 a00d0ac:	20003c26 	beq	r4,zero,a00d1a0 <__subdf3+0x62c>
 a00d0b0:	0084303a 	nor	r2,zero,r2
 a00d0b4:	1000381e 	bne	r2,zero,a00d198 <__subdf3+0x624>
 a00d0b8:	3463c83a 	sub	r17,r6,r17
 a00d0bc:	28c5c83a 	sub	r2,r5,r3
 a00d0c0:	344d803a 	cmpltu	r6,r6,r17
 a00d0c4:	1187c83a 	sub	r3,r2,r6
 a00d0c8:	4821883a 	mov	r16,r9
 a00d0cc:	3825883a 	mov	r18,r7
 a00d0d0:	003f0606 	br	a00ccec <__alt_mem_flash+0xfe00bcec>
 a00d0d4:	2023883a 	mov	r17,r4
 a00d0d8:	003f0906 	br	a00cd00 <__alt_mem_flash+0xfe00bd00>
 a00d0dc:	0101ffc4 	movi	r4,2047
 a00d0e0:	813f3a1e 	bne	r16,r4,a00cdcc <__alt_mem_flash+0xfe00bdcc>
 a00d0e4:	003ec406 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d0e8:	0005883a 	mov	r2,zero
 a00d0ec:	003fb106 	br	a00cfb4 <__alt_mem_flash+0xfe00bfb4>
 a00d0f0:	0005883a 	mov	r2,zero
 a00d0f4:	003fbc06 	br	a00cfe8 <__alt_mem_flash+0xfe00bfe8>
 a00d0f8:	1c44b03a 	or	r2,r3,r17
 a00d0fc:	80008e1e 	bne	r16,zero,a00d338 <__subdf3+0x7c4>
 a00d100:	1000c826 	beq	r2,zero,a00d424 <__subdf3+0x8b0>
 a00d104:	2984b03a 	or	r2,r5,r6
 a00d108:	103ebb26 	beq	r2,zero,a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d10c:	8989883a 	add	r4,r17,r6
 a00d110:	1945883a 	add	r2,r3,r5
 a00d114:	2447803a 	cmpltu	r3,r4,r17
 a00d118:	1887883a 	add	r3,r3,r2
 a00d11c:	1880202c 	andhi	r2,r3,128
 a00d120:	2023883a 	mov	r17,r4
 a00d124:	103f1626 	beq	r2,zero,a00cd80 <__alt_mem_flash+0xfe00bd80>
 a00d128:	00bfe034 	movhi	r2,65408
 a00d12c:	10bfffc4 	addi	r2,r2,-1
 a00d130:	5021883a 	mov	r16,r10
 a00d134:	1886703a 	and	r3,r3,r2
 a00d138:	003eaf06 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d13c:	3825883a 	mov	r18,r7
 a00d140:	003f0f06 	br	a00cd80 <__alt_mem_flash+0xfe00bd80>
 a00d144:	1c44b03a 	or	r2,r3,r17
 a00d148:	8000251e 	bne	r16,zero,a00d1e0 <__subdf3+0x66c>
 a00d14c:	1000661e 	bne	r2,zero,a00d2e8 <__subdf3+0x774>
 a00d150:	2990b03a 	or	r8,r5,r6
 a00d154:	40009626 	beq	r8,zero,a00d3b0 <__subdf3+0x83c>
 a00d158:	2807883a 	mov	r3,r5
 a00d15c:	3023883a 	mov	r17,r6
 a00d160:	3825883a 	mov	r18,r7
 a00d164:	003ea406 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d168:	127ff804 	addi	r9,r2,-32
 a00d16c:	01000804 	movi	r4,32
 a00d170:	2a52d83a 	srl	r9,r5,r9
 a00d174:	11008c26 	beq	r2,r4,a00d3a8 <__subdf3+0x834>
 a00d178:	01001004 	movi	r4,64
 a00d17c:	2085c83a 	sub	r2,r4,r2
 a00d180:	2884983a 	sll	r2,r5,r2
 a00d184:	118cb03a 	or	r6,r2,r6
 a00d188:	300cc03a 	cmpne	r6,r6,zero
 a00d18c:	4992b03a 	or	r9,r9,r6
 a00d190:	0005883a 	mov	r2,zero
 a00d194:	003f1206 	br	a00cde0 <__alt_mem_flash+0xfe00bde0>
 a00d198:	0101ffc4 	movi	r4,2047
 a00d19c:	493f9c1e 	bne	r9,r4,a00d010 <__alt_mem_flash+0xfe00c010>
 a00d1a0:	2807883a 	mov	r3,r5
 a00d1a4:	3023883a 	mov	r17,r6
 a00d1a8:	4821883a 	mov	r16,r9
 a00d1ac:	3825883a 	mov	r18,r7
 a00d1b0:	003e9106 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d1b4:	80001f1e 	bne	r16,zero,a00d234 <__subdf3+0x6c0>
 a00d1b8:	1c48b03a 	or	r4,r3,r17
 a00d1bc:	20005a26 	beq	r4,zero,a00d328 <__subdf3+0x7b4>
 a00d1c0:	0084303a 	nor	r2,zero,r2
 a00d1c4:	1000561e 	bne	r2,zero,a00d320 <__subdf3+0x7ac>
 a00d1c8:	89a3883a 	add	r17,r17,r6
 a00d1cc:	1945883a 	add	r2,r3,r5
 a00d1d0:	898d803a 	cmpltu	r6,r17,r6
 a00d1d4:	3087883a 	add	r3,r6,r2
 a00d1d8:	4821883a 	mov	r16,r9
 a00d1dc:	003f0506 	br	a00cdf4 <__alt_mem_flash+0xfe00bdf4>
 a00d1e0:	10002b1e 	bne	r2,zero,a00d290 <__subdf3+0x71c>
 a00d1e4:	2984b03a 	or	r2,r5,r6
 a00d1e8:	10008026 	beq	r2,zero,a00d3ec <__subdf3+0x878>
 a00d1ec:	2807883a 	mov	r3,r5
 a00d1f0:	3023883a 	mov	r17,r6
 a00d1f4:	3825883a 	mov	r18,r7
 a00d1f8:	0401ffc4 	movi	r16,2047
 a00d1fc:	003e7e06 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d200:	3809883a 	mov	r4,r7
 a00d204:	0011883a 	mov	r8,zero
 a00d208:	0005883a 	mov	r2,zero
 a00d20c:	003ee306 	br	a00cd9c <__alt_mem_flash+0xfe00bd9c>
 a00d210:	1c62b03a 	or	r17,r3,r17
 a00d214:	8822c03a 	cmpne	r17,r17,zero
 a00d218:	0005883a 	mov	r2,zero
 a00d21c:	003f8906 	br	a00d044 <__alt_mem_flash+0xfe00c044>
 a00d220:	3809883a 	mov	r4,r7
 a00d224:	4821883a 	mov	r16,r9
 a00d228:	0011883a 	mov	r8,zero
 a00d22c:	0005883a 	mov	r2,zero
 a00d230:	003eda06 	br	a00cd9c <__alt_mem_flash+0xfe00bd9c>
 a00d234:	0101ffc4 	movi	r4,2047
 a00d238:	49003b26 	beq	r9,r4,a00d328 <__subdf3+0x7b4>
 a00d23c:	0085c83a 	sub	r2,zero,r2
 a00d240:	18c02034 	orhi	r3,r3,128
 a00d244:	01000e04 	movi	r4,56
 a00d248:	20806e16 	blt	r4,r2,a00d404 <__subdf3+0x890>
 a00d24c:	010007c4 	movi	r4,31
 a00d250:	20807716 	blt	r4,r2,a00d430 <__subdf3+0x8bc>
 a00d254:	01000804 	movi	r4,32
 a00d258:	2089c83a 	sub	r4,r4,r2
 a00d25c:	1914983a 	sll	r10,r3,r4
 a00d260:	8890d83a 	srl	r8,r17,r2
 a00d264:	8908983a 	sll	r4,r17,r4
 a00d268:	1884d83a 	srl	r2,r3,r2
 a00d26c:	5222b03a 	or	r17,r10,r8
 a00d270:	2006c03a 	cmpne	r3,r4,zero
 a00d274:	88e2b03a 	or	r17,r17,r3
 a00d278:	89a3883a 	add	r17,r17,r6
 a00d27c:	1145883a 	add	r2,r2,r5
 a00d280:	898d803a 	cmpltu	r6,r17,r6
 a00d284:	3087883a 	add	r3,r6,r2
 a00d288:	4821883a 	mov	r16,r9
 a00d28c:	003ed906 	br	a00cdf4 <__alt_mem_flash+0xfe00bdf4>
 a00d290:	2984b03a 	or	r2,r5,r6
 a00d294:	10004226 	beq	r2,zero,a00d3a0 <__subdf3+0x82c>
 a00d298:	1808d0fa 	srli	r4,r3,3
 a00d29c:	8822d0fa 	srli	r17,r17,3
 a00d2a0:	1806977a 	slli	r3,r3,29
 a00d2a4:	2080022c 	andhi	r2,r4,8
 a00d2a8:	1c62b03a 	or	r17,r3,r17
 a00d2ac:	10000826 	beq	r2,zero,a00d2d0 <__subdf3+0x75c>
 a00d2b0:	2812d0fa 	srli	r9,r5,3
 a00d2b4:	4880022c 	andhi	r2,r9,8
 a00d2b8:	1000051e 	bne	r2,zero,a00d2d0 <__subdf3+0x75c>
 a00d2bc:	300cd0fa 	srli	r6,r6,3
 a00d2c0:	2804977a 	slli	r2,r5,29
 a00d2c4:	4809883a 	mov	r4,r9
 a00d2c8:	3825883a 	mov	r18,r7
 a00d2cc:	11a2b03a 	or	r17,r2,r6
 a00d2d0:	8806d77a 	srli	r3,r17,29
 a00d2d4:	200890fa 	slli	r4,r4,3
 a00d2d8:	882290fa 	slli	r17,r17,3
 a00d2dc:	0401ffc4 	movi	r16,2047
 a00d2e0:	1906b03a 	or	r3,r3,r4
 a00d2e4:	003e4406 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d2e8:	2984b03a 	or	r2,r5,r6
 a00d2ec:	103e4226 	beq	r2,zero,a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d2f0:	8989c83a 	sub	r4,r17,r6
 a00d2f4:	8911803a 	cmpltu	r8,r17,r4
 a00d2f8:	1945c83a 	sub	r2,r3,r5
 a00d2fc:	1205c83a 	sub	r2,r2,r8
 a00d300:	1200202c 	andhi	r8,r2,128
 a00d304:	403e9a26 	beq	r8,zero,a00cd70 <__alt_mem_flash+0xfe00bd70>
 a00d308:	3463c83a 	sub	r17,r6,r17
 a00d30c:	28c5c83a 	sub	r2,r5,r3
 a00d310:	344d803a 	cmpltu	r6,r6,r17
 a00d314:	1187c83a 	sub	r3,r2,r6
 a00d318:	3825883a 	mov	r18,r7
 a00d31c:	003e3606 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d320:	0101ffc4 	movi	r4,2047
 a00d324:	493fc71e 	bne	r9,r4,a00d244 <__alt_mem_flash+0xfe00c244>
 a00d328:	2807883a 	mov	r3,r5
 a00d32c:	3023883a 	mov	r17,r6
 a00d330:	4821883a 	mov	r16,r9
 a00d334:	003e3006 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d338:	10003626 	beq	r2,zero,a00d414 <__subdf3+0x8a0>
 a00d33c:	2984b03a 	or	r2,r5,r6
 a00d340:	10001726 	beq	r2,zero,a00d3a0 <__subdf3+0x82c>
 a00d344:	1808d0fa 	srli	r4,r3,3
 a00d348:	8822d0fa 	srli	r17,r17,3
 a00d34c:	1806977a 	slli	r3,r3,29
 a00d350:	2080022c 	andhi	r2,r4,8
 a00d354:	1c62b03a 	or	r17,r3,r17
 a00d358:	10000726 	beq	r2,zero,a00d378 <__subdf3+0x804>
 a00d35c:	2812d0fa 	srli	r9,r5,3
 a00d360:	4880022c 	andhi	r2,r9,8
 a00d364:	1000041e 	bne	r2,zero,a00d378 <__subdf3+0x804>
 a00d368:	300cd0fa 	srli	r6,r6,3
 a00d36c:	2804977a 	slli	r2,r5,29
 a00d370:	4809883a 	mov	r4,r9
 a00d374:	11a2b03a 	or	r17,r2,r6
 a00d378:	8806d77a 	srli	r3,r17,29
 a00d37c:	200890fa 	slli	r4,r4,3
 a00d380:	882290fa 	slli	r17,r17,3
 a00d384:	3825883a 	mov	r18,r7
 a00d388:	1906b03a 	or	r3,r3,r4
 a00d38c:	0401ffc4 	movi	r16,2047
 a00d390:	003e1906 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d394:	000b883a 	mov	r5,zero
 a00d398:	0005883a 	mov	r2,zero
 a00d39c:	003e2e06 	br	a00cc58 <__alt_mem_flash+0xfe00bc58>
 a00d3a0:	0401ffc4 	movi	r16,2047
 a00d3a4:	003e1406 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d3a8:	0005883a 	mov	r2,zero
 a00d3ac:	003f7506 	br	a00d184 <__alt_mem_flash+0xfe00c184>
 a00d3b0:	0005883a 	mov	r2,zero
 a00d3b4:	0009883a 	mov	r4,zero
 a00d3b8:	003e7806 	br	a00cd9c <__alt_mem_flash+0xfe00bd9c>
 a00d3bc:	123ff804 	addi	r8,r2,-32
 a00d3c0:	01000804 	movi	r4,32
 a00d3c4:	1a10d83a 	srl	r8,r3,r8
 a00d3c8:	11002526 	beq	r2,r4,a00d460 <__subdf3+0x8ec>
 a00d3cc:	01001004 	movi	r4,64
 a00d3d0:	2085c83a 	sub	r2,r4,r2
 a00d3d4:	1884983a 	sll	r2,r3,r2
 a00d3d8:	1444b03a 	or	r2,r2,r17
 a00d3dc:	1004c03a 	cmpne	r2,r2,zero
 a00d3e0:	40a2b03a 	or	r17,r8,r2
 a00d3e4:	0005883a 	mov	r2,zero
 a00d3e8:	003f1606 	br	a00d044 <__alt_mem_flash+0xfe00c044>
 a00d3ec:	02000434 	movhi	r8,16
 a00d3f0:	0009883a 	mov	r4,zero
 a00d3f4:	423fffc4 	addi	r8,r8,-1
 a00d3f8:	00bfffc4 	movi	r2,-1
 a00d3fc:	0401ffc4 	movi	r16,2047
 a00d400:	003e6606 	br	a00cd9c <__alt_mem_flash+0xfe00bd9c>
 a00d404:	1c62b03a 	or	r17,r3,r17
 a00d408:	8822c03a 	cmpne	r17,r17,zero
 a00d40c:	0005883a 	mov	r2,zero
 a00d410:	003f9906 	br	a00d278 <__alt_mem_flash+0xfe00c278>
 a00d414:	2807883a 	mov	r3,r5
 a00d418:	3023883a 	mov	r17,r6
 a00d41c:	0401ffc4 	movi	r16,2047
 a00d420:	003df506 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d424:	2807883a 	mov	r3,r5
 a00d428:	3023883a 	mov	r17,r6
 a00d42c:	003df206 	br	a00cbf8 <__alt_mem_flash+0xfe00bbf8>
 a00d430:	123ff804 	addi	r8,r2,-32
 a00d434:	01000804 	movi	r4,32
 a00d438:	1a10d83a 	srl	r8,r3,r8
 a00d43c:	11000a26 	beq	r2,r4,a00d468 <__subdf3+0x8f4>
 a00d440:	01001004 	movi	r4,64
 a00d444:	2085c83a 	sub	r2,r4,r2
 a00d448:	1884983a 	sll	r2,r3,r2
 a00d44c:	1444b03a 	or	r2,r2,r17
 a00d450:	1004c03a 	cmpne	r2,r2,zero
 a00d454:	40a2b03a 	or	r17,r8,r2
 a00d458:	0005883a 	mov	r2,zero
 a00d45c:	003f8606 	br	a00d278 <__alt_mem_flash+0xfe00c278>
 a00d460:	0005883a 	mov	r2,zero
 a00d464:	003fdc06 	br	a00d3d8 <__alt_mem_flash+0xfe00c3d8>
 a00d468:	0005883a 	mov	r2,zero
 a00d46c:	003ff706 	br	a00d44c <__alt_mem_flash+0xfe00c44c>

0a00d470 <__fixdfsi>:
 a00d470:	280cd53a 	srli	r6,r5,20
 a00d474:	00c00434 	movhi	r3,16
 a00d478:	18ffffc4 	addi	r3,r3,-1
 a00d47c:	3181ffcc 	andi	r6,r6,2047
 a00d480:	01c0ff84 	movi	r7,1022
 a00d484:	28c6703a 	and	r3,r5,r3
 a00d488:	280ad7fa 	srli	r5,r5,31
 a00d48c:	3980120e 	bge	r7,r6,a00d4d8 <__fixdfsi+0x68>
 a00d490:	00810744 	movi	r2,1053
 a00d494:	11800c16 	blt	r2,r6,a00d4c8 <__fixdfsi+0x58>
 a00d498:	00810cc4 	movi	r2,1075
 a00d49c:	1185c83a 	sub	r2,r2,r6
 a00d4a0:	01c007c4 	movi	r7,31
 a00d4a4:	18c00434 	orhi	r3,r3,16
 a00d4a8:	38800d16 	blt	r7,r2,a00d4e0 <__fixdfsi+0x70>
 a00d4ac:	31befb44 	addi	r6,r6,-1043
 a00d4b0:	2084d83a 	srl	r2,r4,r2
 a00d4b4:	1986983a 	sll	r3,r3,r6
 a00d4b8:	1884b03a 	or	r2,r3,r2
 a00d4bc:	28000726 	beq	r5,zero,a00d4dc <__fixdfsi+0x6c>
 a00d4c0:	0085c83a 	sub	r2,zero,r2
 a00d4c4:	f800283a 	ret
 a00d4c8:	00a00034 	movhi	r2,32768
 a00d4cc:	10bfffc4 	addi	r2,r2,-1
 a00d4d0:	2885883a 	add	r2,r5,r2
 a00d4d4:	f800283a 	ret
 a00d4d8:	0005883a 	mov	r2,zero
 a00d4dc:	f800283a 	ret
 a00d4e0:	008104c4 	movi	r2,1043
 a00d4e4:	1185c83a 	sub	r2,r2,r6
 a00d4e8:	1884d83a 	srl	r2,r3,r2
 a00d4ec:	003ff306 	br	a00d4bc <__alt_mem_flash+0xfe00c4bc>

0a00d4f0 <__floatunsidf>:
 a00d4f0:	defffe04 	addi	sp,sp,-8
 a00d4f4:	dc000015 	stw	r16,0(sp)
 a00d4f8:	dfc00115 	stw	ra,4(sp)
 a00d4fc:	2021883a 	mov	r16,r4
 a00d500:	20002226 	beq	r4,zero,a00d58c <__floatunsidf+0x9c>
 a00d504:	a0019400 	call	a001940 <__clzsi2>
 a00d508:	01010784 	movi	r4,1054
 a00d50c:	2089c83a 	sub	r4,r4,r2
 a00d510:	01810cc4 	movi	r6,1075
 a00d514:	310dc83a 	sub	r6,r6,r4
 a00d518:	00c007c4 	movi	r3,31
 a00d51c:	1980120e 	bge	r3,r6,a00d568 <__floatunsidf+0x78>
 a00d520:	00c104c4 	movi	r3,1043
 a00d524:	1907c83a 	sub	r3,r3,r4
 a00d528:	80ca983a 	sll	r5,r16,r3
 a00d52c:	00800434 	movhi	r2,16
 a00d530:	10bfffc4 	addi	r2,r2,-1
 a00d534:	2101ffcc 	andi	r4,r4,2047
 a00d538:	0021883a 	mov	r16,zero
 a00d53c:	288a703a 	and	r5,r5,r2
 a00d540:	2008953a 	slli	r4,r4,20
 a00d544:	00c00434 	movhi	r3,16
 a00d548:	18ffffc4 	addi	r3,r3,-1
 a00d54c:	28c6703a 	and	r3,r5,r3
 a00d550:	8005883a 	mov	r2,r16
 a00d554:	1906b03a 	or	r3,r3,r4
 a00d558:	dfc00117 	ldw	ra,4(sp)
 a00d55c:	dc000017 	ldw	r16,0(sp)
 a00d560:	dec00204 	addi	sp,sp,8
 a00d564:	f800283a 	ret
 a00d568:	00c002c4 	movi	r3,11
 a00d56c:	188bc83a 	sub	r5,r3,r2
 a00d570:	814ad83a 	srl	r5,r16,r5
 a00d574:	00c00434 	movhi	r3,16
 a00d578:	18ffffc4 	addi	r3,r3,-1
 a00d57c:	81a0983a 	sll	r16,r16,r6
 a00d580:	2101ffcc 	andi	r4,r4,2047
 a00d584:	28ca703a 	and	r5,r5,r3
 a00d588:	003fed06 	br	a00d540 <__alt_mem_flash+0xfe00c540>
 a00d58c:	0009883a 	mov	r4,zero
 a00d590:	000b883a 	mov	r5,zero
 a00d594:	003fea06 	br	a00d540 <__alt_mem_flash+0xfe00c540>

0a00d598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00d598:	defffe04 	addi	sp,sp,-8
 a00d59c:	dfc00115 	stw	ra,4(sp)
 a00d5a0:	df000015 	stw	fp,0(sp)
 a00d5a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00d5a8:	d0a00b17 	ldw	r2,-32724(gp)
 a00d5ac:	10000326 	beq	r2,zero,a00d5bc <alt_get_errno+0x24>
 a00d5b0:	d0a00b17 	ldw	r2,-32724(gp)
 a00d5b4:	103ee83a 	callr	r2
 a00d5b8:	00000106 	br	a00d5c0 <alt_get_errno+0x28>
 a00d5bc:	d0a74404 	addi	r2,gp,-25328
}
 a00d5c0:	e037883a 	mov	sp,fp
 a00d5c4:	dfc00117 	ldw	ra,4(sp)
 a00d5c8:	df000017 	ldw	fp,0(sp)
 a00d5cc:	dec00204 	addi	sp,sp,8
 a00d5d0:	f800283a 	ret

0a00d5d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 a00d5d4:	defffb04 	addi	sp,sp,-20
 a00d5d8:	dfc00415 	stw	ra,16(sp)
 a00d5dc:	df000315 	stw	fp,12(sp)
 a00d5e0:	df000304 	addi	fp,sp,12
 a00d5e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 a00d5e8:	e0bfff17 	ldw	r2,-4(fp)
 a00d5ec:	10000816 	blt	r2,zero,a00d610 <close+0x3c>
 a00d5f0:	01400304 	movi	r5,12
 a00d5f4:	e13fff17 	ldw	r4,-4(fp)
 a00d5f8:	a0019a40 	call	a0019a4 <__mulsi3>
 a00d5fc:	1007883a 	mov	r3,r2
 a00d600:	00828074 	movhi	r2,2561
 a00d604:	1089b804 	addi	r2,r2,9952
 a00d608:	1885883a 	add	r2,r3,r2
 a00d60c:	00000106 	br	a00d614 <close+0x40>
 a00d610:	0005883a 	mov	r2,zero
 a00d614:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 a00d618:	e0bffd17 	ldw	r2,-12(fp)
 a00d61c:	10001926 	beq	r2,zero,a00d684 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 a00d620:	e0bffd17 	ldw	r2,-12(fp)
 a00d624:	10800017 	ldw	r2,0(r2)
 a00d628:	10800417 	ldw	r2,16(r2)
 a00d62c:	10000626 	beq	r2,zero,a00d648 <close+0x74>
 a00d630:	e0bffd17 	ldw	r2,-12(fp)
 a00d634:	10800017 	ldw	r2,0(r2)
 a00d638:	10800417 	ldw	r2,16(r2)
 a00d63c:	e13ffd17 	ldw	r4,-12(fp)
 a00d640:	103ee83a 	callr	r2
 a00d644:	00000106 	br	a00d64c <close+0x78>
 a00d648:	0005883a 	mov	r2,zero
 a00d64c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 a00d650:	e13fff17 	ldw	r4,-4(fp)
 a00d654:	a00dcbc0 	call	a00dcbc <alt_release_fd>
    if (rval < 0)
 a00d658:	e0bffe17 	ldw	r2,-8(fp)
 a00d65c:	1000070e 	bge	r2,zero,a00d67c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 a00d660:	a00d5980 	call	a00d598 <alt_get_errno>
 a00d664:	1007883a 	mov	r3,r2
 a00d668:	e0bffe17 	ldw	r2,-8(fp)
 a00d66c:	0085c83a 	sub	r2,zero,r2
 a00d670:	18800015 	stw	r2,0(r3)
      return -1;
 a00d674:	00bfffc4 	movi	r2,-1
 a00d678:	00000706 	br	a00d698 <close+0xc4>
    }
    return 0;
 a00d67c:	0005883a 	mov	r2,zero
 a00d680:	00000506 	br	a00d698 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 a00d684:	a00d5980 	call	a00d598 <alt_get_errno>
 a00d688:	1007883a 	mov	r3,r2
 a00d68c:	00801444 	movi	r2,81
 a00d690:	18800015 	stw	r2,0(r3)
    return -1;
 a00d694:	00bfffc4 	movi	r2,-1
  }
}
 a00d698:	e037883a 	mov	sp,fp
 a00d69c:	dfc00117 	ldw	ra,4(sp)
 a00d6a0:	df000017 	ldw	fp,0(sp)
 a00d6a4:	dec00204 	addi	sp,sp,8
 a00d6a8:	f800283a 	ret

0a00d6ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 a00d6ac:	defffc04 	addi	sp,sp,-16
 a00d6b0:	df000315 	stw	fp,12(sp)
 a00d6b4:	df000304 	addi	fp,sp,12
 a00d6b8:	e13ffd15 	stw	r4,-12(fp)
 a00d6bc:	e17ffe15 	stw	r5,-8(fp)
 a00d6c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 a00d6c4:	e0bfff17 	ldw	r2,-4(fp)
}
 a00d6c8:	e037883a 	mov	sp,fp
 a00d6cc:	df000017 	ldw	fp,0(sp)
 a00d6d0:	dec00104 	addi	sp,sp,4
 a00d6d4:	f800283a 	ret

0a00d6d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00d6d8:	defffe04 	addi	sp,sp,-8
 a00d6dc:	dfc00115 	stw	ra,4(sp)
 a00d6e0:	df000015 	stw	fp,0(sp)
 a00d6e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00d6e8:	d0a00b17 	ldw	r2,-32724(gp)
 a00d6ec:	10000326 	beq	r2,zero,a00d6fc <alt_get_errno+0x24>
 a00d6f0:	d0a00b17 	ldw	r2,-32724(gp)
 a00d6f4:	103ee83a 	callr	r2
 a00d6f8:	00000106 	br	a00d700 <alt_get_errno+0x28>
 a00d6fc:	d0a74404 	addi	r2,gp,-25328
}
 a00d700:	e037883a 	mov	sp,fp
 a00d704:	dfc00117 	ldw	ra,4(sp)
 a00d708:	df000017 	ldw	fp,0(sp)
 a00d70c:	dec00204 	addi	sp,sp,8
 a00d710:	f800283a 	ret

0a00d714 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 a00d714:	defffb04 	addi	sp,sp,-20
 a00d718:	dfc00415 	stw	ra,16(sp)
 a00d71c:	df000315 	stw	fp,12(sp)
 a00d720:	df000304 	addi	fp,sp,12
 a00d724:	e13ffe15 	stw	r4,-8(fp)
 a00d728:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a00d72c:	e0bffe17 	ldw	r2,-8(fp)
 a00d730:	10000816 	blt	r2,zero,a00d754 <fstat+0x40>
 a00d734:	01400304 	movi	r5,12
 a00d738:	e13ffe17 	ldw	r4,-8(fp)
 a00d73c:	a0019a40 	call	a0019a4 <__mulsi3>
 a00d740:	1007883a 	mov	r3,r2
 a00d744:	00828074 	movhi	r2,2561
 a00d748:	1089b804 	addi	r2,r2,9952
 a00d74c:	1885883a 	add	r2,r3,r2
 a00d750:	00000106 	br	a00d758 <fstat+0x44>
 a00d754:	0005883a 	mov	r2,zero
 a00d758:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 a00d75c:	e0bffd17 	ldw	r2,-12(fp)
 a00d760:	10001026 	beq	r2,zero,a00d7a4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 a00d764:	e0bffd17 	ldw	r2,-12(fp)
 a00d768:	10800017 	ldw	r2,0(r2)
 a00d76c:	10800817 	ldw	r2,32(r2)
 a00d770:	10000726 	beq	r2,zero,a00d790 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 a00d774:	e0bffd17 	ldw	r2,-12(fp)
 a00d778:	10800017 	ldw	r2,0(r2)
 a00d77c:	10800817 	ldw	r2,32(r2)
 a00d780:	e17fff17 	ldw	r5,-4(fp)
 a00d784:	e13ffd17 	ldw	r4,-12(fp)
 a00d788:	103ee83a 	callr	r2
 a00d78c:	00000a06 	br	a00d7b8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 a00d790:	e0bfff17 	ldw	r2,-4(fp)
 a00d794:	00c80004 	movi	r3,8192
 a00d798:	10c00115 	stw	r3,4(r2)
      return 0;
 a00d79c:	0005883a 	mov	r2,zero
 a00d7a0:	00000506 	br	a00d7b8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 a00d7a4:	a00d6d80 	call	a00d6d8 <alt_get_errno>
 a00d7a8:	1007883a 	mov	r3,r2
 a00d7ac:	00801444 	movi	r2,81
 a00d7b0:	18800015 	stw	r2,0(r3)
    return -1;
 a00d7b4:	00bfffc4 	movi	r2,-1
  }
}
 a00d7b8:	e037883a 	mov	sp,fp
 a00d7bc:	dfc00117 	ldw	ra,4(sp)
 a00d7c0:	df000017 	ldw	fp,0(sp)
 a00d7c4:	dec00204 	addi	sp,sp,8
 a00d7c8:	f800283a 	ret

0a00d7cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00d7cc:	defffe04 	addi	sp,sp,-8
 a00d7d0:	dfc00115 	stw	ra,4(sp)
 a00d7d4:	df000015 	stw	fp,0(sp)
 a00d7d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00d7dc:	d0a00b17 	ldw	r2,-32724(gp)
 a00d7e0:	10000326 	beq	r2,zero,a00d7f0 <alt_get_errno+0x24>
 a00d7e4:	d0a00b17 	ldw	r2,-32724(gp)
 a00d7e8:	103ee83a 	callr	r2
 a00d7ec:	00000106 	br	a00d7f4 <alt_get_errno+0x28>
 a00d7f0:	d0a74404 	addi	r2,gp,-25328
}
 a00d7f4:	e037883a 	mov	sp,fp
 a00d7f8:	dfc00117 	ldw	ra,4(sp)
 a00d7fc:	df000017 	ldw	fp,0(sp)
 a00d800:	dec00204 	addi	sp,sp,8
 a00d804:	f800283a 	ret

0a00d808 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 a00d808:	deffed04 	addi	sp,sp,-76
 a00d80c:	dfc01215 	stw	ra,72(sp)
 a00d810:	df001115 	stw	fp,68(sp)
 a00d814:	df001104 	addi	fp,sp,68
 a00d818:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a00d81c:	e0bfff17 	ldw	r2,-4(fp)
 a00d820:	10000816 	blt	r2,zero,a00d844 <isatty+0x3c>
 a00d824:	01400304 	movi	r5,12
 a00d828:	e13fff17 	ldw	r4,-4(fp)
 a00d82c:	a0019a40 	call	a0019a4 <__mulsi3>
 a00d830:	1007883a 	mov	r3,r2
 a00d834:	00828074 	movhi	r2,2561
 a00d838:	1089b804 	addi	r2,r2,9952
 a00d83c:	1885883a 	add	r2,r3,r2
 a00d840:	00000106 	br	a00d848 <isatty+0x40>
 a00d844:	0005883a 	mov	r2,zero
 a00d848:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 a00d84c:	e0bfef17 	ldw	r2,-68(fp)
 a00d850:	10000e26 	beq	r2,zero,a00d88c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 a00d854:	e0bfef17 	ldw	r2,-68(fp)
 a00d858:	10800017 	ldw	r2,0(r2)
 a00d85c:	10800817 	ldw	r2,32(r2)
 a00d860:	1000021e 	bne	r2,zero,a00d86c <isatty+0x64>
    {
      return 1;
 a00d864:	00800044 	movi	r2,1
 a00d868:	00000d06 	br	a00d8a0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 a00d86c:	e0bff004 	addi	r2,fp,-64
 a00d870:	100b883a 	mov	r5,r2
 a00d874:	e13fff17 	ldw	r4,-4(fp)
 a00d878:	a00d7140 	call	a00d714 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 a00d87c:	e0bff117 	ldw	r2,-60(fp)
 a00d880:	10880020 	cmpeqi	r2,r2,8192
 a00d884:	10803fcc 	andi	r2,r2,255
 a00d888:	00000506 	br	a00d8a0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 a00d88c:	a00d7cc0 	call	a00d7cc <alt_get_errno>
 a00d890:	1007883a 	mov	r3,r2
 a00d894:	00801444 	movi	r2,81
 a00d898:	18800015 	stw	r2,0(r3)
    return 0;
 a00d89c:	0005883a 	mov	r2,zero
  }
}
 a00d8a0:	e037883a 	mov	sp,fp
 a00d8a4:	dfc00117 	ldw	ra,4(sp)
 a00d8a8:	df000017 	ldw	fp,0(sp)
 a00d8ac:	dec00204 	addi	sp,sp,8
 a00d8b0:	f800283a 	ret

0a00d8b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 a00d8b4:	defffc04 	addi	sp,sp,-16
 a00d8b8:	df000315 	stw	fp,12(sp)
 a00d8bc:	df000304 	addi	fp,sp,12
 a00d8c0:	e13ffd15 	stw	r4,-12(fp)
 a00d8c4:	e17ffe15 	stw	r5,-8(fp)
 a00d8c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 a00d8cc:	e0fffe17 	ldw	r3,-8(fp)
 a00d8d0:	e0bffd17 	ldw	r2,-12(fp)
 a00d8d4:	18800c26 	beq	r3,r2,a00d908 <alt_load_section+0x54>
  {
    while( to != end )
 a00d8d8:	00000806 	br	a00d8fc <alt_load_section+0x48>
    {
      *to++ = *from++;
 a00d8dc:	e0bffe17 	ldw	r2,-8(fp)
 a00d8e0:	10c00104 	addi	r3,r2,4
 a00d8e4:	e0fffe15 	stw	r3,-8(fp)
 a00d8e8:	e0fffd17 	ldw	r3,-12(fp)
 a00d8ec:	19000104 	addi	r4,r3,4
 a00d8f0:	e13ffd15 	stw	r4,-12(fp)
 a00d8f4:	18c00017 	ldw	r3,0(r3)
 a00d8f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 a00d8fc:	e0fffe17 	ldw	r3,-8(fp)
 a00d900:	e0bfff17 	ldw	r2,-4(fp)
 a00d904:	18bff51e 	bne	r3,r2,a00d8dc <__alt_mem_flash+0xfe00c8dc>
    {
      *to++ = *from++;
    }
  }
}
 a00d908:	0001883a 	nop
 a00d90c:	e037883a 	mov	sp,fp
 a00d910:	df000017 	ldw	fp,0(sp)
 a00d914:	dec00104 	addi	sp,sp,4
 a00d918:	f800283a 	ret

0a00d91c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 a00d91c:	defffe04 	addi	sp,sp,-8
 a00d920:	dfc00115 	stw	ra,4(sp)
 a00d924:	df000015 	stw	fp,0(sp)
 a00d928:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 a00d92c:	01828074 	movhi	r6,2561
 a00d930:	318eb104 	addi	r6,r6,15044
 a00d934:	01428074 	movhi	r5,2561
 a00d938:	29478504 	addi	r5,r5,7700
 a00d93c:	01028074 	movhi	r4,2561
 a00d940:	210eb104 	addi	r4,r4,15044
 a00d944:	a00d8b40 	call	a00d8b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 a00d948:	01828034 	movhi	r6,2560
 a00d94c:	31808404 	addi	r6,r6,528
 a00d950:	01428034 	movhi	r5,2560
 a00d954:	29400004 	addi	r5,r5,0
 a00d958:	01028034 	movhi	r4,2560
 a00d95c:	21000004 	addi	r4,r4,0
 a00d960:	a00d8b40 	call	a00d8b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 a00d964:	01828074 	movhi	r6,2561
 a00d968:	31878504 	addi	r6,r6,7700
 a00d96c:	01428074 	movhi	r5,2561
 a00d970:	2946af04 	addi	r5,r5,6844
 a00d974:	01028074 	movhi	r4,2561
 a00d978:	2106af04 	addi	r4,r4,6844
 a00d97c:	a00d8b40 	call	a00d8b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 a00d980:	a01074c0 	call	a01074c <alt_dcache_flush_all>
  alt_icache_flush_all();
 a00d984:	a0109c80 	call	a0109c8 <alt_icache_flush_all>
}
 a00d988:	0001883a 	nop
 a00d98c:	e037883a 	mov	sp,fp
 a00d990:	dfc00117 	ldw	ra,4(sp)
 a00d994:	df000017 	ldw	fp,0(sp)
 a00d998:	dec00204 	addi	sp,sp,8
 a00d99c:	f800283a 	ret

0a00d9a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00d9a0:	defffe04 	addi	sp,sp,-8
 a00d9a4:	dfc00115 	stw	ra,4(sp)
 a00d9a8:	df000015 	stw	fp,0(sp)
 a00d9ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00d9b0:	d0a00b17 	ldw	r2,-32724(gp)
 a00d9b4:	10000326 	beq	r2,zero,a00d9c4 <alt_get_errno+0x24>
 a00d9b8:	d0a00b17 	ldw	r2,-32724(gp)
 a00d9bc:	103ee83a 	callr	r2
 a00d9c0:	00000106 	br	a00d9c8 <alt_get_errno+0x28>
 a00d9c4:	d0a74404 	addi	r2,gp,-25328
}
 a00d9c8:	e037883a 	mov	sp,fp
 a00d9cc:	dfc00117 	ldw	ra,4(sp)
 a00d9d0:	df000017 	ldw	fp,0(sp)
 a00d9d4:	dec00204 	addi	sp,sp,8
 a00d9d8:	f800283a 	ret

0a00d9dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 a00d9dc:	defff904 	addi	sp,sp,-28
 a00d9e0:	dfc00615 	stw	ra,24(sp)
 a00d9e4:	df000515 	stw	fp,20(sp)
 a00d9e8:	df000504 	addi	fp,sp,20
 a00d9ec:	e13ffd15 	stw	r4,-12(fp)
 a00d9f0:	e17ffe15 	stw	r5,-8(fp)
 a00d9f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 a00d9f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a00d9fc:	e0bffd17 	ldw	r2,-12(fp)
 a00da00:	10000816 	blt	r2,zero,a00da24 <lseek+0x48>
 a00da04:	01400304 	movi	r5,12
 a00da08:	e13ffd17 	ldw	r4,-12(fp)
 a00da0c:	a0019a40 	call	a0019a4 <__mulsi3>
 a00da10:	1007883a 	mov	r3,r2
 a00da14:	00828074 	movhi	r2,2561
 a00da18:	1089b804 	addi	r2,r2,9952
 a00da1c:	1885883a 	add	r2,r3,r2
 a00da20:	00000106 	br	a00da28 <lseek+0x4c>
 a00da24:	0005883a 	mov	r2,zero
 a00da28:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 a00da2c:	e0bffc17 	ldw	r2,-16(fp)
 a00da30:	10001026 	beq	r2,zero,a00da74 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 a00da34:	e0bffc17 	ldw	r2,-16(fp)
 a00da38:	10800017 	ldw	r2,0(r2)
 a00da3c:	10800717 	ldw	r2,28(r2)
 a00da40:	10000926 	beq	r2,zero,a00da68 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 a00da44:	e0bffc17 	ldw	r2,-16(fp)
 a00da48:	10800017 	ldw	r2,0(r2)
 a00da4c:	10800717 	ldw	r2,28(r2)
 a00da50:	e1bfff17 	ldw	r6,-4(fp)
 a00da54:	e17ffe17 	ldw	r5,-8(fp)
 a00da58:	e13ffc17 	ldw	r4,-16(fp)
 a00da5c:	103ee83a 	callr	r2
 a00da60:	e0bffb15 	stw	r2,-20(fp)
 a00da64:	00000506 	br	a00da7c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 a00da68:	00bfde84 	movi	r2,-134
 a00da6c:	e0bffb15 	stw	r2,-20(fp)
 a00da70:	00000206 	br	a00da7c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 a00da74:	00bfebc4 	movi	r2,-81
 a00da78:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 a00da7c:	e0bffb17 	ldw	r2,-20(fp)
 a00da80:	1000070e 	bge	r2,zero,a00daa0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 a00da84:	a00d9a00 	call	a00d9a0 <alt_get_errno>
 a00da88:	1007883a 	mov	r3,r2
 a00da8c:	e0bffb17 	ldw	r2,-20(fp)
 a00da90:	0085c83a 	sub	r2,zero,r2
 a00da94:	18800015 	stw	r2,0(r3)
    rc = -1;
 a00da98:	00bfffc4 	movi	r2,-1
 a00da9c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 a00daa0:	e0bffb17 	ldw	r2,-20(fp)
}
 a00daa4:	e037883a 	mov	sp,fp
 a00daa8:	dfc00117 	ldw	ra,4(sp)
 a00daac:	df000017 	ldw	fp,0(sp)
 a00dab0:	dec00204 	addi	sp,sp,8
 a00dab4:	f800283a 	ret

0a00dab8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 a00dab8:	defffd04 	addi	sp,sp,-12
 a00dabc:	dfc00215 	stw	ra,8(sp)
 a00dac0:	df000115 	stw	fp,4(sp)
 a00dac4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 a00dac8:	0009883a 	mov	r4,zero
 a00dacc:	a00df900 	call	a00df90 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 a00dad0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 a00dad4:	a00dfc80 	call	a00dfc8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 a00dad8:	01828074 	movhi	r6,2561
 a00dadc:	31876f04 	addi	r6,r6,7612
 a00dae0:	01428074 	movhi	r5,2561
 a00dae4:	29477204 	addi	r5,r5,7624
 a00dae8:	01028074 	movhi	r4,2561
 a00daec:	21077204 	addi	r4,r4,7624
 a00daf0:	a010d6c0 	call	a010d6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 a00daf4:	a01084c0 	call	a01084c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 a00daf8:	01028074 	movhi	r4,2561
 a00dafc:	21022b04 	addi	r4,r4,2220
 a00db00:	a0117280 	call	a011728 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 a00db04:	d0a74517 	ldw	r2,-25324(gp)
 a00db08:	d0e74617 	ldw	r3,-25320(gp)
 a00db0c:	d1274717 	ldw	r4,-25316(gp)
 a00db10:	200d883a 	mov	r6,r4
 a00db14:	180b883a 	mov	r5,r3
 a00db18:	1009883a 	mov	r4,r2
 a00db1c:	a00024c0 	call	a00024c <main>
 a00db20:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 a00db24:	01000044 	movi	r4,1
 a00db28:	a00d5d40 	call	a00d5d4 <close>
  exit (result);
 a00db2c:	e13fff17 	ldw	r4,-4(fp)
 a00db30:	a01173c0 	call	a01173c <exit>

0a00db34 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 a00db34:	defffe04 	addi	sp,sp,-8
 a00db38:	df000115 	stw	fp,4(sp)
 a00db3c:	df000104 	addi	fp,sp,4
 a00db40:	e13fff15 	stw	r4,-4(fp)
}
 a00db44:	0001883a 	nop
 a00db48:	e037883a 	mov	sp,fp
 a00db4c:	df000017 	ldw	fp,0(sp)
 a00db50:	dec00104 	addi	sp,sp,4
 a00db54:	f800283a 	ret

0a00db58 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 a00db58:	defffe04 	addi	sp,sp,-8
 a00db5c:	df000115 	stw	fp,4(sp)
 a00db60:	df000104 	addi	fp,sp,4
 a00db64:	e13fff15 	stw	r4,-4(fp)
}
 a00db68:	0001883a 	nop
 a00db6c:	e037883a 	mov	sp,fp
 a00db70:	df000017 	ldw	fp,0(sp)
 a00db74:	dec00104 	addi	sp,sp,4
 a00db78:	f800283a 	ret

0a00db7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00db7c:	defffe04 	addi	sp,sp,-8
 a00db80:	dfc00115 	stw	ra,4(sp)
 a00db84:	df000015 	stw	fp,0(sp)
 a00db88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00db8c:	d0a00b17 	ldw	r2,-32724(gp)
 a00db90:	10000326 	beq	r2,zero,a00dba0 <alt_get_errno+0x24>
 a00db94:	d0a00b17 	ldw	r2,-32724(gp)
 a00db98:	103ee83a 	callr	r2
 a00db9c:	00000106 	br	a00dba4 <alt_get_errno+0x28>
 a00dba0:	d0a74404 	addi	r2,gp,-25328
}
 a00dba4:	e037883a 	mov	sp,fp
 a00dba8:	dfc00117 	ldw	ra,4(sp)
 a00dbac:	df000017 	ldw	fp,0(sp)
 a00dbb0:	dec00204 	addi	sp,sp,8
 a00dbb4:	f800283a 	ret

0a00dbb8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 a00dbb8:	defff904 	addi	sp,sp,-28
 a00dbbc:	dfc00615 	stw	ra,24(sp)
 a00dbc0:	df000515 	stw	fp,20(sp)
 a00dbc4:	df000504 	addi	fp,sp,20
 a00dbc8:	e13ffd15 	stw	r4,-12(fp)
 a00dbcc:	e17ffe15 	stw	r5,-8(fp)
 a00dbd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a00dbd4:	e0bffd17 	ldw	r2,-12(fp)
 a00dbd8:	10000816 	blt	r2,zero,a00dbfc <read+0x44>
 a00dbdc:	01400304 	movi	r5,12
 a00dbe0:	e13ffd17 	ldw	r4,-12(fp)
 a00dbe4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00dbe8:	1007883a 	mov	r3,r2
 a00dbec:	00828074 	movhi	r2,2561
 a00dbf0:	1089b804 	addi	r2,r2,9952
 a00dbf4:	1885883a 	add	r2,r3,r2
 a00dbf8:	00000106 	br	a00dc00 <read+0x48>
 a00dbfc:	0005883a 	mov	r2,zero
 a00dc00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 a00dc04:	e0bffb17 	ldw	r2,-20(fp)
 a00dc08:	10002226 	beq	r2,zero,a00dc94 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 a00dc0c:	e0bffb17 	ldw	r2,-20(fp)
 a00dc10:	10800217 	ldw	r2,8(r2)
 a00dc14:	108000cc 	andi	r2,r2,3
 a00dc18:	10800060 	cmpeqi	r2,r2,1
 a00dc1c:	1000181e 	bne	r2,zero,a00dc80 <read+0xc8>
        (fd->dev->read))
 a00dc20:	e0bffb17 	ldw	r2,-20(fp)
 a00dc24:	10800017 	ldw	r2,0(r2)
 a00dc28:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 a00dc2c:	10001426 	beq	r2,zero,a00dc80 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 a00dc30:	e0bffb17 	ldw	r2,-20(fp)
 a00dc34:	10800017 	ldw	r2,0(r2)
 a00dc38:	10800517 	ldw	r2,20(r2)
 a00dc3c:	e0ffff17 	ldw	r3,-4(fp)
 a00dc40:	180d883a 	mov	r6,r3
 a00dc44:	e17ffe17 	ldw	r5,-8(fp)
 a00dc48:	e13ffb17 	ldw	r4,-20(fp)
 a00dc4c:	103ee83a 	callr	r2
 a00dc50:	e0bffc15 	stw	r2,-16(fp)
 a00dc54:	e0bffc17 	ldw	r2,-16(fp)
 a00dc58:	1000070e 	bge	r2,zero,a00dc78 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 a00dc5c:	a00db7c0 	call	a00db7c <alt_get_errno>
 a00dc60:	1007883a 	mov	r3,r2
 a00dc64:	e0bffc17 	ldw	r2,-16(fp)
 a00dc68:	0085c83a 	sub	r2,zero,r2
 a00dc6c:	18800015 	stw	r2,0(r3)
          return -1;
 a00dc70:	00bfffc4 	movi	r2,-1
 a00dc74:	00000c06 	br	a00dca8 <read+0xf0>
        }
        return rval;
 a00dc78:	e0bffc17 	ldw	r2,-16(fp)
 a00dc7c:	00000a06 	br	a00dca8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 a00dc80:	a00db7c0 	call	a00db7c <alt_get_errno>
 a00dc84:	1007883a 	mov	r3,r2
 a00dc88:	00800344 	movi	r2,13
 a00dc8c:	18800015 	stw	r2,0(r3)
 a00dc90:	00000406 	br	a00dca4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 a00dc94:	a00db7c0 	call	a00db7c <alt_get_errno>
 a00dc98:	1007883a 	mov	r3,r2
 a00dc9c:	00801444 	movi	r2,81
 a00dca0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 a00dca4:	00bfffc4 	movi	r2,-1
}
 a00dca8:	e037883a 	mov	sp,fp
 a00dcac:	dfc00117 	ldw	ra,4(sp)
 a00dcb0:	df000017 	ldw	fp,0(sp)
 a00dcb4:	dec00204 	addi	sp,sp,8
 a00dcb8:	f800283a 	ret

0a00dcbc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 a00dcbc:	defffc04 	addi	sp,sp,-16
 a00dcc0:	dfc00315 	stw	ra,12(sp)
 a00dcc4:	df000215 	stw	fp,8(sp)
 a00dcc8:	dc000115 	stw	r16,4(sp)
 a00dccc:	df000204 	addi	fp,sp,8
 a00dcd0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 a00dcd4:	e0bffe17 	ldw	r2,-8(fp)
 a00dcd8:	108000d0 	cmplti	r2,r2,3
 a00dcdc:	1000111e 	bne	r2,zero,a00dd24 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 a00dce0:	04028074 	movhi	r16,2561
 a00dce4:	8409b804 	addi	r16,r16,9952
 a00dce8:	e0bffe17 	ldw	r2,-8(fp)
 a00dcec:	01400304 	movi	r5,12
 a00dcf0:	1009883a 	mov	r4,r2
 a00dcf4:	a0019a40 	call	a0019a4 <__mulsi3>
 a00dcf8:	8085883a 	add	r2,r16,r2
 a00dcfc:	10800204 	addi	r2,r2,8
 a00dd00:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 a00dd04:	04028074 	movhi	r16,2561
 a00dd08:	8409b804 	addi	r16,r16,9952
 a00dd0c:	e0bffe17 	ldw	r2,-8(fp)
 a00dd10:	01400304 	movi	r5,12
 a00dd14:	1009883a 	mov	r4,r2
 a00dd18:	a0019a40 	call	a0019a4 <__mulsi3>
 a00dd1c:	8085883a 	add	r2,r16,r2
 a00dd20:	10000015 	stw	zero,0(r2)
  }
}
 a00dd24:	0001883a 	nop
 a00dd28:	e6ffff04 	addi	sp,fp,-4
 a00dd2c:	dfc00217 	ldw	ra,8(sp)
 a00dd30:	df000117 	ldw	fp,4(sp)
 a00dd34:	dc000017 	ldw	r16,0(sp)
 a00dd38:	dec00304 	addi	sp,sp,12
 a00dd3c:	f800283a 	ret

0a00dd40 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 a00dd40:	defff904 	addi	sp,sp,-28
 a00dd44:	df000615 	stw	fp,24(sp)
 a00dd48:	df000604 	addi	fp,sp,24
 a00dd4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00dd50:	0005303a 	rdctl	r2,status
 a00dd54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a00dd58:	e0fffe17 	ldw	r3,-8(fp)
 a00dd5c:	00bfff84 	movi	r2,-2
 a00dd60:	1884703a 	and	r2,r3,r2
 a00dd64:	1001703a 	wrctl	status,r2
  
  return context;
 a00dd68:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 a00dd6c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 a00dd70:	d0a00c17 	ldw	r2,-32720(gp)
 a00dd74:	10c000c4 	addi	r3,r2,3
 a00dd78:	00bfff04 	movi	r2,-4
 a00dd7c:	1884703a 	and	r2,r3,r2
 a00dd80:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 a00dd84:	d0e00c17 	ldw	r3,-32720(gp)
 a00dd88:	e0bfff17 	ldw	r2,-4(fp)
 a00dd8c:	1887883a 	add	r3,r3,r2
 a00dd90:	0082c034 	movhi	r2,2816
 a00dd94:	10800004 	addi	r2,r2,0
 a00dd98:	10c0062e 	bgeu	r2,r3,a00ddb4 <sbrk+0x74>
 a00dd9c:	e0bffb17 	ldw	r2,-20(fp)
 a00dda0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00dda4:	e0bffa17 	ldw	r2,-24(fp)
 a00dda8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 a00ddac:	00bfffc4 	movi	r2,-1
 a00ddb0:	00000b06 	br	a00dde0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 a00ddb4:	d0a00c17 	ldw	r2,-32720(gp)
 a00ddb8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 a00ddbc:	d0e00c17 	ldw	r3,-32720(gp)
 a00ddc0:	e0bfff17 	ldw	r2,-4(fp)
 a00ddc4:	1885883a 	add	r2,r3,r2
 a00ddc8:	d0a00c15 	stw	r2,-32720(gp)
 a00ddcc:	e0bffb17 	ldw	r2,-20(fp)
 a00ddd0:	e0bffc15 	stw	r2,-16(fp)
 a00ddd4:	e0bffc17 	ldw	r2,-16(fp)
 a00ddd8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 a00dddc:	e0bffd17 	ldw	r2,-12(fp)
} 
 a00dde0:	e037883a 	mov	sp,fp
 a00dde4:	df000017 	ldw	fp,0(sp)
 a00dde8:	dec00104 	addi	sp,sp,4
 a00ddec:	f800283a 	ret

0a00ddf0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 a00ddf0:	defffd04 	addi	sp,sp,-12
 a00ddf4:	dfc00215 	stw	ra,8(sp)
 a00ddf8:	df000115 	stw	fp,4(sp)
 a00ddfc:	df000104 	addi	fp,sp,4
 a00de00:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 a00de04:	e13fff17 	ldw	r4,-4(fp)
 a00de08:	a0105f40 	call	a0105f4 <alt_busy_sleep>
}
 a00de0c:	e037883a 	mov	sp,fp
 a00de10:	dfc00117 	ldw	ra,4(sp)
 a00de14:	df000017 	ldw	fp,0(sp)
 a00de18:	dec00204 	addi	sp,sp,8
 a00de1c:	f800283a 	ret

0a00de20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00de20:	defffe04 	addi	sp,sp,-8
 a00de24:	dfc00115 	stw	ra,4(sp)
 a00de28:	df000015 	stw	fp,0(sp)
 a00de2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00de30:	d0a00b17 	ldw	r2,-32724(gp)
 a00de34:	10000326 	beq	r2,zero,a00de44 <alt_get_errno+0x24>
 a00de38:	d0a00b17 	ldw	r2,-32724(gp)
 a00de3c:	103ee83a 	callr	r2
 a00de40:	00000106 	br	a00de48 <alt_get_errno+0x28>
 a00de44:	d0a74404 	addi	r2,gp,-25328
}
 a00de48:	e037883a 	mov	sp,fp
 a00de4c:	dfc00117 	ldw	ra,4(sp)
 a00de50:	df000017 	ldw	fp,0(sp)
 a00de54:	dec00204 	addi	sp,sp,8
 a00de58:	f800283a 	ret

0a00de5c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 a00de5c:	defff904 	addi	sp,sp,-28
 a00de60:	dfc00615 	stw	ra,24(sp)
 a00de64:	df000515 	stw	fp,20(sp)
 a00de68:	df000504 	addi	fp,sp,20
 a00de6c:	e13ffd15 	stw	r4,-12(fp)
 a00de70:	e17ffe15 	stw	r5,-8(fp)
 a00de74:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a00de78:	e0bffd17 	ldw	r2,-12(fp)
 a00de7c:	10000816 	blt	r2,zero,a00dea0 <write+0x44>
 a00de80:	01400304 	movi	r5,12
 a00de84:	e13ffd17 	ldw	r4,-12(fp)
 a00de88:	a0019a40 	call	a0019a4 <__mulsi3>
 a00de8c:	1007883a 	mov	r3,r2
 a00de90:	00828074 	movhi	r2,2561
 a00de94:	1089b804 	addi	r2,r2,9952
 a00de98:	1885883a 	add	r2,r3,r2
 a00de9c:	00000106 	br	a00dea4 <write+0x48>
 a00dea0:	0005883a 	mov	r2,zero
 a00dea4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 a00dea8:	e0bffb17 	ldw	r2,-20(fp)
 a00deac:	10002126 	beq	r2,zero,a00df34 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 a00deb0:	e0bffb17 	ldw	r2,-20(fp)
 a00deb4:	10800217 	ldw	r2,8(r2)
 a00deb8:	108000cc 	andi	r2,r2,3
 a00debc:	10001826 	beq	r2,zero,a00df20 <write+0xc4>
 a00dec0:	e0bffb17 	ldw	r2,-20(fp)
 a00dec4:	10800017 	ldw	r2,0(r2)
 a00dec8:	10800617 	ldw	r2,24(r2)
 a00decc:	10001426 	beq	r2,zero,a00df20 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 a00ded0:	e0bffb17 	ldw	r2,-20(fp)
 a00ded4:	10800017 	ldw	r2,0(r2)
 a00ded8:	10800617 	ldw	r2,24(r2)
 a00dedc:	e0ffff17 	ldw	r3,-4(fp)
 a00dee0:	180d883a 	mov	r6,r3
 a00dee4:	e17ffe17 	ldw	r5,-8(fp)
 a00dee8:	e13ffb17 	ldw	r4,-20(fp)
 a00deec:	103ee83a 	callr	r2
 a00def0:	e0bffc15 	stw	r2,-16(fp)
 a00def4:	e0bffc17 	ldw	r2,-16(fp)
 a00def8:	1000070e 	bge	r2,zero,a00df18 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 a00defc:	a00de200 	call	a00de20 <alt_get_errno>
 a00df00:	1007883a 	mov	r3,r2
 a00df04:	e0bffc17 	ldw	r2,-16(fp)
 a00df08:	0085c83a 	sub	r2,zero,r2
 a00df0c:	18800015 	stw	r2,0(r3)
        return -1;
 a00df10:	00bfffc4 	movi	r2,-1
 a00df14:	00000c06 	br	a00df48 <write+0xec>
      }
      return rval;
 a00df18:	e0bffc17 	ldw	r2,-16(fp)
 a00df1c:	00000a06 	br	a00df48 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 a00df20:	a00de200 	call	a00de20 <alt_get_errno>
 a00df24:	1007883a 	mov	r3,r2
 a00df28:	00800344 	movi	r2,13
 a00df2c:	18800015 	stw	r2,0(r3)
 a00df30:	00000406 	br	a00df44 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 a00df34:	a00de200 	call	a00de20 <alt_get_errno>
 a00df38:	1007883a 	mov	r3,r2
 a00df3c:	00801444 	movi	r2,81
 a00df40:	18800015 	stw	r2,0(r3)
  }
  return -1;
 a00df44:	00bfffc4 	movi	r2,-1
}
 a00df48:	e037883a 	mov	sp,fp
 a00df4c:	dfc00117 	ldw	ra,4(sp)
 a00df50:	df000017 	ldw	fp,0(sp)
 a00df54:	dec00204 	addi	sp,sp,8
 a00df58:	f800283a 	ret

0a00df5c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 a00df5c:	defffd04 	addi	sp,sp,-12
 a00df60:	dfc00215 	stw	ra,8(sp)
 a00df64:	df000115 	stw	fp,4(sp)
 a00df68:	df000104 	addi	fp,sp,4
 a00df6c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 a00df70:	d1600804 	addi	r5,gp,-32736
 a00df74:	e13fff17 	ldw	r4,-4(fp)
 a00df78:	a0107a80 	call	a0107a8 <alt_dev_llist_insert>
}
 a00df7c:	e037883a 	mov	sp,fp
 a00df80:	dfc00117 	ldw	ra,4(sp)
 a00df84:	df000017 	ldw	fp,0(sp)
 a00df88:	dec00204 	addi	sp,sp,8
 a00df8c:	f800283a 	ret

0a00df90 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 a00df90:	defffd04 	addi	sp,sp,-12
 a00df94:	dfc00215 	stw	ra,8(sp)
 a00df98:	df000115 	stw	fp,4(sp)
 a00df9c:	df000104 	addi	fp,sp,4
 a00dfa0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_1, nios_1);
 a00dfa4:	a0112100 	call	a011210 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 a00dfa8:	00800044 	movi	r2,1
 a00dfac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 a00dfb0:	0001883a 	nop
 a00dfb4:	e037883a 	mov	sp,fp
 a00dfb8:	dfc00117 	ldw	ra,4(sp)
 a00dfbc:	df000017 	ldw	fp,0(sp)
 a00dfc0:	dec00204 	addi	sp,sp,8
 a00dfc4:	f800283a 	ret

0a00dfc8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 a00dfc8:	defffe04 	addi	sp,sp,-8
 a00dfcc:	dfc00115 	stw	ra,4(sp)
 a00dfd0:	df000015 	stw	fp,0(sp)
 a00dfd4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( FLASH, flash);
 a00dfd8:	01028074 	movhi	r4,2561
 a00dfdc:	210a1804 	addi	r4,r4,10336
 a00dfe0:	a00e0840 	call	a00e084 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 a00dfe4:	000d883a 	mov	r6,zero
 a00dfe8:	000b883a 	mov	r5,zero
 a00dfec:	01028074 	movhi	r4,2561
 a00dff0:	210a5504 	addi	r4,r4,10580
 a00dff4:	a00ecb00 	call	a00ecb0 <altera_avalon_jtag_uart_init>
 a00dff8:	01028074 	movhi	r4,2561
 a00dffc:	210a4b04 	addi	r4,r4,10540
 a00e000:	a00df5c0 	call	a00df5c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 a00e004:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_1, sysid_qsys_1);
 a00e008:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 a00e00c:	01800044 	movi	r6,1
 a00e010:	000b883a 	mov	r5,zero
 a00e014:	01028074 	movhi	r4,2561
 a00e018:	210e6d04 	addi	r4,r4,14772
 a00e01c:	a00f6c40 	call	a00f6c4 <altera_avalon_uart_init>
 a00e020:	01028074 	movhi	r4,2561
 a00e024:	210e6304 	addi	r4,r4,14732
 a00e028:	a00df5c0 	call	a00df5c <alt_dev_reg>
    ALTERA_UP_AVALON_ADC_INIT ( ADC, adc);
 a00e02c:	01028074 	movhi	r4,2561
 a00e030:	210e9404 	addi	r4,r4,14928
 a00e034:	a00df5c0 	call	a00df5c <alt_dev_reg>
}
 a00e038:	0001883a 	nop
 a00e03c:	e037883a 	mov	sp,fp
 a00e040:	dfc00117 	ldw	ra,4(sp)
 a00e044:	df000017 	ldw	fp,0(sp)
 a00e048:	dec00204 	addi	sp,sp,8
 a00e04c:	f800283a 	ret

0a00e050 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 a00e050:	defffd04 	addi	sp,sp,-12
 a00e054:	dfc00215 	stw	ra,8(sp)
 a00e058:	df000115 	stw	fp,4(sp)
 a00e05c:	df000104 	addi	fp,sp,4
 a00e060:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 a00e064:	d1600d04 	addi	r5,gp,-32716
 a00e068:	e13fff17 	ldw	r4,-4(fp)
 a00e06c:	a0107a80 	call	a0107a8 <alt_dev_llist_insert>
}
 a00e070:	e037883a 	mov	sp,fp
 a00e074:	dfc00117 	ldw	ra,4(sp)
 a00e078:	df000017 	ldw	fp,0(sp)
 a00e07c:	dec00204 	addi	sp,sp,8
 a00e080:	f800283a 	ret

0a00e084 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 a00e084:	defffc04 	addi	sp,sp,-16
 a00e088:	dfc00315 	stw	ra,12(sp)
 a00e08c:	df000215 	stw	fp,8(sp)
 a00e090:	df000204 	addi	fp,sp,8
 a00e094:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 a00e098:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 a00e09c:	e13fff17 	ldw	r4,-4(fp)
 a00e0a0:	a00e0d80 	call	a00e0d8 <alt_epcs_flash_query>
 a00e0a4:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 a00e0a8:	e0bffe17 	ldw	r2,-8(fp)
 a00e0ac:	1000041e 	bne	r2,zero,a00e0c0 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 a00e0b0:	e0bfff17 	ldw	r2,-4(fp)
 a00e0b4:	1009883a 	mov	r4,r2
 a00e0b8:	a00e0500 	call	a00e050 <alt_flash_device_register>
 a00e0bc:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 a00e0c0:	e0bffe17 	ldw	r2,-8(fp)
}
 a00e0c4:	e037883a 	mov	sp,fp
 a00e0c8:	dfc00117 	ldw	ra,4(sp)
 a00e0cc:	df000017 	ldw	fp,0(sp)
 a00e0d0:	dec00204 	addi	sp,sp,8
 a00e0d4:	f800283a 	ret

0a00e0d8 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 a00e0d8:	defffc04 	addi	sp,sp,-16
 a00e0dc:	dfc00315 	stw	ra,12(sp)
 a00e0e0:	df000215 	stw	fp,8(sp)
 a00e0e4:	df000204 	addi	fp,sp,8
 a00e0e8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 a00e0ec:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 a00e0f0:	e0bfff17 	ldw	r2,-4(fp)
 a00e0f4:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 a00e0f8:	e0bfff17 	ldw	r2,-4(fp)
 a00e0fc:	10802e17 	ldw	r2,184(r2)
 a00e100:	1009883a 	mov	r4,r2
 a00e104:	a0103280 	call	a010328 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 a00e108:	10c03fcc 	andi	r3,r2,255
 a00e10c:	e0bfff17 	ldw	r2,-4(fp)
 a00e110:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 a00e114:	e0bfff17 	ldw	r2,-4(fp)
 a00e118:	10803017 	ldw	r2,192(r2)
 a00e11c:	10800598 	cmpnei	r2,r2,22
 a00e120:	10000a1e 	bne	r2,zero,a00e14c <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 a00e124:	e0bfff17 	ldw	r2,-4(fp)
 a00e128:	00c02034 	movhi	r3,128
 a00e12c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 a00e130:	e0bfff17 	ldw	r2,-4(fp)
 a00e134:	00c02004 	movi	r3,128
 a00e138:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 a00e13c:	e0bfff17 	ldw	r2,-4(fp)
 a00e140:	00c00074 	movhi	r3,1
 a00e144:	10c01015 	stw	r3,64(r2)
 a00e148:	0000ce06 	br	a00e484 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 a00e14c:	e0bfff17 	ldw	r2,-4(fp)
 a00e150:	10803017 	ldw	r2,192(r2)
 a00e154:	10800518 	cmpnei	r2,r2,20
 a00e158:	10000a1e 	bne	r2,zero,a00e184 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 a00e15c:	e0bfff17 	ldw	r2,-4(fp)
 a00e160:	00c00834 	movhi	r3,32
 a00e164:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 a00e168:	e0bfff17 	ldw	r2,-4(fp)
 a00e16c:	00c00804 	movi	r3,32
 a00e170:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 a00e174:	e0bfff17 	ldw	r2,-4(fp)
 a00e178:	00c00074 	movhi	r3,1
 a00e17c:	10c01015 	stw	r3,64(r2)
 a00e180:	0000c006 	br	a00e484 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 a00e184:	e0bfff17 	ldw	r2,-4(fp)
 a00e188:	10803017 	ldw	r2,192(r2)
 a00e18c:	108004d8 	cmpnei	r2,r2,19
 a00e190:	10000a1e 	bne	r2,zero,a00e1bc <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 a00e194:	e0bfff17 	ldw	r2,-4(fp)
 a00e198:	00c00434 	movhi	r3,16
 a00e19c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 a00e1a0:	e0bfff17 	ldw	r2,-4(fp)
 a00e1a4:	00c00404 	movi	r3,16
 a00e1a8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 a00e1ac:	e0bfff17 	ldw	r2,-4(fp)
 a00e1b0:	00c00074 	movhi	r3,1
 a00e1b4:	10c01015 	stw	r3,64(r2)
 a00e1b8:	0000b206 	br	a00e484 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 a00e1bc:	e0bfff17 	ldw	r2,-4(fp)
 a00e1c0:	10803017 	ldw	r2,192(r2)
 a00e1c4:	10800498 	cmpnei	r2,r2,18
 a00e1c8:	10000a1e 	bne	r2,zero,a00e1f4 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 a00e1cc:	e0bfff17 	ldw	r2,-4(fp)
 a00e1d0:	00c00234 	movhi	r3,8
 a00e1d4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 a00e1d8:	e0bfff17 	ldw	r2,-4(fp)
 a00e1dc:	00c00204 	movi	r3,8
 a00e1e0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 a00e1e4:	e0bfff17 	ldw	r2,-4(fp)
 a00e1e8:	00c00074 	movhi	r3,1
 a00e1ec:	10c01015 	stw	r3,64(r2)
 a00e1f0:	0000a406 	br	a00e484 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 a00e1f4:	e0bfff17 	ldw	r2,-4(fp)
 a00e1f8:	10803017 	ldw	r2,192(r2)
 a00e1fc:	10800418 	cmpnei	r2,r2,16
 a00e200:	10000a1e 	bne	r2,zero,a00e22c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 a00e204:	e0bfff17 	ldw	r2,-4(fp)
 a00e208:	00c000b4 	movhi	r3,2
 a00e20c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 a00e210:	e0bfff17 	ldw	r2,-4(fp)
 a00e214:	00c00104 	movi	r3,4
 a00e218:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 a00e21c:	e0bfff17 	ldw	r2,-4(fp)
 a00e220:	00e00014 	movui	r3,32768
 a00e224:	10c01015 	stw	r3,64(r2)
 a00e228:	00009606 	br	a00e484 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 a00e22c:	e0bfff17 	ldw	r2,-4(fp)
 a00e230:	10802e17 	ldw	r2,184(r2)
 a00e234:	1009883a 	mov	r4,r2
 a00e238:	a0103900 	call	a010390 <epcs_read_device_id>
 a00e23c:	1007883a 	mov	r3,r2
 a00e240:	e0bfff17 	ldw	r2,-4(fp)
 a00e244:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 a00e248:	e0bfff17 	ldw	r2,-4(fp)
 a00e24c:	10c03017 	ldw	r3,192(r2)
 a00e250:	00804034 	movhi	r2,256
 a00e254:	10bfffc4 	addi	r2,r2,-1
 a00e258:	1886703a 	and	r3,r3,r2
 a00e25c:	00800874 	movhi	r2,33
 a00e260:	10ae8544 	addi	r2,r2,-17899
 a00e264:	18800a1e 	bne	r3,r2,a00e290 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 a00e268:	e0bfff17 	ldw	r2,-4(fp)
 a00e26c:	00c00834 	movhi	r3,32
 a00e270:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 a00e274:	e0bfff17 	ldw	r2,-4(fp)
 a00e278:	00c00804 	movi	r3,32
 a00e27c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a00e280:	e0bfff17 	ldw	r2,-4(fp)
 a00e284:	00c00074 	movhi	r3,1
 a00e288:	10c01015 	stw	r3,64(r2)
 a00e28c:	00007d06 	br	a00e484 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 a00e290:	e0bfff17 	ldw	r2,-4(fp)
 a00e294:	10c03017 	ldw	r3,192(r2)
 a00e298:	00804034 	movhi	r2,256
 a00e29c:	10bfffc4 	addi	r2,r2,-1
 a00e2a0:	1886703a 	and	r3,r3,r2
 a00e2a4:	00800874 	movhi	r2,33
 a00e2a8:	10ae8584 	addi	r2,r2,-17898
 a00e2ac:	18800a1e 	bne	r3,r2,a00e2d8 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 a00e2b0:	e0bfff17 	ldw	r2,-4(fp)
 a00e2b4:	00c01034 	movhi	r3,64
 a00e2b8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 a00e2bc:	e0bfff17 	ldw	r2,-4(fp)
 a00e2c0:	00c01004 	movi	r3,64
 a00e2c4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a00e2c8:	e0bfff17 	ldw	r2,-4(fp)
 a00e2cc:	00c00074 	movhi	r3,1
 a00e2d0:	10c01015 	stw	r3,64(r2)
 a00e2d4:	00006b06 	br	a00e484 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 a00e2d8:	e0bfff17 	ldw	r2,-4(fp)
 a00e2dc:	10c03017 	ldw	r3,192(r2)
 a00e2e0:	00804034 	movhi	r2,256
 a00e2e4:	10bfffc4 	addi	r2,r2,-1
 a00e2e8:	1886703a 	and	r3,r3,r2
 a00e2ec:	00800874 	movhi	r2,33
 a00e2f0:	10ae85c4 	addi	r2,r2,-17897
 a00e2f4:	18800a1e 	bne	r3,r2,a00e320 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 a00e2f8:	e0bfff17 	ldw	r2,-4(fp)
 a00e2fc:	00c02034 	movhi	r3,128
 a00e300:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 a00e304:	e0bfff17 	ldw	r2,-4(fp)
 a00e308:	00c02004 	movi	r3,128
 a00e30c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a00e310:	e0bfff17 	ldw	r2,-4(fp)
 a00e314:	00c00074 	movhi	r3,1
 a00e318:	10c01015 	stw	r3,64(r2)
 a00e31c:	00005906 	br	a00e484 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 a00e320:	e0bfff17 	ldw	r2,-4(fp)
 a00e324:	10c03017 	ldw	r3,192(r2)
 a00e328:	00804034 	movhi	r2,256
 a00e32c:	10bfffc4 	addi	r2,r2,-1
 a00e330:	1886703a 	and	r3,r3,r2
 a00e334:	00800874 	movhi	r2,33
 a00e338:	10ae8604 	addi	r2,r2,-17896
 a00e33c:	18800a1e 	bne	r3,r2,a00e368 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 a00e340:	e0bfff17 	ldw	r2,-4(fp)
 a00e344:	00c04034 	movhi	r3,256
 a00e348:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 a00e34c:	e0bfff17 	ldw	r2,-4(fp)
 a00e350:	00c04004 	movi	r3,256
 a00e354:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a00e358:	e0bfff17 	ldw	r2,-4(fp)
 a00e35c:	00c00074 	movhi	r3,1
 a00e360:	10c01015 	stw	r3,64(r2)
 a00e364:	00004706 	br	a00e484 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 a00e368:	e0bfff17 	ldw	r2,-4(fp)
 a00e36c:	10803017 	ldw	r2,192(r2)
 a00e370:	10803fcc 	andi	r2,r2,255
 a00e374:	10800618 	cmpnei	r2,r2,24
 a00e378:	10000a1e 	bne	r2,zero,a00e3a4 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 a00e37c:	e0bfff17 	ldw	r2,-4(fp)
 a00e380:	00c04034 	movhi	r3,256
 a00e384:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 a00e388:	e0bfff17 	ldw	r2,-4(fp)
 a00e38c:	00c01004 	movi	r3,64
 a00e390:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 a00e394:	e0bfff17 	ldw	r2,-4(fp)
 a00e398:	00c00134 	movhi	r3,4
 a00e39c:	10c01015 	stw	r3,64(r2)
 a00e3a0:	00003806 	br	a00e484 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 a00e3a4:	e0bfff17 	ldw	r2,-4(fp)
 a00e3a8:	10803017 	ldw	r2,192(r2)
 a00e3ac:	10803fcc 	andi	r2,r2,255
 a00e3b0:	10800658 	cmpnei	r2,r2,25
 a00e3b4:	10000d1e 	bne	r2,zero,a00e3ec <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 a00e3b8:	e0bfff17 	ldw	r2,-4(fp)
 a00e3bc:	00c08034 	movhi	r3,512
 a00e3c0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 a00e3c4:	e0bfff17 	ldw	r2,-4(fp)
 a00e3c8:	00c08004 	movi	r3,512
 a00e3cc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a00e3d0:	e0bfff17 	ldw	r2,-4(fp)
 a00e3d4:	00c00074 	movhi	r3,1
 a00e3d8:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 a00e3dc:	e0bfff17 	ldw	r2,-4(fp)
 a00e3e0:	00c00044 	movi	r3,1
 a00e3e4:	10c03215 	stw	r3,200(r2)
 a00e3e8:	00002606 	br	a00e484 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 a00e3ec:	e0bfff17 	ldw	r2,-4(fp)
 a00e3f0:	10803017 	ldw	r2,192(r2)
 a00e3f4:	10803fcc 	andi	r2,r2,255
 a00e3f8:	10800818 	cmpnei	r2,r2,32
 a00e3fc:	10000d1e 	bne	r2,zero,a00e434 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 a00e400:	e0bfff17 	ldw	r2,-4(fp)
 a00e404:	00c10034 	movhi	r3,1024
 a00e408:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 a00e40c:	e0bfff17 	ldw	r2,-4(fp)
 a00e410:	00c10004 	movi	r3,1024
 a00e414:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a00e418:	e0bfff17 	ldw	r2,-4(fp)
 a00e41c:	00c00074 	movhi	r3,1
 a00e420:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 a00e424:	e0bfff17 	ldw	r2,-4(fp)
 a00e428:	00c00044 	movi	r3,1
 a00e42c:	10c03215 	stw	r3,200(r2)
 a00e430:	00001406 	br	a00e484 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 a00e434:	e0bfff17 	ldw	r2,-4(fp)
 a00e438:	10803017 	ldw	r2,192(r2)
 a00e43c:	10803fcc 	andi	r2,r2,255
 a00e440:	10800858 	cmpnei	r2,r2,33
 a00e444:	10000d1e 	bne	r2,zero,a00e47c <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 a00e448:	e0bfff17 	ldw	r2,-4(fp)
 a00e44c:	00c20034 	movhi	r3,2048
 a00e450:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 a00e454:	e0bfff17 	ldw	r2,-4(fp)
 a00e458:	00c20004 	movi	r3,2048
 a00e45c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a00e460:	e0bfff17 	ldw	r2,-4(fp)
 a00e464:	00c00074 	movhi	r3,1
 a00e468:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 a00e46c:	e0bfff17 	ldw	r2,-4(fp)
 a00e470:	00c00044 	movi	r3,1
 a00e474:	10c03215 	stw	r3,200(r2)
 a00e478:	00000206 	br	a00e484 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 a00e47c:	00bffb44 	movi	r2,-19
 a00e480:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 a00e484:	e0bfff17 	ldw	r2,-4(fp)
 a00e488:	10800e17 	ldw	r2,56(r2)
 a00e48c:	1007883a 	mov	r3,r2
 a00e490:	e0bfff17 	ldw	r2,-4(fp)
 a00e494:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 a00e498:	e0bfff17 	ldw	r2,-4(fp)
 a00e49c:	00c00044 	movi	r3,1
 a00e4a0:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 a00e4a4:	e0bfff17 	ldw	r2,-4(fp)
 a00e4a8:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 a00e4ac:	e0bfff17 	ldw	r2,-4(fp)
 a00e4b0:	00c04004 	movi	r3,256
 a00e4b4:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 a00e4b8:	e0bffe17 	ldw	r2,-8(fp)
}
 a00e4bc:	e037883a 	mov	sp,fp
 a00e4c0:	dfc00117 	ldw	ra,4(sp)
 a00e4c4:	df000017 	ldw	fp,0(sp)
 a00e4c8:	dec00204 	addi	sp,sp,8
 a00e4cc:	f800283a 	ret

0a00e4d0 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 a00e4d0:	deffee04 	addi	sp,sp,-72
 a00e4d4:	dfc01115 	stw	ra,68(sp)
 a00e4d8:	df001015 	stw	fp,64(sp)
 a00e4dc:	df001004 	addi	fp,sp,64
 a00e4e0:	e13ffc15 	stw	r4,-16(fp)
 a00e4e4:	e17ffd15 	stw	r5,-12(fp)
 a00e4e8:	e1bffe15 	stw	r6,-8(fp)
 a00e4ec:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 a00e4f0:	00800804 	movi	r2,32
 a00e4f4:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 a00e4f8:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 a00e4fc:	00002706 	br	a00e59c <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 a00e500:	e0fff117 	ldw	r3,-60(fp)
 a00e504:	e0bfff17 	ldw	r2,-4(fp)
 a00e508:	1880012e 	bgeu	r3,r2,a00e510 <alt_epcs_flash_memcmp+0x40>
 a00e50c:	1805883a 	mov	r2,r3
 a00e510:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 a00e514:	e0fffe17 	ldw	r3,-8(fp)
 a00e518:	e0bff017 	ldw	r2,-64(fp)
 a00e51c:	1885883a 	add	r2,r3,r2
 a00e520:	e0fff404 	addi	r3,fp,-48
 a00e524:	e1fff217 	ldw	r7,-56(fp)
 a00e528:	180d883a 	mov	r6,r3
 a00e52c:	100b883a 	mov	r5,r2
 a00e530:	e13ffc17 	ldw	r4,-16(fp)
 a00e534:	a00eab40 	call	a00eab4 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 a00e538:	1000020e 	bge	r2,zero,a00e544 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 a00e53c:	00bfffc4 	movi	r2,-1
 a00e540:	00001906 	br	a00e5a8 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 a00e544:	e0bff017 	ldw	r2,-64(fp)
 a00e548:	e0fffd17 	ldw	r3,-12(fp)
 a00e54c:	1885883a 	add	r2,r3,r2
 a00e550:	e13ff217 	ldw	r4,-56(fp)
 a00e554:	e0fff404 	addi	r3,fp,-48
 a00e558:	200d883a 	mov	r6,r4
 a00e55c:	180b883a 	mov	r5,r3
 a00e560:	1009883a 	mov	r4,r2
 a00e564:	a0117740 	call	a011774 <memcmp>
 a00e568:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 a00e56c:	e0bff317 	ldw	r2,-52(fp)
 a00e570:	10000226 	beq	r2,zero,a00e57c <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 a00e574:	e0bff317 	ldw	r2,-52(fp)
 a00e578:	00000b06 	br	a00e5a8 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 a00e57c:	e0bff217 	ldw	r2,-56(fp)
 a00e580:	e0ffff17 	ldw	r3,-4(fp)
 a00e584:	1885c83a 	sub	r2,r3,r2
 a00e588:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 a00e58c:	e0fff017 	ldw	r3,-64(fp)
 a00e590:	e0bff217 	ldw	r2,-56(fp)
 a00e594:	1885883a 	add	r2,r3,r2
 a00e598:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 a00e59c:	e0bfff17 	ldw	r2,-4(fp)
 a00e5a0:	103fd71e 	bne	r2,zero,a00e500 <__alt_mem_flash+0xfe00d500>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 a00e5a4:	0005883a 	mov	r2,zero
}
 a00e5a8:	e037883a 	mov	sp,fp
 a00e5ac:	dfc00117 	ldw	ra,4(sp)
 a00e5b0:	df000017 	ldw	fp,0(sp)
 a00e5b4:	dec00204 	addi	sp,sp,8
 a00e5b8:	f800283a 	ret

0a00e5bc <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 a00e5bc:	defff404 	addi	sp,sp,-48
 a00e5c0:	dfc00b15 	stw	ra,44(sp)
 a00e5c4:	df000a15 	stw	fp,40(sp)
 a00e5c8:	df000a04 	addi	fp,sp,40
 a00e5cc:	e13ffc15 	stw	r4,-16(fp)
 a00e5d0:	e17ffd15 	stw	r5,-12(fp)
 a00e5d4:	e1bffe15 	stw	r6,-8(fp)
 a00e5d8:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 a00e5dc:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 a00e5e0:	e03ff815 	stw	zero,-32(fp)
 a00e5e4:	00008306 	br	a00e7f4 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 a00e5e8:	e0fffc17 	ldw	r3,-16(fp)
 a00e5ec:	e0bff817 	ldw	r2,-32(fp)
 a00e5f0:	1004913a 	slli	r2,r2,4
 a00e5f4:	1885883a 	add	r2,r3,r2
 a00e5f8:	10800d04 	addi	r2,r2,52
 a00e5fc:	10800017 	ldw	r2,0(r2)
 a00e600:	e0fffd17 	ldw	r3,-12(fp)
 a00e604:	18807816 	blt	r3,r2,a00e7e8 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 a00e608:	e0fffc17 	ldw	r3,-16(fp)
 a00e60c:	e0bff817 	ldw	r2,-32(fp)
 a00e610:	1004913a 	slli	r2,r2,4
 a00e614:	1885883a 	add	r2,r3,r2
 a00e618:	10800d04 	addi	r2,r2,52
 a00e61c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 a00e620:	e13ffc17 	ldw	r4,-16(fp)
 a00e624:	e0bff817 	ldw	r2,-32(fp)
 a00e628:	1004913a 	slli	r2,r2,4
 a00e62c:	2085883a 	add	r2,r4,r2
 a00e630:	10800e04 	addi	r2,r2,56
 a00e634:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 a00e638:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 a00e63c:	e0fffd17 	ldw	r3,-12(fp)
 a00e640:	1880690e 	bge	r3,r2,a00e7e8 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 a00e644:	e0fffc17 	ldw	r3,-16(fp)
 a00e648:	e0bff817 	ldw	r2,-32(fp)
 a00e64c:	1004913a 	slli	r2,r2,4
 a00e650:	1885883a 	add	r2,r3,r2
 a00e654:	10800d04 	addi	r2,r2,52
 a00e658:	10800017 	ldw	r2,0(r2)
 a00e65c:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 a00e660:	e03ff915 	stw	zero,-28(fp)
 a00e664:	00005806 	br	a00e7c8 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 a00e668:	e0fffd17 	ldw	r3,-12(fp)
 a00e66c:	e0bffa17 	ldw	r2,-24(fp)
 a00e670:	18804916 	blt	r3,r2,a00e798 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 a00e674:	e0fffc17 	ldw	r3,-16(fp)
 a00e678:	e0bff817 	ldw	r2,-32(fp)
 a00e67c:	10800104 	addi	r2,r2,4
 a00e680:	1004913a 	slli	r2,r2,4
 a00e684:	1885883a 	add	r2,r3,r2
 a00e688:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 a00e68c:	e0bffa17 	ldw	r2,-24(fp)
 a00e690:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 a00e694:	e0fffd17 	ldw	r3,-12(fp)
 a00e698:	18803f0e 	bge	r3,r2,a00e798 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 a00e69c:	e0fffc17 	ldw	r3,-16(fp)
 a00e6a0:	e0bff817 	ldw	r2,-32(fp)
 a00e6a4:	10800104 	addi	r2,r2,4
 a00e6a8:	1004913a 	slli	r2,r2,4
 a00e6ac:	1885883a 	add	r2,r3,r2
 a00e6b0:	10c00017 	ldw	r3,0(r2)
 a00e6b4:	e0bffa17 	ldw	r2,-24(fp)
 a00e6b8:	1887883a 	add	r3,r3,r2
 a00e6bc:	e0bffd17 	ldw	r2,-12(fp)
 a00e6c0:	1885c83a 	sub	r2,r3,r2
 a00e6c4:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 a00e6c8:	e0fffb17 	ldw	r3,-20(fp)
 a00e6cc:	e0bfff17 	ldw	r2,-4(fp)
 a00e6d0:	1880010e 	bge	r3,r2,a00e6d8 <alt_epcs_flash_write+0x11c>
 a00e6d4:	1805883a 	mov	r2,r3
 a00e6d8:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 a00e6dc:	e0bffb17 	ldw	r2,-20(fp)
 a00e6e0:	100f883a 	mov	r7,r2
 a00e6e4:	e1bffd17 	ldw	r6,-12(fp)
 a00e6e8:	e17ffe17 	ldw	r5,-8(fp)
 a00e6ec:	e13ffc17 	ldw	r4,-16(fp)
 a00e6f0:	a00e4d00 	call	a00e4d0 <alt_epcs_flash_memcmp>
 a00e6f4:	10001226 	beq	r2,zero,a00e740 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 a00e6f8:	e0bffc17 	ldw	r2,-16(fp)
 a00e6fc:	10800817 	ldw	r2,32(r2)
 a00e700:	e17ffa17 	ldw	r5,-24(fp)
 a00e704:	e13ffc17 	ldw	r4,-16(fp)
 a00e708:	103ee83a 	callr	r2
 a00e70c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 a00e710:	e0bff717 	ldw	r2,-36(fp)
 a00e714:	10000a1e 	bne	r2,zero,a00e740 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 a00e718:	e0bffc17 	ldw	r2,-16(fp)
 a00e71c:	10800917 	ldw	r2,36(r2)
 a00e720:	e0fffb17 	ldw	r3,-20(fp)
 a00e724:	d8c00015 	stw	r3,0(sp)
 a00e728:	e1fffe17 	ldw	r7,-8(fp)
 a00e72c:	e1bffd17 	ldw	r6,-12(fp)
 a00e730:	e17ffa17 	ldw	r5,-24(fp)
 a00e734:	e13ffc17 	ldw	r4,-16(fp)
 a00e738:	103ee83a 	callr	r2
 a00e73c:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 a00e740:	e0ffff17 	ldw	r3,-4(fp)
 a00e744:	e0bffb17 	ldw	r2,-20(fp)
 a00e748:	18802e26 	beq	r3,r2,a00e804 <alt_epcs_flash_write+0x248>
 a00e74c:	e0bff717 	ldw	r2,-36(fp)
 a00e750:	10002c1e 	bne	r2,zero,a00e804 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 a00e754:	e0ffff17 	ldw	r3,-4(fp)
 a00e758:	e0bffb17 	ldw	r2,-20(fp)
 a00e75c:	1885c83a 	sub	r2,r3,r2
 a00e760:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 a00e764:	e0fffc17 	ldw	r3,-16(fp)
 a00e768:	e0bff817 	ldw	r2,-32(fp)
 a00e76c:	10800104 	addi	r2,r2,4
 a00e770:	1004913a 	slli	r2,r2,4
 a00e774:	1885883a 	add	r2,r3,r2
 a00e778:	10c00017 	ldw	r3,0(r2)
 a00e77c:	e0bffa17 	ldw	r2,-24(fp)
 a00e780:	1885883a 	add	r2,r3,r2
 a00e784:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 a00e788:	e0bffb17 	ldw	r2,-20(fp)
 a00e78c:	e0fffe17 	ldw	r3,-8(fp)
 a00e790:	1885883a 	add	r2,r3,r2
 a00e794:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 a00e798:	e0fffc17 	ldw	r3,-16(fp)
 a00e79c:	e0bff817 	ldw	r2,-32(fp)
 a00e7a0:	10800104 	addi	r2,r2,4
 a00e7a4:	1004913a 	slli	r2,r2,4
 a00e7a8:	1885883a 	add	r2,r3,r2
 a00e7ac:	10800017 	ldw	r2,0(r2)
 a00e7b0:	e0fffa17 	ldw	r3,-24(fp)
 a00e7b4:	1885883a 	add	r2,r3,r2
 a00e7b8:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 a00e7bc:	e0bff917 	ldw	r2,-28(fp)
 a00e7c0:	10800044 	addi	r2,r2,1
 a00e7c4:	e0bff915 	stw	r2,-28(fp)
 a00e7c8:	e0fffc17 	ldw	r3,-16(fp)
 a00e7cc:	e0bff817 	ldw	r2,-32(fp)
 a00e7d0:	1004913a 	slli	r2,r2,4
 a00e7d4:	1885883a 	add	r2,r3,r2
 a00e7d8:	10800f04 	addi	r2,r2,60
 a00e7dc:	10800017 	ldw	r2,0(r2)
 a00e7e0:	e0fff917 	ldw	r3,-28(fp)
 a00e7e4:	18bfa016 	blt	r3,r2,a00e668 <__alt_mem_flash+0xfe00d668>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 a00e7e8:	e0bff817 	ldw	r2,-32(fp)
 a00e7ec:	10800044 	addi	r2,r2,1
 a00e7f0:	e0bff815 	stw	r2,-32(fp)
 a00e7f4:	e0bffc17 	ldw	r2,-16(fp)
 a00e7f8:	10800c17 	ldw	r2,48(r2)
 a00e7fc:	e0fff817 	ldw	r3,-32(fp)
 a00e800:	18bf7916 	blt	r3,r2,a00e5e8 <__alt_mem_flash+0xfe00d5e8>
      }
    }
  }

finished:
  return ret_code;
 a00e804:	e0bff717 	ldw	r2,-36(fp)
}
 a00e808:	e037883a 	mov	sp,fp
 a00e80c:	dfc00117 	ldw	ra,4(sp)
 a00e810:	df000017 	ldw	fp,0(sp)
 a00e814:	dec00204 	addi	sp,sp,8
 a00e818:	f800283a 	ret

0a00e81c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 a00e81c:	defffa04 	addi	sp,sp,-24
 a00e820:	df000515 	stw	fp,20(sp)
 a00e824:	df000504 	addi	fp,sp,20
 a00e828:	e13ffd15 	stw	r4,-12(fp)
 a00e82c:	e17ffe15 	stw	r5,-8(fp)
 a00e830:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 a00e834:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 a00e838:	e0bffd17 	ldw	r2,-12(fp)
 a00e83c:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 a00e840:	e0bffc17 	ldw	r2,-16(fp)
 a00e844:	10c00c17 	ldw	r3,48(r2)
 a00e848:	e0bfff17 	ldw	r2,-4(fp)
 a00e84c:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 a00e850:	e0bffc17 	ldw	r2,-16(fp)
 a00e854:	10800c17 	ldw	r2,48(r2)
 a00e858:	1000031e 	bne	r2,zero,a00e868 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 a00e85c:	00bffec4 	movi	r2,-5
 a00e860:	e0bffb15 	stw	r2,-20(fp)
 a00e864:	00000b06 	br	a00e894 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 a00e868:	e0bffc17 	ldw	r2,-16(fp)
 a00e86c:	10800c17 	ldw	r2,48(r2)
 a00e870:	10800250 	cmplti	r2,r2,9
 a00e874:	1000031e 	bne	r2,zero,a00e884 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 a00e878:	00bffd04 	movi	r2,-12
 a00e87c:	e0bffb15 	stw	r2,-20(fp)
 a00e880:	00000406 	br	a00e894 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 a00e884:	e0bffc17 	ldw	r2,-16(fp)
 a00e888:	10c00d04 	addi	r3,r2,52
 a00e88c:	e0bffe17 	ldw	r2,-8(fp)
 a00e890:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 a00e894:	e0bffb17 	ldw	r2,-20(fp)
}
 a00e898:	e037883a 	mov	sp,fp
 a00e89c:	df000017 	ldw	fp,0(sp)
 a00e8a0:	dec00104 	addi	sp,sp,4
 a00e8a4:	f800283a 	ret

0a00e8a8 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 a00e8a8:	defff904 	addi	sp,sp,-28
 a00e8ac:	df000615 	stw	fp,24(sp)
 a00e8b0:	df000604 	addi	fp,sp,24
 a00e8b4:	e13ffe15 	stw	r4,-8(fp)
 a00e8b8:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 a00e8bc:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 a00e8c0:	e0bffe17 	ldw	r2,-8(fp)
 a00e8c4:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 a00e8c8:	e0bffb17 	ldw	r2,-20(fp)
 a00e8cc:	10800c17 	ldw	r2,48(r2)
 a00e8d0:	10bfffc4 	addi	r2,r2,-1
 a00e8d4:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 a00e8d8:	e0fffb17 	ldw	r3,-20(fp)
 a00e8dc:	e0bffc17 	ldw	r2,-16(fp)
 a00e8e0:	1004913a 	slli	r2,r2,4
 a00e8e4:	1885883a 	add	r2,r3,r2
 a00e8e8:	10800d04 	addi	r2,r2,52
 a00e8ec:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 a00e8f0:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 a00e8f4:	e13ffb17 	ldw	r4,-20(fp)
 a00e8f8:	e0bffc17 	ldw	r2,-16(fp)
 a00e8fc:	1004913a 	slli	r2,r2,4
 a00e900:	2085883a 	add	r2,r4,r2
 a00e904:	10800e04 	addi	r2,r2,56
 a00e908:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 a00e90c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 a00e910:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 a00e914:	e0bfff17 	ldw	r2,-4(fp)
 a00e918:	e0fffd17 	ldw	r3,-12(fp)
 a00e91c:	1880022e 	bgeu	r3,r2,a00e928 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 a00e920:	00bffec4 	movi	r2,-5
 a00e924:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 a00e928:	e0bffa17 	ldw	r2,-24(fp)
}
 a00e92c:	e037883a 	mov	sp,fp
 a00e930:	df000017 	ldw	fp,0(sp)
 a00e934:	dec00104 	addi	sp,sp,4
 a00e938:	f800283a 	ret

0a00e93c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 a00e93c:	defffa04 	addi	sp,sp,-24
 a00e940:	dfc00515 	stw	ra,20(sp)
 a00e944:	df000415 	stw	fp,16(sp)
 a00e948:	df000404 	addi	fp,sp,16
 a00e94c:	e13ffe15 	stw	r4,-8(fp)
 a00e950:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 a00e954:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 a00e958:	e0bffe17 	ldw	r2,-8(fp)
 a00e95c:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 a00e960:	e17fff17 	ldw	r5,-4(fp)
 a00e964:	e13ffe17 	ldw	r4,-8(fp)
 a00e968:	a00e8a80 	call	a00e8a8 <alt_epcs_test_address>
 a00e96c:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 a00e970:	e0bffc17 	ldw	r2,-16(fp)
 a00e974:	10000916 	blt	r2,zero,a00e99c <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 a00e978:	e0bffd17 	ldw	r2,-12(fp)
 a00e97c:	10c02e17 	ldw	r3,184(r2)
 a00e980:	e13fff17 	ldw	r4,-4(fp)
 a00e984:	e0bffd17 	ldw	r2,-12(fp)
 a00e988:	10803217 	ldw	r2,200(r2)
 a00e98c:	100d883a 	mov	r6,r2
 a00e990:	200b883a 	mov	r5,r4
 a00e994:	1809883a 	mov	r4,r3
 a00e998:	a00ff5c0 	call	a00ff5c <epcs_sector_erase>
  }
  return ret_code;
 a00e99c:	e0bffc17 	ldw	r2,-16(fp)
}
 a00e9a0:	e037883a 	mov	sp,fp
 a00e9a4:	dfc00117 	ldw	ra,4(sp)
 a00e9a8:	df000017 	ldw	fp,0(sp)
 a00e9ac:	dec00204 	addi	sp,sp,8
 a00e9b0:	f800283a 	ret

0a00e9b4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 a00e9b4:	defff404 	addi	sp,sp,-48
 a00e9b8:	dfc00b15 	stw	ra,44(sp)
 a00e9bc:	df000a15 	stw	fp,40(sp)
 a00e9c0:	df000a04 	addi	fp,sp,40
 a00e9c4:	e13ffc15 	stw	r4,-16(fp)
 a00e9c8:	e17ffd15 	stw	r5,-12(fp)
 a00e9cc:	e1bffe15 	stw	r6,-8(fp)
 a00e9d0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 a00e9d4:	e0bffc17 	ldw	r2,-16(fp)
 a00e9d8:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 a00e9dc:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 a00e9e0:	e17ffe17 	ldw	r5,-8(fp)
 a00e9e4:	e13ffc17 	ldw	r4,-16(fp)
 a00e9e8:	a00e8a80 	call	a00e8a8 <alt_epcs_test_address>
 a00e9ec:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 a00e9f0:	e0bff917 	ldw	r2,-28(fp)
 a00e9f4:	10002916 	blt	r2,zero,a00ea9c <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 a00e9f8:	00002606 	br	a00ea94 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 a00e9fc:	e0bff817 	ldw	r2,-32(fp)
 a00ea00:	10c03117 	ldw	r3,196(r2)
 a00ea04:	e0bffe17 	ldw	r2,-8(fp)
 a00ea08:	1887883a 	add	r3,r3,r2
 a00ea0c:	e0bff817 	ldw	r2,-32(fp)
 a00ea10:	10803117 	ldw	r2,196(r2)
 a00ea14:	0085c83a 	sub	r2,zero,r2
 a00ea18:	1884703a 	and	r2,r3,r2
 a00ea1c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 a00ea20:	e0fffa17 	ldw	r3,-24(fp)
 a00ea24:	e0bffe17 	ldw	r2,-8(fp)
 a00ea28:	1885c83a 	sub	r2,r3,r2
 a00ea2c:	e0c00217 	ldw	r3,8(fp)
 a00ea30:	1880010e 	bge	r3,r2,a00ea38 <alt_epcs_flash_write_block+0x84>
 a00ea34:	1805883a 	mov	r2,r3
 a00ea38:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 a00ea3c:	e0bff817 	ldw	r2,-32(fp)
 a00ea40:	11002e17 	ldw	r4,184(r2)
 a00ea44:	e0bff717 	ldw	r2,-36(fp)
 a00ea48:	e0ffff17 	ldw	r3,-4(fp)
 a00ea4c:	1887883a 	add	r3,r3,r2
 a00ea50:	e0bff817 	ldw	r2,-32(fp)
 a00ea54:	10803217 	ldw	r2,200(r2)
 a00ea58:	d8800015 	stw	r2,0(sp)
 a00ea5c:	e1fffb17 	ldw	r7,-20(fp)
 a00ea60:	180d883a 	mov	r6,r3
 a00ea64:	e17ffe17 	ldw	r5,-8(fp)
 a00ea68:	a01020c0 	call	a01020c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 a00ea6c:	e0c00217 	ldw	r3,8(fp)
 a00ea70:	e0bffb17 	ldw	r2,-20(fp)
 a00ea74:	1885c83a 	sub	r2,r3,r2
 a00ea78:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 a00ea7c:	e0fff717 	ldw	r3,-36(fp)
 a00ea80:	e0bffb17 	ldw	r2,-20(fp)
 a00ea84:	1885883a 	add	r2,r3,r2
 a00ea88:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 a00ea8c:	e0bffa17 	ldw	r2,-24(fp)
 a00ea90:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 a00ea94:	e0800217 	ldw	r2,8(fp)
 a00ea98:	103fd81e 	bne	r2,zero,a00e9fc <__alt_mem_flash+0xfe00d9fc>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 a00ea9c:	e0bff917 	ldw	r2,-28(fp)
}
 a00eaa0:	e037883a 	mov	sp,fp
 a00eaa4:	dfc00117 	ldw	ra,4(sp)
 a00eaa8:	df000017 	ldw	fp,0(sp)
 a00eaac:	dec00204 	addi	sp,sp,8
 a00eab0:	f800283a 	ret

0a00eab4 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 a00eab4:	defff704 	addi	sp,sp,-36
 a00eab8:	dfc00815 	stw	ra,32(sp)
 a00eabc:	df000715 	stw	fp,28(sp)
 a00eac0:	df000704 	addi	fp,sp,28
 a00eac4:	e13ffc15 	stw	r4,-16(fp)
 a00eac8:	e17ffd15 	stw	r5,-12(fp)
 a00eacc:	e1bffe15 	stw	r6,-8(fp)
 a00ead0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 a00ead4:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 a00ead8:	e0bffc17 	ldw	r2,-16(fp)
 a00eadc:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 a00eae0:	e17ffd17 	ldw	r5,-12(fp)
 a00eae4:	e13ffc17 	ldw	r4,-16(fp)
 a00eae8:	a00e8a80 	call	a00e8a8 <alt_epcs_test_address>
 a00eaec:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 a00eaf0:	e0bffa17 	ldw	r2,-24(fp)
 a00eaf4:	10000f16 	blt	r2,zero,a00eb34 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 a00eaf8:	e0bffb17 	ldw	r2,-20(fp)
 a00eafc:	10c02e17 	ldw	r3,184(r2)
 a00eb00:	e0bffb17 	ldw	r2,-20(fp)
 a00eb04:	10803217 	ldw	r2,200(r2)
 a00eb08:	d8800015 	stw	r2,0(sp)
 a00eb0c:	e1ffff17 	ldw	r7,-4(fp)
 a00eb10:	e1bffe17 	ldw	r6,-8(fp)
 a00eb14:	e17ffd17 	ldw	r5,-12(fp)
 a00eb18:	1809883a 	mov	r4,r3
 a00eb1c:	a0100580 	call	a010058 <epcs_read_buffer>
 a00eb20:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 a00eb24:	e0fffa17 	ldw	r3,-24(fp)
 a00eb28:	e0bfff17 	ldw	r2,-4(fp)
 a00eb2c:	1880011e 	bne	r3,r2,a00eb34 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 a00eb30:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 a00eb34:	e0bffa17 	ldw	r2,-24(fp)
}
 a00eb38:	e037883a 	mov	sp,fp
 a00eb3c:	dfc00117 	ldw	ra,4(sp)
 a00eb40:	df000017 	ldw	fp,0(sp)
 a00eb44:	dec00204 	addi	sp,sp,8
 a00eb48:	f800283a 	ret

0a00eb4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 a00eb4c:	defffa04 	addi	sp,sp,-24
 a00eb50:	dfc00515 	stw	ra,20(sp)
 a00eb54:	df000415 	stw	fp,16(sp)
 a00eb58:	df000404 	addi	fp,sp,16
 a00eb5c:	e13ffd15 	stw	r4,-12(fp)
 a00eb60:	e17ffe15 	stw	r5,-8(fp)
 a00eb64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 a00eb68:	e0bffd17 	ldw	r2,-12(fp)
 a00eb6c:	10800017 	ldw	r2,0(r2)
 a00eb70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 a00eb74:	e0bffc17 	ldw	r2,-16(fp)
 a00eb78:	10c00a04 	addi	r3,r2,40
 a00eb7c:	e0bffd17 	ldw	r2,-12(fp)
 a00eb80:	10800217 	ldw	r2,8(r2)
 a00eb84:	100f883a 	mov	r7,r2
 a00eb88:	e1bfff17 	ldw	r6,-4(fp)
 a00eb8c:	e17ffe17 	ldw	r5,-8(fp)
 a00eb90:	1809883a 	mov	r4,r3
 a00eb94:	a00f1740 	call	a00f174 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 a00eb98:	e037883a 	mov	sp,fp
 a00eb9c:	dfc00117 	ldw	ra,4(sp)
 a00eba0:	df000017 	ldw	fp,0(sp)
 a00eba4:	dec00204 	addi	sp,sp,8
 a00eba8:	f800283a 	ret

0a00ebac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 a00ebac:	defffa04 	addi	sp,sp,-24
 a00ebb0:	dfc00515 	stw	ra,20(sp)
 a00ebb4:	df000415 	stw	fp,16(sp)
 a00ebb8:	df000404 	addi	fp,sp,16
 a00ebbc:	e13ffd15 	stw	r4,-12(fp)
 a00ebc0:	e17ffe15 	stw	r5,-8(fp)
 a00ebc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 a00ebc8:	e0bffd17 	ldw	r2,-12(fp)
 a00ebcc:	10800017 	ldw	r2,0(r2)
 a00ebd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 a00ebd4:	e0bffc17 	ldw	r2,-16(fp)
 a00ebd8:	10c00a04 	addi	r3,r2,40
 a00ebdc:	e0bffd17 	ldw	r2,-12(fp)
 a00ebe0:	10800217 	ldw	r2,8(r2)
 a00ebe4:	100f883a 	mov	r7,r2
 a00ebe8:	e1bfff17 	ldw	r6,-4(fp)
 a00ebec:	e17ffe17 	ldw	r5,-8(fp)
 a00ebf0:	1809883a 	mov	r4,r3
 a00ebf4:	a00f3900 	call	a00f390 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 a00ebf8:	e037883a 	mov	sp,fp
 a00ebfc:	dfc00117 	ldw	ra,4(sp)
 a00ec00:	df000017 	ldw	fp,0(sp)
 a00ec04:	dec00204 	addi	sp,sp,8
 a00ec08:	f800283a 	ret

0a00ec0c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 a00ec0c:	defffc04 	addi	sp,sp,-16
 a00ec10:	dfc00315 	stw	ra,12(sp)
 a00ec14:	df000215 	stw	fp,8(sp)
 a00ec18:	df000204 	addi	fp,sp,8
 a00ec1c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 a00ec20:	e0bfff17 	ldw	r2,-4(fp)
 a00ec24:	10800017 	ldw	r2,0(r2)
 a00ec28:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 a00ec2c:	e0bffe17 	ldw	r2,-8(fp)
 a00ec30:	10c00a04 	addi	r3,r2,40
 a00ec34:	e0bfff17 	ldw	r2,-4(fp)
 a00ec38:	10800217 	ldw	r2,8(r2)
 a00ec3c:	100b883a 	mov	r5,r2
 a00ec40:	1809883a 	mov	r4,r3
 a00ec44:	a00f01c0 	call	a00f01c <altera_avalon_jtag_uart_close>
}
 a00ec48:	e037883a 	mov	sp,fp
 a00ec4c:	dfc00117 	ldw	ra,4(sp)
 a00ec50:	df000017 	ldw	fp,0(sp)
 a00ec54:	dec00204 	addi	sp,sp,8
 a00ec58:	f800283a 	ret

0a00ec5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 a00ec5c:	defffa04 	addi	sp,sp,-24
 a00ec60:	dfc00515 	stw	ra,20(sp)
 a00ec64:	df000415 	stw	fp,16(sp)
 a00ec68:	df000404 	addi	fp,sp,16
 a00ec6c:	e13ffd15 	stw	r4,-12(fp)
 a00ec70:	e17ffe15 	stw	r5,-8(fp)
 a00ec74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 a00ec78:	e0bffd17 	ldw	r2,-12(fp)
 a00ec7c:	10800017 	ldw	r2,0(r2)
 a00ec80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 a00ec84:	e0bffc17 	ldw	r2,-16(fp)
 a00ec88:	10800a04 	addi	r2,r2,40
 a00ec8c:	e1bfff17 	ldw	r6,-4(fp)
 a00ec90:	e17ffe17 	ldw	r5,-8(fp)
 a00ec94:	1009883a 	mov	r4,r2
 a00ec98:	a00f0840 	call	a00f084 <altera_avalon_jtag_uart_ioctl>
}
 a00ec9c:	e037883a 	mov	sp,fp
 a00eca0:	dfc00117 	ldw	ra,4(sp)
 a00eca4:	df000017 	ldw	fp,0(sp)
 a00eca8:	dec00204 	addi	sp,sp,8
 a00ecac:	f800283a 	ret

0a00ecb0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 a00ecb0:	defffa04 	addi	sp,sp,-24
 a00ecb4:	dfc00515 	stw	ra,20(sp)
 a00ecb8:	df000415 	stw	fp,16(sp)
 a00ecbc:	df000404 	addi	fp,sp,16
 a00ecc0:	e13ffd15 	stw	r4,-12(fp)
 a00ecc4:	e17ffe15 	stw	r5,-8(fp)
 a00ecc8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 a00eccc:	e0bffd17 	ldw	r2,-12(fp)
 a00ecd0:	00c00044 	movi	r3,1
 a00ecd4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 a00ecd8:	e0bffd17 	ldw	r2,-12(fp)
 a00ecdc:	10800017 	ldw	r2,0(r2)
 a00ece0:	10800104 	addi	r2,r2,4
 a00ece4:	1007883a 	mov	r3,r2
 a00ece8:	e0bffd17 	ldw	r2,-12(fp)
 a00ecec:	10800817 	ldw	r2,32(r2)
 a00ecf0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 a00ecf4:	e0bffe17 	ldw	r2,-8(fp)
 a00ecf8:	e0ffff17 	ldw	r3,-4(fp)
 a00ecfc:	d8000015 	stw	zero,0(sp)
 a00ed00:	e1fffd17 	ldw	r7,-12(fp)
 a00ed04:	01828074 	movhi	r6,2561
 a00ed08:	31bb5c04 	addi	r6,r6,-4752
 a00ed0c:	180b883a 	mov	r5,r3
 a00ed10:	1009883a 	mov	r4,r2
 a00ed14:	a0109e80 	call	a0109e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 a00ed18:	e0bffd17 	ldw	r2,-12(fp)
 a00ed1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 a00ed20:	e0bffd17 	ldw	r2,-12(fp)
 a00ed24:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 a00ed28:	d0e74917 	ldw	r3,-25308(gp)
 a00ed2c:	e1fffd17 	ldw	r7,-12(fp)
 a00ed30:	01828074 	movhi	r6,2561
 a00ed34:	31bbdf04 	addi	r6,r6,-4228
 a00ed38:	180b883a 	mov	r5,r3
 a00ed3c:	1009883a 	mov	r4,r2
 a00ed40:	a0104c80 	call	a0104c8 <alt_alarm_start>
 a00ed44:	1000040e 	bge	r2,zero,a00ed58 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 a00ed48:	e0fffd17 	ldw	r3,-12(fp)
 a00ed4c:	00a00034 	movhi	r2,32768
 a00ed50:	10bfffc4 	addi	r2,r2,-1
 a00ed54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 a00ed58:	0001883a 	nop
 a00ed5c:	e037883a 	mov	sp,fp
 a00ed60:	dfc00117 	ldw	ra,4(sp)
 a00ed64:	df000017 	ldw	fp,0(sp)
 a00ed68:	dec00204 	addi	sp,sp,8
 a00ed6c:	f800283a 	ret

0a00ed70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 a00ed70:	defff804 	addi	sp,sp,-32
 a00ed74:	df000715 	stw	fp,28(sp)
 a00ed78:	df000704 	addi	fp,sp,28
 a00ed7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 a00ed80:	e0bfff17 	ldw	r2,-4(fp)
 a00ed84:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 a00ed88:	e0bffb17 	ldw	r2,-20(fp)
 a00ed8c:	10800017 	ldw	r2,0(r2)
 a00ed90:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 a00ed94:	e0bffc17 	ldw	r2,-16(fp)
 a00ed98:	10800104 	addi	r2,r2,4
 a00ed9c:	10800037 	ldwio	r2,0(r2)
 a00eda0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 a00eda4:	e0bffd17 	ldw	r2,-12(fp)
 a00eda8:	1080c00c 	andi	r2,r2,768
 a00edac:	10006d26 	beq	r2,zero,a00ef64 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 a00edb0:	e0bffd17 	ldw	r2,-12(fp)
 a00edb4:	1080400c 	andi	r2,r2,256
 a00edb8:	10003526 	beq	r2,zero,a00ee90 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 a00edbc:	00800074 	movhi	r2,1
 a00edc0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a00edc4:	e0bffb17 	ldw	r2,-20(fp)
 a00edc8:	10800a17 	ldw	r2,40(r2)
 a00edcc:	10800044 	addi	r2,r2,1
 a00edd0:	1081ffcc 	andi	r2,r2,2047
 a00edd4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 a00edd8:	e0bffb17 	ldw	r2,-20(fp)
 a00eddc:	10c00b17 	ldw	r3,44(r2)
 a00ede0:	e0bffe17 	ldw	r2,-8(fp)
 a00ede4:	18801526 	beq	r3,r2,a00ee3c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 a00ede8:	e0bffc17 	ldw	r2,-16(fp)
 a00edec:	10800037 	ldwio	r2,0(r2)
 a00edf0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 a00edf4:	e0bff917 	ldw	r2,-28(fp)
 a00edf8:	10a0000c 	andi	r2,r2,32768
 a00edfc:	10001126 	beq	r2,zero,a00ee44 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 a00ee00:	e0bffb17 	ldw	r2,-20(fp)
 a00ee04:	10800a17 	ldw	r2,40(r2)
 a00ee08:	e0fff917 	ldw	r3,-28(fp)
 a00ee0c:	1809883a 	mov	r4,r3
 a00ee10:	e0fffb17 	ldw	r3,-20(fp)
 a00ee14:	1885883a 	add	r2,r3,r2
 a00ee18:	10800e04 	addi	r2,r2,56
 a00ee1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a00ee20:	e0bffb17 	ldw	r2,-20(fp)
 a00ee24:	10800a17 	ldw	r2,40(r2)
 a00ee28:	10800044 	addi	r2,r2,1
 a00ee2c:	10c1ffcc 	andi	r3,r2,2047
 a00ee30:	e0bffb17 	ldw	r2,-20(fp)
 a00ee34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 a00ee38:	003fe206 	br	a00edc4 <__alt_mem_flash+0xfe00ddc4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 a00ee3c:	0001883a 	nop
 a00ee40:	00000106 	br	a00ee48 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 a00ee44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 a00ee48:	e0bff917 	ldw	r2,-28(fp)
 a00ee4c:	10bfffec 	andhi	r2,r2,65535
 a00ee50:	10000f26 	beq	r2,zero,a00ee90 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 a00ee54:	e0bffb17 	ldw	r2,-20(fp)
 a00ee58:	10c00817 	ldw	r3,32(r2)
 a00ee5c:	00bfff84 	movi	r2,-2
 a00ee60:	1886703a 	and	r3,r3,r2
 a00ee64:	e0bffb17 	ldw	r2,-20(fp)
 a00ee68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 a00ee6c:	e0bffc17 	ldw	r2,-16(fp)
 a00ee70:	10800104 	addi	r2,r2,4
 a00ee74:	1007883a 	mov	r3,r2
 a00ee78:	e0bffb17 	ldw	r2,-20(fp)
 a00ee7c:	10800817 	ldw	r2,32(r2)
 a00ee80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 a00ee84:	e0bffc17 	ldw	r2,-16(fp)
 a00ee88:	10800104 	addi	r2,r2,4
 a00ee8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 a00ee90:	e0bffd17 	ldw	r2,-12(fp)
 a00ee94:	1080800c 	andi	r2,r2,512
 a00ee98:	103fbe26 	beq	r2,zero,a00ed94 <__alt_mem_flash+0xfe00dd94>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 a00ee9c:	e0bffd17 	ldw	r2,-12(fp)
 a00eea0:	1004d43a 	srli	r2,r2,16
 a00eea4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 a00eea8:	00001406 	br	a00eefc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 a00eeac:	e0bffc17 	ldw	r2,-16(fp)
 a00eeb0:	e0fffb17 	ldw	r3,-20(fp)
 a00eeb4:	18c00d17 	ldw	r3,52(r3)
 a00eeb8:	e13ffb17 	ldw	r4,-20(fp)
 a00eebc:	20c7883a 	add	r3,r4,r3
 a00eec0:	18c20e04 	addi	r3,r3,2104
 a00eec4:	18c00003 	ldbu	r3,0(r3)
 a00eec8:	18c03fcc 	andi	r3,r3,255
 a00eecc:	18c0201c 	xori	r3,r3,128
 a00eed0:	18ffe004 	addi	r3,r3,-128
 a00eed4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a00eed8:	e0bffb17 	ldw	r2,-20(fp)
 a00eedc:	10800d17 	ldw	r2,52(r2)
 a00eee0:	10800044 	addi	r2,r2,1
 a00eee4:	10c1ffcc 	andi	r3,r2,2047
 a00eee8:	e0bffb17 	ldw	r2,-20(fp)
 a00eeec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 a00eef0:	e0bffa17 	ldw	r2,-24(fp)
 a00eef4:	10bfffc4 	addi	r2,r2,-1
 a00eef8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 a00eefc:	e0bffa17 	ldw	r2,-24(fp)
 a00ef00:	10000526 	beq	r2,zero,a00ef18 <altera_avalon_jtag_uart_irq+0x1a8>
 a00ef04:	e0bffb17 	ldw	r2,-20(fp)
 a00ef08:	10c00d17 	ldw	r3,52(r2)
 a00ef0c:	e0bffb17 	ldw	r2,-20(fp)
 a00ef10:	10800c17 	ldw	r2,48(r2)
 a00ef14:	18bfe51e 	bne	r3,r2,a00eeac <__alt_mem_flash+0xfe00deac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 a00ef18:	e0bffa17 	ldw	r2,-24(fp)
 a00ef1c:	103f9d26 	beq	r2,zero,a00ed94 <__alt_mem_flash+0xfe00dd94>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 a00ef20:	e0bffb17 	ldw	r2,-20(fp)
 a00ef24:	10c00817 	ldw	r3,32(r2)
 a00ef28:	00bfff44 	movi	r2,-3
 a00ef2c:	1886703a 	and	r3,r3,r2
 a00ef30:	e0bffb17 	ldw	r2,-20(fp)
 a00ef34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 a00ef38:	e0bffb17 	ldw	r2,-20(fp)
 a00ef3c:	10800017 	ldw	r2,0(r2)
 a00ef40:	10800104 	addi	r2,r2,4
 a00ef44:	1007883a 	mov	r3,r2
 a00ef48:	e0bffb17 	ldw	r2,-20(fp)
 a00ef4c:	10800817 	ldw	r2,32(r2)
 a00ef50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 a00ef54:	e0bffc17 	ldw	r2,-16(fp)
 a00ef58:	10800104 	addi	r2,r2,4
 a00ef5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 a00ef60:	003f8c06 	br	a00ed94 <__alt_mem_flash+0xfe00dd94>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 a00ef64:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 a00ef68:	0001883a 	nop
 a00ef6c:	e037883a 	mov	sp,fp
 a00ef70:	df000017 	ldw	fp,0(sp)
 a00ef74:	dec00104 	addi	sp,sp,4
 a00ef78:	f800283a 	ret

0a00ef7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 a00ef7c:	defff804 	addi	sp,sp,-32
 a00ef80:	df000715 	stw	fp,28(sp)
 a00ef84:	df000704 	addi	fp,sp,28
 a00ef88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 a00ef8c:	e0bffb17 	ldw	r2,-20(fp)
 a00ef90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 a00ef94:	e0bff917 	ldw	r2,-28(fp)
 a00ef98:	10800017 	ldw	r2,0(r2)
 a00ef9c:	10800104 	addi	r2,r2,4
 a00efa0:	10800037 	ldwio	r2,0(r2)
 a00efa4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 a00efa8:	e0bffa17 	ldw	r2,-24(fp)
 a00efac:	1081000c 	andi	r2,r2,1024
 a00efb0:	10000b26 	beq	r2,zero,a00efe0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 a00efb4:	e0bff917 	ldw	r2,-28(fp)
 a00efb8:	10800017 	ldw	r2,0(r2)
 a00efbc:	10800104 	addi	r2,r2,4
 a00efc0:	1007883a 	mov	r3,r2
 a00efc4:	e0bff917 	ldw	r2,-28(fp)
 a00efc8:	10800817 	ldw	r2,32(r2)
 a00efcc:	10810014 	ori	r2,r2,1024
 a00efd0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 a00efd4:	e0bff917 	ldw	r2,-28(fp)
 a00efd8:	10000915 	stw	zero,36(r2)
 a00efdc:	00000a06 	br	a00f008 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 a00efe0:	e0bff917 	ldw	r2,-28(fp)
 a00efe4:	10c00917 	ldw	r3,36(r2)
 a00efe8:	00a00034 	movhi	r2,32768
 a00efec:	10bfff04 	addi	r2,r2,-4
 a00eff0:	10c00536 	bltu	r2,r3,a00f008 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 a00eff4:	e0bff917 	ldw	r2,-28(fp)
 a00eff8:	10800917 	ldw	r2,36(r2)
 a00effc:	10c00044 	addi	r3,r2,1
 a00f000:	e0bff917 	ldw	r2,-28(fp)
 a00f004:	10c00915 	stw	r3,36(r2)
 a00f008:	d0a74917 	ldw	r2,-25308(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 a00f00c:	e037883a 	mov	sp,fp
 a00f010:	df000017 	ldw	fp,0(sp)
 a00f014:	dec00104 	addi	sp,sp,4
 a00f018:	f800283a 	ret

0a00f01c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 a00f01c:	defffd04 	addi	sp,sp,-12
 a00f020:	df000215 	stw	fp,8(sp)
 a00f024:	df000204 	addi	fp,sp,8
 a00f028:	e13ffe15 	stw	r4,-8(fp)
 a00f02c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 a00f030:	00000506 	br	a00f048 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 a00f034:	e0bfff17 	ldw	r2,-4(fp)
 a00f038:	1090000c 	andi	r2,r2,16384
 a00f03c:	10000226 	beq	r2,zero,a00f048 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 a00f040:	00bffd44 	movi	r2,-11
 a00f044:	00000b06 	br	a00f074 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 a00f048:	e0bffe17 	ldw	r2,-8(fp)
 a00f04c:	10c00d17 	ldw	r3,52(r2)
 a00f050:	e0bffe17 	ldw	r2,-8(fp)
 a00f054:	10800c17 	ldw	r2,48(r2)
 a00f058:	18800526 	beq	r3,r2,a00f070 <altera_avalon_jtag_uart_close+0x54>
 a00f05c:	e0bffe17 	ldw	r2,-8(fp)
 a00f060:	10c00917 	ldw	r3,36(r2)
 a00f064:	e0bffe17 	ldw	r2,-8(fp)
 a00f068:	10800117 	ldw	r2,4(r2)
 a00f06c:	18bff136 	bltu	r3,r2,a00f034 <__alt_mem_flash+0xfe00e034>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 a00f070:	0005883a 	mov	r2,zero
}
 a00f074:	e037883a 	mov	sp,fp
 a00f078:	df000017 	ldw	fp,0(sp)
 a00f07c:	dec00104 	addi	sp,sp,4
 a00f080:	f800283a 	ret

0a00f084 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 a00f084:	defffa04 	addi	sp,sp,-24
 a00f088:	df000515 	stw	fp,20(sp)
 a00f08c:	df000504 	addi	fp,sp,20
 a00f090:	e13ffd15 	stw	r4,-12(fp)
 a00f094:	e17ffe15 	stw	r5,-8(fp)
 a00f098:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 a00f09c:	00bff9c4 	movi	r2,-25
 a00f0a0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 a00f0a4:	e0bffe17 	ldw	r2,-8(fp)
 a00f0a8:	10da8060 	cmpeqi	r3,r2,27137
 a00f0ac:	1800031e 	bne	r3,zero,a00f0bc <altera_avalon_jtag_uart_ioctl+0x38>
 a00f0b0:	109a80a0 	cmpeqi	r2,r2,27138
 a00f0b4:	1000181e 	bne	r2,zero,a00f118 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 a00f0b8:	00002906 	br	a00f160 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 a00f0bc:	e0bffd17 	ldw	r2,-12(fp)
 a00f0c0:	10c00117 	ldw	r3,4(r2)
 a00f0c4:	00a00034 	movhi	r2,32768
 a00f0c8:	10bfffc4 	addi	r2,r2,-1
 a00f0cc:	18802126 	beq	r3,r2,a00f154 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 a00f0d0:	e0bfff17 	ldw	r2,-4(fp)
 a00f0d4:	10800017 	ldw	r2,0(r2)
 a00f0d8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 a00f0dc:	e0bffc17 	ldw	r2,-16(fp)
 a00f0e0:	10800090 	cmplti	r2,r2,2
 a00f0e4:	1000061e 	bne	r2,zero,a00f100 <altera_avalon_jtag_uart_ioctl+0x7c>
 a00f0e8:	e0fffc17 	ldw	r3,-16(fp)
 a00f0ec:	00a00034 	movhi	r2,32768
 a00f0f0:	10bfffc4 	addi	r2,r2,-1
 a00f0f4:	18800226 	beq	r3,r2,a00f100 <altera_avalon_jtag_uart_ioctl+0x7c>
 a00f0f8:	e0bffc17 	ldw	r2,-16(fp)
 a00f0fc:	00000206 	br	a00f108 <altera_avalon_jtag_uart_ioctl+0x84>
 a00f100:	00a00034 	movhi	r2,32768
 a00f104:	10bfff84 	addi	r2,r2,-2
 a00f108:	e0fffd17 	ldw	r3,-12(fp)
 a00f10c:	18800115 	stw	r2,4(r3)
      rc = 0;
 a00f110:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 a00f114:	00000f06 	br	a00f154 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 a00f118:	e0bffd17 	ldw	r2,-12(fp)
 a00f11c:	10c00117 	ldw	r3,4(r2)
 a00f120:	00a00034 	movhi	r2,32768
 a00f124:	10bfffc4 	addi	r2,r2,-1
 a00f128:	18800c26 	beq	r3,r2,a00f15c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 a00f12c:	e0bffd17 	ldw	r2,-12(fp)
 a00f130:	10c00917 	ldw	r3,36(r2)
 a00f134:	e0bffd17 	ldw	r2,-12(fp)
 a00f138:	10800117 	ldw	r2,4(r2)
 a00f13c:	1885803a 	cmpltu	r2,r3,r2
 a00f140:	10c03fcc 	andi	r3,r2,255
 a00f144:	e0bfff17 	ldw	r2,-4(fp)
 a00f148:	10c00015 	stw	r3,0(r2)
      rc = 0;
 a00f14c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 a00f150:	00000206 	br	a00f15c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 a00f154:	0001883a 	nop
 a00f158:	00000106 	br	a00f160 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 a00f15c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 a00f160:	e0bffb17 	ldw	r2,-20(fp)
}
 a00f164:	e037883a 	mov	sp,fp
 a00f168:	df000017 	ldw	fp,0(sp)
 a00f16c:	dec00104 	addi	sp,sp,4
 a00f170:	f800283a 	ret

0a00f174 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 a00f174:	defff304 	addi	sp,sp,-52
 a00f178:	dfc00c15 	stw	ra,48(sp)
 a00f17c:	df000b15 	stw	fp,44(sp)
 a00f180:	df000b04 	addi	fp,sp,44
 a00f184:	e13ffc15 	stw	r4,-16(fp)
 a00f188:	e17ffd15 	stw	r5,-12(fp)
 a00f18c:	e1bffe15 	stw	r6,-8(fp)
 a00f190:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 a00f194:	e0bffd17 	ldw	r2,-12(fp)
 a00f198:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 a00f19c:	00004706 	br	a00f2bc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 a00f1a0:	e0bffc17 	ldw	r2,-16(fp)
 a00f1a4:	10800a17 	ldw	r2,40(r2)
 a00f1a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 a00f1ac:	e0bffc17 	ldw	r2,-16(fp)
 a00f1b0:	10800b17 	ldw	r2,44(r2)
 a00f1b4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 a00f1b8:	e0fff717 	ldw	r3,-36(fp)
 a00f1bc:	e0bff817 	ldw	r2,-32(fp)
 a00f1c0:	18800536 	bltu	r3,r2,a00f1d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 a00f1c4:	e0fff717 	ldw	r3,-36(fp)
 a00f1c8:	e0bff817 	ldw	r2,-32(fp)
 a00f1cc:	1885c83a 	sub	r2,r3,r2
 a00f1d0:	e0bff615 	stw	r2,-40(fp)
 a00f1d4:	00000406 	br	a00f1e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 a00f1d8:	00c20004 	movi	r3,2048
 a00f1dc:	e0bff817 	ldw	r2,-32(fp)
 a00f1e0:	1885c83a 	sub	r2,r3,r2
 a00f1e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 a00f1e8:	e0bff617 	ldw	r2,-40(fp)
 a00f1ec:	10001e26 	beq	r2,zero,a00f268 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 a00f1f0:	e0fffe17 	ldw	r3,-8(fp)
 a00f1f4:	e0bff617 	ldw	r2,-40(fp)
 a00f1f8:	1880022e 	bgeu	r3,r2,a00f204 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 a00f1fc:	e0bffe17 	ldw	r2,-8(fp)
 a00f200:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 a00f204:	e0bffc17 	ldw	r2,-16(fp)
 a00f208:	10c00e04 	addi	r3,r2,56
 a00f20c:	e0bff817 	ldw	r2,-32(fp)
 a00f210:	1885883a 	add	r2,r3,r2
 a00f214:	e1bff617 	ldw	r6,-40(fp)
 a00f218:	100b883a 	mov	r5,r2
 a00f21c:	e13ff517 	ldw	r4,-44(fp)
 a00f220:	a006f6c0 	call	a006f6c <memcpy>
      ptr   += n;
 a00f224:	e0fff517 	ldw	r3,-44(fp)
 a00f228:	e0bff617 	ldw	r2,-40(fp)
 a00f22c:	1885883a 	add	r2,r3,r2
 a00f230:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 a00f234:	e0fffe17 	ldw	r3,-8(fp)
 a00f238:	e0bff617 	ldw	r2,-40(fp)
 a00f23c:	1885c83a 	sub	r2,r3,r2
 a00f240:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a00f244:	e0fff817 	ldw	r3,-32(fp)
 a00f248:	e0bff617 	ldw	r2,-40(fp)
 a00f24c:	1885883a 	add	r2,r3,r2
 a00f250:	10c1ffcc 	andi	r3,r2,2047
 a00f254:	e0bffc17 	ldw	r2,-16(fp)
 a00f258:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 a00f25c:	e0bffe17 	ldw	r2,-8(fp)
 a00f260:	00bfcf16 	blt	zero,r2,a00f1a0 <__alt_mem_flash+0xfe00e1a0>
 a00f264:	00000106 	br	a00f26c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 a00f268:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 a00f26c:	e0fff517 	ldw	r3,-44(fp)
 a00f270:	e0bffd17 	ldw	r2,-12(fp)
 a00f274:	1880141e 	bne	r3,r2,a00f2c8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 a00f278:	e0bfff17 	ldw	r2,-4(fp)
 a00f27c:	1090000c 	andi	r2,r2,16384
 a00f280:	1000131e 	bne	r2,zero,a00f2d0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 a00f284:	0001883a 	nop
 a00f288:	e0bffc17 	ldw	r2,-16(fp)
 a00f28c:	10c00a17 	ldw	r3,40(r2)
 a00f290:	e0bff717 	ldw	r2,-36(fp)
 a00f294:	1880051e 	bne	r3,r2,a00f2ac <altera_avalon_jtag_uart_read+0x138>
 a00f298:	e0bffc17 	ldw	r2,-16(fp)
 a00f29c:	10c00917 	ldw	r3,36(r2)
 a00f2a0:	e0bffc17 	ldw	r2,-16(fp)
 a00f2a4:	10800117 	ldw	r2,4(r2)
 a00f2a8:	18bff736 	bltu	r3,r2,a00f288 <__alt_mem_flash+0xfe00e288>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 a00f2ac:	e0bffc17 	ldw	r2,-16(fp)
 a00f2b0:	10c00a17 	ldw	r3,40(r2)
 a00f2b4:	e0bff717 	ldw	r2,-36(fp)
 a00f2b8:	18800726 	beq	r3,r2,a00f2d8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 a00f2bc:	e0bffe17 	ldw	r2,-8(fp)
 a00f2c0:	00bfb716 	blt	zero,r2,a00f1a0 <__alt_mem_flash+0xfe00e1a0>
 a00f2c4:	00000506 	br	a00f2dc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 a00f2c8:	0001883a 	nop
 a00f2cc:	00000306 	br	a00f2dc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 a00f2d0:	0001883a 	nop
 a00f2d4:	00000106 	br	a00f2dc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 a00f2d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 a00f2dc:	e0fff517 	ldw	r3,-44(fp)
 a00f2e0:	e0bffd17 	ldw	r2,-12(fp)
 a00f2e4:	18801826 	beq	r3,r2,a00f348 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00f2e8:	0005303a 	rdctl	r2,status
 a00f2ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a00f2f0:	e0fffb17 	ldw	r3,-20(fp)
 a00f2f4:	00bfff84 	movi	r2,-2
 a00f2f8:	1884703a 	and	r2,r3,r2
 a00f2fc:	1001703a 	wrctl	status,r2
  
  return context;
 a00f300:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 a00f304:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 a00f308:	e0bffc17 	ldw	r2,-16(fp)
 a00f30c:	10800817 	ldw	r2,32(r2)
 a00f310:	10c00054 	ori	r3,r2,1
 a00f314:	e0bffc17 	ldw	r2,-16(fp)
 a00f318:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 a00f31c:	e0bffc17 	ldw	r2,-16(fp)
 a00f320:	10800017 	ldw	r2,0(r2)
 a00f324:	10800104 	addi	r2,r2,4
 a00f328:	1007883a 	mov	r3,r2
 a00f32c:	e0bffc17 	ldw	r2,-16(fp)
 a00f330:	10800817 	ldw	r2,32(r2)
 a00f334:	18800035 	stwio	r2,0(r3)
 a00f338:	e0bffa17 	ldw	r2,-24(fp)
 a00f33c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00f340:	e0bff917 	ldw	r2,-28(fp)
 a00f344:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 a00f348:	e0fff517 	ldw	r3,-44(fp)
 a00f34c:	e0bffd17 	ldw	r2,-12(fp)
 a00f350:	18800426 	beq	r3,r2,a00f364 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 a00f354:	e0fff517 	ldw	r3,-44(fp)
 a00f358:	e0bffd17 	ldw	r2,-12(fp)
 a00f35c:	1885c83a 	sub	r2,r3,r2
 a00f360:	00000606 	br	a00f37c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 a00f364:	e0bfff17 	ldw	r2,-4(fp)
 a00f368:	1090000c 	andi	r2,r2,16384
 a00f36c:	10000226 	beq	r2,zero,a00f378 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 a00f370:	00bffd44 	movi	r2,-11
 a00f374:	00000106 	br	a00f37c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 a00f378:	00bffec4 	movi	r2,-5
}
 a00f37c:	e037883a 	mov	sp,fp
 a00f380:	dfc00117 	ldw	ra,4(sp)
 a00f384:	df000017 	ldw	fp,0(sp)
 a00f388:	dec00204 	addi	sp,sp,8
 a00f38c:	f800283a 	ret

0a00f390 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 a00f390:	defff304 	addi	sp,sp,-52
 a00f394:	dfc00c15 	stw	ra,48(sp)
 a00f398:	df000b15 	stw	fp,44(sp)
 a00f39c:	df000b04 	addi	fp,sp,44
 a00f3a0:	e13ffc15 	stw	r4,-16(fp)
 a00f3a4:	e17ffd15 	stw	r5,-12(fp)
 a00f3a8:	e1bffe15 	stw	r6,-8(fp)
 a00f3ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 a00f3b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 a00f3b4:	e0bffd17 	ldw	r2,-12(fp)
 a00f3b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 a00f3bc:	00003706 	br	a00f49c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 a00f3c0:	e0bffc17 	ldw	r2,-16(fp)
 a00f3c4:	10800c17 	ldw	r2,48(r2)
 a00f3c8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 a00f3cc:	e0bffc17 	ldw	r2,-16(fp)
 a00f3d0:	10800d17 	ldw	r2,52(r2)
 a00f3d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 a00f3d8:	e0fff917 	ldw	r3,-28(fp)
 a00f3dc:	e0bff517 	ldw	r2,-44(fp)
 a00f3e0:	1880062e 	bgeu	r3,r2,a00f3fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 a00f3e4:	e0fff517 	ldw	r3,-44(fp)
 a00f3e8:	e0bff917 	ldw	r2,-28(fp)
 a00f3ec:	1885c83a 	sub	r2,r3,r2
 a00f3f0:	10bfffc4 	addi	r2,r2,-1
 a00f3f4:	e0bff615 	stw	r2,-40(fp)
 a00f3f8:	00000b06 	br	a00f428 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 a00f3fc:	e0bff517 	ldw	r2,-44(fp)
 a00f400:	10000526 	beq	r2,zero,a00f418 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 a00f404:	00c20004 	movi	r3,2048
 a00f408:	e0bff917 	ldw	r2,-28(fp)
 a00f40c:	1885c83a 	sub	r2,r3,r2
 a00f410:	e0bff615 	stw	r2,-40(fp)
 a00f414:	00000406 	br	a00f428 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 a00f418:	00c1ffc4 	movi	r3,2047
 a00f41c:	e0bff917 	ldw	r2,-28(fp)
 a00f420:	1885c83a 	sub	r2,r3,r2
 a00f424:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 a00f428:	e0bff617 	ldw	r2,-40(fp)
 a00f42c:	10001e26 	beq	r2,zero,a00f4a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 a00f430:	e0fffe17 	ldw	r3,-8(fp)
 a00f434:	e0bff617 	ldw	r2,-40(fp)
 a00f438:	1880022e 	bgeu	r3,r2,a00f444 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 a00f43c:	e0bffe17 	ldw	r2,-8(fp)
 a00f440:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 a00f444:	e0bffc17 	ldw	r2,-16(fp)
 a00f448:	10c20e04 	addi	r3,r2,2104
 a00f44c:	e0bff917 	ldw	r2,-28(fp)
 a00f450:	1885883a 	add	r2,r3,r2
 a00f454:	e1bff617 	ldw	r6,-40(fp)
 a00f458:	e17ffd17 	ldw	r5,-12(fp)
 a00f45c:	1009883a 	mov	r4,r2
 a00f460:	a006f6c0 	call	a006f6c <memcpy>
      ptr   += n;
 a00f464:	e0fffd17 	ldw	r3,-12(fp)
 a00f468:	e0bff617 	ldw	r2,-40(fp)
 a00f46c:	1885883a 	add	r2,r3,r2
 a00f470:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 a00f474:	e0fffe17 	ldw	r3,-8(fp)
 a00f478:	e0bff617 	ldw	r2,-40(fp)
 a00f47c:	1885c83a 	sub	r2,r3,r2
 a00f480:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a00f484:	e0fff917 	ldw	r3,-28(fp)
 a00f488:	e0bff617 	ldw	r2,-40(fp)
 a00f48c:	1885883a 	add	r2,r3,r2
 a00f490:	10c1ffcc 	andi	r3,r2,2047
 a00f494:	e0bffc17 	ldw	r2,-16(fp)
 a00f498:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 a00f49c:	e0bffe17 	ldw	r2,-8(fp)
 a00f4a0:	00bfc716 	blt	zero,r2,a00f3c0 <__alt_mem_flash+0xfe00e3c0>
 a00f4a4:	00000106 	br	a00f4ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 a00f4a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00f4ac:	0005303a 	rdctl	r2,status
 a00f4b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a00f4b4:	e0fffb17 	ldw	r3,-20(fp)
 a00f4b8:	00bfff84 	movi	r2,-2
 a00f4bc:	1884703a 	and	r2,r3,r2
 a00f4c0:	1001703a 	wrctl	status,r2
  
  return context;
 a00f4c4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 a00f4c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 a00f4cc:	e0bffc17 	ldw	r2,-16(fp)
 a00f4d0:	10800817 	ldw	r2,32(r2)
 a00f4d4:	10c00094 	ori	r3,r2,2
 a00f4d8:	e0bffc17 	ldw	r2,-16(fp)
 a00f4dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 a00f4e0:	e0bffc17 	ldw	r2,-16(fp)
 a00f4e4:	10800017 	ldw	r2,0(r2)
 a00f4e8:	10800104 	addi	r2,r2,4
 a00f4ec:	1007883a 	mov	r3,r2
 a00f4f0:	e0bffc17 	ldw	r2,-16(fp)
 a00f4f4:	10800817 	ldw	r2,32(r2)
 a00f4f8:	18800035 	stwio	r2,0(r3)
 a00f4fc:	e0bffa17 	ldw	r2,-24(fp)
 a00f500:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00f504:	e0bff817 	ldw	r2,-32(fp)
 a00f508:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 a00f50c:	e0bffe17 	ldw	r2,-8(fp)
 a00f510:	0080100e 	bge	zero,r2,a00f554 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 a00f514:	e0bfff17 	ldw	r2,-4(fp)
 a00f518:	1090000c 	andi	r2,r2,16384
 a00f51c:	1000101e 	bne	r2,zero,a00f560 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 a00f520:	0001883a 	nop
 a00f524:	e0bffc17 	ldw	r2,-16(fp)
 a00f528:	10c00d17 	ldw	r3,52(r2)
 a00f52c:	e0bff517 	ldw	r2,-44(fp)
 a00f530:	1880051e 	bne	r3,r2,a00f548 <altera_avalon_jtag_uart_write+0x1b8>
 a00f534:	e0bffc17 	ldw	r2,-16(fp)
 a00f538:	10c00917 	ldw	r3,36(r2)
 a00f53c:	e0bffc17 	ldw	r2,-16(fp)
 a00f540:	10800117 	ldw	r2,4(r2)
 a00f544:	18bff736 	bltu	r3,r2,a00f524 <__alt_mem_flash+0xfe00e524>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 a00f548:	e0bffc17 	ldw	r2,-16(fp)
 a00f54c:	10800917 	ldw	r2,36(r2)
 a00f550:	1000051e 	bne	r2,zero,a00f568 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 a00f554:	e0bffe17 	ldw	r2,-8(fp)
 a00f558:	00bfd016 	blt	zero,r2,a00f49c <__alt_mem_flash+0xfe00e49c>
 a00f55c:	00000306 	br	a00f56c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 a00f560:	0001883a 	nop
 a00f564:	00000106 	br	a00f56c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 a00f568:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 a00f56c:	e0fffd17 	ldw	r3,-12(fp)
 a00f570:	e0bff717 	ldw	r2,-36(fp)
 a00f574:	18800426 	beq	r3,r2,a00f588 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 a00f578:	e0fffd17 	ldw	r3,-12(fp)
 a00f57c:	e0bff717 	ldw	r2,-36(fp)
 a00f580:	1885c83a 	sub	r2,r3,r2
 a00f584:	00000606 	br	a00f5a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 a00f588:	e0bfff17 	ldw	r2,-4(fp)
 a00f58c:	1090000c 	andi	r2,r2,16384
 a00f590:	10000226 	beq	r2,zero,a00f59c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 a00f594:	00bffd44 	movi	r2,-11
 a00f598:	00000106 	br	a00f5a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 a00f59c:	00bffec4 	movi	r2,-5
}
 a00f5a0:	e037883a 	mov	sp,fp
 a00f5a4:	dfc00117 	ldw	ra,4(sp)
 a00f5a8:	df000017 	ldw	fp,0(sp)
 a00f5ac:	dec00204 	addi	sp,sp,8
 a00f5b0:	f800283a 	ret

0a00f5b4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 a00f5b4:	defffa04 	addi	sp,sp,-24
 a00f5b8:	dfc00515 	stw	ra,20(sp)
 a00f5bc:	df000415 	stw	fp,16(sp)
 a00f5c0:	df000404 	addi	fp,sp,16
 a00f5c4:	e13ffd15 	stw	r4,-12(fp)
 a00f5c8:	e17ffe15 	stw	r5,-8(fp)
 a00f5cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 a00f5d0:	e0bffd17 	ldw	r2,-12(fp)
 a00f5d4:	10800017 	ldw	r2,0(r2)
 a00f5d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 a00f5dc:	e0bffc17 	ldw	r2,-16(fp)
 a00f5e0:	10c00a04 	addi	r3,r2,40
 a00f5e4:	e0bffd17 	ldw	r2,-12(fp)
 a00f5e8:	10800217 	ldw	r2,8(r2)
 a00f5ec:	100f883a 	mov	r7,r2
 a00f5f0:	e1bfff17 	ldw	r6,-4(fp)
 a00f5f4:	e17ffe17 	ldw	r5,-8(fp)
 a00f5f8:	1809883a 	mov	r4,r3
 a00f5fc:	a00fac80 	call	a00fac8 <altera_avalon_uart_read>
      fd->fd_flags);
}
 a00f600:	e037883a 	mov	sp,fp
 a00f604:	dfc00117 	ldw	ra,4(sp)
 a00f608:	df000017 	ldw	fp,0(sp)
 a00f60c:	dec00204 	addi	sp,sp,8
 a00f610:	f800283a 	ret

0a00f614 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 a00f614:	defffa04 	addi	sp,sp,-24
 a00f618:	dfc00515 	stw	ra,20(sp)
 a00f61c:	df000415 	stw	fp,16(sp)
 a00f620:	df000404 	addi	fp,sp,16
 a00f624:	e13ffd15 	stw	r4,-12(fp)
 a00f628:	e17ffe15 	stw	r5,-8(fp)
 a00f62c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 a00f630:	e0bffd17 	ldw	r2,-12(fp)
 a00f634:	10800017 	ldw	r2,0(r2)
 a00f638:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 a00f63c:	e0bffc17 	ldw	r2,-16(fp)
 a00f640:	10c00a04 	addi	r3,r2,40
 a00f644:	e0bffd17 	ldw	r2,-12(fp)
 a00f648:	10800217 	ldw	r2,8(r2)
 a00f64c:	100f883a 	mov	r7,r2
 a00f650:	e1bfff17 	ldw	r6,-4(fp)
 a00f654:	e17ffe17 	ldw	r5,-8(fp)
 a00f658:	1809883a 	mov	r4,r3
 a00f65c:	a00fce00 	call	a00fce0 <altera_avalon_uart_write>
      fd->fd_flags);
}
 a00f660:	e037883a 	mov	sp,fp
 a00f664:	dfc00117 	ldw	ra,4(sp)
 a00f668:	df000017 	ldw	fp,0(sp)
 a00f66c:	dec00204 	addi	sp,sp,8
 a00f670:	f800283a 	ret

0a00f674 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 a00f674:	defffc04 	addi	sp,sp,-16
 a00f678:	dfc00315 	stw	ra,12(sp)
 a00f67c:	df000215 	stw	fp,8(sp)
 a00f680:	df000204 	addi	fp,sp,8
 a00f684:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 a00f688:	e0bfff17 	ldw	r2,-4(fp)
 a00f68c:	10800017 	ldw	r2,0(r2)
 a00f690:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 a00f694:	e0bffe17 	ldw	r2,-8(fp)
 a00f698:	10c00a04 	addi	r3,r2,40
 a00f69c:	e0bfff17 	ldw	r2,-4(fp)
 a00f6a0:	10800217 	ldw	r2,8(r2)
 a00f6a4:	100b883a 	mov	r5,r2
 a00f6a8:	1809883a 	mov	r4,r3
 a00f6ac:	a00fa380 	call	a00fa38 <altera_avalon_uart_close>
}
 a00f6b0:	e037883a 	mov	sp,fp
 a00f6b4:	dfc00117 	ldw	ra,4(sp)
 a00f6b8:	df000017 	ldw	fp,0(sp)
 a00f6bc:	dec00204 	addi	sp,sp,8
 a00f6c0:	f800283a 	ret

0a00f6c4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 a00f6c4:	defff804 	addi	sp,sp,-32
 a00f6c8:	dfc00715 	stw	ra,28(sp)
 a00f6cc:	df000615 	stw	fp,24(sp)
 a00f6d0:	df000604 	addi	fp,sp,24
 a00f6d4:	e13ffd15 	stw	r4,-12(fp)
 a00f6d8:	e17ffe15 	stw	r5,-8(fp)
 a00f6dc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 a00f6e0:	e0bffd17 	ldw	r2,-12(fp)
 a00f6e4:	10800017 	ldw	r2,0(r2)
 a00f6e8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 a00f6ec:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 a00f6f0:	1000041e 	bne	r2,zero,a00f704 <altera_avalon_uart_init+0x40>
 a00f6f4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 a00f6f8:	1000021e 	bne	r2,zero,a00f704 <altera_avalon_uart_init+0x40>
 a00f6fc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 a00f700:	10000226 	beq	r2,zero,a00f70c <altera_avalon_uart_init+0x48>
 a00f704:	00800044 	movi	r2,1
 a00f708:	00000106 	br	a00f710 <altera_avalon_uart_init+0x4c>
 a00f70c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 a00f710:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 a00f714:	e0bffc17 	ldw	r2,-16(fp)
 a00f718:	10000f1e 	bne	r2,zero,a00f758 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 a00f71c:	e0bffd17 	ldw	r2,-12(fp)
 a00f720:	00c32004 	movi	r3,3200
 a00f724:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 a00f728:	e0bffb17 	ldw	r2,-20(fp)
 a00f72c:	10800304 	addi	r2,r2,12
 a00f730:	e0fffd17 	ldw	r3,-12(fp)
 a00f734:	18c00117 	ldw	r3,4(r3)
 a00f738:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 a00f73c:	d8000015 	stw	zero,0(sp)
 a00f740:	e1fffd17 	ldw	r7,-12(fp)
 a00f744:	01828074 	movhi	r6,2561
 a00f748:	31bddc04 	addi	r6,r6,-2192
 a00f74c:	e17fff17 	ldw	r5,-4(fp)
 a00f750:	e13ffe17 	ldw	r4,-8(fp)
 a00f754:	a0109e80 	call	a0109e8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 a00f758:	0001883a 	nop
 a00f75c:	e037883a 	mov	sp,fp
 a00f760:	dfc00117 	ldw	ra,4(sp)
 a00f764:	df000017 	ldw	fp,0(sp)
 a00f768:	dec00204 	addi	sp,sp,8
 a00f76c:	f800283a 	ret

0a00f770 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 a00f770:	defffa04 	addi	sp,sp,-24
 a00f774:	dfc00515 	stw	ra,20(sp)
 a00f778:	df000415 	stw	fp,16(sp)
 a00f77c:	df000404 	addi	fp,sp,16
 a00f780:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 a00f784:	e0bfff17 	ldw	r2,-4(fp)
 a00f788:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 a00f78c:	e0bffc17 	ldw	r2,-16(fp)
 a00f790:	10800017 	ldw	r2,0(r2)
 a00f794:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 a00f798:	e0bffd17 	ldw	r2,-12(fp)
 a00f79c:	10800204 	addi	r2,r2,8
 a00f7a0:	10800037 	ldwio	r2,0(r2)
 a00f7a4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 a00f7a8:	e0bffd17 	ldw	r2,-12(fp)
 a00f7ac:	10800204 	addi	r2,r2,8
 a00f7b0:	0007883a 	mov	r3,zero
 a00f7b4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 a00f7b8:	e0bffd17 	ldw	r2,-12(fp)
 a00f7bc:	10800204 	addi	r2,r2,8
 a00f7c0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 a00f7c4:	e0bffe17 	ldw	r2,-8(fp)
 a00f7c8:	1080200c 	andi	r2,r2,128
 a00f7cc:	10000326 	beq	r2,zero,a00f7dc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 a00f7d0:	e17ffe17 	ldw	r5,-8(fp)
 a00f7d4:	e13ffc17 	ldw	r4,-16(fp)
 a00f7d8:	a00f80c0 	call	a00f80c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 a00f7dc:	e0bffe17 	ldw	r2,-8(fp)
 a00f7e0:	1081100c 	andi	r2,r2,1088
 a00f7e4:	10000326 	beq	r2,zero,a00f7f4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 a00f7e8:	e17ffe17 	ldw	r5,-8(fp)
 a00f7ec:	e13ffc17 	ldw	r4,-16(fp)
 a00f7f0:	a00f8f00 	call	a00f8f0 <altera_avalon_uart_txirq>
  }
  

}
 a00f7f4:	0001883a 	nop
 a00f7f8:	e037883a 	mov	sp,fp
 a00f7fc:	dfc00117 	ldw	ra,4(sp)
 a00f800:	df000017 	ldw	fp,0(sp)
 a00f804:	dec00204 	addi	sp,sp,8
 a00f808:	f800283a 	ret

0a00f80c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 a00f80c:	defffc04 	addi	sp,sp,-16
 a00f810:	df000315 	stw	fp,12(sp)
 a00f814:	df000304 	addi	fp,sp,12
 a00f818:	e13ffe15 	stw	r4,-8(fp)
 a00f81c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 a00f820:	e0bfff17 	ldw	r2,-4(fp)
 a00f824:	108000cc 	andi	r2,r2,3
 a00f828:	10002c1e 	bne	r2,zero,a00f8dc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 a00f82c:	e0bffe17 	ldw	r2,-8(fp)
 a00f830:	10800317 	ldw	r2,12(r2)
 a00f834:	e0bffe17 	ldw	r2,-8(fp)
 a00f838:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 a00f83c:	e0bffe17 	ldw	r2,-8(fp)
 a00f840:	10800317 	ldw	r2,12(r2)
 a00f844:	10800044 	addi	r2,r2,1
 a00f848:	10800fcc 	andi	r2,r2,63
 a00f84c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 a00f850:	e0bffe17 	ldw	r2,-8(fp)
 a00f854:	10800317 	ldw	r2,12(r2)
 a00f858:	e0fffe17 	ldw	r3,-8(fp)
 a00f85c:	18c00017 	ldw	r3,0(r3)
 a00f860:	18c00037 	ldwio	r3,0(r3)
 a00f864:	1809883a 	mov	r4,r3
 a00f868:	e0fffe17 	ldw	r3,-8(fp)
 a00f86c:	1885883a 	add	r2,r3,r2
 a00f870:	10800704 	addi	r2,r2,28
 a00f874:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 a00f878:	e0bffe17 	ldw	r2,-8(fp)
 a00f87c:	e0fffd17 	ldw	r3,-12(fp)
 a00f880:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 a00f884:	e0bffe17 	ldw	r2,-8(fp)
 a00f888:	10800317 	ldw	r2,12(r2)
 a00f88c:	10800044 	addi	r2,r2,1
 a00f890:	10800fcc 	andi	r2,r2,63
 a00f894:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 a00f898:	e0bffe17 	ldw	r2,-8(fp)
 a00f89c:	10c00217 	ldw	r3,8(r2)
 a00f8a0:	e0bffd17 	ldw	r2,-12(fp)
 a00f8a4:	18800e1e 	bne	r3,r2,a00f8e0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 a00f8a8:	e0bffe17 	ldw	r2,-8(fp)
 a00f8ac:	10c00117 	ldw	r3,4(r2)
 a00f8b0:	00bfdfc4 	movi	r2,-129
 a00f8b4:	1886703a 	and	r3,r3,r2
 a00f8b8:	e0bffe17 	ldw	r2,-8(fp)
 a00f8bc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 a00f8c0:	e0bffe17 	ldw	r2,-8(fp)
 a00f8c4:	10800017 	ldw	r2,0(r2)
 a00f8c8:	10800304 	addi	r2,r2,12
 a00f8cc:	e0fffe17 	ldw	r3,-8(fp)
 a00f8d0:	18c00117 	ldw	r3,4(r3)
 a00f8d4:	10c00035 	stwio	r3,0(r2)
 a00f8d8:	00000106 	br	a00f8e0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 a00f8dc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 a00f8e0:	e037883a 	mov	sp,fp
 a00f8e4:	df000017 	ldw	fp,0(sp)
 a00f8e8:	dec00104 	addi	sp,sp,4
 a00f8ec:	f800283a 	ret

0a00f8f0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 a00f8f0:	defffb04 	addi	sp,sp,-20
 a00f8f4:	df000415 	stw	fp,16(sp)
 a00f8f8:	df000404 	addi	fp,sp,16
 a00f8fc:	e13ffc15 	stw	r4,-16(fp)
 a00f900:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 a00f904:	e0bffc17 	ldw	r2,-16(fp)
 a00f908:	10c00417 	ldw	r3,16(r2)
 a00f90c:	e0bffc17 	ldw	r2,-16(fp)
 a00f910:	10800517 	ldw	r2,20(r2)
 a00f914:	18803226 	beq	r3,r2,a00f9e0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 a00f918:	e0bffc17 	ldw	r2,-16(fp)
 a00f91c:	10800617 	ldw	r2,24(r2)
 a00f920:	1080008c 	andi	r2,r2,2
 a00f924:	10000326 	beq	r2,zero,a00f934 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 a00f928:	e0bffd17 	ldw	r2,-12(fp)
 a00f92c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 a00f930:	10001d26 	beq	r2,zero,a00f9a8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 a00f934:	e0bffc17 	ldw	r2,-16(fp)
 a00f938:	10800417 	ldw	r2,16(r2)
 a00f93c:	e0bffc17 	ldw	r2,-16(fp)
 a00f940:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 a00f944:	e0bffc17 	ldw	r2,-16(fp)
 a00f948:	10800017 	ldw	r2,0(r2)
 a00f94c:	10800104 	addi	r2,r2,4
 a00f950:	e0fffc17 	ldw	r3,-16(fp)
 a00f954:	18c00417 	ldw	r3,16(r3)
 a00f958:	e13ffc17 	ldw	r4,-16(fp)
 a00f95c:	20c7883a 	add	r3,r4,r3
 a00f960:	18c01704 	addi	r3,r3,92
 a00f964:	18c00003 	ldbu	r3,0(r3)
 a00f968:	18c03fcc 	andi	r3,r3,255
 a00f96c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 a00f970:	e0bffc17 	ldw	r2,-16(fp)
 a00f974:	10800417 	ldw	r2,16(r2)
 a00f978:	10800044 	addi	r2,r2,1
 a00f97c:	e0fffc17 	ldw	r3,-16(fp)
 a00f980:	18800415 	stw	r2,16(r3)
 a00f984:	10c00fcc 	andi	r3,r2,63
 a00f988:	e0bffc17 	ldw	r2,-16(fp)
 a00f98c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 a00f990:	e0bffc17 	ldw	r2,-16(fp)
 a00f994:	10800117 	ldw	r2,4(r2)
 a00f998:	10c01014 	ori	r3,r2,64
 a00f99c:	e0bffc17 	ldw	r2,-16(fp)
 a00f9a0:	10c00115 	stw	r3,4(r2)
 a00f9a4:	00000e06 	br	a00f9e0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 a00f9a8:	e0bffc17 	ldw	r2,-16(fp)
 a00f9ac:	10800017 	ldw	r2,0(r2)
 a00f9b0:	10800204 	addi	r2,r2,8
 a00f9b4:	10800037 	ldwio	r2,0(r2)
 a00f9b8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 a00f9bc:	e0bffd17 	ldw	r2,-12(fp)
 a00f9c0:	1082000c 	andi	r2,r2,2048
 a00f9c4:	1000061e 	bne	r2,zero,a00f9e0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 a00f9c8:	e0bffc17 	ldw	r2,-16(fp)
 a00f9cc:	10c00117 	ldw	r3,4(r2)
 a00f9d0:	00bfefc4 	movi	r2,-65
 a00f9d4:	1886703a 	and	r3,r3,r2
 a00f9d8:	e0bffc17 	ldw	r2,-16(fp)
 a00f9dc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 a00f9e0:	e0bffc17 	ldw	r2,-16(fp)
 a00f9e4:	10c00417 	ldw	r3,16(r2)
 a00f9e8:	e0bffc17 	ldw	r2,-16(fp)
 a00f9ec:	10800517 	ldw	r2,20(r2)
 a00f9f0:	1880061e 	bne	r3,r2,a00fa0c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 a00f9f4:	e0bffc17 	ldw	r2,-16(fp)
 a00f9f8:	10c00117 	ldw	r3,4(r2)
 a00f9fc:	00beefc4 	movi	r2,-1089
 a00fa00:	1886703a 	and	r3,r3,r2
 a00fa04:	e0bffc17 	ldw	r2,-16(fp)
 a00fa08:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a00fa0c:	e0bffc17 	ldw	r2,-16(fp)
 a00fa10:	10800017 	ldw	r2,0(r2)
 a00fa14:	10800304 	addi	r2,r2,12
 a00fa18:	e0fffc17 	ldw	r3,-16(fp)
 a00fa1c:	18c00117 	ldw	r3,4(r3)
 a00fa20:	10c00035 	stwio	r3,0(r2)
}
 a00fa24:	0001883a 	nop
 a00fa28:	e037883a 	mov	sp,fp
 a00fa2c:	df000017 	ldw	fp,0(sp)
 a00fa30:	dec00104 	addi	sp,sp,4
 a00fa34:	f800283a 	ret

0a00fa38 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 a00fa38:	defffd04 	addi	sp,sp,-12
 a00fa3c:	df000215 	stw	fp,8(sp)
 a00fa40:	df000204 	addi	fp,sp,8
 a00fa44:	e13ffe15 	stw	r4,-8(fp)
 a00fa48:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 a00fa4c:	00000506 	br	a00fa64 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 a00fa50:	e0bfff17 	ldw	r2,-4(fp)
 a00fa54:	1090000c 	andi	r2,r2,16384
 a00fa58:	10000226 	beq	r2,zero,a00fa64 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 a00fa5c:	00bffd44 	movi	r2,-11
 a00fa60:	00000606 	br	a00fa7c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 a00fa64:	e0bffe17 	ldw	r2,-8(fp)
 a00fa68:	10c00417 	ldw	r3,16(r2)
 a00fa6c:	e0bffe17 	ldw	r2,-8(fp)
 a00fa70:	10800517 	ldw	r2,20(r2)
 a00fa74:	18bff61e 	bne	r3,r2,a00fa50 <__alt_mem_flash+0xfe00ea50>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 a00fa78:	0005883a 	mov	r2,zero
}
 a00fa7c:	e037883a 	mov	sp,fp
 a00fa80:	df000017 	ldw	fp,0(sp)
 a00fa84:	dec00104 	addi	sp,sp,4
 a00fa88:	f800283a 	ret

0a00fa8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00fa8c:	defffe04 	addi	sp,sp,-8
 a00fa90:	dfc00115 	stw	ra,4(sp)
 a00fa94:	df000015 	stw	fp,0(sp)
 a00fa98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00fa9c:	d0a00b17 	ldw	r2,-32724(gp)
 a00faa0:	10000326 	beq	r2,zero,a00fab0 <alt_get_errno+0x24>
 a00faa4:	d0a00b17 	ldw	r2,-32724(gp)
 a00faa8:	103ee83a 	callr	r2
 a00faac:	00000106 	br	a00fab4 <alt_get_errno+0x28>
 a00fab0:	d0a74404 	addi	r2,gp,-25328
}
 a00fab4:	e037883a 	mov	sp,fp
 a00fab8:	dfc00117 	ldw	ra,4(sp)
 a00fabc:	df000017 	ldw	fp,0(sp)
 a00fac0:	dec00204 	addi	sp,sp,8
 a00fac4:	f800283a 	ret

0a00fac8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 a00fac8:	defff204 	addi	sp,sp,-56
 a00facc:	dfc00d15 	stw	ra,52(sp)
 a00fad0:	df000c15 	stw	fp,48(sp)
 a00fad4:	df000c04 	addi	fp,sp,48
 a00fad8:	e13ffc15 	stw	r4,-16(fp)
 a00fadc:	e17ffd15 	stw	r5,-12(fp)
 a00fae0:	e1bffe15 	stw	r6,-8(fp)
 a00fae4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 a00fae8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 a00faec:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 a00faf0:	e0bfff17 	ldw	r2,-4(fp)
 a00faf4:	1090000c 	andi	r2,r2,16384
 a00faf8:	1005003a 	cmpeq	r2,r2,zero
 a00fafc:	10803fcc 	andi	r2,r2,255
 a00fb00:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 a00fb04:	00001306 	br	a00fb54 <altera_avalon_uart_read+0x8c>
    {
      count++;
 a00fb08:	e0bff517 	ldw	r2,-44(fp)
 a00fb0c:	10800044 	addi	r2,r2,1
 a00fb10:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 a00fb14:	e0bffd17 	ldw	r2,-12(fp)
 a00fb18:	10c00044 	addi	r3,r2,1
 a00fb1c:	e0fffd15 	stw	r3,-12(fp)
 a00fb20:	e0fffc17 	ldw	r3,-16(fp)
 a00fb24:	18c00217 	ldw	r3,8(r3)
 a00fb28:	e13ffc17 	ldw	r4,-16(fp)
 a00fb2c:	20c7883a 	add	r3,r4,r3
 a00fb30:	18c00704 	addi	r3,r3,28
 a00fb34:	18c00003 	ldbu	r3,0(r3)
 a00fb38:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 a00fb3c:	e0bffc17 	ldw	r2,-16(fp)
 a00fb40:	10800217 	ldw	r2,8(r2)
 a00fb44:	10800044 	addi	r2,r2,1
 a00fb48:	10c00fcc 	andi	r3,r2,63
 a00fb4c:	e0bffc17 	ldw	r2,-16(fp)
 a00fb50:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 a00fb54:	e0fff517 	ldw	r3,-44(fp)
 a00fb58:	e0bffe17 	ldw	r2,-8(fp)
 a00fb5c:	1880050e 	bge	r3,r2,a00fb74 <altera_avalon_uart_read+0xac>
 a00fb60:	e0bffc17 	ldw	r2,-16(fp)
 a00fb64:	10c00217 	ldw	r3,8(r2)
 a00fb68:	e0bffc17 	ldw	r2,-16(fp)
 a00fb6c:	10800317 	ldw	r2,12(r2)
 a00fb70:	18bfe51e 	bne	r3,r2,a00fb08 <__alt_mem_flash+0xfe00eb08>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 a00fb74:	e0bff517 	ldw	r2,-44(fp)
 a00fb78:	1000251e 	bne	r2,zero,a00fc10 <altera_avalon_uart_read+0x148>
 a00fb7c:	e0bffc17 	ldw	r2,-16(fp)
 a00fb80:	10c00217 	ldw	r3,8(r2)
 a00fb84:	e0bffc17 	ldw	r2,-16(fp)
 a00fb88:	10800317 	ldw	r2,12(r2)
 a00fb8c:	1880201e 	bne	r3,r2,a00fc10 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 a00fb90:	e0bff617 	ldw	r2,-40(fp)
 a00fb94:	1000071e 	bne	r2,zero,a00fbb4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 a00fb98:	a00fa8c0 	call	a00fa8c <alt_get_errno>
 a00fb9c:	1007883a 	mov	r3,r2
 a00fba0:	008002c4 	movi	r2,11
 a00fba4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 a00fba8:	00800044 	movi	r2,1
 a00fbac:	e0bff405 	stb	r2,-48(fp)
        break;
 a00fbb0:	00001b06 	br	a00fc20 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00fbb4:	0005303a 	rdctl	r2,status
 a00fbb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a00fbbc:	e0fff917 	ldw	r3,-28(fp)
 a00fbc0:	00bfff84 	movi	r2,-2
 a00fbc4:	1884703a 	and	r2,r3,r2
 a00fbc8:	1001703a 	wrctl	status,r2
  
  return context;
 a00fbcc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 a00fbd0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 a00fbd4:	e0bffc17 	ldw	r2,-16(fp)
 a00fbd8:	10800117 	ldw	r2,4(r2)
 a00fbdc:	10c02014 	ori	r3,r2,128
 a00fbe0:	e0bffc17 	ldw	r2,-16(fp)
 a00fbe4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a00fbe8:	e0bffc17 	ldw	r2,-16(fp)
 a00fbec:	10800017 	ldw	r2,0(r2)
 a00fbf0:	10800304 	addi	r2,r2,12
 a00fbf4:	e0fffc17 	ldw	r3,-16(fp)
 a00fbf8:	18c00117 	ldw	r3,4(r3)
 a00fbfc:	10c00035 	stwio	r3,0(r2)
 a00fc00:	e0bff817 	ldw	r2,-32(fp)
 a00fc04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00fc08:	e0bffa17 	ldw	r2,-24(fp)
 a00fc0c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 a00fc10:	e0bff517 	ldw	r2,-44(fp)
 a00fc14:	1000021e 	bne	r2,zero,a00fc20 <altera_avalon_uart_read+0x158>
 a00fc18:	e0bffe17 	ldw	r2,-8(fp)
 a00fc1c:	103fcd1e 	bne	r2,zero,a00fb54 <__alt_mem_flash+0xfe00eb54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00fc20:	0005303a 	rdctl	r2,status
 a00fc24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a00fc28:	e0fffb17 	ldw	r3,-20(fp)
 a00fc2c:	00bfff84 	movi	r2,-2
 a00fc30:	1884703a 	and	r2,r3,r2
 a00fc34:	1001703a 	wrctl	status,r2
  
  return context;
 a00fc38:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 a00fc3c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 a00fc40:	e0bffc17 	ldw	r2,-16(fp)
 a00fc44:	10800117 	ldw	r2,4(r2)
 a00fc48:	10c02014 	ori	r3,r2,128
 a00fc4c:	e0bffc17 	ldw	r2,-16(fp)
 a00fc50:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a00fc54:	e0bffc17 	ldw	r2,-16(fp)
 a00fc58:	10800017 	ldw	r2,0(r2)
 a00fc5c:	10800304 	addi	r2,r2,12
 a00fc60:	e0fffc17 	ldw	r3,-16(fp)
 a00fc64:	18c00117 	ldw	r3,4(r3)
 a00fc68:	10c00035 	stwio	r3,0(r2)
 a00fc6c:	e0bff817 	ldw	r2,-32(fp)
 a00fc70:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00fc74:	e0bff717 	ldw	r2,-36(fp)
 a00fc78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 a00fc7c:	e0bff403 	ldbu	r2,-48(fp)
 a00fc80:	10000226 	beq	r2,zero,a00fc8c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 a00fc84:	00bffd44 	movi	r2,-11
 a00fc88:	00000106 	br	a00fc90 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 a00fc8c:	e0bff517 	ldw	r2,-44(fp)
  }
}
 a00fc90:	e037883a 	mov	sp,fp
 a00fc94:	dfc00117 	ldw	ra,4(sp)
 a00fc98:	df000017 	ldw	fp,0(sp)
 a00fc9c:	dec00204 	addi	sp,sp,8
 a00fca0:	f800283a 	ret

0a00fca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00fca4:	defffe04 	addi	sp,sp,-8
 a00fca8:	dfc00115 	stw	ra,4(sp)
 a00fcac:	df000015 	stw	fp,0(sp)
 a00fcb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00fcb4:	d0a00b17 	ldw	r2,-32724(gp)
 a00fcb8:	10000326 	beq	r2,zero,a00fcc8 <alt_get_errno+0x24>
 a00fcbc:	d0a00b17 	ldw	r2,-32724(gp)
 a00fcc0:	103ee83a 	callr	r2
 a00fcc4:	00000106 	br	a00fccc <alt_get_errno+0x28>
 a00fcc8:	d0a74404 	addi	r2,gp,-25328
}
 a00fccc:	e037883a 	mov	sp,fp
 a00fcd0:	dfc00117 	ldw	ra,4(sp)
 a00fcd4:	df000017 	ldw	fp,0(sp)
 a00fcd8:	dec00204 	addi	sp,sp,8
 a00fcdc:	f800283a 	ret

0a00fce0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 a00fce0:	defff204 	addi	sp,sp,-56
 a00fce4:	dfc00d15 	stw	ra,52(sp)
 a00fce8:	df000c15 	stw	fp,48(sp)
 a00fcec:	df000c04 	addi	fp,sp,48
 a00fcf0:	e13ffc15 	stw	r4,-16(fp)
 a00fcf4:	e17ffd15 	stw	r5,-12(fp)
 a00fcf8:	e1bffe15 	stw	r6,-8(fp)
 a00fcfc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 a00fd00:	e0bffe17 	ldw	r2,-8(fp)
 a00fd04:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 a00fd08:	e0bfff17 	ldw	r2,-4(fp)
 a00fd0c:	1090000c 	andi	r2,r2,16384
 a00fd10:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 a00fd14:	00003c06 	br	a00fe08 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 a00fd18:	e0bffc17 	ldw	r2,-16(fp)
 a00fd1c:	10800517 	ldw	r2,20(r2)
 a00fd20:	10800044 	addi	r2,r2,1
 a00fd24:	10800fcc 	andi	r2,r2,63
 a00fd28:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 a00fd2c:	e0bffc17 	ldw	r2,-16(fp)
 a00fd30:	10c00417 	ldw	r3,16(r2)
 a00fd34:	e0bff717 	ldw	r2,-36(fp)
 a00fd38:	1880221e 	bne	r3,r2,a00fdc4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 a00fd3c:	e0bff517 	ldw	r2,-44(fp)
 a00fd40:	10000526 	beq	r2,zero,a00fd58 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 a00fd44:	a00fca40 	call	a00fca4 <alt_get_errno>
 a00fd48:	1007883a 	mov	r3,r2
 a00fd4c:	008002c4 	movi	r2,11
 a00fd50:	18800015 	stw	r2,0(r3)
        break;
 a00fd54:	00002e06 	br	a00fe10 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00fd58:	0005303a 	rdctl	r2,status
 a00fd5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a00fd60:	e0fff917 	ldw	r3,-28(fp)
 a00fd64:	00bfff84 	movi	r2,-2
 a00fd68:	1884703a 	and	r2,r3,r2
 a00fd6c:	1001703a 	wrctl	status,r2
  
  return context;
 a00fd70:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 a00fd74:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 a00fd78:	e0bffc17 	ldw	r2,-16(fp)
 a00fd7c:	10800117 	ldw	r2,4(r2)
 a00fd80:	10c11014 	ori	r3,r2,1088
 a00fd84:	e0bffc17 	ldw	r2,-16(fp)
 a00fd88:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a00fd8c:	e0bffc17 	ldw	r2,-16(fp)
 a00fd90:	10800017 	ldw	r2,0(r2)
 a00fd94:	10800304 	addi	r2,r2,12
 a00fd98:	e0fffc17 	ldw	r3,-16(fp)
 a00fd9c:	18c00117 	ldw	r3,4(r3)
 a00fda0:	10c00035 	stwio	r3,0(r2)
 a00fda4:	e0bff817 	ldw	r2,-32(fp)
 a00fda8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00fdac:	e0bff617 	ldw	r2,-40(fp)
 a00fdb0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 a00fdb4:	e0bffc17 	ldw	r2,-16(fp)
 a00fdb8:	10c00417 	ldw	r3,16(r2)
 a00fdbc:	e0bff717 	ldw	r2,-36(fp)
 a00fdc0:	18bffc26 	beq	r3,r2,a00fdb4 <__alt_mem_flash+0xfe00edb4>
      }
    }

    count--;
 a00fdc4:	e0bff417 	ldw	r2,-48(fp)
 a00fdc8:	10bfffc4 	addi	r2,r2,-1
 a00fdcc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 a00fdd0:	e0bffc17 	ldw	r2,-16(fp)
 a00fdd4:	10c00517 	ldw	r3,20(r2)
 a00fdd8:	e0bffd17 	ldw	r2,-12(fp)
 a00fddc:	11000044 	addi	r4,r2,1
 a00fde0:	e13ffd15 	stw	r4,-12(fp)
 a00fde4:	10800003 	ldbu	r2,0(r2)
 a00fde8:	1009883a 	mov	r4,r2
 a00fdec:	e0bffc17 	ldw	r2,-16(fp)
 a00fdf0:	10c5883a 	add	r2,r2,r3
 a00fdf4:	10801704 	addi	r2,r2,92
 a00fdf8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 a00fdfc:	e0bffc17 	ldw	r2,-16(fp)
 a00fe00:	e0fff717 	ldw	r3,-36(fp)
 a00fe04:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 a00fe08:	e0bff417 	ldw	r2,-48(fp)
 a00fe0c:	103fc21e 	bne	r2,zero,a00fd18 <__alt_mem_flash+0xfe00ed18>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00fe10:	0005303a 	rdctl	r2,status
 a00fe14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a00fe18:	e0fffb17 	ldw	r3,-20(fp)
 a00fe1c:	00bfff84 	movi	r2,-2
 a00fe20:	1884703a 	and	r2,r3,r2
 a00fe24:	1001703a 	wrctl	status,r2
  
  return context;
 a00fe28:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 a00fe2c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 a00fe30:	e0bffc17 	ldw	r2,-16(fp)
 a00fe34:	10800117 	ldw	r2,4(r2)
 a00fe38:	10c11014 	ori	r3,r2,1088
 a00fe3c:	e0bffc17 	ldw	r2,-16(fp)
 a00fe40:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a00fe44:	e0bffc17 	ldw	r2,-16(fp)
 a00fe48:	10800017 	ldw	r2,0(r2)
 a00fe4c:	10800304 	addi	r2,r2,12
 a00fe50:	e0fffc17 	ldw	r3,-16(fp)
 a00fe54:	18c00117 	ldw	r3,4(r3)
 a00fe58:	10c00035 	stwio	r3,0(r2)
 a00fe5c:	e0bff817 	ldw	r2,-32(fp)
 a00fe60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00fe64:	e0bffa17 	ldw	r2,-24(fp)
 a00fe68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 a00fe6c:	e0fffe17 	ldw	r3,-8(fp)
 a00fe70:	e0bff417 	ldw	r2,-48(fp)
 a00fe74:	1885c83a 	sub	r2,r3,r2
}
 a00fe78:	e037883a 	mov	sp,fp
 a00fe7c:	dfc00117 	ldw	ra,4(sp)
 a00fe80:	df000017 	ldw	fp,0(sp)
 a00fe84:	dec00204 	addi	sp,sp,8
 a00fe88:	f800283a 	ret

0a00fe8c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 a00fe8c:	defff904 	addi	sp,sp,-28
 a00fe90:	dfc00615 	stw	ra,24(sp)
 a00fe94:	df000515 	stw	fp,20(sp)
 a00fe98:	df000504 	addi	fp,sp,20
 a00fe9c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 a00fea0:	00800144 	movi	r2,5
 a00fea4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 a00fea8:	d8000215 	stw	zero,8(sp)
 a00feac:	e0bffe44 	addi	r2,fp,-7
 a00feb0:	d8800115 	stw	r2,4(sp)
 a00feb4:	00800044 	movi	r2,1
 a00feb8:	d8800015 	stw	r2,0(sp)
 a00febc:	e1fffe04 	addi	r7,fp,-8
 a00fec0:	01800044 	movi	r6,1
 a00fec4:	000b883a 	mov	r5,zero
 a00fec8:	e13fff17 	ldw	r4,-4(fp)
 a00fecc:	a0112340 	call	a011234 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 a00fed0:	e0bffe43 	ldbu	r2,-7(fp)
}
 a00fed4:	e037883a 	mov	sp,fp
 a00fed8:	dfc00117 	ldw	ra,4(sp)
 a00fedc:	df000017 	ldw	fp,0(sp)
 a00fee0:	dec00204 	addi	sp,sp,8
 a00fee4:	f800283a 	ret

0a00fee8 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 a00fee8:	defffd04 	addi	sp,sp,-12
 a00feec:	dfc00215 	stw	ra,8(sp)
 a00fef0:	df000115 	stw	fp,4(sp)
 a00fef4:	df000104 	addi	fp,sp,4
 a00fef8:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 a00fefc:	e13fff17 	ldw	r4,-4(fp)
 a00ff00:	a00fe8c0 	call	a00fe8c <epcs_read_status_register>
 a00ff04:	10803fcc 	andi	r2,r2,255
 a00ff08:	1080004c 	andi	r2,r2,1
}
 a00ff0c:	e037883a 	mov	sp,fp
 a00ff10:	dfc00117 	ldw	ra,4(sp)
 a00ff14:	df000017 	ldw	fp,0(sp)
 a00ff18:	dec00204 	addi	sp,sp,8
 a00ff1c:	f800283a 	ret

0a00ff20 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 a00ff20:	defffd04 	addi	sp,sp,-12
 a00ff24:	dfc00215 	stw	ra,8(sp)
 a00ff28:	df000115 	stw	fp,4(sp)
 a00ff2c:	df000104 	addi	fp,sp,4
 a00ff30:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 a00ff34:	0001883a 	nop
 a00ff38:	e13fff17 	ldw	r4,-4(fp)
 a00ff3c:	a00fee80 	call	a00fee8 <epcs_test_wip>
 a00ff40:	103ffd1e 	bne	r2,zero,a00ff38 <__alt_mem_flash+0xfe00ef38>
  {
  }
}
 a00ff44:	0001883a 	nop
 a00ff48:	e037883a 	mov	sp,fp
 a00ff4c:	dfc00117 	ldw	ra,4(sp)
 a00ff50:	df000017 	ldw	fp,0(sp)
 a00ff54:	dec00204 	addi	sp,sp,8
 a00ff58:	f800283a 	ret

0a00ff5c <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 a00ff5c:	defff604 	addi	sp,sp,-40
 a00ff60:	dfc00915 	stw	ra,36(sp)
 a00ff64:	df000815 	stw	fp,32(sp)
 a00ff68:	df000804 	addi	fp,sp,32
 a00ff6c:	e13ffd15 	stw	r4,-12(fp)
 a00ff70:	e17ffe15 	stw	r5,-8(fp)
 a00ff74:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 a00ff78:	e0bfff17 	ldw	r2,-4(fp)
 a00ff7c:	10001226 	beq	r2,zero,a00ffc8 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 a00ff80:	00bff604 	movi	r2,-40
 a00ff84:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 a00ff88:	e0bffe17 	ldw	r2,-8(fp)
 a00ff8c:	1004d63a 	srli	r2,r2,24
 a00ff90:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 a00ff94:	e0bffe17 	ldw	r2,-8(fp)
 a00ff98:	1004d43a 	srli	r2,r2,16
 a00ff9c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 a00ffa0:	e0bffe17 	ldw	r2,-8(fp)
 a00ffa4:	1004d23a 	srli	r2,r2,8
 a00ffa8:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 a00ffac:	e0bffe17 	ldw	r2,-8(fp)
 a00ffb0:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 a00ffb4:	00800144 	movi	r2,5
 a00ffb8:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 a00ffbc:	e13ffd17 	ldw	r4,-12(fp)
 a00ffc0:	a0104100 	call	a010410 <epcs_enter_4_bytes_mode>
 a00ffc4:	00000c06 	br	a00fff8 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 a00ffc8:	00bff604 	movi	r2,-40
 a00ffcc:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 a00ffd0:	e0bffe17 	ldw	r2,-8(fp)
 a00ffd4:	1004d43a 	srli	r2,r2,16
 a00ffd8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 a00ffdc:	e0bffe17 	ldw	r2,-8(fp)
 a00ffe0:	1004d23a 	srli	r2,r2,8
 a00ffe4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 a00ffe8:	e0bffe17 	ldw	r2,-8(fp)
 a00ffec:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 a00fff0:	00800104 	movi	r2,4
 a00fff4:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 a00fff8:	e13ffd17 	ldw	r4,-12(fp)
 a00fffc:	a01014c0 	call	a01014c <epcs_write_enable>

  alt_avalon_spi_command(
 a010000:	e0bffb03 	ldbu	r2,-20(fp)
 a010004:	e0fffb44 	addi	r3,fp,-19
 a010008:	d8000215 	stw	zero,8(sp)
 a01000c:	d8000115 	stw	zero,4(sp)
 a010010:	d8000015 	stw	zero,0(sp)
 a010014:	180f883a 	mov	r7,r3
 a010018:	100d883a 	mov	r6,r2
 a01001c:	000b883a 	mov	r5,zero
 a010020:	e13ffd17 	ldw	r4,-12(fp)
 a010024:	a0112340 	call	a011234 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 a010028:	e13ffd17 	ldw	r4,-12(fp)
 a01002c:	a00ff200 	call	a00ff20 <epcs_await_wip_released>

  if(four_bytes_mode)
 a010030:	e0bfff17 	ldw	r2,-4(fp)
 a010034:	10000226 	beq	r2,zero,a010040 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 a010038:	e13ffd17 	ldw	r4,-12(fp)
 a01003c:	a01046c0 	call	a01046c <epcs_exit_4_bytes_mode>
  }
}
 a010040:	0001883a 	nop
 a010044:	e037883a 	mov	sp,fp
 a010048:	dfc00117 	ldw	ra,4(sp)
 a01004c:	df000017 	ldw	fp,0(sp)
 a010050:	dec00204 	addi	sp,sp,8
 a010054:	f800283a 	ret

0a010058 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 a010058:	defff404 	addi	sp,sp,-48
 a01005c:	dfc00b15 	stw	ra,44(sp)
 a010060:	df000a15 	stw	fp,40(sp)
 a010064:	df000a04 	addi	fp,sp,40
 a010068:	e13ffc15 	stw	r4,-16(fp)
 a01006c:	e17ffd15 	stw	r5,-12(fp)
 a010070:	e1bffe15 	stw	r6,-8(fp)
 a010074:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 a010078:	008000c4 	movi	r2,3
 a01007c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 a010080:	e0800217 	ldw	r2,8(fp)
 a010084:	10001026 	beq	r2,zero,a0100c8 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 a010088:	e0bffd17 	ldw	r2,-12(fp)
 a01008c:	1004d63a 	srli	r2,r2,24
 a010090:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 a010094:	e0bffd17 	ldw	r2,-12(fp)
 a010098:	1005d43a 	srai	r2,r2,16
 a01009c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 a0100a0:	e0bffd17 	ldw	r2,-12(fp)
 a0100a4:	1005d23a 	srai	r2,r2,8
 a0100a8:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 a0100ac:	e0bffd17 	ldw	r2,-12(fp)
 a0100b0:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 a0100b4:	00800144 	movi	r2,5
 a0100b8:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 a0100bc:	e13ffc17 	ldw	r4,-16(fp)
 a0100c0:	a0104100 	call	a010410 <epcs_enter_4_bytes_mode>
 a0100c4:	00000a06 	br	a0100f0 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 a0100c8:	e0bffd17 	ldw	r2,-12(fp)
 a0100cc:	1005d43a 	srai	r2,r2,16
 a0100d0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 a0100d4:	e0bffd17 	ldw	r2,-12(fp)
 a0100d8:	1005d23a 	srai	r2,r2,8
 a0100dc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 a0100e0:	e0bffd17 	ldw	r2,-12(fp)
 a0100e4:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 a0100e8:	00800104 	movi	r2,4
 a0100ec:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 a0100f0:	e13ffc17 	ldw	r4,-16(fp)
 a0100f4:	a00ff200 	call	a00ff20 <epcs_await_wip_released>

  alt_avalon_spi_command(
 a0100f8:	e0bfff17 	ldw	r2,-4(fp)
 a0100fc:	e13ffa04 	addi	r4,fp,-24
 a010100:	d8000215 	stw	zero,8(sp)
 a010104:	e0fffe17 	ldw	r3,-8(fp)
 a010108:	d8c00115 	stw	r3,4(sp)
 a01010c:	d8800015 	stw	r2,0(sp)
 a010110:	200f883a 	mov	r7,r4
 a010114:	e1bff917 	ldw	r6,-28(fp)
 a010118:	000b883a 	mov	r5,zero
 a01011c:	e13ffc17 	ldw	r4,-16(fp)
 a010120:	a0112340 	call	a011234 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 a010124:	e0800217 	ldw	r2,8(fp)
 a010128:	10000226 	beq	r2,zero,a010134 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 a01012c:	e13ffc17 	ldw	r4,-16(fp)
 a010130:	a01046c0 	call	a01046c <epcs_exit_4_bytes_mode>
  }

  return length;
 a010134:	e0bfff17 	ldw	r2,-4(fp)
}
 a010138:	e037883a 	mov	sp,fp
 a01013c:	dfc00117 	ldw	ra,4(sp)
 a010140:	df000017 	ldw	fp,0(sp)
 a010144:	dec00204 	addi	sp,sp,8
 a010148:	f800283a 	ret

0a01014c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 a01014c:	defff904 	addi	sp,sp,-28
 a010150:	dfc00615 	stw	ra,24(sp)
 a010154:	df000515 	stw	fp,20(sp)
 a010158:	df000504 	addi	fp,sp,20
 a01015c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 a010160:	00800184 	movi	r2,6
 a010164:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 a010168:	d8000215 	stw	zero,8(sp)
 a01016c:	d8000115 	stw	zero,4(sp)
 a010170:	d8000015 	stw	zero,0(sp)
 a010174:	e1fffe04 	addi	r7,fp,-8
 a010178:	01800044 	movi	r6,1
 a01017c:	000b883a 	mov	r5,zero
 a010180:	e13fff17 	ldw	r4,-4(fp)
 a010184:	a0112340 	call	a011234 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 a010188:	0001883a 	nop
 a01018c:	e037883a 	mov	sp,fp
 a010190:	dfc00117 	ldw	ra,4(sp)
 a010194:	df000017 	ldw	fp,0(sp)
 a010198:	dec00204 	addi	sp,sp,8
 a01019c:	f800283a 	ret

0a0101a0 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 a0101a0:	defff804 	addi	sp,sp,-32
 a0101a4:	dfc00715 	stw	ra,28(sp)
 a0101a8:	df000615 	stw	fp,24(sp)
 a0101ac:	df000604 	addi	fp,sp,24
 a0101b0:	e13ffe15 	stw	r4,-8(fp)
 a0101b4:	2805883a 	mov	r2,r5
 a0101b8:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 a0101bc:	00800044 	movi	r2,1
 a0101c0:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 a0101c4:	e0bfff03 	ldbu	r2,-4(fp)
 a0101c8:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 a0101cc:	d8000215 	stw	zero,8(sp)
 a0101d0:	d8000115 	stw	zero,4(sp)
 a0101d4:	d8000015 	stw	zero,0(sp)
 a0101d8:	e1fffd04 	addi	r7,fp,-12
 a0101dc:	01800084 	movi	r6,2
 a0101e0:	000b883a 	mov	r5,zero
 a0101e4:	e13ffe17 	ldw	r4,-8(fp)
 a0101e8:	a0112340 	call	a011234 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 a0101ec:	e13ffe17 	ldw	r4,-8(fp)
 a0101f0:	a00ff200 	call	a00ff20 <epcs_await_wip_released>
}
 a0101f4:	0001883a 	nop
 a0101f8:	e037883a 	mov	sp,fp
 a0101fc:	dfc00117 	ldw	ra,4(sp)
 a010200:	df000017 	ldw	fp,0(sp)
 a010204:	dec00204 	addi	sp,sp,8
 a010208:	f800283a 	ret

0a01020c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 a01020c:	defff404 	addi	sp,sp,-48
 a010210:	dfc00b15 	stw	ra,44(sp)
 a010214:	df000a15 	stw	fp,40(sp)
 a010218:	df000a04 	addi	fp,sp,40
 a01021c:	e13ffc15 	stw	r4,-16(fp)
 a010220:	e17ffd15 	stw	r5,-12(fp)
 a010224:	e1bffe15 	stw	r6,-8(fp)
 a010228:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 a01022c:	00800084 	movi	r2,2
 a010230:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 a010234:	e0800217 	ldw	r2,8(fp)
 a010238:	10001026 	beq	r2,zero,a01027c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 a01023c:	e0bffd17 	ldw	r2,-12(fp)
 a010240:	1004d63a 	srli	r2,r2,24
 a010244:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 a010248:	e0bffd17 	ldw	r2,-12(fp)
 a01024c:	1005d43a 	srai	r2,r2,16
 a010250:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 a010254:	e0bffd17 	ldw	r2,-12(fp)
 a010258:	1005d23a 	srai	r2,r2,8
 a01025c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 a010260:	e0bffd17 	ldw	r2,-12(fp)
 a010264:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 a010268:	00800144 	movi	r2,5
 a01026c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 a010270:	e13ffc17 	ldw	r4,-16(fp)
 a010274:	a0104100 	call	a010410 <epcs_enter_4_bytes_mode>
 a010278:	00000a06 	br	a0102a4 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 a01027c:	e0bffd17 	ldw	r2,-12(fp)
 a010280:	1005d43a 	srai	r2,r2,16
 a010284:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 a010288:	e0bffd17 	ldw	r2,-12(fp)
 a01028c:	1005d23a 	srai	r2,r2,8
 a010290:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 a010294:	e0bffd17 	ldw	r2,-12(fp)
 a010298:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 a01029c:	00800104 	movi	r2,4
 a0102a0:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 a0102a4:	e13ffc17 	ldw	r4,-16(fp)
 a0102a8:	a01014c0 	call	a01014c <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 a0102ac:	e0fffa04 	addi	r3,fp,-24
 a0102b0:	00800044 	movi	r2,1
 a0102b4:	d8800215 	stw	r2,8(sp)
 a0102b8:	d8000115 	stw	zero,4(sp)
 a0102bc:	d8000015 	stw	zero,0(sp)
 a0102c0:	180f883a 	mov	r7,r3
 a0102c4:	e1bff917 	ldw	r6,-28(fp)
 a0102c8:	000b883a 	mov	r5,zero
 a0102cc:	e13ffc17 	ldw	r4,-16(fp)
 a0102d0:	a0112340 	call	a011234 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 a0102d4:	e0bfff17 	ldw	r2,-4(fp)
 a0102d8:	d8000215 	stw	zero,8(sp)
 a0102dc:	d8000115 	stw	zero,4(sp)
 a0102e0:	d8000015 	stw	zero,0(sp)
 a0102e4:	e1fffe17 	ldw	r7,-8(fp)
 a0102e8:	100d883a 	mov	r6,r2
 a0102ec:	000b883a 	mov	r5,zero
 a0102f0:	e13ffc17 	ldw	r4,-16(fp)
 a0102f4:	a0112340 	call	a011234 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 a0102f8:	e13ffc17 	ldw	r4,-16(fp)
 a0102fc:	a00ff200 	call	a00ff20 <epcs_await_wip_released>

  if(four_bytes_mode)
 a010300:	e0800217 	ldw	r2,8(fp)
 a010304:	10000226 	beq	r2,zero,a010310 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 a010308:	e13ffc17 	ldw	r4,-16(fp)
 a01030c:	a01046c0 	call	a01046c <epcs_exit_4_bytes_mode>
  }

  return length;
 a010310:	e0bfff17 	ldw	r2,-4(fp)
}
 a010314:	e037883a 	mov	sp,fp
 a010318:	dfc00117 	ldw	ra,4(sp)
 a01031c:	df000017 	ldw	fp,0(sp)
 a010320:	dec00204 	addi	sp,sp,8
 a010324:	f800283a 	ret

0a010328 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 a010328:	defff804 	addi	sp,sp,-32
 a01032c:	dfc00715 	stw	ra,28(sp)
 a010330:	df000615 	stw	fp,24(sp)
 a010334:	df000604 	addi	fp,sp,24
 a010338:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 a01033c:	00bfeac4 	movi	r2,-85
 a010340:	e0bffd05 	stb	r2,-12(fp)
 a010344:	e03ffd45 	stb	zero,-11(fp)
 a010348:	e03ffd85 	stb	zero,-10(fp)
 a01034c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 a010350:	d8000215 	stw	zero,8(sp)
 a010354:	e0bffe04 	addi	r2,fp,-8
 a010358:	d8800115 	stw	r2,4(sp)
 a01035c:	00800044 	movi	r2,1
 a010360:	d8800015 	stw	r2,0(sp)
 a010364:	e1fffd04 	addi	r7,fp,-12
 a010368:	01800104 	movi	r6,4
 a01036c:	000b883a 	mov	r5,zero
 a010370:	e13fff17 	ldw	r4,-4(fp)
 a010374:	a0112340 	call	a011234 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 a010378:	e0bffe03 	ldbu	r2,-8(fp)
}
 a01037c:	e037883a 	mov	sp,fp
 a010380:	dfc00117 	ldw	ra,4(sp)
 a010384:	df000017 	ldw	fp,0(sp)
 a010388:	dec00204 	addi	sp,sp,8
 a01038c:	f800283a 	ret

0a010390 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 a010390:	defff904 	addi	sp,sp,-28
 a010394:	dfc00615 	stw	ra,24(sp)
 a010398:	df000515 	stw	fp,20(sp)
 a01039c:	df000504 	addi	fp,sp,20
 a0103a0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 a0103a4:	00bfe7c4 	movi	r2,-97
 a0103a8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 a0103ac:	d8000215 	stw	zero,8(sp)
 a0103b0:	e0bffe44 	addi	r2,fp,-7
 a0103b4:	d8800115 	stw	r2,4(sp)
 a0103b8:	008000c4 	movi	r2,3
 a0103bc:	d8800015 	stw	r2,0(sp)
 a0103c0:	e1fffe04 	addi	r7,fp,-8
 a0103c4:	01800044 	movi	r6,1
 a0103c8:	000b883a 	mov	r5,zero
 a0103cc:	e13fff17 	ldw	r4,-4(fp)
 a0103d0:	a0112340 	call	a011234 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 a0103d4:	e0bffe43 	ldbu	r2,-7(fp)
 a0103d8:	10803fcc 	andi	r2,r2,255
 a0103dc:	1006943a 	slli	r3,r2,16
 a0103e0:	e0bffe83 	ldbu	r2,-6(fp)
 a0103e4:	10803fcc 	andi	r2,r2,255
 a0103e8:	1004923a 	slli	r2,r2,8
 a0103ec:	1886b03a 	or	r3,r3,r2
 a0103f0:	e0bffec3 	ldbu	r2,-5(fp)
 a0103f4:	10803fcc 	andi	r2,r2,255
 a0103f8:	1884b03a 	or	r2,r3,r2
}
 a0103fc:	e037883a 	mov	sp,fp
 a010400:	dfc00117 	ldw	ra,4(sp)
 a010404:	df000017 	ldw	fp,0(sp)
 a010408:	dec00204 	addi	sp,sp,8
 a01040c:	f800283a 	ret

0a010410 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 a010410:	defff904 	addi	sp,sp,-28
 a010414:	dfc00615 	stw	ra,24(sp)
 a010418:	df000515 	stw	fp,20(sp)
 a01041c:	df000504 	addi	fp,sp,20
 a010420:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 a010424:	00bfedc4 	movi	r2,-73
 a010428:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 a01042c:	e13fff17 	ldw	r4,-4(fp)
 a010430:	a01014c0 	call	a01014c <epcs_write_enable>

  alt_avalon_spi_command(
 a010434:	d8000215 	stw	zero,8(sp)
 a010438:	d8000115 	stw	zero,4(sp)
 a01043c:	d8000015 	stw	zero,0(sp)
 a010440:	e1fffe04 	addi	r7,fp,-8
 a010444:	01800044 	movi	r6,1
 a010448:	000b883a 	mov	r5,zero
 a01044c:	e13fff17 	ldw	r4,-4(fp)
 a010450:	a0112340 	call	a011234 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 a010454:	0001883a 	nop
}
 a010458:	e037883a 	mov	sp,fp
 a01045c:	dfc00117 	ldw	ra,4(sp)
 a010460:	df000017 	ldw	fp,0(sp)
 a010464:	dec00204 	addi	sp,sp,8
 a010468:	f800283a 	ret

0a01046c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 a01046c:	defff904 	addi	sp,sp,-28
 a010470:	dfc00615 	stw	ra,24(sp)
 a010474:	df000515 	stw	fp,20(sp)
 a010478:	df000504 	addi	fp,sp,20
 a01047c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 a010480:	00bffa44 	movi	r2,-23
 a010484:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 a010488:	e13fff17 	ldw	r4,-4(fp)
 a01048c:	a01014c0 	call	a01014c <epcs_write_enable>

  alt_avalon_spi_command(
 a010490:	d8000215 	stw	zero,8(sp)
 a010494:	d8000115 	stw	zero,4(sp)
 a010498:	d8000015 	stw	zero,0(sp)
 a01049c:	e1fffe04 	addi	r7,fp,-8
 a0104a0:	01800044 	movi	r6,1
 a0104a4:	000b883a 	mov	r5,zero
 a0104a8:	e13fff17 	ldw	r4,-4(fp)
 a0104ac:	a0112340 	call	a011234 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 a0104b0:	0001883a 	nop
}
 a0104b4:	e037883a 	mov	sp,fp
 a0104b8:	dfc00117 	ldw	ra,4(sp)
 a0104bc:	df000017 	ldw	fp,0(sp)
 a0104c0:	dec00204 	addi	sp,sp,8
 a0104c4:	f800283a 	ret

0a0104c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 a0104c8:	defff504 	addi	sp,sp,-44
 a0104cc:	df000a15 	stw	fp,40(sp)
 a0104d0:	df000a04 	addi	fp,sp,40
 a0104d4:	e13ffc15 	stw	r4,-16(fp)
 a0104d8:	e17ffd15 	stw	r5,-12(fp)
 a0104dc:	e1bffe15 	stw	r6,-8(fp)
 a0104e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 a0104e4:	e03ff615 	stw	zero,-40(fp)
 a0104e8:	d0a74917 	ldw	r2,-25308(gp)
  
  if (alt_ticks_per_second ())
 a0104ec:	10003c26 	beq	r2,zero,a0105e0 <alt_alarm_start+0x118>
  {
    if (alarm)
 a0104f0:	e0bffc17 	ldw	r2,-16(fp)
 a0104f4:	10003826 	beq	r2,zero,a0105d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 a0104f8:	e0bffc17 	ldw	r2,-16(fp)
 a0104fc:	e0fffe17 	ldw	r3,-8(fp)
 a010500:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 a010504:	e0bffc17 	ldw	r2,-16(fp)
 a010508:	e0ffff17 	ldw	r3,-4(fp)
 a01050c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a010510:	0005303a 	rdctl	r2,status
 a010514:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a010518:	e0fff917 	ldw	r3,-28(fp)
 a01051c:	00bfff84 	movi	r2,-2
 a010520:	1884703a 	and	r2,r3,r2
 a010524:	1001703a 	wrctl	status,r2
  
  return context;
 a010528:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 a01052c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 a010530:	d0a74a17 	ldw	r2,-25304(gp)
      
      current_nticks = alt_nticks();
 a010534:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 a010538:	e0fffd17 	ldw	r3,-12(fp)
 a01053c:	e0bff617 	ldw	r2,-40(fp)
 a010540:	1885883a 	add	r2,r3,r2
 a010544:	10c00044 	addi	r3,r2,1
 a010548:	e0bffc17 	ldw	r2,-16(fp)
 a01054c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 a010550:	e0bffc17 	ldw	r2,-16(fp)
 a010554:	10c00217 	ldw	r3,8(r2)
 a010558:	e0bff617 	ldw	r2,-40(fp)
 a01055c:	1880042e 	bgeu	r3,r2,a010570 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 a010560:	e0bffc17 	ldw	r2,-16(fp)
 a010564:	00c00044 	movi	r3,1
 a010568:	10c00405 	stb	r3,16(r2)
 a01056c:	00000206 	br	a010578 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 a010570:	e0bffc17 	ldw	r2,-16(fp)
 a010574:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 a010578:	e0bffc17 	ldw	r2,-16(fp)
 a01057c:	d0e01004 	addi	r3,gp,-32704
 a010580:	e0fffa15 	stw	r3,-24(fp)
 a010584:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 a010588:	e0bffb17 	ldw	r2,-20(fp)
 a01058c:	e0fffa17 	ldw	r3,-24(fp)
 a010590:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 a010594:	e0bffa17 	ldw	r2,-24(fp)
 a010598:	10c00017 	ldw	r3,0(r2)
 a01059c:	e0bffb17 	ldw	r2,-20(fp)
 a0105a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 a0105a4:	e0bffa17 	ldw	r2,-24(fp)
 a0105a8:	10800017 	ldw	r2,0(r2)
 a0105ac:	e0fffb17 	ldw	r3,-20(fp)
 a0105b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 a0105b4:	e0bffa17 	ldw	r2,-24(fp)
 a0105b8:	e0fffb17 	ldw	r3,-20(fp)
 a0105bc:	10c00015 	stw	r3,0(r2)
 a0105c0:	e0bff817 	ldw	r2,-32(fp)
 a0105c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a0105c8:	e0bff717 	ldw	r2,-36(fp)
 a0105cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 a0105d0:	0005883a 	mov	r2,zero
 a0105d4:	00000306 	br	a0105e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 a0105d8:	00bffa84 	movi	r2,-22
 a0105dc:	00000106 	br	a0105e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 a0105e0:	00bfde84 	movi	r2,-134
  }
}
 a0105e4:	e037883a 	mov	sp,fp
 a0105e8:	df000017 	ldw	fp,0(sp)
 a0105ec:	dec00104 	addi	sp,sp,4
 a0105f0:	f800283a 	ret

0a0105f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 a0105f4:	defffa04 	addi	sp,sp,-24
 a0105f8:	dfc00515 	stw	ra,20(sp)
 a0105fc:	df000415 	stw	fp,16(sp)
 a010600:	df000404 	addi	fp,sp,16
 a010604:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 a010608:	00800244 	movi	r2,9
 a01060c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 a010610:	014003f4 	movhi	r5,15
 a010614:	29509004 	addi	r5,r5,16960
 a010618:	e13ffd17 	ldw	r4,-12(fp)
 a01061c:	a0019a40 	call	a0019a4 <__mulsi3>
 a010620:	100b883a 	mov	r5,r2
 a010624:	01017db4 	movhi	r4,1526
 a010628:	21384004 	addi	r4,r4,-7936
 a01062c:	a00be900 	call	a00be90 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 a010630:	100b883a 	mov	r5,r2
 a010634:	01200034 	movhi	r4,32768
 a010638:	213fffc4 	addi	r4,r4,-1
 a01063c:	a00be900 	call	a00be90 <__udivsi3>
 a010640:	100b883a 	mov	r5,r2
 a010644:	e13fff17 	ldw	r4,-4(fp)
 a010648:	a00be900 	call	a00be90 <__udivsi3>
 a01064c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 a010650:	e0bffe17 	ldw	r2,-8(fp)
 a010654:	10002a26 	beq	r2,zero,a010700 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 a010658:	e03ffc15 	stw	zero,-16(fp)
 a01065c:	00001706 	br	a0106bc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 a010660:	00a00034 	movhi	r2,32768
 a010664:	10bfffc4 	addi	r2,r2,-1
 a010668:	10bfffc4 	addi	r2,r2,-1
 a01066c:	103ffe1e 	bne	r2,zero,a010668 <__alt_mem_flash+0xfe00f668>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 a010670:	014003f4 	movhi	r5,15
 a010674:	29509004 	addi	r5,r5,16960
 a010678:	e13ffd17 	ldw	r4,-12(fp)
 a01067c:	a0019a40 	call	a0019a4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 a010680:	100b883a 	mov	r5,r2
 a010684:	01017db4 	movhi	r4,1526
 a010688:	21384004 	addi	r4,r4,-7936
 a01068c:	a00be900 	call	a00be90 <__udivsi3>
 a010690:	100b883a 	mov	r5,r2
 a010694:	01200034 	movhi	r4,32768
 a010698:	213fffc4 	addi	r4,r4,-1
 a01069c:	a00be900 	call	a00be90 <__udivsi3>
 a0106a0:	1007883a 	mov	r3,r2
 a0106a4:	e0bfff17 	ldw	r2,-4(fp)
 a0106a8:	10c5c83a 	sub	r2,r2,r3
 a0106ac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 a0106b0:	e0bffc17 	ldw	r2,-16(fp)
 a0106b4:	10800044 	addi	r2,r2,1
 a0106b8:	e0bffc15 	stw	r2,-16(fp)
 a0106bc:	e0fffc17 	ldw	r3,-16(fp)
 a0106c0:	e0bffe17 	ldw	r2,-8(fp)
 a0106c4:	18bfe616 	blt	r3,r2,a010660 <__alt_mem_flash+0xfe00f660>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 a0106c8:	014003f4 	movhi	r5,15
 a0106cc:	29509004 	addi	r5,r5,16960
 a0106d0:	e13ffd17 	ldw	r4,-12(fp)
 a0106d4:	a0019a40 	call	a0019a4 <__mulsi3>
 a0106d8:	100b883a 	mov	r5,r2
 a0106dc:	01017db4 	movhi	r4,1526
 a0106e0:	21384004 	addi	r4,r4,-7936
 a0106e4:	a00be900 	call	a00be90 <__udivsi3>
 a0106e8:	e17fff17 	ldw	r5,-4(fp)
 a0106ec:	1009883a 	mov	r4,r2
 a0106f0:	a0019a40 	call	a0019a4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 a0106f4:	10bfffc4 	addi	r2,r2,-1
 a0106f8:	103ffe1e 	bne	r2,zero,a0106f4 <__alt_mem_flash+0xfe00f6f4>
 a0106fc:	00000d06 	br	a010734 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 a010700:	014003f4 	movhi	r5,15
 a010704:	29509004 	addi	r5,r5,16960
 a010708:	e13ffd17 	ldw	r4,-12(fp)
 a01070c:	a0019a40 	call	a0019a4 <__mulsi3>
 a010710:	100b883a 	mov	r5,r2
 a010714:	01017db4 	movhi	r4,1526
 a010718:	21384004 	addi	r4,r4,-7936
 a01071c:	a00be900 	call	a00be90 <__udivsi3>
 a010720:	e17fff17 	ldw	r5,-4(fp)
 a010724:	1009883a 	mov	r4,r2
 a010728:	a0019a40 	call	a0019a4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 a01072c:	10bfffc4 	addi	r2,r2,-1
 a010730:	00bffe16 	blt	zero,r2,a01072c <__alt_mem_flash+0xfe00f72c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 a010734:	0005883a 	mov	r2,zero
}
 a010738:	e037883a 	mov	sp,fp
 a01073c:	dfc00117 	ldw	ra,4(sp)
 a010740:	df000017 	ldw	fp,0(sp)
 a010744:	dec00204 	addi	sp,sp,8
 a010748:	f800283a 	ret

0a01074c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 a01074c:	deffff04 	addi	sp,sp,-4
 a010750:	df000015 	stw	fp,0(sp)
 a010754:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 a010758:	0001883a 	nop
 a01075c:	e037883a 	mov	sp,fp
 a010760:	df000017 	ldw	fp,0(sp)
 a010764:	dec00104 	addi	sp,sp,4
 a010768:	f800283a 	ret

0a01076c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a01076c:	defffe04 	addi	sp,sp,-8
 a010770:	dfc00115 	stw	ra,4(sp)
 a010774:	df000015 	stw	fp,0(sp)
 a010778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a01077c:	d0a00b17 	ldw	r2,-32724(gp)
 a010780:	10000326 	beq	r2,zero,a010790 <alt_get_errno+0x24>
 a010784:	d0a00b17 	ldw	r2,-32724(gp)
 a010788:	103ee83a 	callr	r2
 a01078c:	00000106 	br	a010794 <alt_get_errno+0x28>
 a010790:	d0a74404 	addi	r2,gp,-25328
}
 a010794:	e037883a 	mov	sp,fp
 a010798:	dfc00117 	ldw	ra,4(sp)
 a01079c:	df000017 	ldw	fp,0(sp)
 a0107a0:	dec00204 	addi	sp,sp,8
 a0107a4:	f800283a 	ret

0a0107a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 a0107a8:	defffa04 	addi	sp,sp,-24
 a0107ac:	dfc00515 	stw	ra,20(sp)
 a0107b0:	df000415 	stw	fp,16(sp)
 a0107b4:	df000404 	addi	fp,sp,16
 a0107b8:	e13ffe15 	stw	r4,-8(fp)
 a0107bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 a0107c0:	e0bffe17 	ldw	r2,-8(fp)
 a0107c4:	10000326 	beq	r2,zero,a0107d4 <alt_dev_llist_insert+0x2c>
 a0107c8:	e0bffe17 	ldw	r2,-8(fp)
 a0107cc:	10800217 	ldw	r2,8(r2)
 a0107d0:	1000061e 	bne	r2,zero,a0107ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 a0107d4:	a01076c0 	call	a01076c <alt_get_errno>
 a0107d8:	1007883a 	mov	r3,r2
 a0107dc:	00800584 	movi	r2,22
 a0107e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 a0107e4:	00bffa84 	movi	r2,-22
 a0107e8:	00001306 	br	a010838 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 a0107ec:	e0bffe17 	ldw	r2,-8(fp)
 a0107f0:	e0ffff17 	ldw	r3,-4(fp)
 a0107f4:	e0fffc15 	stw	r3,-16(fp)
 a0107f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 a0107fc:	e0bffd17 	ldw	r2,-12(fp)
 a010800:	e0fffc17 	ldw	r3,-16(fp)
 a010804:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 a010808:	e0bffc17 	ldw	r2,-16(fp)
 a01080c:	10c00017 	ldw	r3,0(r2)
 a010810:	e0bffd17 	ldw	r2,-12(fp)
 a010814:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 a010818:	e0bffc17 	ldw	r2,-16(fp)
 a01081c:	10800017 	ldw	r2,0(r2)
 a010820:	e0fffd17 	ldw	r3,-12(fp)
 a010824:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 a010828:	e0bffc17 	ldw	r2,-16(fp)
 a01082c:	e0fffd17 	ldw	r3,-12(fp)
 a010830:	10c00015 	stw	r3,0(r2)

  return 0;  
 a010834:	0005883a 	mov	r2,zero
}
 a010838:	e037883a 	mov	sp,fp
 a01083c:	dfc00117 	ldw	ra,4(sp)
 a010840:	df000017 	ldw	fp,0(sp)
 a010844:	dec00204 	addi	sp,sp,8
 a010848:	f800283a 	ret

0a01084c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 a01084c:	defffd04 	addi	sp,sp,-12
 a010850:	dfc00215 	stw	ra,8(sp)
 a010854:	df000115 	stw	fp,4(sp)
 a010858:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 a01085c:	00828074 	movhi	r2,2561
 a010860:	1086ae04 	addi	r2,r2,6840
 a010864:	e0bfff15 	stw	r2,-4(fp)
 a010868:	00000606 	br	a010884 <_do_ctors+0x38>
        (*ctor) (); 
 a01086c:	e0bfff17 	ldw	r2,-4(fp)
 a010870:	10800017 	ldw	r2,0(r2)
 a010874:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 a010878:	e0bfff17 	ldw	r2,-4(fp)
 a01087c:	10bfff04 	addi	r2,r2,-4
 a010880:	e0bfff15 	stw	r2,-4(fp)
 a010884:	e0ffff17 	ldw	r3,-4(fp)
 a010888:	00828074 	movhi	r2,2561
 a01088c:	1086af04 	addi	r2,r2,6844
 a010890:	18bff62e 	bgeu	r3,r2,a01086c <__alt_mem_flash+0xfe00f86c>
        (*ctor) (); 
}
 a010894:	0001883a 	nop
 a010898:	e037883a 	mov	sp,fp
 a01089c:	dfc00117 	ldw	ra,4(sp)
 a0108a0:	df000017 	ldw	fp,0(sp)
 a0108a4:	dec00204 	addi	sp,sp,8
 a0108a8:	f800283a 	ret

0a0108ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 a0108ac:	defffd04 	addi	sp,sp,-12
 a0108b0:	dfc00215 	stw	ra,8(sp)
 a0108b4:	df000115 	stw	fp,4(sp)
 a0108b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 a0108bc:	00828074 	movhi	r2,2561
 a0108c0:	1086ae04 	addi	r2,r2,6840
 a0108c4:	e0bfff15 	stw	r2,-4(fp)
 a0108c8:	00000606 	br	a0108e4 <_do_dtors+0x38>
        (*dtor) (); 
 a0108cc:	e0bfff17 	ldw	r2,-4(fp)
 a0108d0:	10800017 	ldw	r2,0(r2)
 a0108d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 a0108d8:	e0bfff17 	ldw	r2,-4(fp)
 a0108dc:	10bfff04 	addi	r2,r2,-4
 a0108e0:	e0bfff15 	stw	r2,-4(fp)
 a0108e4:	e0ffff17 	ldw	r3,-4(fp)
 a0108e8:	00828074 	movhi	r2,2561
 a0108ec:	1086af04 	addi	r2,r2,6844
 a0108f0:	18bff62e 	bgeu	r3,r2,a0108cc <__alt_mem_flash+0xfe00f8cc>
        (*dtor) (); 
}
 a0108f4:	0001883a 	nop
 a0108f8:	e037883a 	mov	sp,fp
 a0108fc:	dfc00117 	ldw	ra,4(sp)
 a010900:	df000017 	ldw	fp,0(sp)
 a010904:	dec00204 	addi	sp,sp,8
 a010908:	f800283a 	ret

0a01090c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 a01090c:	defffc04 	addi	sp,sp,-16
 a010910:	dfc00315 	stw	ra,12(sp)
 a010914:	df000215 	stw	fp,8(sp)
 a010918:	df000204 	addi	fp,sp,8
 a01091c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 a010920:	d1600d04 	addi	r5,gp,-32716
 a010924:	e13fff17 	ldw	r4,-4(fp)
 a010928:	a0114300 	call	a011430 <alt_find_dev>
 a01092c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 a010930:	e0bffe17 	ldw	r2,-8(fp)
 a010934:	10000926 	beq	r2,zero,a01095c <alt_flash_open_dev+0x50>
 a010938:	e0bffe17 	ldw	r2,-8(fp)
 a01093c:	10800317 	ldw	r2,12(r2)
 a010940:	10000626 	beq	r2,zero,a01095c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 a010944:	e0bffe17 	ldw	r2,-8(fp)
 a010948:	10800317 	ldw	r2,12(r2)
 a01094c:	e17fff17 	ldw	r5,-4(fp)
 a010950:	e13ffe17 	ldw	r4,-8(fp)
 a010954:	103ee83a 	callr	r2
 a010958:	00000106 	br	a010960 <alt_flash_open_dev+0x54>
  }

  return dev;
 a01095c:	e0bffe17 	ldw	r2,-8(fp)
}
 a010960:	e037883a 	mov	sp,fp
 a010964:	dfc00117 	ldw	ra,4(sp)
 a010968:	df000017 	ldw	fp,0(sp)
 a01096c:	dec00204 	addi	sp,sp,8
 a010970:	f800283a 	ret

0a010974 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 a010974:	defffd04 	addi	sp,sp,-12
 a010978:	dfc00215 	stw	ra,8(sp)
 a01097c:	df000115 	stw	fp,4(sp)
 a010980:	df000104 	addi	fp,sp,4
 a010984:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 a010988:	e0bfff17 	ldw	r2,-4(fp)
 a01098c:	10000826 	beq	r2,zero,a0109b0 <alt_flash_close_dev+0x3c>
 a010990:	e0bfff17 	ldw	r2,-4(fp)
 a010994:	10800417 	ldw	r2,16(r2)
 a010998:	10000526 	beq	r2,zero,a0109b0 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 a01099c:	e0bfff17 	ldw	r2,-4(fp)
 a0109a0:	10800417 	ldw	r2,16(r2)
 a0109a4:	e13fff17 	ldw	r4,-4(fp)
 a0109a8:	103ee83a 	callr	r2
  }
  return;
 a0109ac:	0001883a 	nop
 a0109b0:	0001883a 	nop
}
 a0109b4:	e037883a 	mov	sp,fp
 a0109b8:	dfc00117 	ldw	ra,4(sp)
 a0109bc:	df000017 	ldw	fp,0(sp)
 a0109c0:	dec00204 	addi	sp,sp,8
 a0109c4:	f800283a 	ret

0a0109c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 a0109c8:	deffff04 	addi	sp,sp,-4
 a0109cc:	df000015 	stw	fp,0(sp)
 a0109d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 a0109d4:	0001883a 	nop
 a0109d8:	e037883a 	mov	sp,fp
 a0109dc:	df000017 	ldw	fp,0(sp)
 a0109e0:	dec00104 	addi	sp,sp,4
 a0109e4:	f800283a 	ret

0a0109e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 a0109e8:	defff904 	addi	sp,sp,-28
 a0109ec:	dfc00615 	stw	ra,24(sp)
 a0109f0:	df000515 	stw	fp,20(sp)
 a0109f4:	df000504 	addi	fp,sp,20
 a0109f8:	e13ffc15 	stw	r4,-16(fp)
 a0109fc:	e17ffd15 	stw	r5,-12(fp)
 a010a00:	e1bffe15 	stw	r6,-8(fp)
 a010a04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 a010a08:	e0800217 	ldw	r2,8(fp)
 a010a0c:	d8800015 	stw	r2,0(sp)
 a010a10:	e1ffff17 	ldw	r7,-4(fp)
 a010a14:	e1bffe17 	ldw	r6,-8(fp)
 a010a18:	e17ffd17 	ldw	r5,-12(fp)
 a010a1c:	e13ffc17 	ldw	r4,-16(fp)
 a010a20:	a010b980 	call	a010b98 <alt_iic_isr_register>
}  
 a010a24:	e037883a 	mov	sp,fp
 a010a28:	dfc00117 	ldw	ra,4(sp)
 a010a2c:	df000017 	ldw	fp,0(sp)
 a010a30:	dec00204 	addi	sp,sp,8
 a010a34:	f800283a 	ret

0a010a38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 a010a38:	defff904 	addi	sp,sp,-28
 a010a3c:	df000615 	stw	fp,24(sp)
 a010a40:	df000604 	addi	fp,sp,24
 a010a44:	e13ffe15 	stw	r4,-8(fp)
 a010a48:	e17fff15 	stw	r5,-4(fp)
 a010a4c:	e0bfff17 	ldw	r2,-4(fp)
 a010a50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a010a54:	0005303a 	rdctl	r2,status
 a010a58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a010a5c:	e0fffb17 	ldw	r3,-20(fp)
 a010a60:	00bfff84 	movi	r2,-2
 a010a64:	1884703a 	and	r2,r3,r2
 a010a68:	1001703a 	wrctl	status,r2
  
  return context;
 a010a6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 a010a70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 a010a74:	00c00044 	movi	r3,1
 a010a78:	e0bffa17 	ldw	r2,-24(fp)
 a010a7c:	1884983a 	sll	r2,r3,r2
 a010a80:	1007883a 	mov	r3,r2
 a010a84:	d0a74817 	ldw	r2,-25312(gp)
 a010a88:	1884b03a 	or	r2,r3,r2
 a010a8c:	d0a74815 	stw	r2,-25312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 a010a90:	d0a74817 	ldw	r2,-25312(gp)
 a010a94:	100170fa 	wrctl	ienable,r2
 a010a98:	e0bffc17 	ldw	r2,-16(fp)
 a010a9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a010aa0:	e0bffd17 	ldw	r2,-12(fp)
 a010aa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 a010aa8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 a010aac:	0001883a 	nop
}
 a010ab0:	e037883a 	mov	sp,fp
 a010ab4:	df000017 	ldw	fp,0(sp)
 a010ab8:	dec00104 	addi	sp,sp,4
 a010abc:	f800283a 	ret

0a010ac0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 a010ac0:	defff904 	addi	sp,sp,-28
 a010ac4:	df000615 	stw	fp,24(sp)
 a010ac8:	df000604 	addi	fp,sp,24
 a010acc:	e13ffe15 	stw	r4,-8(fp)
 a010ad0:	e17fff15 	stw	r5,-4(fp)
 a010ad4:	e0bfff17 	ldw	r2,-4(fp)
 a010ad8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a010adc:	0005303a 	rdctl	r2,status
 a010ae0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a010ae4:	e0fffb17 	ldw	r3,-20(fp)
 a010ae8:	00bfff84 	movi	r2,-2
 a010aec:	1884703a 	and	r2,r3,r2
 a010af0:	1001703a 	wrctl	status,r2
  
  return context;
 a010af4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 a010af8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 a010afc:	00c00044 	movi	r3,1
 a010b00:	e0bffa17 	ldw	r2,-24(fp)
 a010b04:	1884983a 	sll	r2,r3,r2
 a010b08:	0084303a 	nor	r2,zero,r2
 a010b0c:	1007883a 	mov	r3,r2
 a010b10:	d0a74817 	ldw	r2,-25312(gp)
 a010b14:	1884703a 	and	r2,r3,r2
 a010b18:	d0a74815 	stw	r2,-25312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 a010b1c:	d0a74817 	ldw	r2,-25312(gp)
 a010b20:	100170fa 	wrctl	ienable,r2
 a010b24:	e0bffc17 	ldw	r2,-16(fp)
 a010b28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a010b2c:	e0bffd17 	ldw	r2,-12(fp)
 a010b30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 a010b34:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 a010b38:	0001883a 	nop
}
 a010b3c:	e037883a 	mov	sp,fp
 a010b40:	df000017 	ldw	fp,0(sp)
 a010b44:	dec00104 	addi	sp,sp,4
 a010b48:	f800283a 	ret

0a010b4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 a010b4c:	defffc04 	addi	sp,sp,-16
 a010b50:	df000315 	stw	fp,12(sp)
 a010b54:	df000304 	addi	fp,sp,12
 a010b58:	e13ffe15 	stw	r4,-8(fp)
 a010b5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 a010b60:	000530fa 	rdctl	r2,ienable
 a010b64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 a010b68:	00c00044 	movi	r3,1
 a010b6c:	e0bfff17 	ldw	r2,-4(fp)
 a010b70:	1884983a 	sll	r2,r3,r2
 a010b74:	1007883a 	mov	r3,r2
 a010b78:	e0bffd17 	ldw	r2,-12(fp)
 a010b7c:	1884703a 	and	r2,r3,r2
 a010b80:	1004c03a 	cmpne	r2,r2,zero
 a010b84:	10803fcc 	andi	r2,r2,255
}
 a010b88:	e037883a 	mov	sp,fp
 a010b8c:	df000017 	ldw	fp,0(sp)
 a010b90:	dec00104 	addi	sp,sp,4
 a010b94:	f800283a 	ret

0a010b98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 a010b98:	defff504 	addi	sp,sp,-44
 a010b9c:	dfc00a15 	stw	ra,40(sp)
 a010ba0:	df000915 	stw	fp,36(sp)
 a010ba4:	df000904 	addi	fp,sp,36
 a010ba8:	e13ffc15 	stw	r4,-16(fp)
 a010bac:	e17ffd15 	stw	r5,-12(fp)
 a010bb0:	e1bffe15 	stw	r6,-8(fp)
 a010bb4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 a010bb8:	00bffa84 	movi	r2,-22
 a010bbc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 a010bc0:	e0bffd17 	ldw	r2,-12(fp)
 a010bc4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 a010bc8:	e0bff817 	ldw	r2,-32(fp)
 a010bcc:	10800808 	cmpgei	r2,r2,32
 a010bd0:	1000271e 	bne	r2,zero,a010c70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a010bd4:	0005303a 	rdctl	r2,status
 a010bd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a010bdc:	e0fffb17 	ldw	r3,-20(fp)
 a010be0:	00bfff84 	movi	r2,-2
 a010be4:	1884703a 	and	r2,r3,r2
 a010be8:	1001703a 	wrctl	status,r2
  
  return context;
 a010bec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 a010bf0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 a010bf4:	00828074 	movhi	r2,2561
 a010bf8:	1095f504 	addi	r2,r2,22484
 a010bfc:	e0fff817 	ldw	r3,-32(fp)
 a010c00:	180690fa 	slli	r3,r3,3
 a010c04:	10c5883a 	add	r2,r2,r3
 a010c08:	e0fffe17 	ldw	r3,-8(fp)
 a010c0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 a010c10:	00828074 	movhi	r2,2561
 a010c14:	1095f504 	addi	r2,r2,22484
 a010c18:	e0fff817 	ldw	r3,-32(fp)
 a010c1c:	180690fa 	slli	r3,r3,3
 a010c20:	10c5883a 	add	r2,r2,r3
 a010c24:	10800104 	addi	r2,r2,4
 a010c28:	e0ffff17 	ldw	r3,-4(fp)
 a010c2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 a010c30:	e0bffe17 	ldw	r2,-8(fp)
 a010c34:	10000526 	beq	r2,zero,a010c4c <alt_iic_isr_register+0xb4>
 a010c38:	e0bff817 	ldw	r2,-32(fp)
 a010c3c:	100b883a 	mov	r5,r2
 a010c40:	e13ffc17 	ldw	r4,-16(fp)
 a010c44:	a010a380 	call	a010a38 <alt_ic_irq_enable>
 a010c48:	00000406 	br	a010c5c <alt_iic_isr_register+0xc4>
 a010c4c:	e0bff817 	ldw	r2,-32(fp)
 a010c50:	100b883a 	mov	r5,r2
 a010c54:	e13ffc17 	ldw	r4,-16(fp)
 a010c58:	a010ac00 	call	a010ac0 <alt_ic_irq_disable>
 a010c5c:	e0bff715 	stw	r2,-36(fp)
 a010c60:	e0bffa17 	ldw	r2,-24(fp)
 a010c64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a010c68:	e0bff917 	ldw	r2,-28(fp)
 a010c6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 a010c70:	e0bff717 	ldw	r2,-36(fp)
}
 a010c74:	e037883a 	mov	sp,fp
 a010c78:	dfc00117 	ldw	ra,4(sp)
 a010c7c:	df000017 	ldw	fp,0(sp)
 a010c80:	dec00204 	addi	sp,sp,8
 a010c84:	f800283a 	ret

0a010c88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 a010c88:	defff804 	addi	sp,sp,-32
 a010c8c:	dfc00715 	stw	ra,28(sp)
 a010c90:	df000615 	stw	fp,24(sp)
 a010c94:	dc000515 	stw	r16,20(sp)
 a010c98:	df000604 	addi	fp,sp,24
 a010c9c:	e13ffb15 	stw	r4,-20(fp)
 a010ca0:	e17ffc15 	stw	r5,-16(fp)
 a010ca4:	e1bffd15 	stw	r6,-12(fp)
 a010ca8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 a010cac:	e1bffe17 	ldw	r6,-8(fp)
 a010cb0:	e17ffd17 	ldw	r5,-12(fp)
 a010cb4:	e13ffc17 	ldw	r4,-16(fp)
 a010cb8:	a010f100 	call	a010f10 <open>
 a010cbc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 a010cc0:	e0bffa17 	ldw	r2,-24(fp)
 a010cc4:	10002216 	blt	r2,zero,a010d50 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 a010cc8:	04028074 	movhi	r16,2561
 a010ccc:	8409b804 	addi	r16,r16,9952
 a010cd0:	e0bffa17 	ldw	r2,-24(fp)
 a010cd4:	01400304 	movi	r5,12
 a010cd8:	1009883a 	mov	r4,r2
 a010cdc:	a0019a40 	call	a0019a4 <__mulsi3>
 a010ce0:	8085883a 	add	r2,r16,r2
 a010ce4:	10c00017 	ldw	r3,0(r2)
 a010ce8:	e0bffb17 	ldw	r2,-20(fp)
 a010cec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 a010cf0:	04028074 	movhi	r16,2561
 a010cf4:	8409b804 	addi	r16,r16,9952
 a010cf8:	e0bffa17 	ldw	r2,-24(fp)
 a010cfc:	01400304 	movi	r5,12
 a010d00:	1009883a 	mov	r4,r2
 a010d04:	a0019a40 	call	a0019a4 <__mulsi3>
 a010d08:	8085883a 	add	r2,r16,r2
 a010d0c:	10800104 	addi	r2,r2,4
 a010d10:	10c00017 	ldw	r3,0(r2)
 a010d14:	e0bffb17 	ldw	r2,-20(fp)
 a010d18:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 a010d1c:	04028074 	movhi	r16,2561
 a010d20:	8409b804 	addi	r16,r16,9952
 a010d24:	e0bffa17 	ldw	r2,-24(fp)
 a010d28:	01400304 	movi	r5,12
 a010d2c:	1009883a 	mov	r4,r2
 a010d30:	a0019a40 	call	a0019a4 <__mulsi3>
 a010d34:	8085883a 	add	r2,r16,r2
 a010d38:	10800204 	addi	r2,r2,8
 a010d3c:	10c00017 	ldw	r3,0(r2)
 a010d40:	e0bffb17 	ldw	r2,-20(fp)
 a010d44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 a010d48:	e13ffa17 	ldw	r4,-24(fp)
 a010d4c:	a00dcbc0 	call	a00dcbc <alt_release_fd>
  }
} 
 a010d50:	0001883a 	nop
 a010d54:	e6ffff04 	addi	sp,fp,-4
 a010d58:	dfc00217 	ldw	ra,8(sp)
 a010d5c:	df000117 	ldw	fp,4(sp)
 a010d60:	dc000017 	ldw	r16,0(sp)
 a010d64:	dec00304 	addi	sp,sp,12
 a010d68:	f800283a 	ret

0a010d6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 a010d6c:	defffb04 	addi	sp,sp,-20
 a010d70:	dfc00415 	stw	ra,16(sp)
 a010d74:	df000315 	stw	fp,12(sp)
 a010d78:	df000304 	addi	fp,sp,12
 a010d7c:	e13ffd15 	stw	r4,-12(fp)
 a010d80:	e17ffe15 	stw	r5,-8(fp)
 a010d84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 a010d88:	01c07fc4 	movi	r7,511
 a010d8c:	01800044 	movi	r6,1
 a010d90:	e17ffd17 	ldw	r5,-12(fp)
 a010d94:	01028074 	movhi	r4,2561
 a010d98:	2109bb04 	addi	r4,r4,9964
 a010d9c:	a010c880 	call	a010c88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 a010da0:	01c07fc4 	movi	r7,511
 a010da4:	000d883a 	mov	r6,zero
 a010da8:	e17ffe17 	ldw	r5,-8(fp)
 a010dac:	01028074 	movhi	r4,2561
 a010db0:	2109b804 	addi	r4,r4,9952
 a010db4:	a010c880 	call	a010c88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 a010db8:	01c07fc4 	movi	r7,511
 a010dbc:	01800044 	movi	r6,1
 a010dc0:	e17fff17 	ldw	r5,-4(fp)
 a010dc4:	01028074 	movhi	r4,2561
 a010dc8:	2109be04 	addi	r4,r4,9976
 a010dcc:	a010c880 	call	a010c88 <alt_open_fd>
}  
 a010dd0:	0001883a 	nop
 a010dd4:	e037883a 	mov	sp,fp
 a010dd8:	dfc00117 	ldw	ra,4(sp)
 a010ddc:	df000017 	ldw	fp,0(sp)
 a010de0:	dec00204 	addi	sp,sp,8
 a010de4:	f800283a 	ret

0a010de8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a010de8:	defffe04 	addi	sp,sp,-8
 a010dec:	dfc00115 	stw	ra,4(sp)
 a010df0:	df000015 	stw	fp,0(sp)
 a010df4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a010df8:	d0a00b17 	ldw	r2,-32724(gp)
 a010dfc:	10000326 	beq	r2,zero,a010e0c <alt_get_errno+0x24>
 a010e00:	d0a00b17 	ldw	r2,-32724(gp)
 a010e04:	103ee83a 	callr	r2
 a010e08:	00000106 	br	a010e10 <alt_get_errno+0x28>
 a010e0c:	d0a74404 	addi	r2,gp,-25328
}
 a010e10:	e037883a 	mov	sp,fp
 a010e14:	dfc00117 	ldw	ra,4(sp)
 a010e18:	df000017 	ldw	fp,0(sp)
 a010e1c:	dec00204 	addi	sp,sp,8
 a010e20:	f800283a 	ret

0a010e24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 a010e24:	defffb04 	addi	sp,sp,-20
 a010e28:	dfc00415 	stw	ra,16(sp)
 a010e2c:	df000315 	stw	fp,12(sp)
 a010e30:	dc000215 	stw	r16,8(sp)
 a010e34:	df000304 	addi	fp,sp,12
 a010e38:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 a010e3c:	e0bffe17 	ldw	r2,-8(fp)
 a010e40:	10800217 	ldw	r2,8(r2)
 a010e44:	10d00034 	orhi	r3,r2,16384
 a010e48:	e0bffe17 	ldw	r2,-8(fp)
 a010e4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 a010e50:	e03ffd15 	stw	zero,-12(fp)
 a010e54:	00002306 	br	a010ee4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 a010e58:	04028074 	movhi	r16,2561
 a010e5c:	8409b804 	addi	r16,r16,9952
 a010e60:	e0bffd17 	ldw	r2,-12(fp)
 a010e64:	01400304 	movi	r5,12
 a010e68:	1009883a 	mov	r4,r2
 a010e6c:	a0019a40 	call	a0019a4 <__mulsi3>
 a010e70:	8085883a 	add	r2,r16,r2
 a010e74:	10c00017 	ldw	r3,0(r2)
 a010e78:	e0bffe17 	ldw	r2,-8(fp)
 a010e7c:	10800017 	ldw	r2,0(r2)
 a010e80:	1880151e 	bne	r3,r2,a010ed8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 a010e84:	04028074 	movhi	r16,2561
 a010e88:	8409b804 	addi	r16,r16,9952
 a010e8c:	e0bffd17 	ldw	r2,-12(fp)
 a010e90:	01400304 	movi	r5,12
 a010e94:	1009883a 	mov	r4,r2
 a010e98:	a0019a40 	call	a0019a4 <__mulsi3>
 a010e9c:	8085883a 	add	r2,r16,r2
 a010ea0:	10800204 	addi	r2,r2,8
 a010ea4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 a010ea8:	10000b0e 	bge	r2,zero,a010ed8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 a010eac:	01400304 	movi	r5,12
 a010eb0:	e13ffd17 	ldw	r4,-12(fp)
 a010eb4:	a0019a40 	call	a0019a4 <__mulsi3>
 a010eb8:	1007883a 	mov	r3,r2
 a010ebc:	00828074 	movhi	r2,2561
 a010ec0:	1089b804 	addi	r2,r2,9952
 a010ec4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 a010ec8:	e0bffe17 	ldw	r2,-8(fp)
 a010ecc:	18800226 	beq	r3,r2,a010ed8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 a010ed0:	00bffcc4 	movi	r2,-13
 a010ed4:	00000806 	br	a010ef8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 a010ed8:	e0bffd17 	ldw	r2,-12(fp)
 a010edc:	10800044 	addi	r2,r2,1
 a010ee0:	e0bffd15 	stw	r2,-12(fp)
 a010ee4:	d0a00a17 	ldw	r2,-32728(gp)
 a010ee8:	1007883a 	mov	r3,r2
 a010eec:	e0bffd17 	ldw	r2,-12(fp)
 a010ef0:	18bfd92e 	bgeu	r3,r2,a010e58 <__alt_mem_flash+0xfe00fe58>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 a010ef4:	0005883a 	mov	r2,zero
}
 a010ef8:	e6ffff04 	addi	sp,fp,-4
 a010efc:	dfc00217 	ldw	ra,8(sp)
 a010f00:	df000117 	ldw	fp,4(sp)
 a010f04:	dc000017 	ldw	r16,0(sp)
 a010f08:	dec00304 	addi	sp,sp,12
 a010f0c:	f800283a 	ret

0a010f10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 a010f10:	defff604 	addi	sp,sp,-40
 a010f14:	dfc00915 	stw	ra,36(sp)
 a010f18:	df000815 	stw	fp,32(sp)
 a010f1c:	df000804 	addi	fp,sp,32
 a010f20:	e13ffd15 	stw	r4,-12(fp)
 a010f24:	e17ffe15 	stw	r5,-8(fp)
 a010f28:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 a010f2c:	00bfffc4 	movi	r2,-1
 a010f30:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 a010f34:	00bffb44 	movi	r2,-19
 a010f38:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 a010f3c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 a010f40:	d1600804 	addi	r5,gp,-32736
 a010f44:	e13ffd17 	ldw	r4,-12(fp)
 a010f48:	a0114300 	call	a011430 <alt_find_dev>
 a010f4c:	e0bff815 	stw	r2,-32(fp)
 a010f50:	e0bff817 	ldw	r2,-32(fp)
 a010f54:	1000051e 	bne	r2,zero,a010f6c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 a010f58:	e13ffd17 	ldw	r4,-12(fp)
 a010f5c:	a0114c00 	call	a0114c0 <alt_find_file>
 a010f60:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 a010f64:	00800044 	movi	r2,1
 a010f68:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 a010f6c:	e0bff817 	ldw	r2,-32(fp)
 a010f70:	10002b26 	beq	r2,zero,a011020 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 a010f74:	e13ff817 	ldw	r4,-32(fp)
 a010f78:	a0115c80 	call	a0115c8 <alt_get_fd>
 a010f7c:	e0bff915 	stw	r2,-28(fp)
 a010f80:	e0bff917 	ldw	r2,-28(fp)
 a010f84:	1000030e 	bge	r2,zero,a010f94 <open+0x84>
    {
      status = index;
 a010f88:	e0bff917 	ldw	r2,-28(fp)
 a010f8c:	e0bffa15 	stw	r2,-24(fp)
 a010f90:	00002506 	br	a011028 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 a010f94:	01400304 	movi	r5,12
 a010f98:	e13ff917 	ldw	r4,-28(fp)
 a010f9c:	a0019a40 	call	a0019a4 <__mulsi3>
 a010fa0:	1007883a 	mov	r3,r2
 a010fa4:	00828074 	movhi	r2,2561
 a010fa8:	1089b804 	addi	r2,r2,9952
 a010fac:	1885883a 	add	r2,r3,r2
 a010fb0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 a010fb4:	e0fffe17 	ldw	r3,-8(fp)
 a010fb8:	00900034 	movhi	r2,16384
 a010fbc:	10bfffc4 	addi	r2,r2,-1
 a010fc0:	1886703a 	and	r3,r3,r2
 a010fc4:	e0bffc17 	ldw	r2,-16(fp)
 a010fc8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 a010fcc:	e0bffb17 	ldw	r2,-20(fp)
 a010fd0:	1000051e 	bne	r2,zero,a010fe8 <open+0xd8>
 a010fd4:	e13ffc17 	ldw	r4,-16(fp)
 a010fd8:	a010e240 	call	a010e24 <alt_file_locked>
 a010fdc:	e0bffa15 	stw	r2,-24(fp)
 a010fe0:	e0bffa17 	ldw	r2,-24(fp)
 a010fe4:	10001016 	blt	r2,zero,a011028 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 a010fe8:	e0bff817 	ldw	r2,-32(fp)
 a010fec:	10800317 	ldw	r2,12(r2)
 a010ff0:	10000826 	beq	r2,zero,a011014 <open+0x104>
 a010ff4:	e0bff817 	ldw	r2,-32(fp)
 a010ff8:	10800317 	ldw	r2,12(r2)
 a010ffc:	e1ffff17 	ldw	r7,-4(fp)
 a011000:	e1bffe17 	ldw	r6,-8(fp)
 a011004:	e17ffd17 	ldw	r5,-12(fp)
 a011008:	e13ffc17 	ldw	r4,-16(fp)
 a01100c:	103ee83a 	callr	r2
 a011010:	00000106 	br	a011018 <open+0x108>
 a011014:	0005883a 	mov	r2,zero
 a011018:	e0bffa15 	stw	r2,-24(fp)
 a01101c:	00000206 	br	a011028 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 a011020:	00bffb44 	movi	r2,-19
 a011024:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 a011028:	e0bffa17 	ldw	r2,-24(fp)
 a01102c:	1000090e 	bge	r2,zero,a011054 <open+0x144>
  {
    alt_release_fd (index);  
 a011030:	e13ff917 	ldw	r4,-28(fp)
 a011034:	a00dcbc0 	call	a00dcbc <alt_release_fd>
    ALT_ERRNO = -status;
 a011038:	a010de80 	call	a010de8 <alt_get_errno>
 a01103c:	1007883a 	mov	r3,r2
 a011040:	e0bffa17 	ldw	r2,-24(fp)
 a011044:	0085c83a 	sub	r2,zero,r2
 a011048:	18800015 	stw	r2,0(r3)
    return -1;
 a01104c:	00bfffc4 	movi	r2,-1
 a011050:	00000106 	br	a011058 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 a011054:	e0bff917 	ldw	r2,-28(fp)
}
 a011058:	e037883a 	mov	sp,fp
 a01105c:	dfc00117 	ldw	ra,4(sp)
 a011060:	df000017 	ldw	fp,0(sp)
 a011064:	dec00204 	addi	sp,sp,8
 a011068:	f800283a 	ret

0a01106c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 a01106c:	defffa04 	addi	sp,sp,-24
 a011070:	df000515 	stw	fp,20(sp)
 a011074:	df000504 	addi	fp,sp,20
 a011078:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a01107c:	0005303a 	rdctl	r2,status
 a011080:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a011084:	e0fffc17 	ldw	r3,-16(fp)
 a011088:	00bfff84 	movi	r2,-2
 a01108c:	1884703a 	and	r2,r3,r2
 a011090:	1001703a 	wrctl	status,r2
  
  return context;
 a011094:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 a011098:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 a01109c:	e0bfff17 	ldw	r2,-4(fp)
 a0110a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 a0110a4:	e0bffd17 	ldw	r2,-12(fp)
 a0110a8:	10800017 	ldw	r2,0(r2)
 a0110ac:	e0fffd17 	ldw	r3,-12(fp)
 a0110b0:	18c00117 	ldw	r3,4(r3)
 a0110b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 a0110b8:	e0bffd17 	ldw	r2,-12(fp)
 a0110bc:	10800117 	ldw	r2,4(r2)
 a0110c0:	e0fffd17 	ldw	r3,-12(fp)
 a0110c4:	18c00017 	ldw	r3,0(r3)
 a0110c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 a0110cc:	e0bffd17 	ldw	r2,-12(fp)
 a0110d0:	e0fffd17 	ldw	r3,-12(fp)
 a0110d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 a0110d8:	e0bffd17 	ldw	r2,-12(fp)
 a0110dc:	e0fffd17 	ldw	r3,-12(fp)
 a0110e0:	10c00015 	stw	r3,0(r2)
 a0110e4:	e0bffb17 	ldw	r2,-20(fp)
 a0110e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a0110ec:	e0bffe17 	ldw	r2,-8(fp)
 a0110f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 a0110f4:	0001883a 	nop
 a0110f8:	e037883a 	mov	sp,fp
 a0110fc:	df000017 	ldw	fp,0(sp)
 a011100:	dec00104 	addi	sp,sp,4
 a011104:	f800283a 	ret

0a011108 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 a011108:	defffb04 	addi	sp,sp,-20
 a01110c:	dfc00415 	stw	ra,16(sp)
 a011110:	df000315 	stw	fp,12(sp)
 a011114:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 a011118:	d0a01017 	ldw	r2,-32704(gp)
 a01111c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 a011120:	d0a74a17 	ldw	r2,-25304(gp)
 a011124:	10800044 	addi	r2,r2,1
 a011128:	d0a74a15 	stw	r2,-25304(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 a01112c:	00002e06 	br	a0111e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 a011130:	e0bffd17 	ldw	r2,-12(fp)
 a011134:	10800017 	ldw	r2,0(r2)
 a011138:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 a01113c:	e0bffd17 	ldw	r2,-12(fp)
 a011140:	10800403 	ldbu	r2,16(r2)
 a011144:	10803fcc 	andi	r2,r2,255
 a011148:	10000426 	beq	r2,zero,a01115c <alt_tick+0x54>
 a01114c:	d0a74a17 	ldw	r2,-25304(gp)
 a011150:	1000021e 	bne	r2,zero,a01115c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 a011154:	e0bffd17 	ldw	r2,-12(fp)
 a011158:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 a01115c:	e0bffd17 	ldw	r2,-12(fp)
 a011160:	10800217 	ldw	r2,8(r2)
 a011164:	d0e74a17 	ldw	r3,-25304(gp)
 a011168:	18801d36 	bltu	r3,r2,a0111e0 <alt_tick+0xd8>
 a01116c:	e0bffd17 	ldw	r2,-12(fp)
 a011170:	10800403 	ldbu	r2,16(r2)
 a011174:	10803fcc 	andi	r2,r2,255
 a011178:	1000191e 	bne	r2,zero,a0111e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 a01117c:	e0bffd17 	ldw	r2,-12(fp)
 a011180:	10800317 	ldw	r2,12(r2)
 a011184:	e0fffd17 	ldw	r3,-12(fp)
 a011188:	18c00517 	ldw	r3,20(r3)
 a01118c:	1809883a 	mov	r4,r3
 a011190:	103ee83a 	callr	r2
 a011194:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 a011198:	e0bfff17 	ldw	r2,-4(fp)
 a01119c:	1000031e 	bne	r2,zero,a0111ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 a0111a0:	e13ffd17 	ldw	r4,-12(fp)
 a0111a4:	a01106c0 	call	a01106c <alt_alarm_stop>
 a0111a8:	00000d06 	br	a0111e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 a0111ac:	e0bffd17 	ldw	r2,-12(fp)
 a0111b0:	10c00217 	ldw	r3,8(r2)
 a0111b4:	e0bfff17 	ldw	r2,-4(fp)
 a0111b8:	1887883a 	add	r3,r3,r2
 a0111bc:	e0bffd17 	ldw	r2,-12(fp)
 a0111c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 a0111c4:	e0bffd17 	ldw	r2,-12(fp)
 a0111c8:	10c00217 	ldw	r3,8(r2)
 a0111cc:	d0a74a17 	ldw	r2,-25304(gp)
 a0111d0:	1880032e 	bgeu	r3,r2,a0111e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 a0111d4:	e0bffd17 	ldw	r2,-12(fp)
 a0111d8:	00c00044 	movi	r3,1
 a0111dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 a0111e0:	e0bffe17 	ldw	r2,-8(fp)
 a0111e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 a0111e8:	e0fffd17 	ldw	r3,-12(fp)
 a0111ec:	d0a01004 	addi	r2,gp,-32704
 a0111f0:	18bfcf1e 	bne	r3,r2,a011130 <__alt_mem_flash+0xfe010130>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 a0111f4:	0001883a 	nop
}
 a0111f8:	0001883a 	nop
 a0111fc:	e037883a 	mov	sp,fp
 a011200:	dfc00117 	ldw	ra,4(sp)
 a011204:	df000017 	ldw	fp,0(sp)
 a011208:	dec00204 	addi	sp,sp,8
 a01120c:	f800283a 	ret

0a011210 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 a011210:	deffff04 	addi	sp,sp,-4
 a011214:	df000015 	stw	fp,0(sp)
 a011218:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 a01121c:	000170fa 	wrctl	ienable,zero
}
 a011220:	0001883a 	nop
 a011224:	e037883a 	mov	sp,fp
 a011228:	df000017 	ldw	fp,0(sp)
 a01122c:	dec00104 	addi	sp,sp,4
 a011230:	f800283a 	ret

0a011234 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 a011234:	defff404 	addi	sp,sp,-48
 a011238:	df000b15 	stw	fp,44(sp)
 a01123c:	df000b04 	addi	fp,sp,44
 a011240:	e13ffc15 	stw	r4,-16(fp)
 a011244:	e17ffd15 	stw	r5,-12(fp)
 a011248:	e1bffe15 	stw	r6,-8(fp)
 a01124c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 a011250:	e0ffff17 	ldw	r3,-4(fp)
 a011254:	e0bffe17 	ldw	r2,-8(fp)
 a011258:	1885883a 	add	r2,r3,r2
 a01125c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 a011260:	e0c00217 	ldw	r3,8(fp)
 a011264:	e0800117 	ldw	r2,4(fp)
 a011268:	1885883a 	add	r2,r3,r2
 a01126c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 a011270:	e0800117 	ldw	r2,4(fp)
 a011274:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 a011278:	e0bffe17 	ldw	r2,-8(fp)
 a01127c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 a011280:	00800044 	movi	r2,1
 a011284:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 a011288:	e0bffc17 	ldw	r2,-16(fp)
 a01128c:	10800504 	addi	r2,r2,20
 a011290:	1009883a 	mov	r4,r2
 a011294:	00c00044 	movi	r3,1
 a011298:	e0bffd17 	ldw	r2,-12(fp)
 a01129c:	1884983a 	sll	r2,r3,r2
 a0112a0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 a0112a4:	e0800317 	ldw	r2,12(fp)
 a0112a8:	1080008c 	andi	r2,r2,2
 a0112ac:	1000051e 	bne	r2,zero,a0112c4 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 a0112b0:	e0bffc17 	ldw	r2,-16(fp)
 a0112b4:	10800304 	addi	r2,r2,12
 a0112b8:	1007883a 	mov	r3,r2
 a0112bc:	00810004 	movi	r2,1024
 a0112c0:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 a0112c4:	e0bffc17 	ldw	r2,-16(fp)
 a0112c8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 a0112cc:	e0bffc17 	ldw	r2,-16(fp)
 a0112d0:	10800204 	addi	r2,r2,8
 a0112d4:	10800037 	ldwio	r2,0(r2)
 a0112d8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 a0112dc:	e0bffa17 	ldw	r2,-24(fp)
 a0112e0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 a0112e4:	10000226 	beq	r2,zero,a0112f0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 a0112e8:	e0bff717 	ldw	r2,-36(fp)
 a0112ec:	1000031e 	bne	r2,zero,a0112fc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 a0112f0:	e0bffa17 	ldw	r2,-24(fp)
 a0112f4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 a0112f8:	103ff426 	beq	r2,zero,a0112cc <__alt_mem_flash+0xfe0102cc>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 a0112fc:	e0bffa17 	ldw	r2,-24(fp)
 a011300:	1080100c 	andi	r2,r2,64
 a011304:	10001e26 	beq	r2,zero,a011380 <alt_avalon_spi_command+0x14c>
 a011308:	e0bff717 	ldw	r2,-36(fp)
 a01130c:	00801c0e 	bge	zero,r2,a011380 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 a011310:	e0bff717 	ldw	r2,-36(fp)
 a011314:	10bfffc4 	addi	r2,r2,-1
 a011318:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 a01131c:	e0ffff17 	ldw	r3,-4(fp)
 a011320:	e0bff817 	ldw	r2,-32(fp)
 a011324:	18800a2e 	bgeu	r3,r2,a011350 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 a011328:	e0bffc17 	ldw	r2,-16(fp)
 a01132c:	10800104 	addi	r2,r2,4
 a011330:	1009883a 	mov	r4,r2
 a011334:	e0bfff17 	ldw	r2,-4(fp)
 a011338:	10c00044 	addi	r3,r2,1
 a01133c:	e0ffff15 	stw	r3,-4(fp)
 a011340:	10800003 	ldbu	r2,0(r2)
 a011344:	10803fcc 	andi	r2,r2,255
 a011348:	20800035 	stwio	r2,0(r4)
 a01134c:	00000c06 	br	a011380 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 a011350:	e0bff517 	ldw	r2,-44(fp)
 a011354:	10000826 	beq	r2,zero,a011378 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 a011358:	e0bff517 	ldw	r2,-44(fp)
 a01135c:	10bfffc4 	addi	r2,r2,-1
 a011360:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 a011364:	e0bffc17 	ldw	r2,-16(fp)
 a011368:	10800104 	addi	r2,r2,4
 a01136c:	0007883a 	mov	r3,zero
 a011370:	10c00035 	stwio	r3,0(r2)
 a011374:	00000206 	br	a011380 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 a011378:	00bf0004 	movi	r2,-1024
 a01137c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 a011380:	e0bffa17 	ldw	r2,-24(fp)
 a011384:	1080200c 	andi	r2,r2,128
 a011388:	103fd026 	beq	r2,zero,a0112cc <__alt_mem_flash+0xfe0102cc>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 a01138c:	e0bffc17 	ldw	r2,-16(fp)
 a011390:	10800037 	ldwio	r2,0(r2)
 a011394:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 a011398:	e0bff617 	ldw	r2,-40(fp)
 a01139c:	10000426 	beq	r2,zero,a0113b0 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 a0113a0:	e0bff617 	ldw	r2,-40(fp)
 a0113a4:	10bfffc4 	addi	r2,r2,-1
 a0113a8:	e0bff615 	stw	r2,-40(fp)
 a0113ac:	00000506 	br	a0113c4 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 a0113b0:	e0800217 	ldw	r2,8(fp)
 a0113b4:	10c00044 	addi	r3,r2,1
 a0113b8:	e0c00215 	stw	r3,8(fp)
 a0113bc:	e0fffb17 	ldw	r3,-20(fp)
 a0113c0:	10c00005 	stb	r3,0(r2)
      credits++;
 a0113c4:	e0bff717 	ldw	r2,-36(fp)
 a0113c8:	10800044 	addi	r2,r2,1
 a0113cc:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 a0113d0:	e0bff617 	ldw	r2,-40(fp)
 a0113d4:	103fbd1e 	bne	r2,zero,a0112cc <__alt_mem_flash+0xfe0102cc>
 a0113d8:	e0c00217 	ldw	r3,8(fp)
 a0113dc:	e0bff917 	ldw	r2,-28(fp)
 a0113e0:	18bfba1e 	bne	r3,r2,a0112cc <__alt_mem_flash+0xfe0102cc>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 a0113e4:	e0bffc17 	ldw	r2,-16(fp)
 a0113e8:	10800204 	addi	r2,r2,8
 a0113ec:	10800037 	ldwio	r2,0(r2)
 a0113f0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 a0113f4:	e0bffa17 	ldw	r2,-24(fp)
 a0113f8:	1080080c 	andi	r2,r2,32
 a0113fc:	103ff926 	beq	r2,zero,a0113e4 <__alt_mem_flash+0xfe0103e4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 a011400:	e0800317 	ldw	r2,12(fp)
 a011404:	1080004c 	andi	r2,r2,1
 a011408:	1000041e 	bne	r2,zero,a01141c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 a01140c:	e0bffc17 	ldw	r2,-16(fp)
 a011410:	10800304 	addi	r2,r2,12
 a011414:	0007883a 	mov	r3,zero
 a011418:	10c00035 	stwio	r3,0(r2)

  return read_length;
 a01141c:	e0800117 	ldw	r2,4(fp)
}
 a011420:	e037883a 	mov	sp,fp
 a011424:	df000017 	ldw	fp,0(sp)
 a011428:	dec00104 	addi	sp,sp,4
 a01142c:	f800283a 	ret

0a011430 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 a011430:	defffa04 	addi	sp,sp,-24
 a011434:	dfc00515 	stw	ra,20(sp)
 a011438:	df000415 	stw	fp,16(sp)
 a01143c:	df000404 	addi	fp,sp,16
 a011440:	e13ffe15 	stw	r4,-8(fp)
 a011444:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 a011448:	e0bfff17 	ldw	r2,-4(fp)
 a01144c:	10800017 	ldw	r2,0(r2)
 a011450:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 a011454:	e13ffe17 	ldw	r4,-8(fp)
 a011458:	a0085740 	call	a008574 <strlen>
 a01145c:	10800044 	addi	r2,r2,1
 a011460:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 a011464:	00000d06 	br	a01149c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 a011468:	e0bffc17 	ldw	r2,-16(fp)
 a01146c:	10800217 	ldw	r2,8(r2)
 a011470:	e0fffd17 	ldw	r3,-12(fp)
 a011474:	180d883a 	mov	r6,r3
 a011478:	e17ffe17 	ldw	r5,-8(fp)
 a01147c:	1009883a 	mov	r4,r2
 a011480:	a0117740 	call	a011774 <memcmp>
 a011484:	1000021e 	bne	r2,zero,a011490 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 a011488:	e0bffc17 	ldw	r2,-16(fp)
 a01148c:	00000706 	br	a0114ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 a011490:	e0bffc17 	ldw	r2,-16(fp)
 a011494:	10800017 	ldw	r2,0(r2)
 a011498:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 a01149c:	e0fffc17 	ldw	r3,-16(fp)
 a0114a0:	e0bfff17 	ldw	r2,-4(fp)
 a0114a4:	18bff01e 	bne	r3,r2,a011468 <__alt_mem_flash+0xfe010468>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 a0114a8:	0005883a 	mov	r2,zero
}
 a0114ac:	e037883a 	mov	sp,fp
 a0114b0:	dfc00117 	ldw	ra,4(sp)
 a0114b4:	df000017 	ldw	fp,0(sp)
 a0114b8:	dec00204 	addi	sp,sp,8
 a0114bc:	f800283a 	ret

0a0114c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 a0114c0:	defffb04 	addi	sp,sp,-20
 a0114c4:	dfc00415 	stw	ra,16(sp)
 a0114c8:	df000315 	stw	fp,12(sp)
 a0114cc:	df000304 	addi	fp,sp,12
 a0114d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 a0114d4:	d0a00617 	ldw	r2,-32744(gp)
 a0114d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 a0114dc:	00003106 	br	a0115a4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 a0114e0:	e0bffd17 	ldw	r2,-12(fp)
 a0114e4:	10800217 	ldw	r2,8(r2)
 a0114e8:	1009883a 	mov	r4,r2
 a0114ec:	a0085740 	call	a008574 <strlen>
 a0114f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 a0114f4:	e0bffd17 	ldw	r2,-12(fp)
 a0114f8:	10c00217 	ldw	r3,8(r2)
 a0114fc:	e0bffe17 	ldw	r2,-8(fp)
 a011500:	10bfffc4 	addi	r2,r2,-1
 a011504:	1885883a 	add	r2,r3,r2
 a011508:	10800003 	ldbu	r2,0(r2)
 a01150c:	10803fcc 	andi	r2,r2,255
 a011510:	1080201c 	xori	r2,r2,128
 a011514:	10bfe004 	addi	r2,r2,-128
 a011518:	10800bd8 	cmpnei	r2,r2,47
 a01151c:	1000031e 	bne	r2,zero,a01152c <alt_find_file+0x6c>
    {
      len -= 1;
 a011520:	e0bffe17 	ldw	r2,-8(fp)
 a011524:	10bfffc4 	addi	r2,r2,-1
 a011528:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 a01152c:	e0bffe17 	ldw	r2,-8(fp)
 a011530:	e0ffff17 	ldw	r3,-4(fp)
 a011534:	1885883a 	add	r2,r3,r2
 a011538:	10800003 	ldbu	r2,0(r2)
 a01153c:	10803fcc 	andi	r2,r2,255
 a011540:	1080201c 	xori	r2,r2,128
 a011544:	10bfe004 	addi	r2,r2,-128
 a011548:	10800be0 	cmpeqi	r2,r2,47
 a01154c:	1000081e 	bne	r2,zero,a011570 <alt_find_file+0xb0>
 a011550:	e0bffe17 	ldw	r2,-8(fp)
 a011554:	e0ffff17 	ldw	r3,-4(fp)
 a011558:	1885883a 	add	r2,r3,r2
 a01155c:	10800003 	ldbu	r2,0(r2)
 a011560:	10803fcc 	andi	r2,r2,255
 a011564:	1080201c 	xori	r2,r2,128
 a011568:	10bfe004 	addi	r2,r2,-128
 a01156c:	10000a1e 	bne	r2,zero,a011598 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 a011570:	e0bffd17 	ldw	r2,-12(fp)
 a011574:	10800217 	ldw	r2,8(r2)
 a011578:	e0fffe17 	ldw	r3,-8(fp)
 a01157c:	180d883a 	mov	r6,r3
 a011580:	e17fff17 	ldw	r5,-4(fp)
 a011584:	1009883a 	mov	r4,r2
 a011588:	a0117740 	call	a011774 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 a01158c:	1000021e 	bne	r2,zero,a011598 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 a011590:	e0bffd17 	ldw	r2,-12(fp)
 a011594:	00000706 	br	a0115b4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 a011598:	e0bffd17 	ldw	r2,-12(fp)
 a01159c:	10800017 	ldw	r2,0(r2)
 a0115a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 a0115a4:	e0fffd17 	ldw	r3,-12(fp)
 a0115a8:	d0a00604 	addi	r2,gp,-32744
 a0115ac:	18bfcc1e 	bne	r3,r2,a0114e0 <__alt_mem_flash+0xfe0104e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 a0115b0:	0005883a 	mov	r2,zero
}
 a0115b4:	e037883a 	mov	sp,fp
 a0115b8:	dfc00117 	ldw	ra,4(sp)
 a0115bc:	df000017 	ldw	fp,0(sp)
 a0115c0:	dec00204 	addi	sp,sp,8
 a0115c4:	f800283a 	ret

0a0115c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 a0115c8:	defffa04 	addi	sp,sp,-24
 a0115cc:	dfc00515 	stw	ra,20(sp)
 a0115d0:	df000415 	stw	fp,16(sp)
 a0115d4:	dc000315 	stw	r16,12(sp)
 a0115d8:	df000404 	addi	fp,sp,16
 a0115dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 a0115e0:	00bffa04 	movi	r2,-24
 a0115e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 a0115e8:	e03ffc15 	stw	zero,-16(fp)
 a0115ec:	00001d06 	br	a011664 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 a0115f0:	04028074 	movhi	r16,2561
 a0115f4:	8409b804 	addi	r16,r16,9952
 a0115f8:	e0bffc17 	ldw	r2,-16(fp)
 a0115fc:	01400304 	movi	r5,12
 a011600:	1009883a 	mov	r4,r2
 a011604:	a0019a40 	call	a0019a4 <__mulsi3>
 a011608:	8085883a 	add	r2,r16,r2
 a01160c:	10800017 	ldw	r2,0(r2)
 a011610:	1000111e 	bne	r2,zero,a011658 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 a011614:	04028074 	movhi	r16,2561
 a011618:	8409b804 	addi	r16,r16,9952
 a01161c:	e0bffc17 	ldw	r2,-16(fp)
 a011620:	01400304 	movi	r5,12
 a011624:	1009883a 	mov	r4,r2
 a011628:	a0019a40 	call	a0019a4 <__mulsi3>
 a01162c:	8085883a 	add	r2,r16,r2
 a011630:	e0fffe17 	ldw	r3,-8(fp)
 a011634:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 a011638:	d0e00a17 	ldw	r3,-32728(gp)
 a01163c:	e0bffc17 	ldw	r2,-16(fp)
 a011640:	1880020e 	bge	r3,r2,a01164c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 a011644:	e0bffc17 	ldw	r2,-16(fp)
 a011648:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 a01164c:	e0bffc17 	ldw	r2,-16(fp)
 a011650:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 a011654:	00000606 	br	a011670 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 a011658:	e0bffc17 	ldw	r2,-16(fp)
 a01165c:	10800044 	addi	r2,r2,1
 a011660:	e0bffc15 	stw	r2,-16(fp)
 a011664:	e0bffc17 	ldw	r2,-16(fp)
 a011668:	10800810 	cmplti	r2,r2,32
 a01166c:	103fe01e 	bne	r2,zero,a0115f0 <__alt_mem_flash+0xfe0105f0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 a011670:	e0bffd17 	ldw	r2,-12(fp)
}
 a011674:	e6ffff04 	addi	sp,fp,-4
 a011678:	dfc00217 	ldw	ra,8(sp)
 a01167c:	df000117 	ldw	fp,4(sp)
 a011680:	dc000017 	ldw	r16,0(sp)
 a011684:	dec00304 	addi	sp,sp,12
 a011688:	f800283a 	ret

0a01168c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 a01168c:	defffe04 	addi	sp,sp,-8
 a011690:	df000115 	stw	fp,4(sp)
 a011694:	df000104 	addi	fp,sp,4
 a011698:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 a01169c:	e0bfff17 	ldw	r2,-4(fp)
 a0116a0:	10bffe84 	addi	r2,r2,-6
 a0116a4:	10c00428 	cmpgeui	r3,r2,16
 a0116a8:	18001a1e 	bne	r3,zero,a011714 <alt_exception_cause_generated_bad_addr+0x88>
 a0116ac:	100690ba 	slli	r3,r2,2
 a0116b0:	00828074 	movhi	r2,2561
 a0116b4:	1085b104 	addi	r2,r2,5828
 a0116b8:	1885883a 	add	r2,r3,r2
 a0116bc:	10800017 	ldw	r2,0(r2)
 a0116c0:	1000683a 	jmp	r2
 a0116c4:	0a011704 	addi	r8,at,1116
 a0116c8:	0a011704 	addi	r8,at,1116
 a0116cc:	0a011714 	ori	r8,at,1116
 a0116d0:	0a011714 	ori	r8,at,1116
 a0116d4:	0a011714 	ori	r8,at,1116
 a0116d8:	0a011704 	addi	r8,at,1116
 a0116dc:	0a01170c 	andi	r8,at,1116
 a0116e0:	0a011714 	ori	r8,at,1116
 a0116e4:	0a011704 	addi	r8,at,1116
 a0116e8:	0a011704 	addi	r8,at,1116
 a0116ec:	0a011714 	ori	r8,at,1116
 a0116f0:	0a011704 	addi	r8,at,1116
 a0116f4:	0a01170c 	andi	r8,at,1116
 a0116f8:	0a011714 	ori	r8,at,1116
 a0116fc:	0a011714 	ori	r8,at,1116
 a011700:	0a011704 	addi	r8,at,1116
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 a011704:	00800044 	movi	r2,1
 a011708:	00000306 	br	a011718 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 a01170c:	0005883a 	mov	r2,zero
 a011710:	00000106 	br	a011718 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 a011714:	0005883a 	mov	r2,zero
  }
}
 a011718:	e037883a 	mov	sp,fp
 a01171c:	df000017 	ldw	fp,0(sp)
 a011720:	dec00104 	addi	sp,sp,4
 a011724:	f800283a 	ret

0a011728 <atexit>:
 a011728:	200b883a 	mov	r5,r4
 a01172c:	000f883a 	mov	r7,zero
 a011730:	000d883a 	mov	r6,zero
 a011734:	0009883a 	mov	r4,zero
 a011738:	a0117f01 	jmpi	a0117f0 <__register_exitproc>

0a01173c <exit>:
 a01173c:	defffe04 	addi	sp,sp,-8
 a011740:	000b883a 	mov	r5,zero
 a011744:	dc000015 	stw	r16,0(sp)
 a011748:	dfc00115 	stw	ra,4(sp)
 a01174c:	2021883a 	mov	r16,r4
 a011750:	a0119080 	call	a011908 <__call_exitprocs>
 a011754:	00828074 	movhi	r2,2561
 a011758:	108e9f04 	addi	r2,r2,14972
 a01175c:	11000017 	ldw	r4,0(r2)
 a011760:	20800f17 	ldw	r2,60(r4)
 a011764:	10000126 	beq	r2,zero,a01176c <exit+0x30>
 a011768:	103ee83a 	callr	r2
 a01176c:	8009883a 	mov	r4,r16
 a011770:	a011a880 	call	a011a88 <_exit>

0a011774 <memcmp>:
 a011774:	01c000c4 	movi	r7,3
 a011778:	3980192e 	bgeu	r7,r6,a0117e0 <memcmp+0x6c>
 a01177c:	2144b03a 	or	r2,r4,r5
 a011780:	11c4703a 	and	r2,r2,r7
 a011784:	10000f26 	beq	r2,zero,a0117c4 <memcmp+0x50>
 a011788:	20800003 	ldbu	r2,0(r4)
 a01178c:	28c00003 	ldbu	r3,0(r5)
 a011790:	10c0151e 	bne	r2,r3,a0117e8 <memcmp+0x74>
 a011794:	31bfff84 	addi	r6,r6,-2
 a011798:	01ffffc4 	movi	r7,-1
 a01179c:	00000406 	br	a0117b0 <memcmp+0x3c>
 a0117a0:	20800003 	ldbu	r2,0(r4)
 a0117a4:	28c00003 	ldbu	r3,0(r5)
 a0117a8:	31bfffc4 	addi	r6,r6,-1
 a0117ac:	10c00e1e 	bne	r2,r3,a0117e8 <memcmp+0x74>
 a0117b0:	21000044 	addi	r4,r4,1
 a0117b4:	29400044 	addi	r5,r5,1
 a0117b8:	31fff91e 	bne	r6,r7,a0117a0 <__alt_mem_flash+0xfe0107a0>
 a0117bc:	0005883a 	mov	r2,zero
 a0117c0:	f800283a 	ret
 a0117c4:	20c00017 	ldw	r3,0(r4)
 a0117c8:	28800017 	ldw	r2,0(r5)
 a0117cc:	18bfee1e 	bne	r3,r2,a011788 <__alt_mem_flash+0xfe010788>
 a0117d0:	31bfff04 	addi	r6,r6,-4
 a0117d4:	21000104 	addi	r4,r4,4
 a0117d8:	29400104 	addi	r5,r5,4
 a0117dc:	39bff936 	bltu	r7,r6,a0117c4 <__alt_mem_flash+0xfe0107c4>
 a0117e0:	303fe91e 	bne	r6,zero,a011788 <__alt_mem_flash+0xfe010788>
 a0117e4:	003ff506 	br	a0117bc <__alt_mem_flash+0xfe0107bc>
 a0117e8:	10c5c83a 	sub	r2,r2,r3
 a0117ec:	f800283a 	ret

0a0117f0 <__register_exitproc>:
 a0117f0:	defffa04 	addi	sp,sp,-24
 a0117f4:	dc000315 	stw	r16,12(sp)
 a0117f8:	04028074 	movhi	r16,2561
 a0117fc:	840e9f04 	addi	r16,r16,14972
 a011800:	80c00017 	ldw	r3,0(r16)
 a011804:	dc400415 	stw	r17,16(sp)
 a011808:	dfc00515 	stw	ra,20(sp)
 a01180c:	18805217 	ldw	r2,328(r3)
 a011810:	2023883a 	mov	r17,r4
 a011814:	10003726 	beq	r2,zero,a0118f4 <__register_exitproc+0x104>
 a011818:	10c00117 	ldw	r3,4(r2)
 a01181c:	010007c4 	movi	r4,31
 a011820:	20c00e16 	blt	r4,r3,a01185c <__register_exitproc+0x6c>
 a011824:	1a000044 	addi	r8,r3,1
 a011828:	8800221e 	bne	r17,zero,a0118b4 <__register_exitproc+0xc4>
 a01182c:	18c00084 	addi	r3,r3,2
 a011830:	18c7883a 	add	r3,r3,r3
 a011834:	18c7883a 	add	r3,r3,r3
 a011838:	12000115 	stw	r8,4(r2)
 a01183c:	10c7883a 	add	r3,r2,r3
 a011840:	19400015 	stw	r5,0(r3)
 a011844:	0005883a 	mov	r2,zero
 a011848:	dfc00517 	ldw	ra,20(sp)
 a01184c:	dc400417 	ldw	r17,16(sp)
 a011850:	dc000317 	ldw	r16,12(sp)
 a011854:	dec00604 	addi	sp,sp,24
 a011858:	f800283a 	ret
 a01185c:	00800034 	movhi	r2,0
 a011860:	10800004 	addi	r2,r2,0
 a011864:	10002626 	beq	r2,zero,a011900 <__register_exitproc+0x110>
 a011868:	01006404 	movi	r4,400
 a01186c:	d9400015 	stw	r5,0(sp)
 a011870:	d9800115 	stw	r6,4(sp)
 a011874:	d9c00215 	stw	r7,8(sp)
 a011878:	00000000 	call	0 <__alt_mem_onchip-0x4000000>
 a01187c:	d9400017 	ldw	r5,0(sp)
 a011880:	d9800117 	ldw	r6,4(sp)
 a011884:	d9c00217 	ldw	r7,8(sp)
 a011888:	10001d26 	beq	r2,zero,a011900 <__register_exitproc+0x110>
 a01188c:	81000017 	ldw	r4,0(r16)
 a011890:	10000115 	stw	zero,4(r2)
 a011894:	02000044 	movi	r8,1
 a011898:	22405217 	ldw	r9,328(r4)
 a01189c:	0007883a 	mov	r3,zero
 a0118a0:	12400015 	stw	r9,0(r2)
 a0118a4:	20805215 	stw	r2,328(r4)
 a0118a8:	10006215 	stw	zero,392(r2)
 a0118ac:	10006315 	stw	zero,396(r2)
 a0118b0:	883fde26 	beq	r17,zero,a01182c <__alt_mem_flash+0xfe01082c>
 a0118b4:	18c9883a 	add	r4,r3,r3
 a0118b8:	2109883a 	add	r4,r4,r4
 a0118bc:	1109883a 	add	r4,r2,r4
 a0118c0:	21802215 	stw	r6,136(r4)
 a0118c4:	01800044 	movi	r6,1
 a0118c8:	12406217 	ldw	r9,392(r2)
 a0118cc:	30cc983a 	sll	r6,r6,r3
 a0118d0:	4992b03a 	or	r9,r9,r6
 a0118d4:	12406215 	stw	r9,392(r2)
 a0118d8:	21c04215 	stw	r7,264(r4)
 a0118dc:	01000084 	movi	r4,2
 a0118e0:	893fd21e 	bne	r17,r4,a01182c <__alt_mem_flash+0xfe01082c>
 a0118e4:	11006317 	ldw	r4,396(r2)
 a0118e8:	218cb03a 	or	r6,r4,r6
 a0118ec:	11806315 	stw	r6,396(r2)
 a0118f0:	003fce06 	br	a01182c <__alt_mem_flash+0xfe01082c>
 a0118f4:	18805304 	addi	r2,r3,332
 a0118f8:	18805215 	stw	r2,328(r3)
 a0118fc:	003fc606 	br	a011818 <__alt_mem_flash+0xfe010818>
 a011900:	00bfffc4 	movi	r2,-1
 a011904:	003fd006 	br	a011848 <__alt_mem_flash+0xfe010848>

0a011908 <__call_exitprocs>:
 a011908:	defff504 	addi	sp,sp,-44
 a01190c:	df000915 	stw	fp,36(sp)
 a011910:	dd400615 	stw	r21,24(sp)
 a011914:	dc800315 	stw	r18,12(sp)
 a011918:	dfc00a15 	stw	ra,40(sp)
 a01191c:	ddc00815 	stw	r23,32(sp)
 a011920:	dd800715 	stw	r22,28(sp)
 a011924:	dd000515 	stw	r20,20(sp)
 a011928:	dcc00415 	stw	r19,16(sp)
 a01192c:	dc400215 	stw	r17,8(sp)
 a011930:	dc000115 	stw	r16,4(sp)
 a011934:	d9000015 	stw	r4,0(sp)
 a011938:	2839883a 	mov	fp,r5
 a01193c:	04800044 	movi	r18,1
 a011940:	057fffc4 	movi	r21,-1
 a011944:	00828074 	movhi	r2,2561
 a011948:	108e9f04 	addi	r2,r2,14972
 a01194c:	12000017 	ldw	r8,0(r2)
 a011950:	45005217 	ldw	r20,328(r8)
 a011954:	44c05204 	addi	r19,r8,328
 a011958:	a0001c26 	beq	r20,zero,a0119cc <__call_exitprocs+0xc4>
 a01195c:	a0800117 	ldw	r2,4(r20)
 a011960:	15ffffc4 	addi	r23,r2,-1
 a011964:	b8000d16 	blt	r23,zero,a01199c <__call_exitprocs+0x94>
 a011968:	14000044 	addi	r16,r2,1
 a01196c:	8421883a 	add	r16,r16,r16
 a011970:	8421883a 	add	r16,r16,r16
 a011974:	84402004 	addi	r17,r16,128
 a011978:	a463883a 	add	r17,r20,r17
 a01197c:	a421883a 	add	r16,r20,r16
 a011980:	e0001e26 	beq	fp,zero,a0119fc <__call_exitprocs+0xf4>
 a011984:	80804017 	ldw	r2,256(r16)
 a011988:	e0801c26 	beq	fp,r2,a0119fc <__call_exitprocs+0xf4>
 a01198c:	bdffffc4 	addi	r23,r23,-1
 a011990:	843fff04 	addi	r16,r16,-4
 a011994:	8c7fff04 	addi	r17,r17,-4
 a011998:	bd7ff91e 	bne	r23,r21,a011980 <__alt_mem_flash+0xfe010980>
 a01199c:	00800034 	movhi	r2,0
 a0119a0:	10800004 	addi	r2,r2,0
 a0119a4:	10000926 	beq	r2,zero,a0119cc <__call_exitprocs+0xc4>
 a0119a8:	a0800117 	ldw	r2,4(r20)
 a0119ac:	1000301e 	bne	r2,zero,a011a70 <__call_exitprocs+0x168>
 a0119b0:	a0800017 	ldw	r2,0(r20)
 a0119b4:	10003226 	beq	r2,zero,a011a80 <__call_exitprocs+0x178>
 a0119b8:	a009883a 	mov	r4,r20
 a0119bc:	98800015 	stw	r2,0(r19)
 a0119c0:	00000000 	call	0 <__alt_mem_onchip-0x4000000>
 a0119c4:	9d000017 	ldw	r20,0(r19)
 a0119c8:	a03fe41e 	bne	r20,zero,a01195c <__alt_mem_flash+0xfe01095c>
 a0119cc:	dfc00a17 	ldw	ra,40(sp)
 a0119d0:	df000917 	ldw	fp,36(sp)
 a0119d4:	ddc00817 	ldw	r23,32(sp)
 a0119d8:	dd800717 	ldw	r22,28(sp)
 a0119dc:	dd400617 	ldw	r21,24(sp)
 a0119e0:	dd000517 	ldw	r20,20(sp)
 a0119e4:	dcc00417 	ldw	r19,16(sp)
 a0119e8:	dc800317 	ldw	r18,12(sp)
 a0119ec:	dc400217 	ldw	r17,8(sp)
 a0119f0:	dc000117 	ldw	r16,4(sp)
 a0119f4:	dec00b04 	addi	sp,sp,44
 a0119f8:	f800283a 	ret
 a0119fc:	a0800117 	ldw	r2,4(r20)
 a011a00:	80c00017 	ldw	r3,0(r16)
 a011a04:	10bfffc4 	addi	r2,r2,-1
 a011a08:	15c01426 	beq	r2,r23,a011a5c <__call_exitprocs+0x154>
 a011a0c:	80000015 	stw	zero,0(r16)
 a011a10:	183fde26 	beq	r3,zero,a01198c <__alt_mem_flash+0xfe01098c>
 a011a14:	95c8983a 	sll	r4,r18,r23
 a011a18:	a0806217 	ldw	r2,392(r20)
 a011a1c:	a5800117 	ldw	r22,4(r20)
 a011a20:	2084703a 	and	r2,r4,r2
 a011a24:	10000b26 	beq	r2,zero,a011a54 <__call_exitprocs+0x14c>
 a011a28:	a0806317 	ldw	r2,396(r20)
 a011a2c:	2088703a 	and	r4,r4,r2
 a011a30:	20000c1e 	bne	r4,zero,a011a64 <__call_exitprocs+0x15c>
 a011a34:	89400017 	ldw	r5,0(r17)
 a011a38:	d9000017 	ldw	r4,0(sp)
 a011a3c:	183ee83a 	callr	r3
 a011a40:	a0800117 	ldw	r2,4(r20)
 a011a44:	15bfbf1e 	bne	r2,r22,a011944 <__alt_mem_flash+0xfe010944>
 a011a48:	98800017 	ldw	r2,0(r19)
 a011a4c:	153fcf26 	beq	r2,r20,a01198c <__alt_mem_flash+0xfe01098c>
 a011a50:	003fbc06 	br	a011944 <__alt_mem_flash+0xfe010944>
 a011a54:	183ee83a 	callr	r3
 a011a58:	003ff906 	br	a011a40 <__alt_mem_flash+0xfe010a40>
 a011a5c:	a5c00115 	stw	r23,4(r20)
 a011a60:	003feb06 	br	a011a10 <__alt_mem_flash+0xfe010a10>
 a011a64:	89000017 	ldw	r4,0(r17)
 a011a68:	183ee83a 	callr	r3
 a011a6c:	003ff406 	br	a011a40 <__alt_mem_flash+0xfe010a40>
 a011a70:	a0800017 	ldw	r2,0(r20)
 a011a74:	a027883a 	mov	r19,r20
 a011a78:	1029883a 	mov	r20,r2
 a011a7c:	003fb606 	br	a011958 <__alt_mem_flash+0xfe010958>
 a011a80:	0005883a 	mov	r2,zero
 a011a84:	003ffb06 	br	a011a74 <__alt_mem_flash+0xfe010a74>

0a011a88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 a011a88:	defffd04 	addi	sp,sp,-12
 a011a8c:	df000215 	stw	fp,8(sp)
 a011a90:	df000204 	addi	fp,sp,8
 a011a94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 a011a98:	0001883a 	nop
 a011a9c:	e0bfff17 	ldw	r2,-4(fp)
 a011aa0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 a011aa4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 a011aa8:	10000226 	beq	r2,zero,a011ab4 <_exit+0x2c>
    ALT_SIM_FAIL();
 a011aac:	002af070 	cmpltui	zero,zero,43969
 a011ab0:	00000106 	br	a011ab8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 a011ab4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 a011ab8:	003fff06 	br	a011ab8 <__alt_mem_flash+0xfe010ab8>
