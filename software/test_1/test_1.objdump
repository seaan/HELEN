
test_1.elf:     file format elf32-littlenios2
test_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0a000210

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002000 vaddr 0x0a000000 paddr 0x0a000000 align 2**12
         filesz 0x000074d0 memsz 0x000074d0 flags r-x
    LOAD off    0x000094d0 vaddr 0x0a0074d0 paddr 0x0a009100 align 2**12
         filesz 0x00001c30 memsz 0x00001c30 flags rw-
    LOAD off    0x0000bd30 vaddr 0x0a00ad30 paddr 0x0a00ad30 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0a000000  0a000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007254  0a000210  0a000210  00002210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000006c  0a007464  0a007464  00009464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c30  0a0074d0  0a009100  000094d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0a00ad30  0a00ad30  0000bd30  2**2
                  ALLOC, SMALL_DATA
  6 .onchip       00000000  04000020  04000020  0000b100  2**0
                  CONTENTS
  7 .sdram        00000000  0a00ae84  0a00ae84  0000b100  2**0
                  CONTENTS
  8 .flash        00000000  0c001000  0c001000  0000b100  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000b10  00000000  00000000  0000b128  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00018e84  00000000  00000000  0000bc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006aa4  00000000  00000000  00024abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007483  00000000  00000000  0002b560  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b78  00000000  00000000  000329e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f18  00000000  00000000  0003455c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004bc7  00000000  00000000  00037474  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0003c03c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000680  00000000  00000000  0003c050  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003f38a  2**0
                  CONTENTS, READONLY
 20 .cpu          00000006  00000000  00000000  0003f38d  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003f393  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003f394  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0003f395  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003f399  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003f39d  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  0003f3a1  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  0003f3ac  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  0003f3b7  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000005  00000000  00000000  0003f3c2  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000002d  00000000  00000000  0003f3c7  2**0
                  CONTENTS, READONLY
 31 .jdi          00007c1c  00000000  00000000  0003f3f4  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     0008a1be  00000000  00000000  00047010  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
0a000000 l    d  .exceptions	00000000 .exceptions
0a000210 l    d  .text	00000000 .text
0a007464 l    d  .rodata	00000000 .rodata
0a0074d0 l    d  .rwdata	00000000 .rwdata
0a00ad30 l    d  .bss	00000000 .bss
04000020 l    d  .onchip	00000000 .onchip
0a00ae84 l    d  .sdram	00000000 .sdram
0c001000 l    d  .flash	00000000 .flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_1_bsp//obj/HAL/src/crt0.o
0a000248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0a0074d0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 findfp.c
0a000390 l     F .text	00000008 __fp_unlock
0a0003a4 l     F .text	0000019c __sinit.part.1
0a000540 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0a003030 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0a003144 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0a003170 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0a003264 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0a00334c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0a003438 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0a003614 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0a0090e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0a003888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0a0039c4 l     F .text	00000034 alt_dev_reg
0a007ea4 l     O .rwdata	000000cc flash
0a007f70 l     O .rwdata	00001060 jtag_uart_0
0a008fd0 l     O .rwdata	000000c4 uart
0a009094 l     O .rwdata	0000002c adc
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0a003ab8 l     F .text	00000034 alt_flash_device_register
0a003b40 l     F .text	000003f8 alt_epcs_flash_query
0a003f38 l     F .text	000000ec alt_epcs_flash_memcmp
0a004310 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0a0047d8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0a0049e4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0a0051d8 l     F .text	0000009c altera_avalon_uart_irq
0a005274 l     F .text	000000e4 altera_avalon_uart_rxirq
0a005358 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0a0054f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0a00570c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0a005950 l     F .text	00000038 epcs_test_wip
0a005988 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0a00607c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0a006598 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0a0066f8 l     F .text	0000003c alt_get_errno
0a006734 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0a00ad58 g     O .bss	00000004 alt_instruction_exception_handler
0a004284 g     F .text	0000008c alt_epcs_flash_get_info
0a002e00 g     F .text	00000054 _isatty_r
0a003550 g     F .text	0000007c alt_main
0a00ad84 g     O .bss	00000100 alt_irq
0a002b28 g     F .text	00000060 _lseek_r
0a009100 g       *ABS*	00000000 __flash_rwdata_start
0a00ae84 g       *ABS*	00000000 __alt_heap_start
0a0020dc g     F .text	0000005c __sseek
0a0006f0 g     F .text	00000010 __sinit
0a000548 g     F .text	00000078 __sfmoreglue
0c001000 g       *ABS*	00000000 __alt_mem_flash
0a0035f0 g     F .text	00000024 __malloc_unlock
0a0017c8 g     F .text	0000015c memmove
0a0006d8 g     F .text	00000018 _cleanup
0a006b20 g     F .text	00000024 altera_nios2_gen2_irq_init
0a0059c4 g     F .text	000000fc epcs_sector_erase
04000000 g     F .entry	0000000c __reset
0a000000 g       *ABS*	00000000 __flash_exceptions_start
0a002da4 g     F .text	0000005c _fstat_r
0a00ad3c g     O .bss	00000004 errno
0a002058 g     F .text	00000008 __seofread
0a00ad44 g     O .bss	00000004 alt_argv
0a0110c0 g       *ABS*	00000000 _gp
0a007d24 g     O .rwdata	00000180 alt_fd_list
0a005c08 g     F .text	0000006c epcs_write_status_register
0a006d40 g     F .text	00000090 alt_find_dev
0a001680 g     F .text	00000148 memcpy
0a000398 g     F .text	0000000c _cleanup_r
0a00667c g     F .text	0000007c alt_io_redirect
0a007464 g       *ABS*	00000000 __DTOR_END__
0a006f9c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0a00441c g     F .text	00000100 alt_epcs_flash_write_block
0a004bdc g     F .text	0000021c altera_avalon_jtag_uart_read
0a002f4c g     F .text	00000064 .hidden __udivsi3
0a0032a0 g     F .text	000000ac isatty
0a00ad38 g     O .bss	00000004 __malloc_top_pad
0a000740 g     F .text	000004c8 __sfvwrite_r
0a001fb0 g     F .text	00000054 _sbrk_r
0a002d44 g     F .text	00000060 _read_r
0a0090e0 g     O .rwdata	00000004 alt_max_fd
0a002348 g     F .text	000000f0 _fclose_r
0a0026c4 g     F .text	00000030 fflush
0a00ad34 g     O .bss	00000004 __malloc_max_sbrked_mem
0a0043a4 g     F .text	00000078 alt_epcs_flash_erase_block
0a003474 g     F .text	000000dc lseek
0a0090c0 g     O .rwdata	00000004 _global_impure_ptr
0a005ed4 g     F .text	0000005c epcs_exit_4_bytes_mode
0a001a4c g     F .text	00000564 _realloc_r
0a00ae84 g       *ABS*	00000000 __bss_end
0a0064a8 g     F .text	000000f0 alt_iic_isr_register
0a006a18 g     F .text	00000108 alt_tick
0a00512c g     F .text	000000ac altera_avalon_uart_init
0a000710 g     F .text	00000018 __fp_lock_all
0a00645c g     F .text	0000004c alt_ic_irq_enabled
0a00697c g     F .text	0000009c alt_alarm_stop
0a00ad4c g     O .bss	00000004 alt_irq_active
0a0000dc g     F .exceptions	000000d4 alt_irq_handler
0a007cfc g     O .rwdata	00000028 alt_dev_null
0a00605c g     F .text	00000020 alt_dcache_flush_all
0a009100 g       *ABS*	00000000 __ram_rwdata_end
0a0090d8 g     O .rwdata	00000008 alt_dev_list
0a0038c4 g     F .text	00000100 write
0a0074d0 g       *ABS*	00000000 __ram_rodata_end
0a0031ac g     F .text	000000b8 fstat
0a002fb0 g     F .text	00000058 .hidden __umodsi3
0a005d90 g     F .text	00000068 epcs_read_electronic_signature
0a00ae84 g       *ABS*	00000000 end
0a005748 g     F .text	000001ac altera_avalon_uart_write
0a004718 g     F .text	000000c0 altera_avalon_jtag_uart_init
0a0001b0 g     F .exceptions	00000060 alt_instruction_exception_entry
0a007464 g       *ABS*	00000000 __CTOR_LIST__
0b000000 g       *ABS*	00000000 __alt_stack_pointer
0a00507c g     F .text	00000060 altera_avalon_uart_write_fd
0a0050dc g     F .text	00000050 altera_avalon_uart_close_fd
0a004df8 g     F .text	00000224 altera_avalon_jtag_uart_write
0a000700 g     F .text	00000004 __sfp_lock_acquire
0a00159c g     F .text	000000e4 memchr
0a002818 g     F .text	00000310 _free_r
0a0072b0 g     F .text	00000180 __call_exitprocs
0a0090c8 g     O .rwdata	00000004 __malloc_sbrk_base
0a000210 g     F .text	0000003c _start
0a00ad50 g     O .bss	00000004 _alt_tick_rate
0a006b44 g     F .text	000001fc alt_avalon_spi_command
0a00ad54 g     O .bss	00000004 _alt_nticks
0a003650 g     F .text	00000104 read
0a003a30 g     F .text	00000088 alt_sys_init
0a007198 g     F .text	00000118 __register_exitproc
0a004a84 g     F .text	00000068 altera_avalon_jtag_uart_close
0a003008 g     F .text	00000028 .hidden __mulsi3
0a0074d0 g       *ABS*	00000000 __ram_rwdata_start
0a007464 g       *ABS*	00000000 __ram_rodata_start
0a00ad5c g     O .bss	00000028 __malloc_current_mallinfo
0a0058f4 g     F .text	0000005c epcs_read_status_register
0a0045b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0a006ed8 g     F .text	000000c4 alt_get_fd
0a0022f4 g     F .text	00000054 _close_r
0a005df8 g     F .text	00000080 epcs_read_device_id
0a007084 g     F .text	0000007c memcmp
0a004674 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0a00ae84 g       *ABS*	00000000 __alt_stack_base
0a0046c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0a000280 g     F .text	000000dc _fwrite_r
0a0021a0 g     F .text	00000154 __swsetup_r
0a0005c0 g     F .text	00000118 __sfp
0a0078f4 g     O .rwdata	00000408 __malloc_av_
0a00070c g     F .text	00000004 __sinit_lock_release
0a002004 g     F .text	00000054 __sread
0a006dd0 g     F .text	00000108 alt_find_file
0a0060b8 g     F .text	000000a4 alt_dev_llist_insert
0a0035cc g     F .text	00000024 __malloc_lock
0a0037d8 g     F .text	000000b0 sbrk
0a002668 g     F .text	0000005c _fflush_r
0a0090ec g     O .rwdata	00000008 alt_flash_dev_list
0a00ad30 g       *ABS*	00000000 __bss_start
0a001924 g     F .text	00000128 memset
0a00024c g     F .text	00000034 main
0a00ad48 g     O .bss	00000004 alt_envp
0a00ad30 g     O .bss	00000004 __malloc_max_total_mem
0a004614 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0a002138 g     F .text	00000008 __sclose
0b000000 g       *ABS*	00000000 __alt_heap_limit
0a002438 g     F .text	00000014 fclose
0a000d90 g     F .text	0000080c _malloc_r
0a0090e4 g     O .rwdata	00000004 alt_errno
0a000c08 g     F .text	000000c4 _fwalk
0a002e54 g     F .text	00000084 .hidden __divsi3
0a0026f4 g     F .text	00000124 _malloc_trim_r
0a007464 g       *ABS*	00000000 __CTOR_END__
0a004024 g     F .text	00000260 alt_epcs_flash_write
0a007464 g       *ABS*	00000000 __flash_rodata_start
0a007464 g       *ABS*	00000000 __DTOR_LIST__
0a0039f8 g     F .text	00000038 alt_irq_init
0a003754 g     F .text	00000084 alt_release_fd
0a007038 g     F .text	00000014 atexit
0a002140 g     F .text	00000060 _write_r
0a0090c4 g     O .rwdata	00000004 _impure_ptr
0a00ad40 g     O .bss	00000004 alt_argc
0a00244c g     F .text	0000021c __sflush_r
0a0061bc g     F .text	00000060 _do_dtors
0a000000 g       .exceptions	00000000 alt_irq_entry
0a000728 g     F .text	00000018 __fp_unlock_all
0a0090d0 g     O .rwdata	00000008 alt_fs_list
0a000000 g       *ABS*	00000000 __ram_exceptions_start
0a005ac0 g     F .text	000000f4 epcs_read_buffer
0a003aec g     F .text	00000054 alt_epcs_flash_init
0a0062f8 g     F .text	00000050 alt_ic_isr_register
0a00035c g     F .text	00000034 fwrite
0a009100 g       *ABS*	00000000 _edata
0a00501c g     F .text	00000060 altera_avalon_uart_read_fd
0a00ae84 g       *ABS*	00000000 _end
0a00621c g     F .text	00000068 alt_flash_open_dev
0a000210 g       *ABS*	00000000 __ram_exceptions_end
0a004aec g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0a0063d0 g     F .text	0000008c alt_ic_irq_disable
0a005e78 g     F .text	0000005c epcs_enter_4_bytes_mode
0a002060 g     F .text	0000007c __swrite
0a0090cc g     O .rwdata	00000004 __malloc_trim_threshold
04000000 g       *ABS*	00000000 __alt_mem_onchip
0a00704c g     F .text	00000038 exit
0a000ccc g     F .text	000000c4 _fwalk_reent
0a006284 g     F .text	00000054 alt_flash_close_dev
0a002ed8 g     F .text	00000074 .hidden __modsi3
0b000000 g       *ABS*	00000000 __alt_data_end
0a000000 g     F .exceptions	00000000 alt_exception
0a000704 g     F .text	00000004 __sfp_lock_release
0a000000 g       *ABS*	00000000 __alt_mem_sdram
0a0054a0 g     F .text	00000054 altera_avalon_uart_close
0a007430 g     F .text	00000034 _exit
0a005f30 g     F .text	0000012c alt_alarm_start
0a002b88 g     F .text	000001bc __smakebuf_r
0a007100 g     F .text	00000098 strlen
0a005bb4 g     F .text	00000054 epcs_write_enable
0a006820 g     F .text	0000015c open
0a0062d8 g     F .text	00000020 alt_icache_flush_all
0a0090f4 g     O .rwdata	00000004 alt_priority_mask
0a006348 g     F .text	00000088 alt_ic_irq_enable
0a005530 g     F .text	000001dc altera_avalon_uart_read
0a00451c g     F .text	00000098 alt_epcs_flash_read
0a0090f8 g     O .rwdata	00000008 alt_alarm_list
0a00615c g     F .text	00000060 _do_ctors
0a00306c g     F .text	000000d8 close
0a0033b4 g     F .text	00000084 alt_load
0a000708 g     F .text	00000004 __sinit_lock_acquire
0a005c74 g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00428034 	movhi	at,2560
    ori r1, r1, %lo(_start)
 4000004:	08408414 	ori	at,at,528
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0a000000 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 a000000:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 a000004:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 a000008:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 a00000c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 a000010:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 a000014:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 a000018:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 a00001c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 a000020:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 a000024:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 a000028:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 a00002c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 a000030:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 a000034:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 a000038:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 a00003c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 a000040:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 a000044:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 a000048:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 a00004c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 a000050:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 a000054:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 a000058:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 a00005c:	10000326 	beq	r2,zero,a00006c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 a000060:	20000226 	beq	r4,zero,a00006c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 a000064:	a0000dc0 	call	a0000dc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 a000068:	00000706 	br	a000088 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 a00006c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 a000070:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 a000074:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 a000078:	a0001b00 	call	a0001b0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 a00007c:	1000021e 	bne	r2,zero,a000088 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 a000080:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 a000084:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 a000088:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 a00008c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 a000090:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 a000094:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 a000098:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 a00009c:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 a0000a0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 a0000a4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 a0000a8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 a0000ac:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 a0000b0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 a0000b4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 a0000b8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 a0000bc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 a0000c0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 a0000c4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 a0000c8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 a0000cc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 a0000d0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 a0000d4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 a0000d8:	ef80083a 	eret

0a0000dc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 a0000dc:	defff904 	addi	sp,sp,-28
 a0000e0:	dfc00615 	stw	ra,24(sp)
 a0000e4:	df000515 	stw	fp,20(sp)
 a0000e8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 a0000ec:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 a0000f0:	0005313a 	rdctl	r2,ipending
 a0000f4:	e0bffe15 	stw	r2,-8(fp)

  return active;
 a0000f8:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 a0000fc:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 a000100:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 a000104:	00800044 	movi	r2,1
 a000108:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 a00010c:	e0fffb17 	ldw	r3,-20(fp)
 a000110:	e0bffc17 	ldw	r2,-16(fp)
 a000114:	1884703a 	and	r2,r3,r2
 a000118:	10001426 	beq	r2,zero,a00016c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 a00011c:	00828074 	movhi	r2,2561
 a000120:	10ab6104 	addi	r2,r2,-21116
 a000124:	e0fffd17 	ldw	r3,-12(fp)
 a000128:	180690fa 	slli	r3,r3,3
 a00012c:	10c5883a 	add	r2,r2,r3
 a000130:	10c00017 	ldw	r3,0(r2)
 a000134:	00828074 	movhi	r2,2561
 a000138:	10ab6104 	addi	r2,r2,-21116
 a00013c:	e13ffd17 	ldw	r4,-12(fp)
 a000140:	200890fa 	slli	r4,r4,3
 a000144:	1105883a 	add	r2,r2,r4
 a000148:	10800104 	addi	r2,r2,4
 a00014c:	10800017 	ldw	r2,0(r2)
 a000150:	1009883a 	mov	r4,r2
 a000154:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 a000158:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 a00015c:	0005313a 	rdctl	r2,ipending
 a000160:	e0bfff15 	stw	r2,-4(fp)

  return active;
 a000164:	e0bfff17 	ldw	r2,-4(fp)
 a000168:	00000706 	br	a000188 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 a00016c:	e0bffc17 	ldw	r2,-16(fp)
 a000170:	1085883a 	add	r2,r2,r2
 a000174:	e0bffc15 	stw	r2,-16(fp)
      i++;
 a000178:	e0bffd17 	ldw	r2,-12(fp)
 a00017c:	10800044 	addi	r2,r2,1
 a000180:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 a000184:	003fe106 	br	a00010c <__alt_mem_flash+0xfdfff10c>

    active = alt_irq_pending ();
 a000188:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 a00018c:	e0bffb17 	ldw	r2,-20(fp)
 a000190:	103fdb1e 	bne	r2,zero,a000100 <__alt_mem_flash+0xfdfff100>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 a000194:	0001883a 	nop
}
 a000198:	0001883a 	nop
 a00019c:	e037883a 	mov	sp,fp
 a0001a0:	dfc00117 	ldw	ra,4(sp)
 a0001a4:	df000017 	ldw	fp,0(sp)
 a0001a8:	dec00204 	addi	sp,sp,8
 a0001ac:	f800283a 	ret

0a0001b0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 a0001b0:	defffb04 	addi	sp,sp,-20
 a0001b4:	dfc00415 	stw	ra,16(sp)
 a0001b8:	df000315 	stw	fp,12(sp)
 a0001bc:	df000304 	addi	fp,sp,12
 a0001c0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 a0001c4:	00bfffc4 	movi	r2,-1
 a0001c8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 a0001cc:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 a0001d0:	d0a72617 	ldw	r2,-25448(gp)
 a0001d4:	10000726 	beq	r2,zero,a0001f4 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 a0001d8:	d0a72617 	ldw	r2,-25448(gp)
 a0001dc:	e0fffd17 	ldw	r3,-12(fp)
 a0001e0:	e1bffe17 	ldw	r6,-8(fp)
 a0001e4:	e17fff17 	ldw	r5,-4(fp)
 a0001e8:	1809883a 	mov	r4,r3
 a0001ec:	103ee83a 	callr	r2
 a0001f0:	00000206 	br	a0001fc <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 a0001f4:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 a0001f8:	0005883a 	mov	r2,zero
}
 a0001fc:	e037883a 	mov	sp,fp
 a000200:	dfc00117 	ldw	ra,4(sp)
 a000204:	df000017 	ldw	fp,0(sp)
 a000208:	dec00204 	addi	sp,sp,8
 a00020c:	f800283a 	ret

Disassembly of section .text:

0a000210 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 a000210:	06c2c034 	movhi	sp,2816
    ori sp, sp, %lo(__alt_stack_pointer)
 a000214:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 a000218:	06828074 	movhi	gp,2561
    ori gp, gp, %lo(_gp)
 a00021c:	d6843014 	ori	gp,gp,4288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 a000220:	00828034 	movhi	r2,2560
    ori r2, r2, %lo(__bss_start)
 a000224:	10ab4c14 	ori	r2,r2,44336

    movhi r3, %hi(__bss_end)
 a000228:	00c28034 	movhi	r3,2560
    ori r3, r3, %lo(__bss_end)
 a00022c:	18eba114 	ori	r3,r3,44676

    beq r2, r3, 1f
 a000230:	10c00326 	beq	r2,r3,a000240 <_start+0x30>

0:
    stw zero, (r2)
 a000234:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 a000238:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 a00023c:	10fffd36 	bltu	r2,r3,a000234 <__alt_mem_flash+0xfdfff234>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 a000240:	a0033b40 	call	a0033b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 a000244:	a0035500 	call	a003550 <alt_main>

0a000248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 a000248:	003fff06 	br	a000248 <__alt_mem_flash+0xfdfff248>

0a00024c <main>:
 */

#include <stdio.h>

int main(void)
{
 a00024c:	defffe04 	addi	sp,sp,-8
 a000250:	dfc00115 	stw	ra,4(sp)
 a000254:	df000015 	stw	fp,0(sp)
 a000258:	d839883a 	mov	fp,sp
	while(1){
		fprintf(stderr,"hello world!\n");
 a00025c:	d0a00117 	ldw	r2,-32764(gp)
 a000260:	10800317 	ldw	r2,12(r2)
 a000264:	100f883a 	mov	r7,r2
 a000268:	01800344 	movi	r6,13
 a00026c:	01400044 	movi	r5,1
 a000270:	01028034 	movhi	r4,2560
 a000274:	211d1904 	addi	r4,r4,29796
 a000278:	a00035c0 	call	a00035c <fwrite>
	}
 a00027c:	003ff706 	br	a00025c <__alt_mem_flash+0xfdfff25c>

0a000280 <_fwrite_r>:
 a000280:	defff504 	addi	sp,sp,-44
 a000284:	dc400715 	stw	r17,28(sp)
 a000288:	d9400315 	stw	r5,12(sp)
 a00028c:	2023883a 	mov	r17,r4
 a000290:	300b883a 	mov	r5,r6
 a000294:	3809883a 	mov	r4,r7
 a000298:	dcc00915 	stw	r19,36(sp)
 a00029c:	dc800815 	stw	r18,32(sp)
 a0002a0:	dc000615 	stw	r16,24(sp)
 a0002a4:	dfc00a15 	stw	ra,40(sp)
 a0002a8:	3027883a 	mov	r19,r6
 a0002ac:	3821883a 	mov	r16,r7
 a0002b0:	a0030080 	call	a003008 <__mulsi3>
 a0002b4:	1025883a 	mov	r18,r2
 a0002b8:	d8800415 	stw	r2,16(sp)
 a0002bc:	d8800215 	stw	r2,8(sp)
 a0002c0:	d8800304 	addi	r2,sp,12
 a0002c4:	d8800015 	stw	r2,0(sp)
 a0002c8:	00800044 	movi	r2,1
 a0002cc:	d8800115 	stw	r2,4(sp)
 a0002d0:	d9400b17 	ldw	r5,44(sp)
 a0002d4:	88000226 	beq	r17,zero,a0002e0 <_fwrite_r+0x60>
 a0002d8:	88800e17 	ldw	r2,56(r17)
 a0002dc:	10001a26 	beq	r2,zero,a000348 <_fwrite_r+0xc8>
 a0002e0:	2880030b 	ldhu	r2,12(r5)
 a0002e4:	10c8000c 	andi	r3,r2,8192
 a0002e8:	1800061e 	bne	r3,zero,a000304 <_fwrite_r+0x84>
 a0002ec:	29001917 	ldw	r4,100(r5)
 a0002f0:	00f7ffc4 	movi	r3,-8193
 a0002f4:	10880014 	ori	r2,r2,8192
 a0002f8:	20c6703a 	and	r3,r4,r3
 a0002fc:	2880030d 	sth	r2,12(r5)
 a000300:	28c01915 	stw	r3,100(r5)
 a000304:	d80d883a 	mov	r6,sp
 a000308:	8809883a 	mov	r4,r17
 a00030c:	a0007400 	call	a000740 <__sfvwrite_r>
 a000310:	10000b26 	beq	r2,zero,a000340 <_fwrite_r+0xc0>
 a000314:	d9000217 	ldw	r4,8(sp)
 a000318:	980b883a 	mov	r5,r19
 a00031c:	9109c83a 	sub	r4,r18,r4
 a000320:	a002f4c0 	call	a002f4c <__udivsi3>
 a000324:	dfc00a17 	ldw	ra,40(sp)
 a000328:	dcc00917 	ldw	r19,36(sp)
 a00032c:	dc800817 	ldw	r18,32(sp)
 a000330:	dc400717 	ldw	r17,28(sp)
 a000334:	dc000617 	ldw	r16,24(sp)
 a000338:	dec00b04 	addi	sp,sp,44
 a00033c:	f800283a 	ret
 a000340:	8005883a 	mov	r2,r16
 a000344:	003ff706 	br	a000324 <__alt_mem_flash+0xfdfff324>
 a000348:	8809883a 	mov	r4,r17
 a00034c:	d9400515 	stw	r5,20(sp)
 a000350:	a0006f00 	call	a0006f0 <__sinit>
 a000354:	d9400517 	ldw	r5,20(sp)
 a000358:	003fe106 	br	a0002e0 <__alt_mem_flash+0xfdfff2e0>

0a00035c <fwrite>:
 a00035c:	defffe04 	addi	sp,sp,-8
 a000360:	00828074 	movhi	r2,2561
 a000364:	d9c00015 	stw	r7,0(sp)
 a000368:	10a43104 	addi	r2,r2,-28476
 a00036c:	300f883a 	mov	r7,r6
 a000370:	280d883a 	mov	r6,r5
 a000374:	200b883a 	mov	r5,r4
 a000378:	11000017 	ldw	r4,0(r2)
 a00037c:	dfc00115 	stw	ra,4(sp)
 a000380:	a0002800 	call	a000280 <_fwrite_r>
 a000384:	dfc00117 	ldw	ra,4(sp)
 a000388:	dec00204 	addi	sp,sp,8
 a00038c:	f800283a 	ret

0a000390 <__fp_unlock>:
 a000390:	0005883a 	mov	r2,zero
 a000394:	f800283a 	ret

0a000398 <_cleanup_r>:
 a000398:	01428034 	movhi	r5,2560
 a00039c:	2948d204 	addi	r5,r5,9032
 a0003a0:	a000ccc1 	jmpi	a000ccc <_fwalk_reent>

0a0003a4 <__sinit.part.1>:
 a0003a4:	defff704 	addi	sp,sp,-36
 a0003a8:	00c28034 	movhi	r3,2560
 a0003ac:	dfc00815 	stw	ra,32(sp)
 a0003b0:	ddc00715 	stw	r23,28(sp)
 a0003b4:	dd800615 	stw	r22,24(sp)
 a0003b8:	dd400515 	stw	r21,20(sp)
 a0003bc:	dd000415 	stw	r20,16(sp)
 a0003c0:	dcc00315 	stw	r19,12(sp)
 a0003c4:	dc800215 	stw	r18,8(sp)
 a0003c8:	dc400115 	stw	r17,4(sp)
 a0003cc:	dc000015 	stw	r16,0(sp)
 a0003d0:	18c0e604 	addi	r3,r3,920
 a0003d4:	24000117 	ldw	r16,4(r4)
 a0003d8:	20c00f15 	stw	r3,60(r4)
 a0003dc:	2080bb04 	addi	r2,r4,748
 a0003e0:	00c000c4 	movi	r3,3
 a0003e4:	20c0b915 	stw	r3,740(r4)
 a0003e8:	2080ba15 	stw	r2,744(r4)
 a0003ec:	2000b815 	stw	zero,736(r4)
 a0003f0:	05c00204 	movi	r23,8
 a0003f4:	00800104 	movi	r2,4
 a0003f8:	2025883a 	mov	r18,r4
 a0003fc:	b80d883a 	mov	r6,r23
 a000400:	81001704 	addi	r4,r16,92
 a000404:	000b883a 	mov	r5,zero
 a000408:	80000015 	stw	zero,0(r16)
 a00040c:	80000115 	stw	zero,4(r16)
 a000410:	80000215 	stw	zero,8(r16)
 a000414:	8080030d 	sth	r2,12(r16)
 a000418:	80001915 	stw	zero,100(r16)
 a00041c:	8000038d 	sth	zero,14(r16)
 a000420:	80000415 	stw	zero,16(r16)
 a000424:	80000515 	stw	zero,20(r16)
 a000428:	80000615 	stw	zero,24(r16)
 a00042c:	a0019240 	call	a001924 <memset>
 a000430:	05828034 	movhi	r22,2560
 a000434:	94400217 	ldw	r17,8(r18)
 a000438:	05428034 	movhi	r21,2560
 a00043c:	05028034 	movhi	r20,2560
 a000440:	04c28034 	movhi	r19,2560
 a000444:	b5880104 	addi	r22,r22,8196
 a000448:	ad481804 	addi	r21,r21,8288
 a00044c:	a5083704 	addi	r20,r20,8412
 a000450:	9cc84e04 	addi	r19,r19,8504
 a000454:	85800815 	stw	r22,32(r16)
 a000458:	85400915 	stw	r21,36(r16)
 a00045c:	85000a15 	stw	r20,40(r16)
 a000460:	84c00b15 	stw	r19,44(r16)
 a000464:	84000715 	stw	r16,28(r16)
 a000468:	00800284 	movi	r2,10
 a00046c:	8880030d 	sth	r2,12(r17)
 a000470:	00800044 	movi	r2,1
 a000474:	b80d883a 	mov	r6,r23
 a000478:	89001704 	addi	r4,r17,92
 a00047c:	000b883a 	mov	r5,zero
 a000480:	88000015 	stw	zero,0(r17)
 a000484:	88000115 	stw	zero,4(r17)
 a000488:	88000215 	stw	zero,8(r17)
 a00048c:	88001915 	stw	zero,100(r17)
 a000490:	8880038d 	sth	r2,14(r17)
 a000494:	88000415 	stw	zero,16(r17)
 a000498:	88000515 	stw	zero,20(r17)
 a00049c:	88000615 	stw	zero,24(r17)
 a0004a0:	a0019240 	call	a001924 <memset>
 a0004a4:	94000317 	ldw	r16,12(r18)
 a0004a8:	00800484 	movi	r2,18
 a0004ac:	8c400715 	stw	r17,28(r17)
 a0004b0:	8d800815 	stw	r22,32(r17)
 a0004b4:	8d400915 	stw	r21,36(r17)
 a0004b8:	8d000a15 	stw	r20,40(r17)
 a0004bc:	8cc00b15 	stw	r19,44(r17)
 a0004c0:	8080030d 	sth	r2,12(r16)
 a0004c4:	00800084 	movi	r2,2
 a0004c8:	80000015 	stw	zero,0(r16)
 a0004cc:	80000115 	stw	zero,4(r16)
 a0004d0:	80000215 	stw	zero,8(r16)
 a0004d4:	80001915 	stw	zero,100(r16)
 a0004d8:	8080038d 	sth	r2,14(r16)
 a0004dc:	80000415 	stw	zero,16(r16)
 a0004e0:	80000515 	stw	zero,20(r16)
 a0004e4:	80000615 	stw	zero,24(r16)
 a0004e8:	b80d883a 	mov	r6,r23
 a0004ec:	000b883a 	mov	r5,zero
 a0004f0:	81001704 	addi	r4,r16,92
 a0004f4:	a0019240 	call	a001924 <memset>
 a0004f8:	00800044 	movi	r2,1
 a0004fc:	84000715 	stw	r16,28(r16)
 a000500:	85800815 	stw	r22,32(r16)
 a000504:	85400915 	stw	r21,36(r16)
 a000508:	85000a15 	stw	r20,40(r16)
 a00050c:	84c00b15 	stw	r19,44(r16)
 a000510:	90800e15 	stw	r2,56(r18)
 a000514:	dfc00817 	ldw	ra,32(sp)
 a000518:	ddc00717 	ldw	r23,28(sp)
 a00051c:	dd800617 	ldw	r22,24(sp)
 a000520:	dd400517 	ldw	r21,20(sp)
 a000524:	dd000417 	ldw	r20,16(sp)
 a000528:	dcc00317 	ldw	r19,12(sp)
 a00052c:	dc800217 	ldw	r18,8(sp)
 a000530:	dc400117 	ldw	r17,4(sp)
 a000534:	dc000017 	ldw	r16,0(sp)
 a000538:	dec00904 	addi	sp,sp,36
 a00053c:	f800283a 	ret

0a000540 <__fp_lock>:
 a000540:	0005883a 	mov	r2,zero
 a000544:	f800283a 	ret

0a000548 <__sfmoreglue>:
 a000548:	defffc04 	addi	sp,sp,-16
 a00054c:	dc800215 	stw	r18,8(sp)
 a000550:	2825883a 	mov	r18,r5
 a000554:	dc000015 	stw	r16,0(sp)
 a000558:	01401a04 	movi	r5,104
 a00055c:	2021883a 	mov	r16,r4
 a000560:	913fffc4 	addi	r4,r18,-1
 a000564:	dfc00315 	stw	ra,12(sp)
 a000568:	dc400115 	stw	r17,4(sp)
 a00056c:	a0030080 	call	a003008 <__mulsi3>
 a000570:	8009883a 	mov	r4,r16
 a000574:	11401d04 	addi	r5,r2,116
 a000578:	1023883a 	mov	r17,r2
 a00057c:	a000d900 	call	a000d90 <_malloc_r>
 a000580:	1021883a 	mov	r16,r2
 a000584:	10000726 	beq	r2,zero,a0005a4 <__sfmoreglue+0x5c>
 a000588:	11000304 	addi	r4,r2,12
 a00058c:	10000015 	stw	zero,0(r2)
 a000590:	14800115 	stw	r18,4(r2)
 a000594:	11000215 	stw	r4,8(r2)
 a000598:	89801a04 	addi	r6,r17,104
 a00059c:	000b883a 	mov	r5,zero
 a0005a0:	a0019240 	call	a001924 <memset>
 a0005a4:	8005883a 	mov	r2,r16
 a0005a8:	dfc00317 	ldw	ra,12(sp)
 a0005ac:	dc800217 	ldw	r18,8(sp)
 a0005b0:	dc400117 	ldw	r17,4(sp)
 a0005b4:	dc000017 	ldw	r16,0(sp)
 a0005b8:	dec00404 	addi	sp,sp,16
 a0005bc:	f800283a 	ret

0a0005c0 <__sfp>:
 a0005c0:	defffb04 	addi	sp,sp,-20
 a0005c4:	dc000015 	stw	r16,0(sp)
 a0005c8:	04028074 	movhi	r16,2561
 a0005cc:	84243004 	addi	r16,r16,-28480
 a0005d0:	dcc00315 	stw	r19,12(sp)
 a0005d4:	2027883a 	mov	r19,r4
 a0005d8:	81000017 	ldw	r4,0(r16)
 a0005dc:	dfc00415 	stw	ra,16(sp)
 a0005e0:	dc800215 	stw	r18,8(sp)
 a0005e4:	20800e17 	ldw	r2,56(r4)
 a0005e8:	dc400115 	stw	r17,4(sp)
 a0005ec:	1000021e 	bne	r2,zero,a0005f8 <__sfp+0x38>
 a0005f0:	a0003a40 	call	a0003a4 <__sinit.part.1>
 a0005f4:	81000017 	ldw	r4,0(r16)
 a0005f8:	2480b804 	addi	r18,r4,736
 a0005fc:	047fffc4 	movi	r17,-1
 a000600:	91000117 	ldw	r4,4(r18)
 a000604:	94000217 	ldw	r16,8(r18)
 a000608:	213fffc4 	addi	r4,r4,-1
 a00060c:	20000a16 	blt	r4,zero,a000638 <__sfp+0x78>
 a000610:	8080030f 	ldh	r2,12(r16)
 a000614:	10000c26 	beq	r2,zero,a000648 <__sfp+0x88>
 a000618:	80c01d04 	addi	r3,r16,116
 a00061c:	00000206 	br	a000628 <__sfp+0x68>
 a000620:	18bfe60f 	ldh	r2,-104(r3)
 a000624:	10000826 	beq	r2,zero,a000648 <__sfp+0x88>
 a000628:	213fffc4 	addi	r4,r4,-1
 a00062c:	1c3ffd04 	addi	r16,r3,-12
 a000630:	18c01a04 	addi	r3,r3,104
 a000634:	247ffa1e 	bne	r4,r17,a000620 <__alt_mem_flash+0xfdfff620>
 a000638:	90800017 	ldw	r2,0(r18)
 a00063c:	10001d26 	beq	r2,zero,a0006b4 <__sfp+0xf4>
 a000640:	1025883a 	mov	r18,r2
 a000644:	003fee06 	br	a000600 <__alt_mem_flash+0xfdfff600>
 a000648:	00bfffc4 	movi	r2,-1
 a00064c:	8080038d 	sth	r2,14(r16)
 a000650:	00800044 	movi	r2,1
 a000654:	8080030d 	sth	r2,12(r16)
 a000658:	80001915 	stw	zero,100(r16)
 a00065c:	80000015 	stw	zero,0(r16)
 a000660:	80000215 	stw	zero,8(r16)
 a000664:	80000115 	stw	zero,4(r16)
 a000668:	80000415 	stw	zero,16(r16)
 a00066c:	80000515 	stw	zero,20(r16)
 a000670:	80000615 	stw	zero,24(r16)
 a000674:	01800204 	movi	r6,8
 a000678:	000b883a 	mov	r5,zero
 a00067c:	81001704 	addi	r4,r16,92
 a000680:	a0019240 	call	a001924 <memset>
 a000684:	8005883a 	mov	r2,r16
 a000688:	80000c15 	stw	zero,48(r16)
 a00068c:	80000d15 	stw	zero,52(r16)
 a000690:	80001115 	stw	zero,68(r16)
 a000694:	80001215 	stw	zero,72(r16)
 a000698:	dfc00417 	ldw	ra,16(sp)
 a00069c:	dcc00317 	ldw	r19,12(sp)
 a0006a0:	dc800217 	ldw	r18,8(sp)
 a0006a4:	dc400117 	ldw	r17,4(sp)
 a0006a8:	dc000017 	ldw	r16,0(sp)
 a0006ac:	dec00504 	addi	sp,sp,20
 a0006b0:	f800283a 	ret
 a0006b4:	01400104 	movi	r5,4
 a0006b8:	9809883a 	mov	r4,r19
 a0006bc:	a0005480 	call	a000548 <__sfmoreglue>
 a0006c0:	90800015 	stw	r2,0(r18)
 a0006c4:	103fde1e 	bne	r2,zero,a000640 <__alt_mem_flash+0xfdfff640>
 a0006c8:	00800304 	movi	r2,12
 a0006cc:	98800015 	stw	r2,0(r19)
 a0006d0:	0005883a 	mov	r2,zero
 a0006d4:	003ff006 	br	a000698 <__alt_mem_flash+0xfdfff698>

0a0006d8 <_cleanup>:
 a0006d8:	00828074 	movhi	r2,2561
 a0006dc:	10a43004 	addi	r2,r2,-28480
 a0006e0:	11000017 	ldw	r4,0(r2)
 a0006e4:	01428034 	movhi	r5,2560
 a0006e8:	2948d204 	addi	r5,r5,9032
 a0006ec:	a000ccc1 	jmpi	a000ccc <_fwalk_reent>

0a0006f0 <__sinit>:
 a0006f0:	20800e17 	ldw	r2,56(r4)
 a0006f4:	10000126 	beq	r2,zero,a0006fc <__sinit+0xc>
 a0006f8:	f800283a 	ret
 a0006fc:	a0003a41 	jmpi	a0003a4 <__sinit.part.1>

0a000700 <__sfp_lock_acquire>:
 a000700:	f800283a 	ret

0a000704 <__sfp_lock_release>:
 a000704:	f800283a 	ret

0a000708 <__sinit_lock_acquire>:
 a000708:	f800283a 	ret

0a00070c <__sinit_lock_release>:
 a00070c:	f800283a 	ret

0a000710 <__fp_lock_all>:
 a000710:	00828074 	movhi	r2,2561
 a000714:	10a43104 	addi	r2,r2,-28476
 a000718:	11000017 	ldw	r4,0(r2)
 a00071c:	01428034 	movhi	r5,2560
 a000720:	29415004 	addi	r5,r5,1344
 a000724:	a000c081 	jmpi	a000c08 <_fwalk>

0a000728 <__fp_unlock_all>:
 a000728:	00828074 	movhi	r2,2561
 a00072c:	10a43104 	addi	r2,r2,-28476
 a000730:	11000017 	ldw	r4,0(r2)
 a000734:	01428034 	movhi	r5,2560
 a000738:	2940e404 	addi	r5,r5,912
 a00073c:	a000c081 	jmpi	a000c08 <_fwalk>

0a000740 <__sfvwrite_r>:
 a000740:	30800217 	ldw	r2,8(r6)
 a000744:	10006726 	beq	r2,zero,a0008e4 <__sfvwrite_r+0x1a4>
 a000748:	28c0030b 	ldhu	r3,12(r5)
 a00074c:	defff404 	addi	sp,sp,-48
 a000750:	dd400715 	stw	r21,28(sp)
 a000754:	dd000615 	stw	r20,24(sp)
 a000758:	dc000215 	stw	r16,8(sp)
 a00075c:	dfc00b15 	stw	ra,44(sp)
 a000760:	df000a15 	stw	fp,40(sp)
 a000764:	ddc00915 	stw	r23,36(sp)
 a000768:	dd800815 	stw	r22,32(sp)
 a00076c:	dcc00515 	stw	r19,20(sp)
 a000770:	dc800415 	stw	r18,16(sp)
 a000774:	dc400315 	stw	r17,12(sp)
 a000778:	1880020c 	andi	r2,r3,8
 a00077c:	2821883a 	mov	r16,r5
 a000780:	202b883a 	mov	r21,r4
 a000784:	3029883a 	mov	r20,r6
 a000788:	10002726 	beq	r2,zero,a000828 <__sfvwrite_r+0xe8>
 a00078c:	28800417 	ldw	r2,16(r5)
 a000790:	10002526 	beq	r2,zero,a000828 <__sfvwrite_r+0xe8>
 a000794:	1880008c 	andi	r2,r3,2
 a000798:	a4400017 	ldw	r17,0(r20)
 a00079c:	10002a26 	beq	r2,zero,a000848 <__sfvwrite_r+0x108>
 a0007a0:	05a00034 	movhi	r22,32768
 a0007a4:	0027883a 	mov	r19,zero
 a0007a8:	0025883a 	mov	r18,zero
 a0007ac:	b5bf0004 	addi	r22,r22,-1024
 a0007b0:	980d883a 	mov	r6,r19
 a0007b4:	a809883a 	mov	r4,r21
 a0007b8:	90004626 	beq	r18,zero,a0008d4 <__sfvwrite_r+0x194>
 a0007bc:	900f883a 	mov	r7,r18
 a0007c0:	b480022e 	bgeu	r22,r18,a0007cc <__sfvwrite_r+0x8c>
 a0007c4:	01e00034 	movhi	r7,32768
 a0007c8:	39ff0004 	addi	r7,r7,-1024
 a0007cc:	80800917 	ldw	r2,36(r16)
 a0007d0:	81400717 	ldw	r5,28(r16)
 a0007d4:	103ee83a 	callr	r2
 a0007d8:	00805a0e 	bge	zero,r2,a000944 <__sfvwrite_r+0x204>
 a0007dc:	a0c00217 	ldw	r3,8(r20)
 a0007e0:	98a7883a 	add	r19,r19,r2
 a0007e4:	90a5c83a 	sub	r18,r18,r2
 a0007e8:	1885c83a 	sub	r2,r3,r2
 a0007ec:	a0800215 	stw	r2,8(r20)
 a0007f0:	103fef1e 	bne	r2,zero,a0007b0 <__alt_mem_flash+0xfdfff7b0>
 a0007f4:	0005883a 	mov	r2,zero
 a0007f8:	dfc00b17 	ldw	ra,44(sp)
 a0007fc:	df000a17 	ldw	fp,40(sp)
 a000800:	ddc00917 	ldw	r23,36(sp)
 a000804:	dd800817 	ldw	r22,32(sp)
 a000808:	dd400717 	ldw	r21,28(sp)
 a00080c:	dd000617 	ldw	r20,24(sp)
 a000810:	dcc00517 	ldw	r19,20(sp)
 a000814:	dc800417 	ldw	r18,16(sp)
 a000818:	dc400317 	ldw	r17,12(sp)
 a00081c:	dc000217 	ldw	r16,8(sp)
 a000820:	dec00c04 	addi	sp,sp,48
 a000824:	f800283a 	ret
 a000828:	800b883a 	mov	r5,r16
 a00082c:	a809883a 	mov	r4,r21
 a000830:	a0021a00 	call	a0021a0 <__swsetup_r>
 a000834:	1000ee1e 	bne	r2,zero,a000bf0 <__sfvwrite_r+0x4b0>
 a000838:	80c0030b 	ldhu	r3,12(r16)
 a00083c:	a4400017 	ldw	r17,0(r20)
 a000840:	1880008c 	andi	r2,r3,2
 a000844:	103fd61e 	bne	r2,zero,a0007a0 <__alt_mem_flash+0xfdfff7a0>
 a000848:	1880004c 	andi	r2,r3,1
 a00084c:	1000421e 	bne	r2,zero,a000958 <__sfvwrite_r+0x218>
 a000850:	0039883a 	mov	fp,zero
 a000854:	0025883a 	mov	r18,zero
 a000858:	90001a26 	beq	r18,zero,a0008c4 <__sfvwrite_r+0x184>
 a00085c:	1880800c 	andi	r2,r3,512
 a000860:	84c00217 	ldw	r19,8(r16)
 a000864:	10002126 	beq	r2,zero,a0008ec <__sfvwrite_r+0x1ac>
 a000868:	982f883a 	mov	r23,r19
 a00086c:	94c09636 	bltu	r18,r19,a000ac8 <__sfvwrite_r+0x388>
 a000870:	1881200c 	andi	r2,r3,1152
 a000874:	1000a11e 	bne	r2,zero,a000afc <__sfvwrite_r+0x3bc>
 a000878:	81000017 	ldw	r4,0(r16)
 a00087c:	b80d883a 	mov	r6,r23
 a000880:	e00b883a 	mov	r5,fp
 a000884:	a0017c80 	call	a0017c8 <memmove>
 a000888:	80c00217 	ldw	r3,8(r16)
 a00088c:	81000017 	ldw	r4,0(r16)
 a000890:	9005883a 	mov	r2,r18
 a000894:	1ce7c83a 	sub	r19,r3,r19
 a000898:	25cf883a 	add	r7,r4,r23
 a00089c:	84c00215 	stw	r19,8(r16)
 a0008a0:	81c00015 	stw	r7,0(r16)
 a0008a4:	a0c00217 	ldw	r3,8(r20)
 a0008a8:	e0b9883a 	add	fp,fp,r2
 a0008ac:	90a5c83a 	sub	r18,r18,r2
 a0008b0:	18a7c83a 	sub	r19,r3,r2
 a0008b4:	a4c00215 	stw	r19,8(r20)
 a0008b8:	983fce26 	beq	r19,zero,a0007f4 <__alt_mem_flash+0xfdfff7f4>
 a0008bc:	80c0030b 	ldhu	r3,12(r16)
 a0008c0:	903fe61e 	bne	r18,zero,a00085c <__alt_mem_flash+0xfdfff85c>
 a0008c4:	8f000017 	ldw	fp,0(r17)
 a0008c8:	8c800117 	ldw	r18,4(r17)
 a0008cc:	8c400204 	addi	r17,r17,8
 a0008d0:	003fe106 	br	a000858 <__alt_mem_flash+0xfdfff858>
 a0008d4:	8cc00017 	ldw	r19,0(r17)
 a0008d8:	8c800117 	ldw	r18,4(r17)
 a0008dc:	8c400204 	addi	r17,r17,8
 a0008e0:	003fb306 	br	a0007b0 <__alt_mem_flash+0xfdfff7b0>
 a0008e4:	0005883a 	mov	r2,zero
 a0008e8:	f800283a 	ret
 a0008ec:	81000017 	ldw	r4,0(r16)
 a0008f0:	80800417 	ldw	r2,16(r16)
 a0008f4:	11005a36 	bltu	r2,r4,a000a60 <__sfvwrite_r+0x320>
 a0008f8:	85c00517 	ldw	r23,20(r16)
 a0008fc:	95c05836 	bltu	r18,r23,a000a60 <__sfvwrite_r+0x320>
 a000900:	00a00034 	movhi	r2,32768
 a000904:	10bfffc4 	addi	r2,r2,-1
 a000908:	9009883a 	mov	r4,r18
 a00090c:	1480012e 	bgeu	r2,r18,a000914 <__sfvwrite_r+0x1d4>
 a000910:	1009883a 	mov	r4,r2
 a000914:	b80b883a 	mov	r5,r23
 a000918:	a002e540 	call	a002e54 <__divsi3>
 a00091c:	b80b883a 	mov	r5,r23
 a000920:	1009883a 	mov	r4,r2
 a000924:	a0030080 	call	a003008 <__mulsi3>
 a000928:	81400717 	ldw	r5,28(r16)
 a00092c:	80c00917 	ldw	r3,36(r16)
 a000930:	100f883a 	mov	r7,r2
 a000934:	e00d883a 	mov	r6,fp
 a000938:	a809883a 	mov	r4,r21
 a00093c:	183ee83a 	callr	r3
 a000940:	00bfd816 	blt	zero,r2,a0008a4 <__alt_mem_flash+0xfdfff8a4>
 a000944:	8080030b 	ldhu	r2,12(r16)
 a000948:	10801014 	ori	r2,r2,64
 a00094c:	8080030d 	sth	r2,12(r16)
 a000950:	00bfffc4 	movi	r2,-1
 a000954:	003fa806 	br	a0007f8 <__alt_mem_flash+0xfdfff7f8>
 a000958:	0027883a 	mov	r19,zero
 a00095c:	0011883a 	mov	r8,zero
 a000960:	0039883a 	mov	fp,zero
 a000964:	0025883a 	mov	r18,zero
 a000968:	90001f26 	beq	r18,zero,a0009e8 <__sfvwrite_r+0x2a8>
 a00096c:	40005a26 	beq	r8,zero,a000ad8 <__sfvwrite_r+0x398>
 a000970:	982d883a 	mov	r22,r19
 a000974:	94c0012e 	bgeu	r18,r19,a00097c <__sfvwrite_r+0x23c>
 a000978:	902d883a 	mov	r22,r18
 a00097c:	81000017 	ldw	r4,0(r16)
 a000980:	80800417 	ldw	r2,16(r16)
 a000984:	b02f883a 	mov	r23,r22
 a000988:	81c00517 	ldw	r7,20(r16)
 a00098c:	1100032e 	bgeu	r2,r4,a00099c <__sfvwrite_r+0x25c>
 a000990:	80c00217 	ldw	r3,8(r16)
 a000994:	38c7883a 	add	r3,r7,r3
 a000998:	1d801816 	blt	r3,r22,a0009fc <__sfvwrite_r+0x2bc>
 a00099c:	b1c03e16 	blt	r22,r7,a000a98 <__sfvwrite_r+0x358>
 a0009a0:	80800917 	ldw	r2,36(r16)
 a0009a4:	81400717 	ldw	r5,28(r16)
 a0009a8:	e00d883a 	mov	r6,fp
 a0009ac:	da000115 	stw	r8,4(sp)
 a0009b0:	a809883a 	mov	r4,r21
 a0009b4:	103ee83a 	callr	r2
 a0009b8:	102f883a 	mov	r23,r2
 a0009bc:	da000117 	ldw	r8,4(sp)
 a0009c0:	00bfe00e 	bge	zero,r2,a000944 <__alt_mem_flash+0xfdfff944>
 a0009c4:	9de7c83a 	sub	r19,r19,r23
 a0009c8:	98001f26 	beq	r19,zero,a000a48 <__sfvwrite_r+0x308>
 a0009cc:	a0800217 	ldw	r2,8(r20)
 a0009d0:	e5f9883a 	add	fp,fp,r23
 a0009d4:	95e5c83a 	sub	r18,r18,r23
 a0009d8:	15efc83a 	sub	r23,r2,r23
 a0009dc:	a5c00215 	stw	r23,8(r20)
 a0009e0:	b83f8426 	beq	r23,zero,a0007f4 <__alt_mem_flash+0xfdfff7f4>
 a0009e4:	903fe11e 	bne	r18,zero,a00096c <__alt_mem_flash+0xfdfff96c>
 a0009e8:	8f000017 	ldw	fp,0(r17)
 a0009ec:	8c800117 	ldw	r18,4(r17)
 a0009f0:	0011883a 	mov	r8,zero
 a0009f4:	8c400204 	addi	r17,r17,8
 a0009f8:	003fdb06 	br	a000968 <__alt_mem_flash+0xfdfff968>
 a0009fc:	180d883a 	mov	r6,r3
 a000a00:	e00b883a 	mov	r5,fp
 a000a04:	da000115 	stw	r8,4(sp)
 a000a08:	d8c00015 	stw	r3,0(sp)
 a000a0c:	a0017c80 	call	a0017c8 <memmove>
 a000a10:	d8c00017 	ldw	r3,0(sp)
 a000a14:	80800017 	ldw	r2,0(r16)
 a000a18:	800b883a 	mov	r5,r16
 a000a1c:	a809883a 	mov	r4,r21
 a000a20:	10c5883a 	add	r2,r2,r3
 a000a24:	80800015 	stw	r2,0(r16)
 a000a28:	d8c00015 	stw	r3,0(sp)
 a000a2c:	a0026680 	call	a002668 <_fflush_r>
 a000a30:	d8c00017 	ldw	r3,0(sp)
 a000a34:	da000117 	ldw	r8,4(sp)
 a000a38:	103fc21e 	bne	r2,zero,a000944 <__alt_mem_flash+0xfdfff944>
 a000a3c:	182f883a 	mov	r23,r3
 a000a40:	9de7c83a 	sub	r19,r19,r23
 a000a44:	983fe11e 	bne	r19,zero,a0009cc <__alt_mem_flash+0xfdfff9cc>
 a000a48:	800b883a 	mov	r5,r16
 a000a4c:	a809883a 	mov	r4,r21
 a000a50:	a0026680 	call	a002668 <_fflush_r>
 a000a54:	103fbb1e 	bne	r2,zero,a000944 <__alt_mem_flash+0xfdfff944>
 a000a58:	0011883a 	mov	r8,zero
 a000a5c:	003fdb06 	br	a0009cc <__alt_mem_flash+0xfdfff9cc>
 a000a60:	94c0012e 	bgeu	r18,r19,a000a68 <__sfvwrite_r+0x328>
 a000a64:	9027883a 	mov	r19,r18
 a000a68:	980d883a 	mov	r6,r19
 a000a6c:	e00b883a 	mov	r5,fp
 a000a70:	a0017c80 	call	a0017c8 <memmove>
 a000a74:	80800217 	ldw	r2,8(r16)
 a000a78:	80c00017 	ldw	r3,0(r16)
 a000a7c:	14c5c83a 	sub	r2,r2,r19
 a000a80:	1cc7883a 	add	r3,r3,r19
 a000a84:	80800215 	stw	r2,8(r16)
 a000a88:	80c00015 	stw	r3,0(r16)
 a000a8c:	10004326 	beq	r2,zero,a000b9c <__sfvwrite_r+0x45c>
 a000a90:	9805883a 	mov	r2,r19
 a000a94:	003f8306 	br	a0008a4 <__alt_mem_flash+0xfdfff8a4>
 a000a98:	b00d883a 	mov	r6,r22
 a000a9c:	e00b883a 	mov	r5,fp
 a000aa0:	da000115 	stw	r8,4(sp)
 a000aa4:	a0017c80 	call	a0017c8 <memmove>
 a000aa8:	80800217 	ldw	r2,8(r16)
 a000aac:	80c00017 	ldw	r3,0(r16)
 a000ab0:	da000117 	ldw	r8,4(sp)
 a000ab4:	1585c83a 	sub	r2,r2,r22
 a000ab8:	1dad883a 	add	r22,r3,r22
 a000abc:	80800215 	stw	r2,8(r16)
 a000ac0:	85800015 	stw	r22,0(r16)
 a000ac4:	003fbf06 	br	a0009c4 <__alt_mem_flash+0xfdfff9c4>
 a000ac8:	81000017 	ldw	r4,0(r16)
 a000acc:	9027883a 	mov	r19,r18
 a000ad0:	902f883a 	mov	r23,r18
 a000ad4:	003f6906 	br	a00087c <__alt_mem_flash+0xfdfff87c>
 a000ad8:	900d883a 	mov	r6,r18
 a000adc:	01400284 	movi	r5,10
 a000ae0:	e009883a 	mov	r4,fp
 a000ae4:	a00159c0 	call	a00159c <memchr>
 a000ae8:	10003e26 	beq	r2,zero,a000be4 <__sfvwrite_r+0x4a4>
 a000aec:	10800044 	addi	r2,r2,1
 a000af0:	1727c83a 	sub	r19,r2,fp
 a000af4:	02000044 	movi	r8,1
 a000af8:	003f9d06 	br	a000970 <__alt_mem_flash+0xfdfff970>
 a000afc:	80800517 	ldw	r2,20(r16)
 a000b00:	81400417 	ldw	r5,16(r16)
 a000b04:	81c00017 	ldw	r7,0(r16)
 a000b08:	10a7883a 	add	r19,r2,r2
 a000b0c:	9885883a 	add	r2,r19,r2
 a000b10:	1026d7fa 	srli	r19,r2,31
 a000b14:	396dc83a 	sub	r22,r7,r5
 a000b18:	b1000044 	addi	r4,r22,1
 a000b1c:	9885883a 	add	r2,r19,r2
 a000b20:	1027d07a 	srai	r19,r2,1
 a000b24:	2485883a 	add	r2,r4,r18
 a000b28:	980d883a 	mov	r6,r19
 a000b2c:	9880022e 	bgeu	r19,r2,a000b38 <__sfvwrite_r+0x3f8>
 a000b30:	1027883a 	mov	r19,r2
 a000b34:	100d883a 	mov	r6,r2
 a000b38:	18c1000c 	andi	r3,r3,1024
 a000b3c:	18001c26 	beq	r3,zero,a000bb0 <__sfvwrite_r+0x470>
 a000b40:	300b883a 	mov	r5,r6
 a000b44:	a809883a 	mov	r4,r21
 a000b48:	a000d900 	call	a000d90 <_malloc_r>
 a000b4c:	102f883a 	mov	r23,r2
 a000b50:	10002926 	beq	r2,zero,a000bf8 <__sfvwrite_r+0x4b8>
 a000b54:	81400417 	ldw	r5,16(r16)
 a000b58:	b00d883a 	mov	r6,r22
 a000b5c:	1009883a 	mov	r4,r2
 a000b60:	a0016800 	call	a001680 <memcpy>
 a000b64:	8080030b 	ldhu	r2,12(r16)
 a000b68:	00fedfc4 	movi	r3,-1153
 a000b6c:	10c4703a 	and	r2,r2,r3
 a000b70:	10802014 	ori	r2,r2,128
 a000b74:	8080030d 	sth	r2,12(r16)
 a000b78:	bd89883a 	add	r4,r23,r22
 a000b7c:	9d8fc83a 	sub	r7,r19,r22
 a000b80:	85c00415 	stw	r23,16(r16)
 a000b84:	84c00515 	stw	r19,20(r16)
 a000b88:	81000015 	stw	r4,0(r16)
 a000b8c:	9027883a 	mov	r19,r18
 a000b90:	81c00215 	stw	r7,8(r16)
 a000b94:	902f883a 	mov	r23,r18
 a000b98:	003f3806 	br	a00087c <__alt_mem_flash+0xfdfff87c>
 a000b9c:	800b883a 	mov	r5,r16
 a000ba0:	a809883a 	mov	r4,r21
 a000ba4:	a0026680 	call	a002668 <_fflush_r>
 a000ba8:	103fb926 	beq	r2,zero,a000a90 <__alt_mem_flash+0xfdfffa90>
 a000bac:	003f6506 	br	a000944 <__alt_mem_flash+0xfdfff944>
 a000bb0:	a809883a 	mov	r4,r21
 a000bb4:	a001a4c0 	call	a001a4c <_realloc_r>
 a000bb8:	102f883a 	mov	r23,r2
 a000bbc:	103fee1e 	bne	r2,zero,a000b78 <__alt_mem_flash+0xfdfffb78>
 a000bc0:	81400417 	ldw	r5,16(r16)
 a000bc4:	a809883a 	mov	r4,r21
 a000bc8:	a0028180 	call	a002818 <_free_r>
 a000bcc:	8080030b 	ldhu	r2,12(r16)
 a000bd0:	00ffdfc4 	movi	r3,-129
 a000bd4:	1884703a 	and	r2,r3,r2
 a000bd8:	00c00304 	movi	r3,12
 a000bdc:	a8c00015 	stw	r3,0(r21)
 a000be0:	003f5906 	br	a000948 <__alt_mem_flash+0xfdfff948>
 a000be4:	94c00044 	addi	r19,r18,1
 a000be8:	02000044 	movi	r8,1
 a000bec:	003f6006 	br	a000970 <__alt_mem_flash+0xfdfff970>
 a000bf0:	00bfffc4 	movi	r2,-1
 a000bf4:	003f0006 	br	a0007f8 <__alt_mem_flash+0xfdfff7f8>
 a000bf8:	00800304 	movi	r2,12
 a000bfc:	a8800015 	stw	r2,0(r21)
 a000c00:	8080030b 	ldhu	r2,12(r16)
 a000c04:	003f5006 	br	a000948 <__alt_mem_flash+0xfdfff948>

0a000c08 <_fwalk>:
 a000c08:	defff704 	addi	sp,sp,-36
 a000c0c:	dd000415 	stw	r20,16(sp)
 a000c10:	dfc00815 	stw	ra,32(sp)
 a000c14:	ddc00715 	stw	r23,28(sp)
 a000c18:	dd800615 	stw	r22,24(sp)
 a000c1c:	dd400515 	stw	r21,20(sp)
 a000c20:	dcc00315 	stw	r19,12(sp)
 a000c24:	dc800215 	stw	r18,8(sp)
 a000c28:	dc400115 	stw	r17,4(sp)
 a000c2c:	dc000015 	stw	r16,0(sp)
 a000c30:	2500b804 	addi	r20,r4,736
 a000c34:	a0002326 	beq	r20,zero,a000cc4 <_fwalk+0xbc>
 a000c38:	282b883a 	mov	r21,r5
 a000c3c:	002f883a 	mov	r23,zero
 a000c40:	05800044 	movi	r22,1
 a000c44:	04ffffc4 	movi	r19,-1
 a000c48:	a4400117 	ldw	r17,4(r20)
 a000c4c:	a4800217 	ldw	r18,8(r20)
 a000c50:	8c7fffc4 	addi	r17,r17,-1
 a000c54:	88000d16 	blt	r17,zero,a000c8c <_fwalk+0x84>
 a000c58:	94000304 	addi	r16,r18,12
 a000c5c:	94800384 	addi	r18,r18,14
 a000c60:	8080000b 	ldhu	r2,0(r16)
 a000c64:	8c7fffc4 	addi	r17,r17,-1
 a000c68:	813ffd04 	addi	r4,r16,-12
 a000c6c:	b080042e 	bgeu	r22,r2,a000c80 <_fwalk+0x78>
 a000c70:	9080000f 	ldh	r2,0(r18)
 a000c74:	14c00226 	beq	r2,r19,a000c80 <_fwalk+0x78>
 a000c78:	a83ee83a 	callr	r21
 a000c7c:	b8aeb03a 	or	r23,r23,r2
 a000c80:	84001a04 	addi	r16,r16,104
 a000c84:	94801a04 	addi	r18,r18,104
 a000c88:	8cfff51e 	bne	r17,r19,a000c60 <__alt_mem_flash+0xfdfffc60>
 a000c8c:	a5000017 	ldw	r20,0(r20)
 a000c90:	a03fed1e 	bne	r20,zero,a000c48 <__alt_mem_flash+0xfdfffc48>
 a000c94:	b805883a 	mov	r2,r23
 a000c98:	dfc00817 	ldw	ra,32(sp)
 a000c9c:	ddc00717 	ldw	r23,28(sp)
 a000ca0:	dd800617 	ldw	r22,24(sp)
 a000ca4:	dd400517 	ldw	r21,20(sp)
 a000ca8:	dd000417 	ldw	r20,16(sp)
 a000cac:	dcc00317 	ldw	r19,12(sp)
 a000cb0:	dc800217 	ldw	r18,8(sp)
 a000cb4:	dc400117 	ldw	r17,4(sp)
 a000cb8:	dc000017 	ldw	r16,0(sp)
 a000cbc:	dec00904 	addi	sp,sp,36
 a000cc0:	f800283a 	ret
 a000cc4:	002f883a 	mov	r23,zero
 a000cc8:	003ff206 	br	a000c94 <__alt_mem_flash+0xfdfffc94>

0a000ccc <_fwalk_reent>:
 a000ccc:	defff704 	addi	sp,sp,-36
 a000cd0:	dd000415 	stw	r20,16(sp)
 a000cd4:	dfc00815 	stw	ra,32(sp)
 a000cd8:	ddc00715 	stw	r23,28(sp)
 a000cdc:	dd800615 	stw	r22,24(sp)
 a000ce0:	dd400515 	stw	r21,20(sp)
 a000ce4:	dcc00315 	stw	r19,12(sp)
 a000ce8:	dc800215 	stw	r18,8(sp)
 a000cec:	dc400115 	stw	r17,4(sp)
 a000cf0:	dc000015 	stw	r16,0(sp)
 a000cf4:	2500b804 	addi	r20,r4,736
 a000cf8:	a0002326 	beq	r20,zero,a000d88 <_fwalk_reent+0xbc>
 a000cfc:	282b883a 	mov	r21,r5
 a000d00:	2027883a 	mov	r19,r4
 a000d04:	002f883a 	mov	r23,zero
 a000d08:	05800044 	movi	r22,1
 a000d0c:	04bfffc4 	movi	r18,-1
 a000d10:	a4400117 	ldw	r17,4(r20)
 a000d14:	a4000217 	ldw	r16,8(r20)
 a000d18:	8c7fffc4 	addi	r17,r17,-1
 a000d1c:	88000c16 	blt	r17,zero,a000d50 <_fwalk_reent+0x84>
 a000d20:	84000304 	addi	r16,r16,12
 a000d24:	8080000b 	ldhu	r2,0(r16)
 a000d28:	8c7fffc4 	addi	r17,r17,-1
 a000d2c:	817ffd04 	addi	r5,r16,-12
 a000d30:	b080052e 	bgeu	r22,r2,a000d48 <_fwalk_reent+0x7c>
 a000d34:	8080008f 	ldh	r2,2(r16)
 a000d38:	9809883a 	mov	r4,r19
 a000d3c:	14800226 	beq	r2,r18,a000d48 <_fwalk_reent+0x7c>
 a000d40:	a83ee83a 	callr	r21
 a000d44:	b8aeb03a 	or	r23,r23,r2
 a000d48:	84001a04 	addi	r16,r16,104
 a000d4c:	8cbff51e 	bne	r17,r18,a000d24 <__alt_mem_flash+0xfdfffd24>
 a000d50:	a5000017 	ldw	r20,0(r20)
 a000d54:	a03fee1e 	bne	r20,zero,a000d10 <__alt_mem_flash+0xfdfffd10>
 a000d58:	b805883a 	mov	r2,r23
 a000d5c:	dfc00817 	ldw	ra,32(sp)
 a000d60:	ddc00717 	ldw	r23,28(sp)
 a000d64:	dd800617 	ldw	r22,24(sp)
 a000d68:	dd400517 	ldw	r21,20(sp)
 a000d6c:	dd000417 	ldw	r20,16(sp)
 a000d70:	dcc00317 	ldw	r19,12(sp)
 a000d74:	dc800217 	ldw	r18,8(sp)
 a000d78:	dc400117 	ldw	r17,4(sp)
 a000d7c:	dc000017 	ldw	r16,0(sp)
 a000d80:	dec00904 	addi	sp,sp,36
 a000d84:	f800283a 	ret
 a000d88:	002f883a 	mov	r23,zero
 a000d8c:	003ff206 	br	a000d58 <__alt_mem_flash+0xfdfffd58>

0a000d90 <_malloc_r>:
 a000d90:	defff504 	addi	sp,sp,-44
 a000d94:	dc800315 	stw	r18,12(sp)
 a000d98:	dfc00a15 	stw	ra,40(sp)
 a000d9c:	df000915 	stw	fp,36(sp)
 a000da0:	ddc00815 	stw	r23,32(sp)
 a000da4:	dd800715 	stw	r22,28(sp)
 a000da8:	dd400615 	stw	r21,24(sp)
 a000dac:	dd000515 	stw	r20,20(sp)
 a000db0:	dcc00415 	stw	r19,16(sp)
 a000db4:	dc400215 	stw	r17,8(sp)
 a000db8:	dc000115 	stw	r16,4(sp)
 a000dbc:	288002c4 	addi	r2,r5,11
 a000dc0:	00c00584 	movi	r3,22
 a000dc4:	2025883a 	mov	r18,r4
 a000dc8:	18807f2e 	bgeu	r3,r2,a000fc8 <_malloc_r+0x238>
 a000dcc:	047ffe04 	movi	r17,-8
 a000dd0:	1462703a 	and	r17,r2,r17
 a000dd4:	8800a316 	blt	r17,zero,a001064 <_malloc_r+0x2d4>
 a000dd8:	8940a236 	bltu	r17,r5,a001064 <_malloc_r+0x2d4>
 a000ddc:	a0035cc0 	call	a0035cc <__malloc_lock>
 a000de0:	00807dc4 	movi	r2,503
 a000de4:	1441e92e 	bgeu	r2,r17,a00158c <_malloc_r+0x7fc>
 a000de8:	8804d27a 	srli	r2,r17,9
 a000dec:	1000a126 	beq	r2,zero,a001074 <_malloc_r+0x2e4>
 a000df0:	00c00104 	movi	r3,4
 a000df4:	18811e36 	bltu	r3,r2,a001270 <_malloc_r+0x4e0>
 a000df8:	8804d1ba 	srli	r2,r17,6
 a000dfc:	12000e44 	addi	r8,r2,57
 a000e00:	11c00e04 	addi	r7,r2,56
 a000e04:	4209883a 	add	r4,r8,r8
 a000e08:	04c28034 	movhi	r19,2560
 a000e0c:	2109883a 	add	r4,r4,r4
 a000e10:	9cde3d04 	addi	r19,r19,30964
 a000e14:	2109883a 	add	r4,r4,r4
 a000e18:	9909883a 	add	r4,r19,r4
 a000e1c:	24000117 	ldw	r16,4(r4)
 a000e20:	213ffe04 	addi	r4,r4,-8
 a000e24:	24009726 	beq	r4,r16,a001084 <_malloc_r+0x2f4>
 a000e28:	80800117 	ldw	r2,4(r16)
 a000e2c:	01bfff04 	movi	r6,-4
 a000e30:	014003c4 	movi	r5,15
 a000e34:	1184703a 	and	r2,r2,r6
 a000e38:	1447c83a 	sub	r3,r2,r17
 a000e3c:	28c00716 	blt	r5,r3,a000e5c <_malloc_r+0xcc>
 a000e40:	1800920e 	bge	r3,zero,a00108c <_malloc_r+0x2fc>
 a000e44:	84000317 	ldw	r16,12(r16)
 a000e48:	24008e26 	beq	r4,r16,a001084 <_malloc_r+0x2f4>
 a000e4c:	80800117 	ldw	r2,4(r16)
 a000e50:	1184703a 	and	r2,r2,r6
 a000e54:	1447c83a 	sub	r3,r2,r17
 a000e58:	28fff90e 	bge	r5,r3,a000e40 <__alt_mem_flash+0xfdfffe40>
 a000e5c:	3809883a 	mov	r4,r7
 a000e60:	01828034 	movhi	r6,2560
 a000e64:	9c000417 	ldw	r16,16(r19)
 a000e68:	319e3d04 	addi	r6,r6,30964
 a000e6c:	32000204 	addi	r8,r6,8
 a000e70:	82013426 	beq	r16,r8,a001344 <_malloc_r+0x5b4>
 a000e74:	80c00117 	ldw	r3,4(r16)
 a000e78:	00bfff04 	movi	r2,-4
 a000e7c:	188e703a 	and	r7,r3,r2
 a000e80:	3c45c83a 	sub	r2,r7,r17
 a000e84:	00c003c4 	movi	r3,15
 a000e88:	18811f16 	blt	r3,r2,a001308 <_malloc_r+0x578>
 a000e8c:	32000515 	stw	r8,20(r6)
 a000e90:	32000415 	stw	r8,16(r6)
 a000e94:	10007f0e 	bge	r2,zero,a001094 <_malloc_r+0x304>
 a000e98:	00807fc4 	movi	r2,511
 a000e9c:	11c0fd36 	bltu	r2,r7,a001294 <_malloc_r+0x504>
 a000ea0:	3806d0fa 	srli	r3,r7,3
 a000ea4:	01c00044 	movi	r7,1
 a000ea8:	30800117 	ldw	r2,4(r6)
 a000eac:	19400044 	addi	r5,r3,1
 a000eb0:	294b883a 	add	r5,r5,r5
 a000eb4:	1807d0ba 	srai	r3,r3,2
 a000eb8:	294b883a 	add	r5,r5,r5
 a000ebc:	294b883a 	add	r5,r5,r5
 a000ec0:	298b883a 	add	r5,r5,r6
 a000ec4:	38c6983a 	sll	r3,r7,r3
 a000ec8:	29c00017 	ldw	r7,0(r5)
 a000ecc:	2a7ffe04 	addi	r9,r5,-8
 a000ed0:	1886b03a 	or	r3,r3,r2
 a000ed4:	82400315 	stw	r9,12(r16)
 a000ed8:	81c00215 	stw	r7,8(r16)
 a000edc:	30c00115 	stw	r3,4(r6)
 a000ee0:	2c000015 	stw	r16,0(r5)
 a000ee4:	3c000315 	stw	r16,12(r7)
 a000ee8:	2005d0ba 	srai	r2,r4,2
 a000eec:	01400044 	movi	r5,1
 a000ef0:	288a983a 	sll	r5,r5,r2
 a000ef4:	19406f36 	bltu	r3,r5,a0010b4 <_malloc_r+0x324>
 a000ef8:	28c4703a 	and	r2,r5,r3
 a000efc:	10000a1e 	bne	r2,zero,a000f28 <_malloc_r+0x198>
 a000f00:	00bfff04 	movi	r2,-4
 a000f04:	294b883a 	add	r5,r5,r5
 a000f08:	2088703a 	and	r4,r4,r2
 a000f0c:	28c4703a 	and	r2,r5,r3
 a000f10:	21000104 	addi	r4,r4,4
 a000f14:	1000041e 	bne	r2,zero,a000f28 <_malloc_r+0x198>
 a000f18:	294b883a 	add	r5,r5,r5
 a000f1c:	28c4703a 	and	r2,r5,r3
 a000f20:	21000104 	addi	r4,r4,4
 a000f24:	103ffc26 	beq	r2,zero,a000f18 <__alt_mem_flash+0xfdffff18>
 a000f28:	02bfff04 	movi	r10,-4
 a000f2c:	024003c4 	movi	r9,15
 a000f30:	21800044 	addi	r6,r4,1
 a000f34:	318d883a 	add	r6,r6,r6
 a000f38:	318d883a 	add	r6,r6,r6
 a000f3c:	318d883a 	add	r6,r6,r6
 a000f40:	998d883a 	add	r6,r19,r6
 a000f44:	333ffe04 	addi	r12,r6,-8
 a000f48:	2017883a 	mov	r11,r4
 a000f4c:	31800104 	addi	r6,r6,4
 a000f50:	34000017 	ldw	r16,0(r6)
 a000f54:	31fffd04 	addi	r7,r6,-12
 a000f58:	81c0041e 	bne	r16,r7,a000f6c <_malloc_r+0x1dc>
 a000f5c:	0000fb06 	br	a00134c <_malloc_r+0x5bc>
 a000f60:	1801030e 	bge	r3,zero,a001370 <_malloc_r+0x5e0>
 a000f64:	84000317 	ldw	r16,12(r16)
 a000f68:	81c0f826 	beq	r16,r7,a00134c <_malloc_r+0x5bc>
 a000f6c:	80800117 	ldw	r2,4(r16)
 a000f70:	1284703a 	and	r2,r2,r10
 a000f74:	1447c83a 	sub	r3,r2,r17
 a000f78:	48fff90e 	bge	r9,r3,a000f60 <__alt_mem_flash+0xfdffff60>
 a000f7c:	80800317 	ldw	r2,12(r16)
 a000f80:	81000217 	ldw	r4,8(r16)
 a000f84:	89400054 	ori	r5,r17,1
 a000f88:	81400115 	stw	r5,4(r16)
 a000f8c:	20800315 	stw	r2,12(r4)
 a000f90:	11000215 	stw	r4,8(r2)
 a000f94:	8463883a 	add	r17,r16,r17
 a000f98:	9c400515 	stw	r17,20(r19)
 a000f9c:	9c400415 	stw	r17,16(r19)
 a000fa0:	18800054 	ori	r2,r3,1
 a000fa4:	88800115 	stw	r2,4(r17)
 a000fa8:	8a000315 	stw	r8,12(r17)
 a000fac:	8a000215 	stw	r8,8(r17)
 a000fb0:	88e3883a 	add	r17,r17,r3
 a000fb4:	88c00015 	stw	r3,0(r17)
 a000fb8:	9009883a 	mov	r4,r18
 a000fbc:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a000fc0:	80800204 	addi	r2,r16,8
 a000fc4:	00001b06 	br	a001034 <_malloc_r+0x2a4>
 a000fc8:	04400404 	movi	r17,16
 a000fcc:	89402536 	bltu	r17,r5,a001064 <_malloc_r+0x2d4>
 a000fd0:	a0035cc0 	call	a0035cc <__malloc_lock>
 a000fd4:	00800184 	movi	r2,6
 a000fd8:	01000084 	movi	r4,2
 a000fdc:	04c28034 	movhi	r19,2560
 a000fe0:	1085883a 	add	r2,r2,r2
 a000fe4:	9cde3d04 	addi	r19,r19,30964
 a000fe8:	1085883a 	add	r2,r2,r2
 a000fec:	9885883a 	add	r2,r19,r2
 a000ff0:	14000117 	ldw	r16,4(r2)
 a000ff4:	10fffe04 	addi	r3,r2,-8
 a000ff8:	80c0d926 	beq	r16,r3,a001360 <_malloc_r+0x5d0>
 a000ffc:	80c00117 	ldw	r3,4(r16)
 a001000:	81000317 	ldw	r4,12(r16)
 a001004:	00bfff04 	movi	r2,-4
 a001008:	1884703a 	and	r2,r3,r2
 a00100c:	81400217 	ldw	r5,8(r16)
 a001010:	8085883a 	add	r2,r16,r2
 a001014:	10c00117 	ldw	r3,4(r2)
 a001018:	29000315 	stw	r4,12(r5)
 a00101c:	21400215 	stw	r5,8(r4)
 a001020:	18c00054 	ori	r3,r3,1
 a001024:	10c00115 	stw	r3,4(r2)
 a001028:	9009883a 	mov	r4,r18
 a00102c:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001030:	80800204 	addi	r2,r16,8
 a001034:	dfc00a17 	ldw	ra,40(sp)
 a001038:	df000917 	ldw	fp,36(sp)
 a00103c:	ddc00817 	ldw	r23,32(sp)
 a001040:	dd800717 	ldw	r22,28(sp)
 a001044:	dd400617 	ldw	r21,24(sp)
 a001048:	dd000517 	ldw	r20,20(sp)
 a00104c:	dcc00417 	ldw	r19,16(sp)
 a001050:	dc800317 	ldw	r18,12(sp)
 a001054:	dc400217 	ldw	r17,8(sp)
 a001058:	dc000117 	ldw	r16,4(sp)
 a00105c:	dec00b04 	addi	sp,sp,44
 a001060:	f800283a 	ret
 a001064:	00800304 	movi	r2,12
 a001068:	90800015 	stw	r2,0(r18)
 a00106c:	0005883a 	mov	r2,zero
 a001070:	003ff006 	br	a001034 <__alt_mem_flash+0xfe000034>
 a001074:	01002004 	movi	r4,128
 a001078:	02001004 	movi	r8,64
 a00107c:	01c00fc4 	movi	r7,63
 a001080:	003f6106 	br	a000e08 <__alt_mem_flash+0xfdfffe08>
 a001084:	4009883a 	mov	r4,r8
 a001088:	003f7506 	br	a000e60 <__alt_mem_flash+0xfdfffe60>
 a00108c:	81000317 	ldw	r4,12(r16)
 a001090:	003fde06 	br	a00100c <__alt_mem_flash+0xfe00000c>
 a001094:	81c5883a 	add	r2,r16,r7
 a001098:	11400117 	ldw	r5,4(r2)
 a00109c:	9009883a 	mov	r4,r18
 a0010a0:	29400054 	ori	r5,r5,1
 a0010a4:	11400115 	stw	r5,4(r2)
 a0010a8:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a0010ac:	80800204 	addi	r2,r16,8
 a0010b0:	003fe006 	br	a001034 <__alt_mem_flash+0xfe000034>
 a0010b4:	9c000217 	ldw	r16,8(r19)
 a0010b8:	00bfff04 	movi	r2,-4
 a0010bc:	85800117 	ldw	r22,4(r16)
 a0010c0:	b0ac703a 	and	r22,r22,r2
 a0010c4:	b4400336 	bltu	r22,r17,a0010d4 <_malloc_r+0x344>
 a0010c8:	b445c83a 	sub	r2,r22,r17
 a0010cc:	00c003c4 	movi	r3,15
 a0010d0:	18805d16 	blt	r3,r2,a001248 <_malloc_r+0x4b8>
 a0010d4:	05c28074 	movhi	r23,2561
 a0010d8:	00828074 	movhi	r2,2561
 a0010dc:	10ab4e04 	addi	r2,r2,-21192
 a0010e0:	bde43204 	addi	r23,r23,-28472
 a0010e4:	15400017 	ldw	r21,0(r2)
 a0010e8:	b8c00017 	ldw	r3,0(r23)
 a0010ec:	00bfffc4 	movi	r2,-1
 a0010f0:	858d883a 	add	r6,r16,r22
 a0010f4:	8d6b883a 	add	r21,r17,r21
 a0010f8:	1880ea26 	beq	r3,r2,a0014a4 <_malloc_r+0x714>
 a0010fc:	ad4403c4 	addi	r21,r21,4111
 a001100:	00bc0004 	movi	r2,-4096
 a001104:	a8aa703a 	and	r21,r21,r2
 a001108:	a80b883a 	mov	r5,r21
 a00110c:	9009883a 	mov	r4,r18
 a001110:	d9800015 	stw	r6,0(sp)
 a001114:	a001fb00 	call	a001fb0 <_sbrk_r>
 a001118:	1029883a 	mov	r20,r2
 a00111c:	00bfffc4 	movi	r2,-1
 a001120:	d9800017 	ldw	r6,0(sp)
 a001124:	a080e826 	beq	r20,r2,a0014c8 <_malloc_r+0x738>
 a001128:	a180a636 	bltu	r20,r6,a0013c4 <_malloc_r+0x634>
 a00112c:	07028074 	movhi	fp,2561
 a001130:	e72b5704 	addi	fp,fp,-21156
 a001134:	e0800017 	ldw	r2,0(fp)
 a001138:	a887883a 	add	r3,r21,r2
 a00113c:	e0c00015 	stw	r3,0(fp)
 a001140:	3500e626 	beq	r6,r20,a0014dc <_malloc_r+0x74c>
 a001144:	b9000017 	ldw	r4,0(r23)
 a001148:	00bfffc4 	movi	r2,-1
 a00114c:	2080ee26 	beq	r4,r2,a001508 <_malloc_r+0x778>
 a001150:	a185c83a 	sub	r2,r20,r6
 a001154:	10c5883a 	add	r2,r2,r3
 a001158:	e0800015 	stw	r2,0(fp)
 a00115c:	a0c001cc 	andi	r3,r20,7
 a001160:	1800bc26 	beq	r3,zero,a001454 <_malloc_r+0x6c4>
 a001164:	a0e9c83a 	sub	r20,r20,r3
 a001168:	00840204 	movi	r2,4104
 a00116c:	a5000204 	addi	r20,r20,8
 a001170:	10c7c83a 	sub	r3,r2,r3
 a001174:	a545883a 	add	r2,r20,r21
 a001178:	1083ffcc 	andi	r2,r2,4095
 a00117c:	18abc83a 	sub	r21,r3,r2
 a001180:	a80b883a 	mov	r5,r21
 a001184:	9009883a 	mov	r4,r18
 a001188:	a001fb00 	call	a001fb0 <_sbrk_r>
 a00118c:	00ffffc4 	movi	r3,-1
 a001190:	10c0e126 	beq	r2,r3,a001518 <_malloc_r+0x788>
 a001194:	1505c83a 	sub	r2,r2,r20
 a001198:	1545883a 	add	r2,r2,r21
 a00119c:	10800054 	ori	r2,r2,1
 a0011a0:	e0c00017 	ldw	r3,0(fp)
 a0011a4:	9d000215 	stw	r20,8(r19)
 a0011a8:	a0800115 	stw	r2,4(r20)
 a0011ac:	a8c7883a 	add	r3,r21,r3
 a0011b0:	e0c00015 	stw	r3,0(fp)
 a0011b4:	84c00e26 	beq	r16,r19,a0011f0 <_malloc_r+0x460>
 a0011b8:	018003c4 	movi	r6,15
 a0011bc:	3580a72e 	bgeu	r6,r22,a00145c <_malloc_r+0x6cc>
 a0011c0:	81400117 	ldw	r5,4(r16)
 a0011c4:	013ffe04 	movi	r4,-8
 a0011c8:	b0bffd04 	addi	r2,r22,-12
 a0011cc:	1104703a 	and	r2,r2,r4
 a0011d0:	2900004c 	andi	r4,r5,1
 a0011d4:	2088b03a 	or	r4,r4,r2
 a0011d8:	81000115 	stw	r4,4(r16)
 a0011dc:	01400144 	movi	r5,5
 a0011e0:	8089883a 	add	r4,r16,r2
 a0011e4:	21400115 	stw	r5,4(r4)
 a0011e8:	21400215 	stw	r5,8(r4)
 a0011ec:	3080cd36 	bltu	r6,r2,a001524 <_malloc_r+0x794>
 a0011f0:	00828074 	movhi	r2,2561
 a0011f4:	10ab4d04 	addi	r2,r2,-21196
 a0011f8:	11000017 	ldw	r4,0(r2)
 a0011fc:	20c0012e 	bgeu	r4,r3,a001204 <_malloc_r+0x474>
 a001200:	10c00015 	stw	r3,0(r2)
 a001204:	00828074 	movhi	r2,2561
 a001208:	10ab4c04 	addi	r2,r2,-21200
 a00120c:	11000017 	ldw	r4,0(r2)
 a001210:	9c000217 	ldw	r16,8(r19)
 a001214:	20c0012e 	bgeu	r4,r3,a00121c <_malloc_r+0x48c>
 a001218:	10c00015 	stw	r3,0(r2)
 a00121c:	80c00117 	ldw	r3,4(r16)
 a001220:	00bfff04 	movi	r2,-4
 a001224:	1886703a 	and	r3,r3,r2
 a001228:	1c45c83a 	sub	r2,r3,r17
 a00122c:	1c400236 	bltu	r3,r17,a001238 <_malloc_r+0x4a8>
 a001230:	00c003c4 	movi	r3,15
 a001234:	18800416 	blt	r3,r2,a001248 <_malloc_r+0x4b8>
 a001238:	9009883a 	mov	r4,r18
 a00123c:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001240:	0005883a 	mov	r2,zero
 a001244:	003f7b06 	br	a001034 <__alt_mem_flash+0xfe000034>
 a001248:	88c00054 	ori	r3,r17,1
 a00124c:	80c00115 	stw	r3,4(r16)
 a001250:	8463883a 	add	r17,r16,r17
 a001254:	10800054 	ori	r2,r2,1
 a001258:	9c400215 	stw	r17,8(r19)
 a00125c:	88800115 	stw	r2,4(r17)
 a001260:	9009883a 	mov	r4,r18
 a001264:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001268:	80800204 	addi	r2,r16,8
 a00126c:	003f7106 	br	a001034 <__alt_mem_flash+0xfe000034>
 a001270:	00c00504 	movi	r3,20
 a001274:	18804a2e 	bgeu	r3,r2,a0013a0 <_malloc_r+0x610>
 a001278:	00c01504 	movi	r3,84
 a00127c:	18806e36 	bltu	r3,r2,a001438 <_malloc_r+0x6a8>
 a001280:	8804d33a 	srli	r2,r17,12
 a001284:	12001bc4 	addi	r8,r2,111
 a001288:	11c01b84 	addi	r7,r2,110
 a00128c:	4209883a 	add	r4,r8,r8
 a001290:	003edd06 	br	a000e08 <__alt_mem_flash+0xfdfffe08>
 a001294:	3804d27a 	srli	r2,r7,9
 a001298:	00c00104 	movi	r3,4
 a00129c:	1880442e 	bgeu	r3,r2,a0013b0 <_malloc_r+0x620>
 a0012a0:	00c00504 	movi	r3,20
 a0012a4:	18808136 	bltu	r3,r2,a0014ac <_malloc_r+0x71c>
 a0012a8:	11401704 	addi	r5,r2,92
 a0012ac:	10c016c4 	addi	r3,r2,91
 a0012b0:	294b883a 	add	r5,r5,r5
 a0012b4:	294b883a 	add	r5,r5,r5
 a0012b8:	294b883a 	add	r5,r5,r5
 a0012bc:	994b883a 	add	r5,r19,r5
 a0012c0:	28800017 	ldw	r2,0(r5)
 a0012c4:	01828034 	movhi	r6,2560
 a0012c8:	297ffe04 	addi	r5,r5,-8
 a0012cc:	319e3d04 	addi	r6,r6,30964
 a0012d0:	28806526 	beq	r5,r2,a001468 <_malloc_r+0x6d8>
 a0012d4:	01bfff04 	movi	r6,-4
 a0012d8:	10c00117 	ldw	r3,4(r2)
 a0012dc:	1986703a 	and	r3,r3,r6
 a0012e0:	38c0022e 	bgeu	r7,r3,a0012ec <_malloc_r+0x55c>
 a0012e4:	10800217 	ldw	r2,8(r2)
 a0012e8:	28bffb1e 	bne	r5,r2,a0012d8 <__alt_mem_flash+0xfe0002d8>
 a0012ec:	11400317 	ldw	r5,12(r2)
 a0012f0:	98c00117 	ldw	r3,4(r19)
 a0012f4:	81400315 	stw	r5,12(r16)
 a0012f8:	80800215 	stw	r2,8(r16)
 a0012fc:	2c000215 	stw	r16,8(r5)
 a001300:	14000315 	stw	r16,12(r2)
 a001304:	003ef806 	br	a000ee8 <__alt_mem_flash+0xfdfffee8>
 a001308:	88c00054 	ori	r3,r17,1
 a00130c:	80c00115 	stw	r3,4(r16)
 a001310:	8463883a 	add	r17,r16,r17
 a001314:	34400515 	stw	r17,20(r6)
 a001318:	34400415 	stw	r17,16(r6)
 a00131c:	10c00054 	ori	r3,r2,1
 a001320:	8a000315 	stw	r8,12(r17)
 a001324:	8a000215 	stw	r8,8(r17)
 a001328:	88c00115 	stw	r3,4(r17)
 a00132c:	88a3883a 	add	r17,r17,r2
 a001330:	88800015 	stw	r2,0(r17)
 a001334:	9009883a 	mov	r4,r18
 a001338:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a00133c:	80800204 	addi	r2,r16,8
 a001340:	003f3c06 	br	a001034 <__alt_mem_flash+0xfe000034>
 a001344:	30c00117 	ldw	r3,4(r6)
 a001348:	003ee706 	br	a000ee8 <__alt_mem_flash+0xfdfffee8>
 a00134c:	5ac00044 	addi	r11,r11,1
 a001350:	588000cc 	andi	r2,r11,3
 a001354:	31800204 	addi	r6,r6,8
 a001358:	103efd1e 	bne	r2,zero,a000f50 <__alt_mem_flash+0xfdffff50>
 a00135c:	00002406 	br	a0013f0 <_malloc_r+0x660>
 a001360:	14000317 	ldw	r16,12(r2)
 a001364:	143f251e 	bne	r2,r16,a000ffc <__alt_mem_flash+0xfdfffffc>
 a001368:	21000084 	addi	r4,r4,2
 a00136c:	003ebc06 	br	a000e60 <__alt_mem_flash+0xfdfffe60>
 a001370:	8085883a 	add	r2,r16,r2
 a001374:	10c00117 	ldw	r3,4(r2)
 a001378:	81000317 	ldw	r4,12(r16)
 a00137c:	81400217 	ldw	r5,8(r16)
 a001380:	18c00054 	ori	r3,r3,1
 a001384:	10c00115 	stw	r3,4(r2)
 a001388:	29000315 	stw	r4,12(r5)
 a00138c:	21400215 	stw	r5,8(r4)
 a001390:	9009883a 	mov	r4,r18
 a001394:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001398:	80800204 	addi	r2,r16,8
 a00139c:	003f2506 	br	a001034 <__alt_mem_flash+0xfe000034>
 a0013a0:	12001704 	addi	r8,r2,92
 a0013a4:	11c016c4 	addi	r7,r2,91
 a0013a8:	4209883a 	add	r4,r8,r8
 a0013ac:	003e9606 	br	a000e08 <__alt_mem_flash+0xfdfffe08>
 a0013b0:	3804d1ba 	srli	r2,r7,6
 a0013b4:	11400e44 	addi	r5,r2,57
 a0013b8:	10c00e04 	addi	r3,r2,56
 a0013bc:	294b883a 	add	r5,r5,r5
 a0013c0:	003fbc06 	br	a0012b4 <__alt_mem_flash+0xfe0002b4>
 a0013c4:	84ff5926 	beq	r16,r19,a00112c <__alt_mem_flash+0xfe00012c>
 a0013c8:	00828034 	movhi	r2,2560
 a0013cc:	109e3d04 	addi	r2,r2,30964
 a0013d0:	14000217 	ldw	r16,8(r2)
 a0013d4:	00bfff04 	movi	r2,-4
 a0013d8:	80c00117 	ldw	r3,4(r16)
 a0013dc:	1886703a 	and	r3,r3,r2
 a0013e0:	003f9106 	br	a001228 <__alt_mem_flash+0xfe000228>
 a0013e4:	60800217 	ldw	r2,8(r12)
 a0013e8:	213fffc4 	addi	r4,r4,-1
 a0013ec:	1300651e 	bne	r2,r12,a001584 <_malloc_r+0x7f4>
 a0013f0:	208000cc 	andi	r2,r4,3
 a0013f4:	633ffe04 	addi	r12,r12,-8
 a0013f8:	103ffa1e 	bne	r2,zero,a0013e4 <__alt_mem_flash+0xfe0003e4>
 a0013fc:	98800117 	ldw	r2,4(r19)
 a001400:	0146303a 	nor	r3,zero,r5
 a001404:	1884703a 	and	r2,r3,r2
 a001408:	98800115 	stw	r2,4(r19)
 a00140c:	294b883a 	add	r5,r5,r5
 a001410:	117f2836 	bltu	r2,r5,a0010b4 <__alt_mem_flash+0xfe0000b4>
 a001414:	283f2726 	beq	r5,zero,a0010b4 <__alt_mem_flash+0xfe0000b4>
 a001418:	2886703a 	and	r3,r5,r2
 a00141c:	5809883a 	mov	r4,r11
 a001420:	183ec31e 	bne	r3,zero,a000f30 <__alt_mem_flash+0xfdffff30>
 a001424:	294b883a 	add	r5,r5,r5
 a001428:	2886703a 	and	r3,r5,r2
 a00142c:	21000104 	addi	r4,r4,4
 a001430:	183ffc26 	beq	r3,zero,a001424 <__alt_mem_flash+0xfe000424>
 a001434:	003ebe06 	br	a000f30 <__alt_mem_flash+0xfdffff30>
 a001438:	00c05504 	movi	r3,340
 a00143c:	18801236 	bltu	r3,r2,a001488 <_malloc_r+0x6f8>
 a001440:	8804d3fa 	srli	r2,r17,15
 a001444:	12001e04 	addi	r8,r2,120
 a001448:	11c01dc4 	addi	r7,r2,119
 a00144c:	4209883a 	add	r4,r8,r8
 a001450:	003e6d06 	br	a000e08 <__alt_mem_flash+0xfdfffe08>
 a001454:	00c40004 	movi	r3,4096
 a001458:	003f4606 	br	a001174 <__alt_mem_flash+0xfe000174>
 a00145c:	00800044 	movi	r2,1
 a001460:	a0800115 	stw	r2,4(r20)
 a001464:	003f7406 	br	a001238 <__alt_mem_flash+0xfe000238>
 a001468:	1805d0ba 	srai	r2,r3,2
 a00146c:	01c00044 	movi	r7,1
 a001470:	30c00117 	ldw	r3,4(r6)
 a001474:	388e983a 	sll	r7,r7,r2
 a001478:	2805883a 	mov	r2,r5
 a00147c:	38c6b03a 	or	r3,r7,r3
 a001480:	30c00115 	stw	r3,4(r6)
 a001484:	003f9b06 	br	a0012f4 <__alt_mem_flash+0xfe0002f4>
 a001488:	00c15504 	movi	r3,1364
 a00148c:	18801a36 	bltu	r3,r2,a0014f8 <_malloc_r+0x768>
 a001490:	8804d4ba 	srli	r2,r17,18
 a001494:	12001f44 	addi	r8,r2,125
 a001498:	11c01f04 	addi	r7,r2,124
 a00149c:	4209883a 	add	r4,r8,r8
 a0014a0:	003e5906 	br	a000e08 <__alt_mem_flash+0xfdfffe08>
 a0014a4:	ad400404 	addi	r21,r21,16
 a0014a8:	003f1706 	br	a001108 <__alt_mem_flash+0xfe000108>
 a0014ac:	00c01504 	movi	r3,84
 a0014b0:	18802336 	bltu	r3,r2,a001540 <_malloc_r+0x7b0>
 a0014b4:	3804d33a 	srli	r2,r7,12
 a0014b8:	11401bc4 	addi	r5,r2,111
 a0014bc:	10c01b84 	addi	r3,r2,110
 a0014c0:	294b883a 	add	r5,r5,r5
 a0014c4:	003f7b06 	br	a0012b4 <__alt_mem_flash+0xfe0002b4>
 a0014c8:	9c000217 	ldw	r16,8(r19)
 a0014cc:	00bfff04 	movi	r2,-4
 a0014d0:	80c00117 	ldw	r3,4(r16)
 a0014d4:	1886703a 	and	r3,r3,r2
 a0014d8:	003f5306 	br	a001228 <__alt_mem_flash+0xfe000228>
 a0014dc:	3083ffcc 	andi	r2,r6,4095
 a0014e0:	103f181e 	bne	r2,zero,a001144 <__alt_mem_flash+0xfe000144>
 a0014e4:	99000217 	ldw	r4,8(r19)
 a0014e8:	b545883a 	add	r2,r22,r21
 a0014ec:	10800054 	ori	r2,r2,1
 a0014f0:	20800115 	stw	r2,4(r4)
 a0014f4:	003f3e06 	br	a0011f0 <__alt_mem_flash+0xfe0001f0>
 a0014f8:	01003f84 	movi	r4,254
 a0014fc:	02001fc4 	movi	r8,127
 a001500:	01c01f84 	movi	r7,126
 a001504:	003e4006 	br	a000e08 <__alt_mem_flash+0xfdfffe08>
 a001508:	00828074 	movhi	r2,2561
 a00150c:	10a43204 	addi	r2,r2,-28472
 a001510:	15000015 	stw	r20,0(r2)
 a001514:	003f1106 	br	a00115c <__alt_mem_flash+0xfe00015c>
 a001518:	00800044 	movi	r2,1
 a00151c:	002b883a 	mov	r21,zero
 a001520:	003f1f06 	br	a0011a0 <__alt_mem_flash+0xfe0001a0>
 a001524:	81400204 	addi	r5,r16,8
 a001528:	9009883a 	mov	r4,r18
 a00152c:	a0028180 	call	a002818 <_free_r>
 a001530:	00828074 	movhi	r2,2561
 a001534:	10ab5704 	addi	r2,r2,-21156
 a001538:	10c00017 	ldw	r3,0(r2)
 a00153c:	003f2c06 	br	a0011f0 <__alt_mem_flash+0xfe0001f0>
 a001540:	00c05504 	movi	r3,340
 a001544:	18800536 	bltu	r3,r2,a00155c <_malloc_r+0x7cc>
 a001548:	3804d3fa 	srli	r2,r7,15
 a00154c:	11401e04 	addi	r5,r2,120
 a001550:	10c01dc4 	addi	r3,r2,119
 a001554:	294b883a 	add	r5,r5,r5
 a001558:	003f5606 	br	a0012b4 <__alt_mem_flash+0xfe0002b4>
 a00155c:	00c15504 	movi	r3,1364
 a001560:	18800536 	bltu	r3,r2,a001578 <_malloc_r+0x7e8>
 a001564:	3804d4ba 	srli	r2,r7,18
 a001568:	11401f44 	addi	r5,r2,125
 a00156c:	10c01f04 	addi	r3,r2,124
 a001570:	294b883a 	add	r5,r5,r5
 a001574:	003f4f06 	br	a0012b4 <__alt_mem_flash+0xfe0002b4>
 a001578:	01403f84 	movi	r5,254
 a00157c:	00c01f84 	movi	r3,126
 a001580:	003f4c06 	br	a0012b4 <__alt_mem_flash+0xfe0002b4>
 a001584:	98800117 	ldw	r2,4(r19)
 a001588:	003fa006 	br	a00140c <__alt_mem_flash+0xfe00040c>
 a00158c:	8808d0fa 	srli	r4,r17,3
 a001590:	20800044 	addi	r2,r4,1
 a001594:	1085883a 	add	r2,r2,r2
 a001598:	003e9006 	br	a000fdc <__alt_mem_flash+0xfdffffdc>

0a00159c <memchr>:
 a00159c:	208000cc 	andi	r2,r4,3
 a0015a0:	280f883a 	mov	r7,r5
 a0015a4:	10003426 	beq	r2,zero,a001678 <memchr+0xdc>
 a0015a8:	30bfffc4 	addi	r2,r6,-1
 a0015ac:	30001a26 	beq	r6,zero,a001618 <memchr+0x7c>
 a0015b0:	20c00003 	ldbu	r3,0(r4)
 a0015b4:	29803fcc 	andi	r6,r5,255
 a0015b8:	30c0051e 	bne	r6,r3,a0015d0 <memchr+0x34>
 a0015bc:	00001806 	br	a001620 <memchr+0x84>
 a0015c0:	10001526 	beq	r2,zero,a001618 <memchr+0x7c>
 a0015c4:	20c00003 	ldbu	r3,0(r4)
 a0015c8:	10bfffc4 	addi	r2,r2,-1
 a0015cc:	30c01426 	beq	r6,r3,a001620 <memchr+0x84>
 a0015d0:	21000044 	addi	r4,r4,1
 a0015d4:	20c000cc 	andi	r3,r4,3
 a0015d8:	183ff91e 	bne	r3,zero,a0015c0 <__alt_mem_flash+0xfe0005c0>
 a0015dc:	020000c4 	movi	r8,3
 a0015e0:	40801136 	bltu	r8,r2,a001628 <memchr+0x8c>
 a0015e4:	10000c26 	beq	r2,zero,a001618 <memchr+0x7c>
 a0015e8:	20c00003 	ldbu	r3,0(r4)
 a0015ec:	29403fcc 	andi	r5,r5,255
 a0015f0:	28c00b26 	beq	r5,r3,a001620 <memchr+0x84>
 a0015f4:	20c00044 	addi	r3,r4,1
 a0015f8:	39803fcc 	andi	r6,r7,255
 a0015fc:	2089883a 	add	r4,r4,r2
 a001600:	00000306 	br	a001610 <memchr+0x74>
 a001604:	18c00044 	addi	r3,r3,1
 a001608:	197fffc3 	ldbu	r5,-1(r3)
 a00160c:	31400526 	beq	r6,r5,a001624 <memchr+0x88>
 a001610:	1805883a 	mov	r2,r3
 a001614:	20fffb1e 	bne	r4,r3,a001604 <__alt_mem_flash+0xfe000604>
 a001618:	0005883a 	mov	r2,zero
 a00161c:	f800283a 	ret
 a001620:	2005883a 	mov	r2,r4
 a001624:	f800283a 	ret
 a001628:	28c03fcc 	andi	r3,r5,255
 a00162c:	1812923a 	slli	r9,r3,8
 a001630:	02ffbff4 	movhi	r11,65279
 a001634:	02a02074 	movhi	r10,32897
 a001638:	48d2b03a 	or	r9,r9,r3
 a00163c:	4806943a 	slli	r3,r9,16
 a001640:	5affbfc4 	addi	r11,r11,-257
 a001644:	52a02004 	addi	r10,r10,-32640
 a001648:	48d2b03a 	or	r9,r9,r3
 a00164c:	20c00017 	ldw	r3,0(r4)
 a001650:	48c6f03a 	xor	r3,r9,r3
 a001654:	1acd883a 	add	r6,r3,r11
 a001658:	00c6303a 	nor	r3,zero,r3
 a00165c:	30c6703a 	and	r3,r6,r3
 a001660:	1a86703a 	and	r3,r3,r10
 a001664:	183fe01e 	bne	r3,zero,a0015e8 <__alt_mem_flash+0xfe0005e8>
 a001668:	10bfff04 	addi	r2,r2,-4
 a00166c:	21000104 	addi	r4,r4,4
 a001670:	40bff636 	bltu	r8,r2,a00164c <__alt_mem_flash+0xfe00064c>
 a001674:	003fdb06 	br	a0015e4 <__alt_mem_flash+0xfe0005e4>
 a001678:	3005883a 	mov	r2,r6
 a00167c:	003fd706 	br	a0015dc <__alt_mem_flash+0xfe0005dc>

0a001680 <memcpy>:
 a001680:	defffd04 	addi	sp,sp,-12
 a001684:	dfc00215 	stw	ra,8(sp)
 a001688:	dc400115 	stw	r17,4(sp)
 a00168c:	dc000015 	stw	r16,0(sp)
 a001690:	00c003c4 	movi	r3,15
 a001694:	2005883a 	mov	r2,r4
 a001698:	1980452e 	bgeu	r3,r6,a0017b0 <memcpy+0x130>
 a00169c:	2906b03a 	or	r3,r5,r4
 a0016a0:	18c000cc 	andi	r3,r3,3
 a0016a4:	1800441e 	bne	r3,zero,a0017b8 <memcpy+0x138>
 a0016a8:	347ffc04 	addi	r17,r6,-16
 a0016ac:	8822d13a 	srli	r17,r17,4
 a0016b0:	28c00104 	addi	r3,r5,4
 a0016b4:	23400104 	addi	r13,r4,4
 a0016b8:	8820913a 	slli	r16,r17,4
 a0016bc:	2b000204 	addi	r12,r5,8
 a0016c0:	22c00204 	addi	r11,r4,8
 a0016c4:	84000504 	addi	r16,r16,20
 a0016c8:	2a800304 	addi	r10,r5,12
 a0016cc:	22400304 	addi	r9,r4,12
 a0016d0:	2c21883a 	add	r16,r5,r16
 a0016d4:	2811883a 	mov	r8,r5
 a0016d8:	200f883a 	mov	r7,r4
 a0016dc:	41000017 	ldw	r4,0(r8)
 a0016e0:	1fc00017 	ldw	ra,0(r3)
 a0016e4:	63c00017 	ldw	r15,0(r12)
 a0016e8:	39000015 	stw	r4,0(r7)
 a0016ec:	53800017 	ldw	r14,0(r10)
 a0016f0:	6fc00015 	stw	ra,0(r13)
 a0016f4:	5bc00015 	stw	r15,0(r11)
 a0016f8:	4b800015 	stw	r14,0(r9)
 a0016fc:	18c00404 	addi	r3,r3,16
 a001700:	39c00404 	addi	r7,r7,16
 a001704:	42000404 	addi	r8,r8,16
 a001708:	6b400404 	addi	r13,r13,16
 a00170c:	63000404 	addi	r12,r12,16
 a001710:	5ac00404 	addi	r11,r11,16
 a001714:	52800404 	addi	r10,r10,16
 a001718:	4a400404 	addi	r9,r9,16
 a00171c:	1c3fef1e 	bne	r3,r16,a0016dc <__alt_mem_flash+0xfe0006dc>
 a001720:	89c00044 	addi	r7,r17,1
 a001724:	380e913a 	slli	r7,r7,4
 a001728:	310003cc 	andi	r4,r6,15
 a00172c:	02c000c4 	movi	r11,3
 a001730:	11c7883a 	add	r3,r2,r7
 a001734:	29cb883a 	add	r5,r5,r7
 a001738:	5900212e 	bgeu	r11,r4,a0017c0 <memcpy+0x140>
 a00173c:	1813883a 	mov	r9,r3
 a001740:	2811883a 	mov	r8,r5
 a001744:	200f883a 	mov	r7,r4
 a001748:	42800017 	ldw	r10,0(r8)
 a00174c:	4a400104 	addi	r9,r9,4
 a001750:	39ffff04 	addi	r7,r7,-4
 a001754:	4abfff15 	stw	r10,-4(r9)
 a001758:	42000104 	addi	r8,r8,4
 a00175c:	59fffa36 	bltu	r11,r7,a001748 <__alt_mem_flash+0xfe000748>
 a001760:	213fff04 	addi	r4,r4,-4
 a001764:	2008d0ba 	srli	r4,r4,2
 a001768:	318000cc 	andi	r6,r6,3
 a00176c:	21000044 	addi	r4,r4,1
 a001770:	2109883a 	add	r4,r4,r4
 a001774:	2109883a 	add	r4,r4,r4
 a001778:	1907883a 	add	r3,r3,r4
 a00177c:	290b883a 	add	r5,r5,r4
 a001780:	30000626 	beq	r6,zero,a00179c <memcpy+0x11c>
 a001784:	198d883a 	add	r6,r3,r6
 a001788:	29c00003 	ldbu	r7,0(r5)
 a00178c:	18c00044 	addi	r3,r3,1
 a001790:	29400044 	addi	r5,r5,1
 a001794:	19ffffc5 	stb	r7,-1(r3)
 a001798:	19bffb1e 	bne	r3,r6,a001788 <__alt_mem_flash+0xfe000788>
 a00179c:	dfc00217 	ldw	ra,8(sp)
 a0017a0:	dc400117 	ldw	r17,4(sp)
 a0017a4:	dc000017 	ldw	r16,0(sp)
 a0017a8:	dec00304 	addi	sp,sp,12
 a0017ac:	f800283a 	ret
 a0017b0:	2007883a 	mov	r3,r4
 a0017b4:	003ff206 	br	a001780 <__alt_mem_flash+0xfe000780>
 a0017b8:	2007883a 	mov	r3,r4
 a0017bc:	003ff106 	br	a001784 <__alt_mem_flash+0xfe000784>
 a0017c0:	200d883a 	mov	r6,r4
 a0017c4:	003fee06 	br	a001780 <__alt_mem_flash+0xfe000780>

0a0017c8 <memmove>:
 a0017c8:	2005883a 	mov	r2,r4
 a0017cc:	29000b2e 	bgeu	r5,r4,a0017fc <memmove+0x34>
 a0017d0:	298f883a 	add	r7,r5,r6
 a0017d4:	21c0092e 	bgeu	r4,r7,a0017fc <memmove+0x34>
 a0017d8:	2187883a 	add	r3,r4,r6
 a0017dc:	198bc83a 	sub	r5,r3,r6
 a0017e0:	30004826 	beq	r6,zero,a001904 <memmove+0x13c>
 a0017e4:	39ffffc4 	addi	r7,r7,-1
 a0017e8:	39000003 	ldbu	r4,0(r7)
 a0017ec:	18ffffc4 	addi	r3,r3,-1
 a0017f0:	19000005 	stb	r4,0(r3)
 a0017f4:	28fffb1e 	bne	r5,r3,a0017e4 <__alt_mem_flash+0xfe0007e4>
 a0017f8:	f800283a 	ret
 a0017fc:	00c003c4 	movi	r3,15
 a001800:	1980412e 	bgeu	r3,r6,a001908 <memmove+0x140>
 a001804:	2886b03a 	or	r3,r5,r2
 a001808:	18c000cc 	andi	r3,r3,3
 a00180c:	1800401e 	bne	r3,zero,a001910 <memmove+0x148>
 a001810:	33fffc04 	addi	r15,r6,-16
 a001814:	781ed13a 	srli	r15,r15,4
 a001818:	28c00104 	addi	r3,r5,4
 a00181c:	13400104 	addi	r13,r2,4
 a001820:	781c913a 	slli	r14,r15,4
 a001824:	2b000204 	addi	r12,r5,8
 a001828:	12c00204 	addi	r11,r2,8
 a00182c:	73800504 	addi	r14,r14,20
 a001830:	2a800304 	addi	r10,r5,12
 a001834:	12400304 	addi	r9,r2,12
 a001838:	2b9d883a 	add	r14,r5,r14
 a00183c:	2811883a 	mov	r8,r5
 a001840:	100f883a 	mov	r7,r2
 a001844:	41000017 	ldw	r4,0(r8)
 a001848:	39c00404 	addi	r7,r7,16
 a00184c:	18c00404 	addi	r3,r3,16
 a001850:	393ffc15 	stw	r4,-16(r7)
 a001854:	193ffc17 	ldw	r4,-16(r3)
 a001858:	6b400404 	addi	r13,r13,16
 a00185c:	5ac00404 	addi	r11,r11,16
 a001860:	693ffc15 	stw	r4,-16(r13)
 a001864:	61000017 	ldw	r4,0(r12)
 a001868:	4a400404 	addi	r9,r9,16
 a00186c:	42000404 	addi	r8,r8,16
 a001870:	593ffc15 	stw	r4,-16(r11)
 a001874:	51000017 	ldw	r4,0(r10)
 a001878:	63000404 	addi	r12,r12,16
 a00187c:	52800404 	addi	r10,r10,16
 a001880:	493ffc15 	stw	r4,-16(r9)
 a001884:	1bbfef1e 	bne	r3,r14,a001844 <__alt_mem_flash+0xfe000844>
 a001888:	79000044 	addi	r4,r15,1
 a00188c:	2008913a 	slli	r4,r4,4
 a001890:	328003cc 	andi	r10,r6,15
 a001894:	02c000c4 	movi	r11,3
 a001898:	1107883a 	add	r3,r2,r4
 a00189c:	290b883a 	add	r5,r5,r4
 a0018a0:	5a801e2e 	bgeu	r11,r10,a00191c <memmove+0x154>
 a0018a4:	1813883a 	mov	r9,r3
 a0018a8:	2811883a 	mov	r8,r5
 a0018ac:	500f883a 	mov	r7,r10
 a0018b0:	41000017 	ldw	r4,0(r8)
 a0018b4:	4a400104 	addi	r9,r9,4
 a0018b8:	39ffff04 	addi	r7,r7,-4
 a0018bc:	493fff15 	stw	r4,-4(r9)
 a0018c0:	42000104 	addi	r8,r8,4
 a0018c4:	59fffa36 	bltu	r11,r7,a0018b0 <__alt_mem_flash+0xfe0008b0>
 a0018c8:	513fff04 	addi	r4,r10,-4
 a0018cc:	2008d0ba 	srli	r4,r4,2
 a0018d0:	318000cc 	andi	r6,r6,3
 a0018d4:	21000044 	addi	r4,r4,1
 a0018d8:	2109883a 	add	r4,r4,r4
 a0018dc:	2109883a 	add	r4,r4,r4
 a0018e0:	1907883a 	add	r3,r3,r4
 a0018e4:	290b883a 	add	r5,r5,r4
 a0018e8:	30000b26 	beq	r6,zero,a001918 <memmove+0x150>
 a0018ec:	198d883a 	add	r6,r3,r6
 a0018f0:	29c00003 	ldbu	r7,0(r5)
 a0018f4:	18c00044 	addi	r3,r3,1
 a0018f8:	29400044 	addi	r5,r5,1
 a0018fc:	19ffffc5 	stb	r7,-1(r3)
 a001900:	19bffb1e 	bne	r3,r6,a0018f0 <__alt_mem_flash+0xfe0008f0>
 a001904:	f800283a 	ret
 a001908:	1007883a 	mov	r3,r2
 a00190c:	003ff606 	br	a0018e8 <__alt_mem_flash+0xfe0008e8>
 a001910:	1007883a 	mov	r3,r2
 a001914:	003ff506 	br	a0018ec <__alt_mem_flash+0xfe0008ec>
 a001918:	f800283a 	ret
 a00191c:	500d883a 	mov	r6,r10
 a001920:	003ff106 	br	a0018e8 <__alt_mem_flash+0xfe0008e8>

0a001924 <memset>:
 a001924:	20c000cc 	andi	r3,r4,3
 a001928:	2005883a 	mov	r2,r4
 a00192c:	18004426 	beq	r3,zero,a001a40 <memset+0x11c>
 a001930:	31ffffc4 	addi	r7,r6,-1
 a001934:	30004026 	beq	r6,zero,a001a38 <memset+0x114>
 a001938:	2813883a 	mov	r9,r5
 a00193c:	200d883a 	mov	r6,r4
 a001940:	2007883a 	mov	r3,r4
 a001944:	00000406 	br	a001958 <memset+0x34>
 a001948:	3a3fffc4 	addi	r8,r7,-1
 a00194c:	31800044 	addi	r6,r6,1
 a001950:	38003926 	beq	r7,zero,a001a38 <memset+0x114>
 a001954:	400f883a 	mov	r7,r8
 a001958:	18c00044 	addi	r3,r3,1
 a00195c:	32400005 	stb	r9,0(r6)
 a001960:	1a0000cc 	andi	r8,r3,3
 a001964:	403ff81e 	bne	r8,zero,a001948 <__alt_mem_flash+0xfe000948>
 a001968:	010000c4 	movi	r4,3
 a00196c:	21c02d2e 	bgeu	r4,r7,a001a24 <memset+0x100>
 a001970:	29003fcc 	andi	r4,r5,255
 a001974:	200c923a 	slli	r6,r4,8
 a001978:	3108b03a 	or	r4,r6,r4
 a00197c:	200c943a 	slli	r6,r4,16
 a001980:	218cb03a 	or	r6,r4,r6
 a001984:	010003c4 	movi	r4,15
 a001988:	21c0182e 	bgeu	r4,r7,a0019ec <memset+0xc8>
 a00198c:	3b3ffc04 	addi	r12,r7,-16
 a001990:	6018d13a 	srli	r12,r12,4
 a001994:	1a000104 	addi	r8,r3,4
 a001998:	1ac00204 	addi	r11,r3,8
 a00199c:	6008913a 	slli	r4,r12,4
 a0019a0:	1a800304 	addi	r10,r3,12
 a0019a4:	1813883a 	mov	r9,r3
 a0019a8:	21000504 	addi	r4,r4,20
 a0019ac:	1909883a 	add	r4,r3,r4
 a0019b0:	49800015 	stw	r6,0(r9)
 a0019b4:	41800015 	stw	r6,0(r8)
 a0019b8:	59800015 	stw	r6,0(r11)
 a0019bc:	51800015 	stw	r6,0(r10)
 a0019c0:	42000404 	addi	r8,r8,16
 a0019c4:	4a400404 	addi	r9,r9,16
 a0019c8:	5ac00404 	addi	r11,r11,16
 a0019cc:	52800404 	addi	r10,r10,16
 a0019d0:	413ff71e 	bne	r8,r4,a0019b0 <__alt_mem_flash+0xfe0009b0>
 a0019d4:	63000044 	addi	r12,r12,1
 a0019d8:	6018913a 	slli	r12,r12,4
 a0019dc:	39c003cc 	andi	r7,r7,15
 a0019e0:	010000c4 	movi	r4,3
 a0019e4:	1b07883a 	add	r3,r3,r12
 a0019e8:	21c00e2e 	bgeu	r4,r7,a001a24 <memset+0x100>
 a0019ec:	1813883a 	mov	r9,r3
 a0019f0:	3811883a 	mov	r8,r7
 a0019f4:	010000c4 	movi	r4,3
 a0019f8:	49800015 	stw	r6,0(r9)
 a0019fc:	423fff04 	addi	r8,r8,-4
 a001a00:	4a400104 	addi	r9,r9,4
 a001a04:	223ffc36 	bltu	r4,r8,a0019f8 <__alt_mem_flash+0xfe0009f8>
 a001a08:	393fff04 	addi	r4,r7,-4
 a001a0c:	2008d0ba 	srli	r4,r4,2
 a001a10:	39c000cc 	andi	r7,r7,3
 a001a14:	21000044 	addi	r4,r4,1
 a001a18:	2109883a 	add	r4,r4,r4
 a001a1c:	2109883a 	add	r4,r4,r4
 a001a20:	1907883a 	add	r3,r3,r4
 a001a24:	38000526 	beq	r7,zero,a001a3c <memset+0x118>
 a001a28:	19cf883a 	add	r7,r3,r7
 a001a2c:	19400005 	stb	r5,0(r3)
 a001a30:	18c00044 	addi	r3,r3,1
 a001a34:	38fffd1e 	bne	r7,r3,a001a2c <__alt_mem_flash+0xfe000a2c>
 a001a38:	f800283a 	ret
 a001a3c:	f800283a 	ret
 a001a40:	2007883a 	mov	r3,r4
 a001a44:	300f883a 	mov	r7,r6
 a001a48:	003fc706 	br	a001968 <__alt_mem_flash+0xfe000968>

0a001a4c <_realloc_r>:
 a001a4c:	defff604 	addi	sp,sp,-40
 a001a50:	dc800215 	stw	r18,8(sp)
 a001a54:	dfc00915 	stw	ra,36(sp)
 a001a58:	df000815 	stw	fp,32(sp)
 a001a5c:	ddc00715 	stw	r23,28(sp)
 a001a60:	dd800615 	stw	r22,24(sp)
 a001a64:	dd400515 	stw	r21,20(sp)
 a001a68:	dd000415 	stw	r20,16(sp)
 a001a6c:	dcc00315 	stw	r19,12(sp)
 a001a70:	dc400115 	stw	r17,4(sp)
 a001a74:	dc000015 	stw	r16,0(sp)
 a001a78:	3025883a 	mov	r18,r6
 a001a7c:	2800b726 	beq	r5,zero,a001d5c <_realloc_r+0x310>
 a001a80:	282b883a 	mov	r21,r5
 a001a84:	2029883a 	mov	r20,r4
 a001a88:	a0035cc0 	call	a0035cc <__malloc_lock>
 a001a8c:	a8bfff17 	ldw	r2,-4(r21)
 a001a90:	043fff04 	movi	r16,-4
 a001a94:	90c002c4 	addi	r3,r18,11
 a001a98:	01000584 	movi	r4,22
 a001a9c:	acfffe04 	addi	r19,r21,-8
 a001aa0:	1420703a 	and	r16,r2,r16
 a001aa4:	20c0332e 	bgeu	r4,r3,a001b74 <_realloc_r+0x128>
 a001aa8:	047ffe04 	movi	r17,-8
 a001aac:	1c62703a 	and	r17,r3,r17
 a001ab0:	8807883a 	mov	r3,r17
 a001ab4:	88005816 	blt	r17,zero,a001c18 <_realloc_r+0x1cc>
 a001ab8:	8c805736 	bltu	r17,r18,a001c18 <_realloc_r+0x1cc>
 a001abc:	80c0300e 	bge	r16,r3,a001b80 <_realloc_r+0x134>
 a001ac0:	07028034 	movhi	fp,2560
 a001ac4:	e71e3d04 	addi	fp,fp,30964
 a001ac8:	e1c00217 	ldw	r7,8(fp)
 a001acc:	9c09883a 	add	r4,r19,r16
 a001ad0:	22000117 	ldw	r8,4(r4)
 a001ad4:	21c06326 	beq	r4,r7,a001c64 <_realloc_r+0x218>
 a001ad8:	017fff84 	movi	r5,-2
 a001adc:	414a703a 	and	r5,r8,r5
 a001ae0:	214b883a 	add	r5,r4,r5
 a001ae4:	29800117 	ldw	r6,4(r5)
 a001ae8:	3180004c 	andi	r6,r6,1
 a001aec:	30003f26 	beq	r6,zero,a001bec <_realloc_r+0x1a0>
 a001af0:	1080004c 	andi	r2,r2,1
 a001af4:	10008326 	beq	r2,zero,a001d04 <_realloc_r+0x2b8>
 a001af8:	900b883a 	mov	r5,r18
 a001afc:	a009883a 	mov	r4,r20
 a001b00:	a000d900 	call	a000d90 <_malloc_r>
 a001b04:	1025883a 	mov	r18,r2
 a001b08:	10011e26 	beq	r2,zero,a001f84 <_realloc_r+0x538>
 a001b0c:	a93fff17 	ldw	r4,-4(r21)
 a001b10:	10fffe04 	addi	r3,r2,-8
 a001b14:	00bfff84 	movi	r2,-2
 a001b18:	2084703a 	and	r2,r4,r2
 a001b1c:	9885883a 	add	r2,r19,r2
 a001b20:	1880ee26 	beq	r3,r2,a001edc <_realloc_r+0x490>
 a001b24:	81bfff04 	addi	r6,r16,-4
 a001b28:	00800904 	movi	r2,36
 a001b2c:	1180b836 	bltu	r2,r6,a001e10 <_realloc_r+0x3c4>
 a001b30:	00c004c4 	movi	r3,19
 a001b34:	19809636 	bltu	r3,r6,a001d90 <_realloc_r+0x344>
 a001b38:	9005883a 	mov	r2,r18
 a001b3c:	a807883a 	mov	r3,r21
 a001b40:	19000017 	ldw	r4,0(r3)
 a001b44:	11000015 	stw	r4,0(r2)
 a001b48:	19000117 	ldw	r4,4(r3)
 a001b4c:	11000115 	stw	r4,4(r2)
 a001b50:	18c00217 	ldw	r3,8(r3)
 a001b54:	10c00215 	stw	r3,8(r2)
 a001b58:	a80b883a 	mov	r5,r21
 a001b5c:	a009883a 	mov	r4,r20
 a001b60:	a0028180 	call	a002818 <_free_r>
 a001b64:	a009883a 	mov	r4,r20
 a001b68:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001b6c:	9005883a 	mov	r2,r18
 a001b70:	00001206 	br	a001bbc <_realloc_r+0x170>
 a001b74:	00c00404 	movi	r3,16
 a001b78:	1823883a 	mov	r17,r3
 a001b7c:	003fce06 	br	a001ab8 <__alt_mem_flash+0xfe000ab8>
 a001b80:	a825883a 	mov	r18,r21
 a001b84:	8445c83a 	sub	r2,r16,r17
 a001b88:	00c003c4 	movi	r3,15
 a001b8c:	18802636 	bltu	r3,r2,a001c28 <_realloc_r+0x1dc>
 a001b90:	99800117 	ldw	r6,4(r19)
 a001b94:	9c07883a 	add	r3,r19,r16
 a001b98:	3180004c 	andi	r6,r6,1
 a001b9c:	3420b03a 	or	r16,r6,r16
 a001ba0:	9c000115 	stw	r16,4(r19)
 a001ba4:	18800117 	ldw	r2,4(r3)
 a001ba8:	10800054 	ori	r2,r2,1
 a001bac:	18800115 	stw	r2,4(r3)
 a001bb0:	a009883a 	mov	r4,r20
 a001bb4:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001bb8:	9005883a 	mov	r2,r18
 a001bbc:	dfc00917 	ldw	ra,36(sp)
 a001bc0:	df000817 	ldw	fp,32(sp)
 a001bc4:	ddc00717 	ldw	r23,28(sp)
 a001bc8:	dd800617 	ldw	r22,24(sp)
 a001bcc:	dd400517 	ldw	r21,20(sp)
 a001bd0:	dd000417 	ldw	r20,16(sp)
 a001bd4:	dcc00317 	ldw	r19,12(sp)
 a001bd8:	dc800217 	ldw	r18,8(sp)
 a001bdc:	dc400117 	ldw	r17,4(sp)
 a001be0:	dc000017 	ldw	r16,0(sp)
 a001be4:	dec00a04 	addi	sp,sp,40
 a001be8:	f800283a 	ret
 a001bec:	017fff04 	movi	r5,-4
 a001bf0:	414a703a 	and	r5,r8,r5
 a001bf4:	814d883a 	add	r6,r16,r5
 a001bf8:	30c01f16 	blt	r6,r3,a001c78 <_realloc_r+0x22c>
 a001bfc:	20800317 	ldw	r2,12(r4)
 a001c00:	20c00217 	ldw	r3,8(r4)
 a001c04:	a825883a 	mov	r18,r21
 a001c08:	3021883a 	mov	r16,r6
 a001c0c:	18800315 	stw	r2,12(r3)
 a001c10:	10c00215 	stw	r3,8(r2)
 a001c14:	003fdb06 	br	a001b84 <__alt_mem_flash+0xfe000b84>
 a001c18:	00800304 	movi	r2,12
 a001c1c:	a0800015 	stw	r2,0(r20)
 a001c20:	0005883a 	mov	r2,zero
 a001c24:	003fe506 	br	a001bbc <__alt_mem_flash+0xfe000bbc>
 a001c28:	98c00117 	ldw	r3,4(r19)
 a001c2c:	9c4b883a 	add	r5,r19,r17
 a001c30:	11000054 	ori	r4,r2,1
 a001c34:	18c0004c 	andi	r3,r3,1
 a001c38:	1c62b03a 	or	r17,r3,r17
 a001c3c:	9c400115 	stw	r17,4(r19)
 a001c40:	29000115 	stw	r4,4(r5)
 a001c44:	2885883a 	add	r2,r5,r2
 a001c48:	10c00117 	ldw	r3,4(r2)
 a001c4c:	29400204 	addi	r5,r5,8
 a001c50:	a009883a 	mov	r4,r20
 a001c54:	18c00054 	ori	r3,r3,1
 a001c58:	10c00115 	stw	r3,4(r2)
 a001c5c:	a0028180 	call	a002818 <_free_r>
 a001c60:	003fd306 	br	a001bb0 <__alt_mem_flash+0xfe000bb0>
 a001c64:	017fff04 	movi	r5,-4
 a001c68:	414a703a 	and	r5,r8,r5
 a001c6c:	89800404 	addi	r6,r17,16
 a001c70:	8151883a 	add	r8,r16,r5
 a001c74:	4180590e 	bge	r8,r6,a001ddc <_realloc_r+0x390>
 a001c78:	1080004c 	andi	r2,r2,1
 a001c7c:	103f9e1e 	bne	r2,zero,a001af8 <__alt_mem_flash+0xfe000af8>
 a001c80:	adbffe17 	ldw	r22,-8(r21)
 a001c84:	00bfff04 	movi	r2,-4
 a001c88:	9dadc83a 	sub	r22,r19,r22
 a001c8c:	b1800117 	ldw	r6,4(r22)
 a001c90:	3084703a 	and	r2,r6,r2
 a001c94:	20002026 	beq	r4,zero,a001d18 <_realloc_r+0x2cc>
 a001c98:	80af883a 	add	r23,r16,r2
 a001c9c:	b96f883a 	add	r23,r23,r5
 a001ca0:	21c05f26 	beq	r4,r7,a001e20 <_realloc_r+0x3d4>
 a001ca4:	b8c01c16 	blt	r23,r3,a001d18 <_realloc_r+0x2cc>
 a001ca8:	20800317 	ldw	r2,12(r4)
 a001cac:	20c00217 	ldw	r3,8(r4)
 a001cb0:	81bfff04 	addi	r6,r16,-4
 a001cb4:	01000904 	movi	r4,36
 a001cb8:	18800315 	stw	r2,12(r3)
 a001cbc:	10c00215 	stw	r3,8(r2)
 a001cc0:	b0c00217 	ldw	r3,8(r22)
 a001cc4:	b0800317 	ldw	r2,12(r22)
 a001cc8:	b4800204 	addi	r18,r22,8
 a001ccc:	18800315 	stw	r2,12(r3)
 a001cd0:	10c00215 	stw	r3,8(r2)
 a001cd4:	21801b36 	bltu	r4,r6,a001d44 <_realloc_r+0x2f8>
 a001cd8:	008004c4 	movi	r2,19
 a001cdc:	1180352e 	bgeu	r2,r6,a001db4 <_realloc_r+0x368>
 a001ce0:	a8800017 	ldw	r2,0(r21)
 a001ce4:	b0800215 	stw	r2,8(r22)
 a001ce8:	a8800117 	ldw	r2,4(r21)
 a001cec:	b0800315 	stw	r2,12(r22)
 a001cf0:	008006c4 	movi	r2,27
 a001cf4:	11807f36 	bltu	r2,r6,a001ef4 <_realloc_r+0x4a8>
 a001cf8:	b0800404 	addi	r2,r22,16
 a001cfc:	ad400204 	addi	r21,r21,8
 a001d00:	00002d06 	br	a001db8 <_realloc_r+0x36c>
 a001d04:	adbffe17 	ldw	r22,-8(r21)
 a001d08:	00bfff04 	movi	r2,-4
 a001d0c:	9dadc83a 	sub	r22,r19,r22
 a001d10:	b1000117 	ldw	r4,4(r22)
 a001d14:	2084703a 	and	r2,r4,r2
 a001d18:	b03f7726 	beq	r22,zero,a001af8 <__alt_mem_flash+0xfe000af8>
 a001d1c:	80af883a 	add	r23,r16,r2
 a001d20:	b8ff7516 	blt	r23,r3,a001af8 <__alt_mem_flash+0xfe000af8>
 a001d24:	b0800317 	ldw	r2,12(r22)
 a001d28:	b0c00217 	ldw	r3,8(r22)
 a001d2c:	81bfff04 	addi	r6,r16,-4
 a001d30:	01000904 	movi	r4,36
 a001d34:	18800315 	stw	r2,12(r3)
 a001d38:	10c00215 	stw	r3,8(r2)
 a001d3c:	b4800204 	addi	r18,r22,8
 a001d40:	21bfe52e 	bgeu	r4,r6,a001cd8 <__alt_mem_flash+0xfe000cd8>
 a001d44:	a80b883a 	mov	r5,r21
 a001d48:	9009883a 	mov	r4,r18
 a001d4c:	a0017c80 	call	a0017c8 <memmove>
 a001d50:	b821883a 	mov	r16,r23
 a001d54:	b027883a 	mov	r19,r22
 a001d58:	003f8a06 	br	a001b84 <__alt_mem_flash+0xfe000b84>
 a001d5c:	300b883a 	mov	r5,r6
 a001d60:	dfc00917 	ldw	ra,36(sp)
 a001d64:	df000817 	ldw	fp,32(sp)
 a001d68:	ddc00717 	ldw	r23,28(sp)
 a001d6c:	dd800617 	ldw	r22,24(sp)
 a001d70:	dd400517 	ldw	r21,20(sp)
 a001d74:	dd000417 	ldw	r20,16(sp)
 a001d78:	dcc00317 	ldw	r19,12(sp)
 a001d7c:	dc800217 	ldw	r18,8(sp)
 a001d80:	dc400117 	ldw	r17,4(sp)
 a001d84:	dc000017 	ldw	r16,0(sp)
 a001d88:	dec00a04 	addi	sp,sp,40
 a001d8c:	a000d901 	jmpi	a000d90 <_malloc_r>
 a001d90:	a8c00017 	ldw	r3,0(r21)
 a001d94:	90c00015 	stw	r3,0(r18)
 a001d98:	a8c00117 	ldw	r3,4(r21)
 a001d9c:	90c00115 	stw	r3,4(r18)
 a001da0:	00c006c4 	movi	r3,27
 a001da4:	19804536 	bltu	r3,r6,a001ebc <_realloc_r+0x470>
 a001da8:	90800204 	addi	r2,r18,8
 a001dac:	a8c00204 	addi	r3,r21,8
 a001db0:	003f6306 	br	a001b40 <__alt_mem_flash+0xfe000b40>
 a001db4:	9005883a 	mov	r2,r18
 a001db8:	a8c00017 	ldw	r3,0(r21)
 a001dbc:	b821883a 	mov	r16,r23
 a001dc0:	b027883a 	mov	r19,r22
 a001dc4:	10c00015 	stw	r3,0(r2)
 a001dc8:	a8c00117 	ldw	r3,4(r21)
 a001dcc:	10c00115 	stw	r3,4(r2)
 a001dd0:	a8c00217 	ldw	r3,8(r21)
 a001dd4:	10c00215 	stw	r3,8(r2)
 a001dd8:	003f6a06 	br	a001b84 <__alt_mem_flash+0xfe000b84>
 a001ddc:	9c67883a 	add	r19,r19,r17
 a001de0:	4445c83a 	sub	r2,r8,r17
 a001de4:	e4c00215 	stw	r19,8(fp)
 a001de8:	10800054 	ori	r2,r2,1
 a001dec:	98800115 	stw	r2,4(r19)
 a001df0:	a8bfff17 	ldw	r2,-4(r21)
 a001df4:	a009883a 	mov	r4,r20
 a001df8:	1080004c 	andi	r2,r2,1
 a001dfc:	1462b03a 	or	r17,r2,r17
 a001e00:	ac7fff15 	stw	r17,-4(r21)
 a001e04:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001e08:	a805883a 	mov	r2,r21
 a001e0c:	003f6b06 	br	a001bbc <__alt_mem_flash+0xfe000bbc>
 a001e10:	a80b883a 	mov	r5,r21
 a001e14:	9009883a 	mov	r4,r18
 a001e18:	a0017c80 	call	a0017c8 <memmove>
 a001e1c:	003f4e06 	br	a001b58 <__alt_mem_flash+0xfe000b58>
 a001e20:	89000404 	addi	r4,r17,16
 a001e24:	b93fbc16 	blt	r23,r4,a001d18 <__alt_mem_flash+0xfe000d18>
 a001e28:	b0800317 	ldw	r2,12(r22)
 a001e2c:	b0c00217 	ldw	r3,8(r22)
 a001e30:	81bfff04 	addi	r6,r16,-4
 a001e34:	01000904 	movi	r4,36
 a001e38:	18800315 	stw	r2,12(r3)
 a001e3c:	10c00215 	stw	r3,8(r2)
 a001e40:	b4800204 	addi	r18,r22,8
 a001e44:	21804336 	bltu	r4,r6,a001f54 <_realloc_r+0x508>
 a001e48:	008004c4 	movi	r2,19
 a001e4c:	11803f2e 	bgeu	r2,r6,a001f4c <_realloc_r+0x500>
 a001e50:	a8800017 	ldw	r2,0(r21)
 a001e54:	b0800215 	stw	r2,8(r22)
 a001e58:	a8800117 	ldw	r2,4(r21)
 a001e5c:	b0800315 	stw	r2,12(r22)
 a001e60:	008006c4 	movi	r2,27
 a001e64:	11803f36 	bltu	r2,r6,a001f64 <_realloc_r+0x518>
 a001e68:	b0800404 	addi	r2,r22,16
 a001e6c:	ad400204 	addi	r21,r21,8
 a001e70:	a8c00017 	ldw	r3,0(r21)
 a001e74:	10c00015 	stw	r3,0(r2)
 a001e78:	a8c00117 	ldw	r3,4(r21)
 a001e7c:	10c00115 	stw	r3,4(r2)
 a001e80:	a8c00217 	ldw	r3,8(r21)
 a001e84:	10c00215 	stw	r3,8(r2)
 a001e88:	b447883a 	add	r3,r22,r17
 a001e8c:	bc45c83a 	sub	r2,r23,r17
 a001e90:	e0c00215 	stw	r3,8(fp)
 a001e94:	10800054 	ori	r2,r2,1
 a001e98:	18800115 	stw	r2,4(r3)
 a001e9c:	b0800117 	ldw	r2,4(r22)
 a001ea0:	a009883a 	mov	r4,r20
 a001ea4:	1080004c 	andi	r2,r2,1
 a001ea8:	1462b03a 	or	r17,r2,r17
 a001eac:	b4400115 	stw	r17,4(r22)
 a001eb0:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001eb4:	9005883a 	mov	r2,r18
 a001eb8:	003f4006 	br	a001bbc <__alt_mem_flash+0xfe000bbc>
 a001ebc:	a8c00217 	ldw	r3,8(r21)
 a001ec0:	90c00215 	stw	r3,8(r18)
 a001ec4:	a8c00317 	ldw	r3,12(r21)
 a001ec8:	90c00315 	stw	r3,12(r18)
 a001ecc:	30801126 	beq	r6,r2,a001f14 <_realloc_r+0x4c8>
 a001ed0:	90800404 	addi	r2,r18,16
 a001ed4:	a8c00404 	addi	r3,r21,16
 a001ed8:	003f1906 	br	a001b40 <__alt_mem_flash+0xfe000b40>
 a001edc:	90ffff17 	ldw	r3,-4(r18)
 a001ee0:	00bfff04 	movi	r2,-4
 a001ee4:	a825883a 	mov	r18,r21
 a001ee8:	1884703a 	and	r2,r3,r2
 a001eec:	80a1883a 	add	r16,r16,r2
 a001ef0:	003f2406 	br	a001b84 <__alt_mem_flash+0xfe000b84>
 a001ef4:	a8800217 	ldw	r2,8(r21)
 a001ef8:	b0800415 	stw	r2,16(r22)
 a001efc:	a8800317 	ldw	r2,12(r21)
 a001f00:	b0800515 	stw	r2,20(r22)
 a001f04:	31000a26 	beq	r6,r4,a001f30 <_realloc_r+0x4e4>
 a001f08:	b0800604 	addi	r2,r22,24
 a001f0c:	ad400404 	addi	r21,r21,16
 a001f10:	003fa906 	br	a001db8 <__alt_mem_flash+0xfe000db8>
 a001f14:	a9000417 	ldw	r4,16(r21)
 a001f18:	90800604 	addi	r2,r18,24
 a001f1c:	a8c00604 	addi	r3,r21,24
 a001f20:	91000415 	stw	r4,16(r18)
 a001f24:	a9000517 	ldw	r4,20(r21)
 a001f28:	91000515 	stw	r4,20(r18)
 a001f2c:	003f0406 	br	a001b40 <__alt_mem_flash+0xfe000b40>
 a001f30:	a8c00417 	ldw	r3,16(r21)
 a001f34:	ad400604 	addi	r21,r21,24
 a001f38:	b0800804 	addi	r2,r22,32
 a001f3c:	b0c00615 	stw	r3,24(r22)
 a001f40:	a8ffff17 	ldw	r3,-4(r21)
 a001f44:	b0c00715 	stw	r3,28(r22)
 a001f48:	003f9b06 	br	a001db8 <__alt_mem_flash+0xfe000db8>
 a001f4c:	9005883a 	mov	r2,r18
 a001f50:	003fc706 	br	a001e70 <__alt_mem_flash+0xfe000e70>
 a001f54:	a80b883a 	mov	r5,r21
 a001f58:	9009883a 	mov	r4,r18
 a001f5c:	a0017c80 	call	a0017c8 <memmove>
 a001f60:	003fc906 	br	a001e88 <__alt_mem_flash+0xfe000e88>
 a001f64:	a8800217 	ldw	r2,8(r21)
 a001f68:	b0800415 	stw	r2,16(r22)
 a001f6c:	a8800317 	ldw	r2,12(r21)
 a001f70:	b0800515 	stw	r2,20(r22)
 a001f74:	31000726 	beq	r6,r4,a001f94 <_realloc_r+0x548>
 a001f78:	b0800604 	addi	r2,r22,24
 a001f7c:	ad400404 	addi	r21,r21,16
 a001f80:	003fbb06 	br	a001e70 <__alt_mem_flash+0xfe000e70>
 a001f84:	a009883a 	mov	r4,r20
 a001f88:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a001f8c:	0005883a 	mov	r2,zero
 a001f90:	003f0a06 	br	a001bbc <__alt_mem_flash+0xfe000bbc>
 a001f94:	a8c00417 	ldw	r3,16(r21)
 a001f98:	ad400604 	addi	r21,r21,24
 a001f9c:	b0800804 	addi	r2,r22,32
 a001fa0:	b0c00615 	stw	r3,24(r22)
 a001fa4:	a8ffff17 	ldw	r3,-4(r21)
 a001fa8:	b0c00715 	stw	r3,28(r22)
 a001fac:	003fb006 	br	a001e70 <__alt_mem_flash+0xfe000e70>

0a001fb0 <_sbrk_r>:
 a001fb0:	defffd04 	addi	sp,sp,-12
 a001fb4:	dc000015 	stw	r16,0(sp)
 a001fb8:	04028074 	movhi	r16,2561
 a001fbc:	dc400115 	stw	r17,4(sp)
 a001fc0:	842b4f04 	addi	r16,r16,-21188
 a001fc4:	2023883a 	mov	r17,r4
 a001fc8:	2809883a 	mov	r4,r5
 a001fcc:	dfc00215 	stw	ra,8(sp)
 a001fd0:	80000015 	stw	zero,0(r16)
 a001fd4:	a0037d80 	call	a0037d8 <sbrk>
 a001fd8:	00ffffc4 	movi	r3,-1
 a001fdc:	10c00526 	beq	r2,r3,a001ff4 <_sbrk_r+0x44>
 a001fe0:	dfc00217 	ldw	ra,8(sp)
 a001fe4:	dc400117 	ldw	r17,4(sp)
 a001fe8:	dc000017 	ldw	r16,0(sp)
 a001fec:	dec00304 	addi	sp,sp,12
 a001ff0:	f800283a 	ret
 a001ff4:	80c00017 	ldw	r3,0(r16)
 a001ff8:	183ff926 	beq	r3,zero,a001fe0 <__alt_mem_flash+0xfe000fe0>
 a001ffc:	88c00015 	stw	r3,0(r17)
 a002000:	003ff706 	br	a001fe0 <__alt_mem_flash+0xfe000fe0>

0a002004 <__sread>:
 a002004:	defffe04 	addi	sp,sp,-8
 a002008:	dc000015 	stw	r16,0(sp)
 a00200c:	2821883a 	mov	r16,r5
 a002010:	2940038f 	ldh	r5,14(r5)
 a002014:	dfc00115 	stw	ra,4(sp)
 a002018:	a002d440 	call	a002d44 <_read_r>
 a00201c:	10000716 	blt	r2,zero,a00203c <__sread+0x38>
 a002020:	80c01417 	ldw	r3,80(r16)
 a002024:	1887883a 	add	r3,r3,r2
 a002028:	80c01415 	stw	r3,80(r16)
 a00202c:	dfc00117 	ldw	ra,4(sp)
 a002030:	dc000017 	ldw	r16,0(sp)
 a002034:	dec00204 	addi	sp,sp,8
 a002038:	f800283a 	ret
 a00203c:	80c0030b 	ldhu	r3,12(r16)
 a002040:	18fbffcc 	andi	r3,r3,61439
 a002044:	80c0030d 	sth	r3,12(r16)
 a002048:	dfc00117 	ldw	ra,4(sp)
 a00204c:	dc000017 	ldw	r16,0(sp)
 a002050:	dec00204 	addi	sp,sp,8
 a002054:	f800283a 	ret

0a002058 <__seofread>:
 a002058:	0005883a 	mov	r2,zero
 a00205c:	f800283a 	ret

0a002060 <__swrite>:
 a002060:	2880030b 	ldhu	r2,12(r5)
 a002064:	defffb04 	addi	sp,sp,-20
 a002068:	dcc00315 	stw	r19,12(sp)
 a00206c:	dc800215 	stw	r18,8(sp)
 a002070:	dc400115 	stw	r17,4(sp)
 a002074:	dc000015 	stw	r16,0(sp)
 a002078:	dfc00415 	stw	ra,16(sp)
 a00207c:	10c0400c 	andi	r3,r2,256
 a002080:	2821883a 	mov	r16,r5
 a002084:	2023883a 	mov	r17,r4
 a002088:	3025883a 	mov	r18,r6
 a00208c:	3827883a 	mov	r19,r7
 a002090:	18000526 	beq	r3,zero,a0020a8 <__swrite+0x48>
 a002094:	2940038f 	ldh	r5,14(r5)
 a002098:	01c00084 	movi	r7,2
 a00209c:	000d883a 	mov	r6,zero
 a0020a0:	a002b280 	call	a002b28 <_lseek_r>
 a0020a4:	8080030b 	ldhu	r2,12(r16)
 a0020a8:	8140038f 	ldh	r5,14(r16)
 a0020ac:	10bbffcc 	andi	r2,r2,61439
 a0020b0:	980f883a 	mov	r7,r19
 a0020b4:	900d883a 	mov	r6,r18
 a0020b8:	8809883a 	mov	r4,r17
 a0020bc:	8080030d 	sth	r2,12(r16)
 a0020c0:	dfc00417 	ldw	ra,16(sp)
 a0020c4:	dcc00317 	ldw	r19,12(sp)
 a0020c8:	dc800217 	ldw	r18,8(sp)
 a0020cc:	dc400117 	ldw	r17,4(sp)
 a0020d0:	dc000017 	ldw	r16,0(sp)
 a0020d4:	dec00504 	addi	sp,sp,20
 a0020d8:	a0021401 	jmpi	a002140 <_write_r>

0a0020dc <__sseek>:
 a0020dc:	defffe04 	addi	sp,sp,-8
 a0020e0:	dc000015 	stw	r16,0(sp)
 a0020e4:	2821883a 	mov	r16,r5
 a0020e8:	2940038f 	ldh	r5,14(r5)
 a0020ec:	dfc00115 	stw	ra,4(sp)
 a0020f0:	a002b280 	call	a002b28 <_lseek_r>
 a0020f4:	00ffffc4 	movi	r3,-1
 a0020f8:	10c00826 	beq	r2,r3,a00211c <__sseek+0x40>
 a0020fc:	80c0030b 	ldhu	r3,12(r16)
 a002100:	80801415 	stw	r2,80(r16)
 a002104:	18c40014 	ori	r3,r3,4096
 a002108:	80c0030d 	sth	r3,12(r16)
 a00210c:	dfc00117 	ldw	ra,4(sp)
 a002110:	dc000017 	ldw	r16,0(sp)
 a002114:	dec00204 	addi	sp,sp,8
 a002118:	f800283a 	ret
 a00211c:	80c0030b 	ldhu	r3,12(r16)
 a002120:	18fbffcc 	andi	r3,r3,61439
 a002124:	80c0030d 	sth	r3,12(r16)
 a002128:	dfc00117 	ldw	ra,4(sp)
 a00212c:	dc000017 	ldw	r16,0(sp)
 a002130:	dec00204 	addi	sp,sp,8
 a002134:	f800283a 	ret

0a002138 <__sclose>:
 a002138:	2940038f 	ldh	r5,14(r5)
 a00213c:	a0022f41 	jmpi	a0022f4 <_close_r>

0a002140 <_write_r>:
 a002140:	defffd04 	addi	sp,sp,-12
 a002144:	2805883a 	mov	r2,r5
 a002148:	dc000015 	stw	r16,0(sp)
 a00214c:	04028074 	movhi	r16,2561
 a002150:	dc400115 	stw	r17,4(sp)
 a002154:	300b883a 	mov	r5,r6
 a002158:	842b4f04 	addi	r16,r16,-21188
 a00215c:	2023883a 	mov	r17,r4
 a002160:	380d883a 	mov	r6,r7
 a002164:	1009883a 	mov	r4,r2
 a002168:	dfc00215 	stw	ra,8(sp)
 a00216c:	80000015 	stw	zero,0(r16)
 a002170:	a0038c40 	call	a0038c4 <write>
 a002174:	00ffffc4 	movi	r3,-1
 a002178:	10c00526 	beq	r2,r3,a002190 <_write_r+0x50>
 a00217c:	dfc00217 	ldw	ra,8(sp)
 a002180:	dc400117 	ldw	r17,4(sp)
 a002184:	dc000017 	ldw	r16,0(sp)
 a002188:	dec00304 	addi	sp,sp,12
 a00218c:	f800283a 	ret
 a002190:	80c00017 	ldw	r3,0(r16)
 a002194:	183ff926 	beq	r3,zero,a00217c <__alt_mem_flash+0xfe00117c>
 a002198:	88c00015 	stw	r3,0(r17)
 a00219c:	003ff706 	br	a00217c <__alt_mem_flash+0xfe00117c>

0a0021a0 <__swsetup_r>:
 a0021a0:	00828074 	movhi	r2,2561
 a0021a4:	defffd04 	addi	sp,sp,-12
 a0021a8:	10a43104 	addi	r2,r2,-28476
 a0021ac:	dc400115 	stw	r17,4(sp)
 a0021b0:	2023883a 	mov	r17,r4
 a0021b4:	11000017 	ldw	r4,0(r2)
 a0021b8:	dc000015 	stw	r16,0(sp)
 a0021bc:	dfc00215 	stw	ra,8(sp)
 a0021c0:	2821883a 	mov	r16,r5
 a0021c4:	20000226 	beq	r4,zero,a0021d0 <__swsetup_r+0x30>
 a0021c8:	20800e17 	ldw	r2,56(r4)
 a0021cc:	10003126 	beq	r2,zero,a002294 <__swsetup_r+0xf4>
 a0021d0:	8080030b 	ldhu	r2,12(r16)
 a0021d4:	10c0020c 	andi	r3,r2,8
 a0021d8:	1009883a 	mov	r4,r2
 a0021dc:	18000f26 	beq	r3,zero,a00221c <__swsetup_r+0x7c>
 a0021e0:	80c00417 	ldw	r3,16(r16)
 a0021e4:	18001526 	beq	r3,zero,a00223c <__swsetup_r+0x9c>
 a0021e8:	1100004c 	andi	r4,r2,1
 a0021ec:	20001c1e 	bne	r4,zero,a002260 <__swsetup_r+0xc0>
 a0021f0:	1080008c 	andi	r2,r2,2
 a0021f4:	1000291e 	bne	r2,zero,a00229c <__swsetup_r+0xfc>
 a0021f8:	80800517 	ldw	r2,20(r16)
 a0021fc:	80800215 	stw	r2,8(r16)
 a002200:	18001c26 	beq	r3,zero,a002274 <__swsetup_r+0xd4>
 a002204:	0005883a 	mov	r2,zero
 a002208:	dfc00217 	ldw	ra,8(sp)
 a00220c:	dc400117 	ldw	r17,4(sp)
 a002210:	dc000017 	ldw	r16,0(sp)
 a002214:	dec00304 	addi	sp,sp,12
 a002218:	f800283a 	ret
 a00221c:	2080040c 	andi	r2,r4,16
 a002220:	10002e26 	beq	r2,zero,a0022dc <__swsetup_r+0x13c>
 a002224:	2080010c 	andi	r2,r4,4
 a002228:	10001e1e 	bne	r2,zero,a0022a4 <__swsetup_r+0x104>
 a00222c:	80c00417 	ldw	r3,16(r16)
 a002230:	20800214 	ori	r2,r4,8
 a002234:	8080030d 	sth	r2,12(r16)
 a002238:	183feb1e 	bne	r3,zero,a0021e8 <__alt_mem_flash+0xfe0011e8>
 a00223c:	1100a00c 	andi	r4,r2,640
 a002240:	01408004 	movi	r5,512
 a002244:	217fe826 	beq	r4,r5,a0021e8 <__alt_mem_flash+0xfe0011e8>
 a002248:	800b883a 	mov	r5,r16
 a00224c:	8809883a 	mov	r4,r17
 a002250:	a002b880 	call	a002b88 <__smakebuf_r>
 a002254:	8080030b 	ldhu	r2,12(r16)
 a002258:	80c00417 	ldw	r3,16(r16)
 a00225c:	003fe206 	br	a0021e8 <__alt_mem_flash+0xfe0011e8>
 a002260:	80800517 	ldw	r2,20(r16)
 a002264:	80000215 	stw	zero,8(r16)
 a002268:	0085c83a 	sub	r2,zero,r2
 a00226c:	80800615 	stw	r2,24(r16)
 a002270:	183fe41e 	bne	r3,zero,a002204 <__alt_mem_flash+0xfe001204>
 a002274:	80c0030b 	ldhu	r3,12(r16)
 a002278:	0005883a 	mov	r2,zero
 a00227c:	1900200c 	andi	r4,r3,128
 a002280:	203fe126 	beq	r4,zero,a002208 <__alt_mem_flash+0xfe001208>
 a002284:	18c01014 	ori	r3,r3,64
 a002288:	80c0030d 	sth	r3,12(r16)
 a00228c:	00bfffc4 	movi	r2,-1
 a002290:	003fdd06 	br	a002208 <__alt_mem_flash+0xfe001208>
 a002294:	a0006f00 	call	a0006f0 <__sinit>
 a002298:	003fcd06 	br	a0021d0 <__alt_mem_flash+0xfe0011d0>
 a00229c:	0005883a 	mov	r2,zero
 a0022a0:	003fd606 	br	a0021fc <__alt_mem_flash+0xfe0011fc>
 a0022a4:	81400c17 	ldw	r5,48(r16)
 a0022a8:	28000626 	beq	r5,zero,a0022c4 <__swsetup_r+0x124>
 a0022ac:	80801004 	addi	r2,r16,64
 a0022b0:	28800326 	beq	r5,r2,a0022c0 <__swsetup_r+0x120>
 a0022b4:	8809883a 	mov	r4,r17
 a0022b8:	a0028180 	call	a002818 <_free_r>
 a0022bc:	8100030b 	ldhu	r4,12(r16)
 a0022c0:	80000c15 	stw	zero,48(r16)
 a0022c4:	80c00417 	ldw	r3,16(r16)
 a0022c8:	00bff6c4 	movi	r2,-37
 a0022cc:	1108703a 	and	r4,r2,r4
 a0022d0:	80000115 	stw	zero,4(r16)
 a0022d4:	80c00015 	stw	r3,0(r16)
 a0022d8:	003fd506 	br	a002230 <__alt_mem_flash+0xfe001230>
 a0022dc:	00800244 	movi	r2,9
 a0022e0:	88800015 	stw	r2,0(r17)
 a0022e4:	20801014 	ori	r2,r4,64
 a0022e8:	8080030d 	sth	r2,12(r16)
 a0022ec:	00bfffc4 	movi	r2,-1
 a0022f0:	003fc506 	br	a002208 <__alt_mem_flash+0xfe001208>

0a0022f4 <_close_r>:
 a0022f4:	defffd04 	addi	sp,sp,-12
 a0022f8:	dc000015 	stw	r16,0(sp)
 a0022fc:	04028074 	movhi	r16,2561
 a002300:	dc400115 	stw	r17,4(sp)
 a002304:	842b4f04 	addi	r16,r16,-21188
 a002308:	2023883a 	mov	r17,r4
 a00230c:	2809883a 	mov	r4,r5
 a002310:	dfc00215 	stw	ra,8(sp)
 a002314:	80000015 	stw	zero,0(r16)
 a002318:	a00306c0 	call	a00306c <close>
 a00231c:	00ffffc4 	movi	r3,-1
 a002320:	10c00526 	beq	r2,r3,a002338 <_close_r+0x44>
 a002324:	dfc00217 	ldw	ra,8(sp)
 a002328:	dc400117 	ldw	r17,4(sp)
 a00232c:	dc000017 	ldw	r16,0(sp)
 a002330:	dec00304 	addi	sp,sp,12
 a002334:	f800283a 	ret
 a002338:	80c00017 	ldw	r3,0(r16)
 a00233c:	183ff926 	beq	r3,zero,a002324 <__alt_mem_flash+0xfe001324>
 a002340:	88c00015 	stw	r3,0(r17)
 a002344:	003ff706 	br	a002324 <__alt_mem_flash+0xfe001324>

0a002348 <_fclose_r>:
 a002348:	28003926 	beq	r5,zero,a002430 <_fclose_r+0xe8>
 a00234c:	defffc04 	addi	sp,sp,-16
 a002350:	dc400115 	stw	r17,4(sp)
 a002354:	dc000015 	stw	r16,0(sp)
 a002358:	dfc00315 	stw	ra,12(sp)
 a00235c:	dc800215 	stw	r18,8(sp)
 a002360:	2023883a 	mov	r17,r4
 a002364:	2821883a 	mov	r16,r5
 a002368:	20000226 	beq	r4,zero,a002374 <_fclose_r+0x2c>
 a00236c:	20800e17 	ldw	r2,56(r4)
 a002370:	10002726 	beq	r2,zero,a002410 <_fclose_r+0xc8>
 a002374:	8080030f 	ldh	r2,12(r16)
 a002378:	1000071e 	bne	r2,zero,a002398 <_fclose_r+0x50>
 a00237c:	0005883a 	mov	r2,zero
 a002380:	dfc00317 	ldw	ra,12(sp)
 a002384:	dc800217 	ldw	r18,8(sp)
 a002388:	dc400117 	ldw	r17,4(sp)
 a00238c:	dc000017 	ldw	r16,0(sp)
 a002390:	dec00404 	addi	sp,sp,16
 a002394:	f800283a 	ret
 a002398:	800b883a 	mov	r5,r16
 a00239c:	8809883a 	mov	r4,r17
 a0023a0:	a00244c0 	call	a00244c <__sflush_r>
 a0023a4:	1025883a 	mov	r18,r2
 a0023a8:	80800b17 	ldw	r2,44(r16)
 a0023ac:	10000426 	beq	r2,zero,a0023c0 <_fclose_r+0x78>
 a0023b0:	81400717 	ldw	r5,28(r16)
 a0023b4:	8809883a 	mov	r4,r17
 a0023b8:	103ee83a 	callr	r2
 a0023bc:	10001616 	blt	r2,zero,a002418 <_fclose_r+0xd0>
 a0023c0:	8080030b 	ldhu	r2,12(r16)
 a0023c4:	1080200c 	andi	r2,r2,128
 a0023c8:	1000151e 	bne	r2,zero,a002420 <_fclose_r+0xd8>
 a0023cc:	81400c17 	ldw	r5,48(r16)
 a0023d0:	28000526 	beq	r5,zero,a0023e8 <_fclose_r+0xa0>
 a0023d4:	80801004 	addi	r2,r16,64
 a0023d8:	28800226 	beq	r5,r2,a0023e4 <_fclose_r+0x9c>
 a0023dc:	8809883a 	mov	r4,r17
 a0023e0:	a0028180 	call	a002818 <_free_r>
 a0023e4:	80000c15 	stw	zero,48(r16)
 a0023e8:	81401117 	ldw	r5,68(r16)
 a0023ec:	28000326 	beq	r5,zero,a0023fc <_fclose_r+0xb4>
 a0023f0:	8809883a 	mov	r4,r17
 a0023f4:	a0028180 	call	a002818 <_free_r>
 a0023f8:	80001115 	stw	zero,68(r16)
 a0023fc:	a0007000 	call	a000700 <__sfp_lock_acquire>
 a002400:	8000030d 	sth	zero,12(r16)
 a002404:	a0007040 	call	a000704 <__sfp_lock_release>
 a002408:	9005883a 	mov	r2,r18
 a00240c:	003fdc06 	br	a002380 <__alt_mem_flash+0xfe001380>
 a002410:	a0006f00 	call	a0006f0 <__sinit>
 a002414:	003fd706 	br	a002374 <__alt_mem_flash+0xfe001374>
 a002418:	04bfffc4 	movi	r18,-1
 a00241c:	003fe806 	br	a0023c0 <__alt_mem_flash+0xfe0013c0>
 a002420:	81400417 	ldw	r5,16(r16)
 a002424:	8809883a 	mov	r4,r17
 a002428:	a0028180 	call	a002818 <_free_r>
 a00242c:	003fe706 	br	a0023cc <__alt_mem_flash+0xfe0013cc>
 a002430:	0005883a 	mov	r2,zero
 a002434:	f800283a 	ret

0a002438 <fclose>:
 a002438:	00828074 	movhi	r2,2561
 a00243c:	10a43104 	addi	r2,r2,-28476
 a002440:	200b883a 	mov	r5,r4
 a002444:	11000017 	ldw	r4,0(r2)
 a002448:	a0023481 	jmpi	a002348 <_fclose_r>

0a00244c <__sflush_r>:
 a00244c:	2880030b 	ldhu	r2,12(r5)
 a002450:	defffb04 	addi	sp,sp,-20
 a002454:	dcc00315 	stw	r19,12(sp)
 a002458:	dc400115 	stw	r17,4(sp)
 a00245c:	dfc00415 	stw	ra,16(sp)
 a002460:	dc800215 	stw	r18,8(sp)
 a002464:	dc000015 	stw	r16,0(sp)
 a002468:	10c0020c 	andi	r3,r2,8
 a00246c:	2823883a 	mov	r17,r5
 a002470:	2027883a 	mov	r19,r4
 a002474:	1800311e 	bne	r3,zero,a00253c <__sflush_r+0xf0>
 a002478:	28c00117 	ldw	r3,4(r5)
 a00247c:	10820014 	ori	r2,r2,2048
 a002480:	2880030d 	sth	r2,12(r5)
 a002484:	00c04b0e 	bge	zero,r3,a0025b4 <__sflush_r+0x168>
 a002488:	8a000a17 	ldw	r8,40(r17)
 a00248c:	40002326 	beq	r8,zero,a00251c <__sflush_r+0xd0>
 a002490:	9c000017 	ldw	r16,0(r19)
 a002494:	10c4000c 	andi	r3,r2,4096
 a002498:	98000015 	stw	zero,0(r19)
 a00249c:	18004826 	beq	r3,zero,a0025c0 <__sflush_r+0x174>
 a0024a0:	89801417 	ldw	r6,80(r17)
 a0024a4:	10c0010c 	andi	r3,r2,4
 a0024a8:	18000626 	beq	r3,zero,a0024c4 <__sflush_r+0x78>
 a0024ac:	88c00117 	ldw	r3,4(r17)
 a0024b0:	88800c17 	ldw	r2,48(r17)
 a0024b4:	30cdc83a 	sub	r6,r6,r3
 a0024b8:	10000226 	beq	r2,zero,a0024c4 <__sflush_r+0x78>
 a0024bc:	88800f17 	ldw	r2,60(r17)
 a0024c0:	308dc83a 	sub	r6,r6,r2
 a0024c4:	89400717 	ldw	r5,28(r17)
 a0024c8:	000f883a 	mov	r7,zero
 a0024cc:	9809883a 	mov	r4,r19
 a0024d0:	403ee83a 	callr	r8
 a0024d4:	00ffffc4 	movi	r3,-1
 a0024d8:	10c04426 	beq	r2,r3,a0025ec <__sflush_r+0x1a0>
 a0024dc:	88c0030b 	ldhu	r3,12(r17)
 a0024e0:	89000417 	ldw	r4,16(r17)
 a0024e4:	88000115 	stw	zero,4(r17)
 a0024e8:	197dffcc 	andi	r5,r3,63487
 a0024ec:	8940030d 	sth	r5,12(r17)
 a0024f0:	89000015 	stw	r4,0(r17)
 a0024f4:	18c4000c 	andi	r3,r3,4096
 a0024f8:	18002c1e 	bne	r3,zero,a0025ac <__sflush_r+0x160>
 a0024fc:	89400c17 	ldw	r5,48(r17)
 a002500:	9c000015 	stw	r16,0(r19)
 a002504:	28000526 	beq	r5,zero,a00251c <__sflush_r+0xd0>
 a002508:	88801004 	addi	r2,r17,64
 a00250c:	28800226 	beq	r5,r2,a002518 <__sflush_r+0xcc>
 a002510:	9809883a 	mov	r4,r19
 a002514:	a0028180 	call	a002818 <_free_r>
 a002518:	88000c15 	stw	zero,48(r17)
 a00251c:	0005883a 	mov	r2,zero
 a002520:	dfc00417 	ldw	ra,16(sp)
 a002524:	dcc00317 	ldw	r19,12(sp)
 a002528:	dc800217 	ldw	r18,8(sp)
 a00252c:	dc400117 	ldw	r17,4(sp)
 a002530:	dc000017 	ldw	r16,0(sp)
 a002534:	dec00504 	addi	sp,sp,20
 a002538:	f800283a 	ret
 a00253c:	2c800417 	ldw	r18,16(r5)
 a002540:	903ff626 	beq	r18,zero,a00251c <__alt_mem_flash+0xfe00151c>
 a002544:	2c000017 	ldw	r16,0(r5)
 a002548:	108000cc 	andi	r2,r2,3
 a00254c:	2c800015 	stw	r18,0(r5)
 a002550:	84a1c83a 	sub	r16,r16,r18
 a002554:	1000131e 	bne	r2,zero,a0025a4 <__sflush_r+0x158>
 a002558:	28800517 	ldw	r2,20(r5)
 a00255c:	88800215 	stw	r2,8(r17)
 a002560:	04000316 	blt	zero,r16,a002570 <__sflush_r+0x124>
 a002564:	003fed06 	br	a00251c <__alt_mem_flash+0xfe00151c>
 a002568:	90a5883a 	add	r18,r18,r2
 a00256c:	043feb0e 	bge	zero,r16,a00251c <__alt_mem_flash+0xfe00151c>
 a002570:	88800917 	ldw	r2,36(r17)
 a002574:	89400717 	ldw	r5,28(r17)
 a002578:	800f883a 	mov	r7,r16
 a00257c:	900d883a 	mov	r6,r18
 a002580:	9809883a 	mov	r4,r19
 a002584:	103ee83a 	callr	r2
 a002588:	80a1c83a 	sub	r16,r16,r2
 a00258c:	00bff616 	blt	zero,r2,a002568 <__alt_mem_flash+0xfe001568>
 a002590:	88c0030b 	ldhu	r3,12(r17)
 a002594:	00bfffc4 	movi	r2,-1
 a002598:	18c01014 	ori	r3,r3,64
 a00259c:	88c0030d 	sth	r3,12(r17)
 a0025a0:	003fdf06 	br	a002520 <__alt_mem_flash+0xfe001520>
 a0025a4:	0005883a 	mov	r2,zero
 a0025a8:	003fec06 	br	a00255c <__alt_mem_flash+0xfe00155c>
 a0025ac:	88801415 	stw	r2,80(r17)
 a0025b0:	003fd206 	br	a0024fc <__alt_mem_flash+0xfe0014fc>
 a0025b4:	28c00f17 	ldw	r3,60(r5)
 a0025b8:	00ffb316 	blt	zero,r3,a002488 <__alt_mem_flash+0xfe001488>
 a0025bc:	003fd706 	br	a00251c <__alt_mem_flash+0xfe00151c>
 a0025c0:	89400717 	ldw	r5,28(r17)
 a0025c4:	000d883a 	mov	r6,zero
 a0025c8:	01c00044 	movi	r7,1
 a0025cc:	9809883a 	mov	r4,r19
 a0025d0:	403ee83a 	callr	r8
 a0025d4:	100d883a 	mov	r6,r2
 a0025d8:	00bfffc4 	movi	r2,-1
 a0025dc:	30801426 	beq	r6,r2,a002630 <__sflush_r+0x1e4>
 a0025e0:	8880030b 	ldhu	r2,12(r17)
 a0025e4:	8a000a17 	ldw	r8,40(r17)
 a0025e8:	003fae06 	br	a0024a4 <__alt_mem_flash+0xfe0014a4>
 a0025ec:	98c00017 	ldw	r3,0(r19)
 a0025f0:	183fba26 	beq	r3,zero,a0024dc <__alt_mem_flash+0xfe0014dc>
 a0025f4:	01000744 	movi	r4,29
 a0025f8:	19000626 	beq	r3,r4,a002614 <__sflush_r+0x1c8>
 a0025fc:	01000584 	movi	r4,22
 a002600:	19000426 	beq	r3,r4,a002614 <__sflush_r+0x1c8>
 a002604:	88c0030b 	ldhu	r3,12(r17)
 a002608:	18c01014 	ori	r3,r3,64
 a00260c:	88c0030d 	sth	r3,12(r17)
 a002610:	003fc306 	br	a002520 <__alt_mem_flash+0xfe001520>
 a002614:	8880030b 	ldhu	r2,12(r17)
 a002618:	88c00417 	ldw	r3,16(r17)
 a00261c:	88000115 	stw	zero,4(r17)
 a002620:	10bdffcc 	andi	r2,r2,63487
 a002624:	8880030d 	sth	r2,12(r17)
 a002628:	88c00015 	stw	r3,0(r17)
 a00262c:	003fb306 	br	a0024fc <__alt_mem_flash+0xfe0014fc>
 a002630:	98800017 	ldw	r2,0(r19)
 a002634:	103fea26 	beq	r2,zero,a0025e0 <__alt_mem_flash+0xfe0015e0>
 a002638:	00c00744 	movi	r3,29
 a00263c:	10c00226 	beq	r2,r3,a002648 <__sflush_r+0x1fc>
 a002640:	00c00584 	movi	r3,22
 a002644:	10c0031e 	bne	r2,r3,a002654 <__sflush_r+0x208>
 a002648:	9c000015 	stw	r16,0(r19)
 a00264c:	0005883a 	mov	r2,zero
 a002650:	003fb306 	br	a002520 <__alt_mem_flash+0xfe001520>
 a002654:	88c0030b 	ldhu	r3,12(r17)
 a002658:	3005883a 	mov	r2,r6
 a00265c:	18c01014 	ori	r3,r3,64
 a002660:	88c0030d 	sth	r3,12(r17)
 a002664:	003fae06 	br	a002520 <__alt_mem_flash+0xfe001520>

0a002668 <_fflush_r>:
 a002668:	defffd04 	addi	sp,sp,-12
 a00266c:	dc000115 	stw	r16,4(sp)
 a002670:	dfc00215 	stw	ra,8(sp)
 a002674:	2021883a 	mov	r16,r4
 a002678:	20000226 	beq	r4,zero,a002684 <_fflush_r+0x1c>
 a00267c:	20800e17 	ldw	r2,56(r4)
 a002680:	10000c26 	beq	r2,zero,a0026b4 <_fflush_r+0x4c>
 a002684:	2880030f 	ldh	r2,12(r5)
 a002688:	1000051e 	bne	r2,zero,a0026a0 <_fflush_r+0x38>
 a00268c:	0005883a 	mov	r2,zero
 a002690:	dfc00217 	ldw	ra,8(sp)
 a002694:	dc000117 	ldw	r16,4(sp)
 a002698:	dec00304 	addi	sp,sp,12
 a00269c:	f800283a 	ret
 a0026a0:	8009883a 	mov	r4,r16
 a0026a4:	dfc00217 	ldw	ra,8(sp)
 a0026a8:	dc000117 	ldw	r16,4(sp)
 a0026ac:	dec00304 	addi	sp,sp,12
 a0026b0:	a00244c1 	jmpi	a00244c <__sflush_r>
 a0026b4:	d9400015 	stw	r5,0(sp)
 a0026b8:	a0006f00 	call	a0006f0 <__sinit>
 a0026bc:	d9400017 	ldw	r5,0(sp)
 a0026c0:	003ff006 	br	a002684 <__alt_mem_flash+0xfe001684>

0a0026c4 <fflush>:
 a0026c4:	20000526 	beq	r4,zero,a0026dc <fflush+0x18>
 a0026c8:	00828074 	movhi	r2,2561
 a0026cc:	10a43104 	addi	r2,r2,-28476
 a0026d0:	200b883a 	mov	r5,r4
 a0026d4:	11000017 	ldw	r4,0(r2)
 a0026d8:	a0026681 	jmpi	a002668 <_fflush_r>
 a0026dc:	00828074 	movhi	r2,2561
 a0026e0:	10a43004 	addi	r2,r2,-28480
 a0026e4:	11000017 	ldw	r4,0(r2)
 a0026e8:	01428034 	movhi	r5,2560
 a0026ec:	29499a04 	addi	r5,r5,9832
 a0026f0:	a000ccc1 	jmpi	a000ccc <_fwalk_reent>

0a0026f4 <_malloc_trim_r>:
 a0026f4:	defffb04 	addi	sp,sp,-20
 a0026f8:	dcc00315 	stw	r19,12(sp)
 a0026fc:	04c28034 	movhi	r19,2560
 a002700:	dc800215 	stw	r18,8(sp)
 a002704:	dc400115 	stw	r17,4(sp)
 a002708:	dc000015 	stw	r16,0(sp)
 a00270c:	dfc00415 	stw	ra,16(sp)
 a002710:	2821883a 	mov	r16,r5
 a002714:	9cde3d04 	addi	r19,r19,30964
 a002718:	2025883a 	mov	r18,r4
 a00271c:	a0035cc0 	call	a0035cc <__malloc_lock>
 a002720:	98800217 	ldw	r2,8(r19)
 a002724:	14400117 	ldw	r17,4(r2)
 a002728:	00bfff04 	movi	r2,-4
 a00272c:	88a2703a 	and	r17,r17,r2
 a002730:	8c21c83a 	sub	r16,r17,r16
 a002734:	8403fbc4 	addi	r16,r16,4079
 a002738:	8020d33a 	srli	r16,r16,12
 a00273c:	0083ffc4 	movi	r2,4095
 a002740:	843fffc4 	addi	r16,r16,-1
 a002744:	8020933a 	slli	r16,r16,12
 a002748:	1400060e 	bge	r2,r16,a002764 <_malloc_trim_r+0x70>
 a00274c:	000b883a 	mov	r5,zero
 a002750:	9009883a 	mov	r4,r18
 a002754:	a001fb00 	call	a001fb0 <_sbrk_r>
 a002758:	98c00217 	ldw	r3,8(r19)
 a00275c:	1c47883a 	add	r3,r3,r17
 a002760:	10c00a26 	beq	r2,r3,a00278c <_malloc_trim_r+0x98>
 a002764:	9009883a 	mov	r4,r18
 a002768:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a00276c:	0005883a 	mov	r2,zero
 a002770:	dfc00417 	ldw	ra,16(sp)
 a002774:	dcc00317 	ldw	r19,12(sp)
 a002778:	dc800217 	ldw	r18,8(sp)
 a00277c:	dc400117 	ldw	r17,4(sp)
 a002780:	dc000017 	ldw	r16,0(sp)
 a002784:	dec00504 	addi	sp,sp,20
 a002788:	f800283a 	ret
 a00278c:	040bc83a 	sub	r5,zero,r16
 a002790:	9009883a 	mov	r4,r18
 a002794:	a001fb00 	call	a001fb0 <_sbrk_r>
 a002798:	00ffffc4 	movi	r3,-1
 a00279c:	10c00d26 	beq	r2,r3,a0027d4 <_malloc_trim_r+0xe0>
 a0027a0:	00c28074 	movhi	r3,2561
 a0027a4:	18eb5704 	addi	r3,r3,-21156
 a0027a8:	18800017 	ldw	r2,0(r3)
 a0027ac:	99000217 	ldw	r4,8(r19)
 a0027b0:	8c23c83a 	sub	r17,r17,r16
 a0027b4:	8c400054 	ori	r17,r17,1
 a0027b8:	1421c83a 	sub	r16,r2,r16
 a0027bc:	24400115 	stw	r17,4(r4)
 a0027c0:	9009883a 	mov	r4,r18
 a0027c4:	1c000015 	stw	r16,0(r3)
 a0027c8:	a0035f00 	call	a0035f0 <__malloc_unlock>
 a0027cc:	00800044 	movi	r2,1
 a0027d0:	003fe706 	br	a002770 <__alt_mem_flash+0xfe001770>
 a0027d4:	000b883a 	mov	r5,zero
 a0027d8:	9009883a 	mov	r4,r18
 a0027dc:	a001fb00 	call	a001fb0 <_sbrk_r>
 a0027e0:	99000217 	ldw	r4,8(r19)
 a0027e4:	014003c4 	movi	r5,15
 a0027e8:	1107c83a 	sub	r3,r2,r4
 a0027ec:	28ffdd0e 	bge	r5,r3,a002764 <__alt_mem_flash+0xfe001764>
 a0027f0:	01428074 	movhi	r5,2561
 a0027f4:	29643204 	addi	r5,r5,-28472
 a0027f8:	29400017 	ldw	r5,0(r5)
 a0027fc:	18c00054 	ori	r3,r3,1
 a002800:	20c00115 	stw	r3,4(r4)
 a002804:	00c28074 	movhi	r3,2561
 a002808:	1145c83a 	sub	r2,r2,r5
 a00280c:	18eb5704 	addi	r3,r3,-21156
 a002810:	18800015 	stw	r2,0(r3)
 a002814:	003fd306 	br	a002764 <__alt_mem_flash+0xfe001764>

0a002818 <_free_r>:
 a002818:	28004126 	beq	r5,zero,a002920 <_free_r+0x108>
 a00281c:	defffd04 	addi	sp,sp,-12
 a002820:	dc400115 	stw	r17,4(sp)
 a002824:	dc000015 	stw	r16,0(sp)
 a002828:	2023883a 	mov	r17,r4
 a00282c:	2821883a 	mov	r16,r5
 a002830:	dfc00215 	stw	ra,8(sp)
 a002834:	a0035cc0 	call	a0035cc <__malloc_lock>
 a002838:	81ffff17 	ldw	r7,-4(r16)
 a00283c:	00bfff84 	movi	r2,-2
 a002840:	01028034 	movhi	r4,2560
 a002844:	81bffe04 	addi	r6,r16,-8
 a002848:	3884703a 	and	r2,r7,r2
 a00284c:	211e3d04 	addi	r4,r4,30964
 a002850:	308b883a 	add	r5,r6,r2
 a002854:	2a400117 	ldw	r9,4(r5)
 a002858:	22000217 	ldw	r8,8(r4)
 a00285c:	00ffff04 	movi	r3,-4
 a002860:	48c6703a 	and	r3,r9,r3
 a002864:	2a005726 	beq	r5,r8,a0029c4 <_free_r+0x1ac>
 a002868:	28c00115 	stw	r3,4(r5)
 a00286c:	39c0004c 	andi	r7,r7,1
 a002870:	3800091e 	bne	r7,zero,a002898 <_free_r+0x80>
 a002874:	823ffe17 	ldw	r8,-8(r16)
 a002878:	22400204 	addi	r9,r4,8
 a00287c:	320dc83a 	sub	r6,r6,r8
 a002880:	31c00217 	ldw	r7,8(r6)
 a002884:	1205883a 	add	r2,r2,r8
 a002888:	3a406526 	beq	r7,r9,a002a20 <_free_r+0x208>
 a00288c:	32000317 	ldw	r8,12(r6)
 a002890:	3a000315 	stw	r8,12(r7)
 a002894:	41c00215 	stw	r7,8(r8)
 a002898:	28cf883a 	add	r7,r5,r3
 a00289c:	39c00117 	ldw	r7,4(r7)
 a0028a0:	39c0004c 	andi	r7,r7,1
 a0028a4:	38003a26 	beq	r7,zero,a002990 <_free_r+0x178>
 a0028a8:	10c00054 	ori	r3,r2,1
 a0028ac:	30c00115 	stw	r3,4(r6)
 a0028b0:	3087883a 	add	r3,r6,r2
 a0028b4:	18800015 	stw	r2,0(r3)
 a0028b8:	00c07fc4 	movi	r3,511
 a0028bc:	18801936 	bltu	r3,r2,a002924 <_free_r+0x10c>
 a0028c0:	1004d0fa 	srli	r2,r2,3
 a0028c4:	01c00044 	movi	r7,1
 a0028c8:	21400117 	ldw	r5,4(r4)
 a0028cc:	10c00044 	addi	r3,r2,1
 a0028d0:	18c7883a 	add	r3,r3,r3
 a0028d4:	1005d0ba 	srai	r2,r2,2
 a0028d8:	18c7883a 	add	r3,r3,r3
 a0028dc:	18c7883a 	add	r3,r3,r3
 a0028e0:	1907883a 	add	r3,r3,r4
 a0028e4:	3884983a 	sll	r2,r7,r2
 a0028e8:	19c00017 	ldw	r7,0(r3)
 a0028ec:	1a3ffe04 	addi	r8,r3,-8
 a0028f0:	1144b03a 	or	r2,r2,r5
 a0028f4:	32000315 	stw	r8,12(r6)
 a0028f8:	31c00215 	stw	r7,8(r6)
 a0028fc:	20800115 	stw	r2,4(r4)
 a002900:	19800015 	stw	r6,0(r3)
 a002904:	39800315 	stw	r6,12(r7)
 a002908:	8809883a 	mov	r4,r17
 a00290c:	dfc00217 	ldw	ra,8(sp)
 a002910:	dc400117 	ldw	r17,4(sp)
 a002914:	dc000017 	ldw	r16,0(sp)
 a002918:	dec00304 	addi	sp,sp,12
 a00291c:	a0035f01 	jmpi	a0035f0 <__malloc_unlock>
 a002920:	f800283a 	ret
 a002924:	100ad27a 	srli	r5,r2,9
 a002928:	00c00104 	movi	r3,4
 a00292c:	19404a36 	bltu	r3,r5,a002a58 <_free_r+0x240>
 a002930:	100ad1ba 	srli	r5,r2,6
 a002934:	28c00e44 	addi	r3,r5,57
 a002938:	18c7883a 	add	r3,r3,r3
 a00293c:	29400e04 	addi	r5,r5,56
 a002940:	18c7883a 	add	r3,r3,r3
 a002944:	18c7883a 	add	r3,r3,r3
 a002948:	1909883a 	add	r4,r3,r4
 a00294c:	20c00017 	ldw	r3,0(r4)
 a002950:	01c28034 	movhi	r7,2560
 a002954:	213ffe04 	addi	r4,r4,-8
 a002958:	39de3d04 	addi	r7,r7,30964
 a00295c:	20c04426 	beq	r4,r3,a002a70 <_free_r+0x258>
 a002960:	01ffff04 	movi	r7,-4
 a002964:	19400117 	ldw	r5,4(r3)
 a002968:	29ca703a 	and	r5,r5,r7
 a00296c:	1140022e 	bgeu	r2,r5,a002978 <_free_r+0x160>
 a002970:	18c00217 	ldw	r3,8(r3)
 a002974:	20fffb1e 	bne	r4,r3,a002964 <__alt_mem_flash+0xfe001964>
 a002978:	19000317 	ldw	r4,12(r3)
 a00297c:	31000315 	stw	r4,12(r6)
 a002980:	30c00215 	stw	r3,8(r6)
 a002984:	21800215 	stw	r6,8(r4)
 a002988:	19800315 	stw	r6,12(r3)
 a00298c:	003fde06 	br	a002908 <__alt_mem_flash+0xfe001908>
 a002990:	29c00217 	ldw	r7,8(r5)
 a002994:	10c5883a 	add	r2,r2,r3
 a002998:	00c28034 	movhi	r3,2560
 a00299c:	18de3f04 	addi	r3,r3,30972
 a0029a0:	38c03b26 	beq	r7,r3,a002a90 <_free_r+0x278>
 a0029a4:	2a000317 	ldw	r8,12(r5)
 a0029a8:	11400054 	ori	r5,r2,1
 a0029ac:	3087883a 	add	r3,r6,r2
 a0029b0:	3a000315 	stw	r8,12(r7)
 a0029b4:	41c00215 	stw	r7,8(r8)
 a0029b8:	31400115 	stw	r5,4(r6)
 a0029bc:	18800015 	stw	r2,0(r3)
 a0029c0:	003fbd06 	br	a0028b8 <__alt_mem_flash+0xfe0018b8>
 a0029c4:	39c0004c 	andi	r7,r7,1
 a0029c8:	10c5883a 	add	r2,r2,r3
 a0029cc:	3800071e 	bne	r7,zero,a0029ec <_free_r+0x1d4>
 a0029d0:	81fffe17 	ldw	r7,-8(r16)
 a0029d4:	31cdc83a 	sub	r6,r6,r7
 a0029d8:	30c00317 	ldw	r3,12(r6)
 a0029dc:	31400217 	ldw	r5,8(r6)
 a0029e0:	11c5883a 	add	r2,r2,r7
 a0029e4:	28c00315 	stw	r3,12(r5)
 a0029e8:	19400215 	stw	r5,8(r3)
 a0029ec:	10c00054 	ori	r3,r2,1
 a0029f0:	30c00115 	stw	r3,4(r6)
 a0029f4:	00c28074 	movhi	r3,2561
 a0029f8:	18e43304 	addi	r3,r3,-28468
 a0029fc:	18c00017 	ldw	r3,0(r3)
 a002a00:	21800215 	stw	r6,8(r4)
 a002a04:	10ffc036 	bltu	r2,r3,a002908 <__alt_mem_flash+0xfe001908>
 a002a08:	00828074 	movhi	r2,2561
 a002a0c:	10ab4e04 	addi	r2,r2,-21192
 a002a10:	11400017 	ldw	r5,0(r2)
 a002a14:	8809883a 	mov	r4,r17
 a002a18:	a0026f40 	call	a0026f4 <_malloc_trim_r>
 a002a1c:	003fba06 	br	a002908 <__alt_mem_flash+0xfe001908>
 a002a20:	28c9883a 	add	r4,r5,r3
 a002a24:	21000117 	ldw	r4,4(r4)
 a002a28:	2100004c 	andi	r4,r4,1
 a002a2c:	2000391e 	bne	r4,zero,a002b14 <_free_r+0x2fc>
 a002a30:	29c00217 	ldw	r7,8(r5)
 a002a34:	29000317 	ldw	r4,12(r5)
 a002a38:	1885883a 	add	r2,r3,r2
 a002a3c:	10c00054 	ori	r3,r2,1
 a002a40:	39000315 	stw	r4,12(r7)
 a002a44:	21c00215 	stw	r7,8(r4)
 a002a48:	30c00115 	stw	r3,4(r6)
 a002a4c:	308d883a 	add	r6,r6,r2
 a002a50:	30800015 	stw	r2,0(r6)
 a002a54:	003fac06 	br	a002908 <__alt_mem_flash+0xfe001908>
 a002a58:	00c00504 	movi	r3,20
 a002a5c:	19401536 	bltu	r3,r5,a002ab4 <_free_r+0x29c>
 a002a60:	28c01704 	addi	r3,r5,92
 a002a64:	18c7883a 	add	r3,r3,r3
 a002a68:	294016c4 	addi	r5,r5,91
 a002a6c:	003fb406 	br	a002940 <__alt_mem_flash+0xfe001940>
 a002a70:	280bd0ba 	srai	r5,r5,2
 a002a74:	00c00044 	movi	r3,1
 a002a78:	38800117 	ldw	r2,4(r7)
 a002a7c:	194a983a 	sll	r5,r3,r5
 a002a80:	2007883a 	mov	r3,r4
 a002a84:	2884b03a 	or	r2,r5,r2
 a002a88:	38800115 	stw	r2,4(r7)
 a002a8c:	003fbb06 	br	a00297c <__alt_mem_flash+0xfe00197c>
 a002a90:	21800515 	stw	r6,20(r4)
 a002a94:	21800415 	stw	r6,16(r4)
 a002a98:	10c00054 	ori	r3,r2,1
 a002a9c:	31c00315 	stw	r7,12(r6)
 a002aa0:	31c00215 	stw	r7,8(r6)
 a002aa4:	30c00115 	stw	r3,4(r6)
 a002aa8:	308d883a 	add	r6,r6,r2
 a002aac:	30800015 	stw	r2,0(r6)
 a002ab0:	003f9506 	br	a002908 <__alt_mem_flash+0xfe001908>
 a002ab4:	00c01504 	movi	r3,84
 a002ab8:	19400536 	bltu	r3,r5,a002ad0 <_free_r+0x2b8>
 a002abc:	100ad33a 	srli	r5,r2,12
 a002ac0:	28c01bc4 	addi	r3,r5,111
 a002ac4:	18c7883a 	add	r3,r3,r3
 a002ac8:	29401b84 	addi	r5,r5,110
 a002acc:	003f9c06 	br	a002940 <__alt_mem_flash+0xfe001940>
 a002ad0:	00c05504 	movi	r3,340
 a002ad4:	19400536 	bltu	r3,r5,a002aec <_free_r+0x2d4>
 a002ad8:	100ad3fa 	srli	r5,r2,15
 a002adc:	28c01e04 	addi	r3,r5,120
 a002ae0:	18c7883a 	add	r3,r3,r3
 a002ae4:	29401dc4 	addi	r5,r5,119
 a002ae8:	003f9506 	br	a002940 <__alt_mem_flash+0xfe001940>
 a002aec:	00c15504 	movi	r3,1364
 a002af0:	19400536 	bltu	r3,r5,a002b08 <_free_r+0x2f0>
 a002af4:	100ad4ba 	srli	r5,r2,18
 a002af8:	28c01f44 	addi	r3,r5,125
 a002afc:	18c7883a 	add	r3,r3,r3
 a002b00:	29401f04 	addi	r5,r5,124
 a002b04:	003f8e06 	br	a002940 <__alt_mem_flash+0xfe001940>
 a002b08:	00c03f84 	movi	r3,254
 a002b0c:	01401f84 	movi	r5,126
 a002b10:	003f8b06 	br	a002940 <__alt_mem_flash+0xfe001940>
 a002b14:	10c00054 	ori	r3,r2,1
 a002b18:	30c00115 	stw	r3,4(r6)
 a002b1c:	308d883a 	add	r6,r6,r2
 a002b20:	30800015 	stw	r2,0(r6)
 a002b24:	003f7806 	br	a002908 <__alt_mem_flash+0xfe001908>

0a002b28 <_lseek_r>:
 a002b28:	defffd04 	addi	sp,sp,-12
 a002b2c:	2805883a 	mov	r2,r5
 a002b30:	dc000015 	stw	r16,0(sp)
 a002b34:	04028074 	movhi	r16,2561
 a002b38:	dc400115 	stw	r17,4(sp)
 a002b3c:	300b883a 	mov	r5,r6
 a002b40:	842b4f04 	addi	r16,r16,-21188
 a002b44:	2023883a 	mov	r17,r4
 a002b48:	380d883a 	mov	r6,r7
 a002b4c:	1009883a 	mov	r4,r2
 a002b50:	dfc00215 	stw	ra,8(sp)
 a002b54:	80000015 	stw	zero,0(r16)
 a002b58:	a0034740 	call	a003474 <lseek>
 a002b5c:	00ffffc4 	movi	r3,-1
 a002b60:	10c00526 	beq	r2,r3,a002b78 <_lseek_r+0x50>
 a002b64:	dfc00217 	ldw	ra,8(sp)
 a002b68:	dc400117 	ldw	r17,4(sp)
 a002b6c:	dc000017 	ldw	r16,0(sp)
 a002b70:	dec00304 	addi	sp,sp,12
 a002b74:	f800283a 	ret
 a002b78:	80c00017 	ldw	r3,0(r16)
 a002b7c:	183ff926 	beq	r3,zero,a002b64 <__alt_mem_flash+0xfe001b64>
 a002b80:	88c00015 	stw	r3,0(r17)
 a002b84:	003ff706 	br	a002b64 <__alt_mem_flash+0xfe001b64>

0a002b88 <__smakebuf_r>:
 a002b88:	2880030b 	ldhu	r2,12(r5)
 a002b8c:	10c0008c 	andi	r3,r2,2
 a002b90:	1800411e 	bne	r3,zero,a002c98 <__smakebuf_r+0x110>
 a002b94:	deffec04 	addi	sp,sp,-80
 a002b98:	dc000f15 	stw	r16,60(sp)
 a002b9c:	2821883a 	mov	r16,r5
 a002ba0:	2940038f 	ldh	r5,14(r5)
 a002ba4:	dc401015 	stw	r17,64(sp)
 a002ba8:	dfc01315 	stw	ra,76(sp)
 a002bac:	dcc01215 	stw	r19,72(sp)
 a002bb0:	dc801115 	stw	r18,68(sp)
 a002bb4:	2023883a 	mov	r17,r4
 a002bb8:	28001c16 	blt	r5,zero,a002c2c <__smakebuf_r+0xa4>
 a002bbc:	d80d883a 	mov	r6,sp
 a002bc0:	a002da40 	call	a002da4 <_fstat_r>
 a002bc4:	10001816 	blt	r2,zero,a002c28 <__smakebuf_r+0xa0>
 a002bc8:	d8800117 	ldw	r2,4(sp)
 a002bcc:	00e00014 	movui	r3,32768
 a002bd0:	10bc000c 	andi	r2,r2,61440
 a002bd4:	14c80020 	cmpeqi	r19,r2,8192
 a002bd8:	10c03726 	beq	r2,r3,a002cb8 <__smakebuf_r+0x130>
 a002bdc:	80c0030b 	ldhu	r3,12(r16)
 a002be0:	18c20014 	ori	r3,r3,2048
 a002be4:	80c0030d 	sth	r3,12(r16)
 a002be8:	00c80004 	movi	r3,8192
 a002bec:	10c0521e 	bne	r2,r3,a002d38 <__smakebuf_r+0x1b0>
 a002bf0:	8140038f 	ldh	r5,14(r16)
 a002bf4:	8809883a 	mov	r4,r17
 a002bf8:	a002e000 	call	a002e00 <_isatty_r>
 a002bfc:	10004c26 	beq	r2,zero,a002d30 <__smakebuf_r+0x1a8>
 a002c00:	8080030b 	ldhu	r2,12(r16)
 a002c04:	80c010c4 	addi	r3,r16,67
 a002c08:	80c00015 	stw	r3,0(r16)
 a002c0c:	10800054 	ori	r2,r2,1
 a002c10:	8080030d 	sth	r2,12(r16)
 a002c14:	00800044 	movi	r2,1
 a002c18:	80c00415 	stw	r3,16(r16)
 a002c1c:	80800515 	stw	r2,20(r16)
 a002c20:	04810004 	movi	r18,1024
 a002c24:	00000706 	br	a002c44 <__smakebuf_r+0xbc>
 a002c28:	8080030b 	ldhu	r2,12(r16)
 a002c2c:	10c0200c 	andi	r3,r2,128
 a002c30:	18001f1e 	bne	r3,zero,a002cb0 <__smakebuf_r+0x128>
 a002c34:	04810004 	movi	r18,1024
 a002c38:	10820014 	ori	r2,r2,2048
 a002c3c:	8080030d 	sth	r2,12(r16)
 a002c40:	0027883a 	mov	r19,zero
 a002c44:	900b883a 	mov	r5,r18
 a002c48:	8809883a 	mov	r4,r17
 a002c4c:	a000d900 	call	a000d90 <_malloc_r>
 a002c50:	10002c26 	beq	r2,zero,a002d04 <__smakebuf_r+0x17c>
 a002c54:	80c0030b 	ldhu	r3,12(r16)
 a002c58:	01028034 	movhi	r4,2560
 a002c5c:	2100e604 	addi	r4,r4,920
 a002c60:	89000f15 	stw	r4,60(r17)
 a002c64:	18c02014 	ori	r3,r3,128
 a002c68:	80c0030d 	sth	r3,12(r16)
 a002c6c:	80800015 	stw	r2,0(r16)
 a002c70:	80800415 	stw	r2,16(r16)
 a002c74:	84800515 	stw	r18,20(r16)
 a002c78:	98001a1e 	bne	r19,zero,a002ce4 <__smakebuf_r+0x15c>
 a002c7c:	dfc01317 	ldw	ra,76(sp)
 a002c80:	dcc01217 	ldw	r19,72(sp)
 a002c84:	dc801117 	ldw	r18,68(sp)
 a002c88:	dc401017 	ldw	r17,64(sp)
 a002c8c:	dc000f17 	ldw	r16,60(sp)
 a002c90:	dec01404 	addi	sp,sp,80
 a002c94:	f800283a 	ret
 a002c98:	288010c4 	addi	r2,r5,67
 a002c9c:	28800015 	stw	r2,0(r5)
 a002ca0:	28800415 	stw	r2,16(r5)
 a002ca4:	00800044 	movi	r2,1
 a002ca8:	28800515 	stw	r2,20(r5)
 a002cac:	f800283a 	ret
 a002cb0:	04801004 	movi	r18,64
 a002cb4:	003fe006 	br	a002c38 <__alt_mem_flash+0xfe001c38>
 a002cb8:	81000a17 	ldw	r4,40(r16)
 a002cbc:	00c28034 	movhi	r3,2560
 a002cc0:	18c83704 	addi	r3,r3,8412
 a002cc4:	20ffc51e 	bne	r4,r3,a002bdc <__alt_mem_flash+0xfe001bdc>
 a002cc8:	8080030b 	ldhu	r2,12(r16)
 a002ccc:	04810004 	movi	r18,1024
 a002cd0:	84801315 	stw	r18,76(r16)
 a002cd4:	1484b03a 	or	r2,r2,r18
 a002cd8:	8080030d 	sth	r2,12(r16)
 a002cdc:	0027883a 	mov	r19,zero
 a002ce0:	003fd806 	br	a002c44 <__alt_mem_flash+0xfe001c44>
 a002ce4:	8140038f 	ldh	r5,14(r16)
 a002ce8:	8809883a 	mov	r4,r17
 a002cec:	a002e000 	call	a002e00 <_isatty_r>
 a002cf0:	103fe226 	beq	r2,zero,a002c7c <__alt_mem_flash+0xfe001c7c>
 a002cf4:	8080030b 	ldhu	r2,12(r16)
 a002cf8:	10800054 	ori	r2,r2,1
 a002cfc:	8080030d 	sth	r2,12(r16)
 a002d00:	003fde06 	br	a002c7c <__alt_mem_flash+0xfe001c7c>
 a002d04:	8080030b 	ldhu	r2,12(r16)
 a002d08:	10c0800c 	andi	r3,r2,512
 a002d0c:	183fdb1e 	bne	r3,zero,a002c7c <__alt_mem_flash+0xfe001c7c>
 a002d10:	10800094 	ori	r2,r2,2
 a002d14:	80c010c4 	addi	r3,r16,67
 a002d18:	8080030d 	sth	r2,12(r16)
 a002d1c:	00800044 	movi	r2,1
 a002d20:	80c00015 	stw	r3,0(r16)
 a002d24:	80c00415 	stw	r3,16(r16)
 a002d28:	80800515 	stw	r2,20(r16)
 a002d2c:	003fd306 	br	a002c7c <__alt_mem_flash+0xfe001c7c>
 a002d30:	04810004 	movi	r18,1024
 a002d34:	003fc306 	br	a002c44 <__alt_mem_flash+0xfe001c44>
 a002d38:	0027883a 	mov	r19,zero
 a002d3c:	04810004 	movi	r18,1024
 a002d40:	003fc006 	br	a002c44 <__alt_mem_flash+0xfe001c44>

0a002d44 <_read_r>:
 a002d44:	defffd04 	addi	sp,sp,-12
 a002d48:	2805883a 	mov	r2,r5
 a002d4c:	dc000015 	stw	r16,0(sp)
 a002d50:	04028074 	movhi	r16,2561
 a002d54:	dc400115 	stw	r17,4(sp)
 a002d58:	300b883a 	mov	r5,r6
 a002d5c:	842b4f04 	addi	r16,r16,-21188
 a002d60:	2023883a 	mov	r17,r4
 a002d64:	380d883a 	mov	r6,r7
 a002d68:	1009883a 	mov	r4,r2
 a002d6c:	dfc00215 	stw	ra,8(sp)
 a002d70:	80000015 	stw	zero,0(r16)
 a002d74:	a0036500 	call	a003650 <read>
 a002d78:	00ffffc4 	movi	r3,-1
 a002d7c:	10c00526 	beq	r2,r3,a002d94 <_read_r+0x50>
 a002d80:	dfc00217 	ldw	ra,8(sp)
 a002d84:	dc400117 	ldw	r17,4(sp)
 a002d88:	dc000017 	ldw	r16,0(sp)
 a002d8c:	dec00304 	addi	sp,sp,12
 a002d90:	f800283a 	ret
 a002d94:	80c00017 	ldw	r3,0(r16)
 a002d98:	183ff926 	beq	r3,zero,a002d80 <__alt_mem_flash+0xfe001d80>
 a002d9c:	88c00015 	stw	r3,0(r17)
 a002da0:	003ff706 	br	a002d80 <__alt_mem_flash+0xfe001d80>

0a002da4 <_fstat_r>:
 a002da4:	defffd04 	addi	sp,sp,-12
 a002da8:	2805883a 	mov	r2,r5
 a002dac:	dc000015 	stw	r16,0(sp)
 a002db0:	04028074 	movhi	r16,2561
 a002db4:	dc400115 	stw	r17,4(sp)
 a002db8:	842b4f04 	addi	r16,r16,-21188
 a002dbc:	2023883a 	mov	r17,r4
 a002dc0:	300b883a 	mov	r5,r6
 a002dc4:	1009883a 	mov	r4,r2
 a002dc8:	dfc00215 	stw	ra,8(sp)
 a002dcc:	80000015 	stw	zero,0(r16)
 a002dd0:	a0031ac0 	call	a0031ac <fstat>
 a002dd4:	00ffffc4 	movi	r3,-1
 a002dd8:	10c00526 	beq	r2,r3,a002df0 <_fstat_r+0x4c>
 a002ddc:	dfc00217 	ldw	ra,8(sp)
 a002de0:	dc400117 	ldw	r17,4(sp)
 a002de4:	dc000017 	ldw	r16,0(sp)
 a002de8:	dec00304 	addi	sp,sp,12
 a002dec:	f800283a 	ret
 a002df0:	80c00017 	ldw	r3,0(r16)
 a002df4:	183ff926 	beq	r3,zero,a002ddc <__alt_mem_flash+0xfe001ddc>
 a002df8:	88c00015 	stw	r3,0(r17)
 a002dfc:	003ff706 	br	a002ddc <__alt_mem_flash+0xfe001ddc>

0a002e00 <_isatty_r>:
 a002e00:	defffd04 	addi	sp,sp,-12
 a002e04:	dc000015 	stw	r16,0(sp)
 a002e08:	04028074 	movhi	r16,2561
 a002e0c:	dc400115 	stw	r17,4(sp)
 a002e10:	842b4f04 	addi	r16,r16,-21188
 a002e14:	2023883a 	mov	r17,r4
 a002e18:	2809883a 	mov	r4,r5
 a002e1c:	dfc00215 	stw	ra,8(sp)
 a002e20:	80000015 	stw	zero,0(r16)
 a002e24:	a0032a00 	call	a0032a0 <isatty>
 a002e28:	00ffffc4 	movi	r3,-1
 a002e2c:	10c00526 	beq	r2,r3,a002e44 <_isatty_r+0x44>
 a002e30:	dfc00217 	ldw	ra,8(sp)
 a002e34:	dc400117 	ldw	r17,4(sp)
 a002e38:	dc000017 	ldw	r16,0(sp)
 a002e3c:	dec00304 	addi	sp,sp,12
 a002e40:	f800283a 	ret
 a002e44:	80c00017 	ldw	r3,0(r16)
 a002e48:	183ff926 	beq	r3,zero,a002e30 <__alt_mem_flash+0xfe001e30>
 a002e4c:	88c00015 	stw	r3,0(r17)
 a002e50:	003ff706 	br	a002e30 <__alt_mem_flash+0xfe001e30>

0a002e54 <__divsi3>:
 a002e54:	20001b16 	blt	r4,zero,a002ec4 <__divsi3+0x70>
 a002e58:	000f883a 	mov	r7,zero
 a002e5c:	28001616 	blt	r5,zero,a002eb8 <__divsi3+0x64>
 a002e60:	200d883a 	mov	r6,r4
 a002e64:	29001a2e 	bgeu	r5,r4,a002ed0 <__divsi3+0x7c>
 a002e68:	00800804 	movi	r2,32
 a002e6c:	00c00044 	movi	r3,1
 a002e70:	00000106 	br	a002e78 <__divsi3+0x24>
 a002e74:	10000d26 	beq	r2,zero,a002eac <__divsi3+0x58>
 a002e78:	294b883a 	add	r5,r5,r5
 a002e7c:	10bfffc4 	addi	r2,r2,-1
 a002e80:	18c7883a 	add	r3,r3,r3
 a002e84:	293ffb36 	bltu	r5,r4,a002e74 <__alt_mem_flash+0xfe001e74>
 a002e88:	0005883a 	mov	r2,zero
 a002e8c:	18000726 	beq	r3,zero,a002eac <__divsi3+0x58>
 a002e90:	0005883a 	mov	r2,zero
 a002e94:	31400236 	bltu	r6,r5,a002ea0 <__divsi3+0x4c>
 a002e98:	314dc83a 	sub	r6,r6,r5
 a002e9c:	10c4b03a 	or	r2,r2,r3
 a002ea0:	1806d07a 	srli	r3,r3,1
 a002ea4:	280ad07a 	srli	r5,r5,1
 a002ea8:	183ffa1e 	bne	r3,zero,a002e94 <__alt_mem_flash+0xfe001e94>
 a002eac:	38000126 	beq	r7,zero,a002eb4 <__divsi3+0x60>
 a002eb0:	0085c83a 	sub	r2,zero,r2
 a002eb4:	f800283a 	ret
 a002eb8:	014bc83a 	sub	r5,zero,r5
 a002ebc:	39c0005c 	xori	r7,r7,1
 a002ec0:	003fe706 	br	a002e60 <__alt_mem_flash+0xfe001e60>
 a002ec4:	0109c83a 	sub	r4,zero,r4
 a002ec8:	01c00044 	movi	r7,1
 a002ecc:	003fe306 	br	a002e5c <__alt_mem_flash+0xfe001e5c>
 a002ed0:	00c00044 	movi	r3,1
 a002ed4:	003fee06 	br	a002e90 <__alt_mem_flash+0xfe001e90>

0a002ed8 <__modsi3>:
 a002ed8:	20001716 	blt	r4,zero,a002f38 <__modsi3+0x60>
 a002edc:	000f883a 	mov	r7,zero
 a002ee0:	2005883a 	mov	r2,r4
 a002ee4:	28001216 	blt	r5,zero,a002f30 <__modsi3+0x58>
 a002ee8:	2900162e 	bgeu	r5,r4,a002f44 <__modsi3+0x6c>
 a002eec:	01800804 	movi	r6,32
 a002ef0:	00c00044 	movi	r3,1
 a002ef4:	00000106 	br	a002efc <__modsi3+0x24>
 a002ef8:	30000a26 	beq	r6,zero,a002f24 <__modsi3+0x4c>
 a002efc:	294b883a 	add	r5,r5,r5
 a002f00:	31bfffc4 	addi	r6,r6,-1
 a002f04:	18c7883a 	add	r3,r3,r3
 a002f08:	293ffb36 	bltu	r5,r4,a002ef8 <__alt_mem_flash+0xfe001ef8>
 a002f0c:	18000526 	beq	r3,zero,a002f24 <__modsi3+0x4c>
 a002f10:	1806d07a 	srli	r3,r3,1
 a002f14:	11400136 	bltu	r2,r5,a002f1c <__modsi3+0x44>
 a002f18:	1145c83a 	sub	r2,r2,r5
 a002f1c:	280ad07a 	srli	r5,r5,1
 a002f20:	183ffb1e 	bne	r3,zero,a002f10 <__alt_mem_flash+0xfe001f10>
 a002f24:	38000126 	beq	r7,zero,a002f2c <__modsi3+0x54>
 a002f28:	0085c83a 	sub	r2,zero,r2
 a002f2c:	f800283a 	ret
 a002f30:	014bc83a 	sub	r5,zero,r5
 a002f34:	003fec06 	br	a002ee8 <__alt_mem_flash+0xfe001ee8>
 a002f38:	0109c83a 	sub	r4,zero,r4
 a002f3c:	01c00044 	movi	r7,1
 a002f40:	003fe706 	br	a002ee0 <__alt_mem_flash+0xfe001ee0>
 a002f44:	00c00044 	movi	r3,1
 a002f48:	003ff106 	br	a002f10 <__alt_mem_flash+0xfe001f10>

0a002f4c <__udivsi3>:
 a002f4c:	200d883a 	mov	r6,r4
 a002f50:	2900152e 	bgeu	r5,r4,a002fa8 <__udivsi3+0x5c>
 a002f54:	28001416 	blt	r5,zero,a002fa8 <__udivsi3+0x5c>
 a002f58:	00800804 	movi	r2,32
 a002f5c:	00c00044 	movi	r3,1
 a002f60:	00000206 	br	a002f6c <__udivsi3+0x20>
 a002f64:	10000e26 	beq	r2,zero,a002fa0 <__udivsi3+0x54>
 a002f68:	28000516 	blt	r5,zero,a002f80 <__udivsi3+0x34>
 a002f6c:	294b883a 	add	r5,r5,r5
 a002f70:	10bfffc4 	addi	r2,r2,-1
 a002f74:	18c7883a 	add	r3,r3,r3
 a002f78:	293ffa36 	bltu	r5,r4,a002f64 <__alt_mem_flash+0xfe001f64>
 a002f7c:	18000826 	beq	r3,zero,a002fa0 <__udivsi3+0x54>
 a002f80:	0005883a 	mov	r2,zero
 a002f84:	31400236 	bltu	r6,r5,a002f90 <__udivsi3+0x44>
 a002f88:	314dc83a 	sub	r6,r6,r5
 a002f8c:	10c4b03a 	or	r2,r2,r3
 a002f90:	1806d07a 	srli	r3,r3,1
 a002f94:	280ad07a 	srli	r5,r5,1
 a002f98:	183ffa1e 	bne	r3,zero,a002f84 <__alt_mem_flash+0xfe001f84>
 a002f9c:	f800283a 	ret
 a002fa0:	0005883a 	mov	r2,zero
 a002fa4:	f800283a 	ret
 a002fa8:	00c00044 	movi	r3,1
 a002fac:	003ff406 	br	a002f80 <__alt_mem_flash+0xfe001f80>

0a002fb0 <__umodsi3>:
 a002fb0:	2005883a 	mov	r2,r4
 a002fb4:	2900122e 	bgeu	r5,r4,a003000 <__umodsi3+0x50>
 a002fb8:	28001116 	blt	r5,zero,a003000 <__umodsi3+0x50>
 a002fbc:	01800804 	movi	r6,32
 a002fc0:	00c00044 	movi	r3,1
 a002fc4:	00000206 	br	a002fd0 <__umodsi3+0x20>
 a002fc8:	30000c26 	beq	r6,zero,a002ffc <__umodsi3+0x4c>
 a002fcc:	28000516 	blt	r5,zero,a002fe4 <__umodsi3+0x34>
 a002fd0:	294b883a 	add	r5,r5,r5
 a002fd4:	31bfffc4 	addi	r6,r6,-1
 a002fd8:	18c7883a 	add	r3,r3,r3
 a002fdc:	293ffa36 	bltu	r5,r4,a002fc8 <__alt_mem_flash+0xfe001fc8>
 a002fe0:	18000626 	beq	r3,zero,a002ffc <__umodsi3+0x4c>
 a002fe4:	1806d07a 	srli	r3,r3,1
 a002fe8:	11400136 	bltu	r2,r5,a002ff0 <__umodsi3+0x40>
 a002fec:	1145c83a 	sub	r2,r2,r5
 a002ff0:	280ad07a 	srli	r5,r5,1
 a002ff4:	183ffb1e 	bne	r3,zero,a002fe4 <__alt_mem_flash+0xfe001fe4>
 a002ff8:	f800283a 	ret
 a002ffc:	f800283a 	ret
 a003000:	00c00044 	movi	r3,1
 a003004:	003ff706 	br	a002fe4 <__alt_mem_flash+0xfe001fe4>

0a003008 <__mulsi3>:
 a003008:	0005883a 	mov	r2,zero
 a00300c:	20000726 	beq	r4,zero,a00302c <__mulsi3+0x24>
 a003010:	20c0004c 	andi	r3,r4,1
 a003014:	2008d07a 	srli	r4,r4,1
 a003018:	18000126 	beq	r3,zero,a003020 <__mulsi3+0x18>
 a00301c:	1145883a 	add	r2,r2,r5
 a003020:	294b883a 	add	r5,r5,r5
 a003024:	203ffa1e 	bne	r4,zero,a003010 <__alt_mem_flash+0xfe002010>
 a003028:	f800283a 	ret
 a00302c:	f800283a 	ret

0a003030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a003030:	defffe04 	addi	sp,sp,-8
 a003034:	dfc00115 	stw	ra,4(sp)
 a003038:	df000015 	stw	fp,0(sp)
 a00303c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a003040:	d0a00917 	ldw	r2,-32732(gp)
 a003044:	10000326 	beq	r2,zero,a003054 <alt_get_errno+0x24>
 a003048:	d0a00917 	ldw	r2,-32732(gp)
 a00304c:	103ee83a 	callr	r2
 a003050:	00000106 	br	a003058 <alt_get_errno+0x28>
 a003054:	d0a71f04 	addi	r2,gp,-25476
}
 a003058:	e037883a 	mov	sp,fp
 a00305c:	dfc00117 	ldw	ra,4(sp)
 a003060:	df000017 	ldw	fp,0(sp)
 a003064:	dec00204 	addi	sp,sp,8
 a003068:	f800283a 	ret

0a00306c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 a00306c:	defffb04 	addi	sp,sp,-20
 a003070:	dfc00415 	stw	ra,16(sp)
 a003074:	df000315 	stw	fp,12(sp)
 a003078:	df000304 	addi	fp,sp,12
 a00307c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 a003080:	e0bfff17 	ldw	r2,-4(fp)
 a003084:	10000816 	blt	r2,zero,a0030a8 <close+0x3c>
 a003088:	01400304 	movi	r5,12
 a00308c:	e13fff17 	ldw	r4,-4(fp)
 a003090:	a0030080 	call	a003008 <__mulsi3>
 a003094:	1007883a 	mov	r3,r2
 a003098:	00828034 	movhi	r2,2560
 a00309c:	109f4904 	addi	r2,r2,32036
 a0030a0:	1885883a 	add	r2,r3,r2
 a0030a4:	00000106 	br	a0030ac <close+0x40>
 a0030a8:	0005883a 	mov	r2,zero
 a0030ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 a0030b0:	e0bffd17 	ldw	r2,-12(fp)
 a0030b4:	10001926 	beq	r2,zero,a00311c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 a0030b8:	e0bffd17 	ldw	r2,-12(fp)
 a0030bc:	10800017 	ldw	r2,0(r2)
 a0030c0:	10800417 	ldw	r2,16(r2)
 a0030c4:	10000626 	beq	r2,zero,a0030e0 <close+0x74>
 a0030c8:	e0bffd17 	ldw	r2,-12(fp)
 a0030cc:	10800017 	ldw	r2,0(r2)
 a0030d0:	10800417 	ldw	r2,16(r2)
 a0030d4:	e13ffd17 	ldw	r4,-12(fp)
 a0030d8:	103ee83a 	callr	r2
 a0030dc:	00000106 	br	a0030e4 <close+0x78>
 a0030e0:	0005883a 	mov	r2,zero
 a0030e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 a0030e8:	e13fff17 	ldw	r4,-4(fp)
 a0030ec:	a0037540 	call	a003754 <alt_release_fd>
    if (rval < 0)
 a0030f0:	e0bffe17 	ldw	r2,-8(fp)
 a0030f4:	1000070e 	bge	r2,zero,a003114 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 a0030f8:	a0030300 	call	a003030 <alt_get_errno>
 a0030fc:	1007883a 	mov	r3,r2
 a003100:	e0bffe17 	ldw	r2,-8(fp)
 a003104:	0085c83a 	sub	r2,zero,r2
 a003108:	18800015 	stw	r2,0(r3)
      return -1;
 a00310c:	00bfffc4 	movi	r2,-1
 a003110:	00000706 	br	a003130 <close+0xc4>
    }
    return 0;
 a003114:	0005883a 	mov	r2,zero
 a003118:	00000506 	br	a003130 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 a00311c:	a0030300 	call	a003030 <alt_get_errno>
 a003120:	1007883a 	mov	r3,r2
 a003124:	00801444 	movi	r2,81
 a003128:	18800015 	stw	r2,0(r3)
    return -1;
 a00312c:	00bfffc4 	movi	r2,-1
  }
}
 a003130:	e037883a 	mov	sp,fp
 a003134:	dfc00117 	ldw	ra,4(sp)
 a003138:	df000017 	ldw	fp,0(sp)
 a00313c:	dec00204 	addi	sp,sp,8
 a003140:	f800283a 	ret

0a003144 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 a003144:	defffc04 	addi	sp,sp,-16
 a003148:	df000315 	stw	fp,12(sp)
 a00314c:	df000304 	addi	fp,sp,12
 a003150:	e13ffd15 	stw	r4,-12(fp)
 a003154:	e17ffe15 	stw	r5,-8(fp)
 a003158:	e1bfff15 	stw	r6,-4(fp)
  return len;
 a00315c:	e0bfff17 	ldw	r2,-4(fp)
}
 a003160:	e037883a 	mov	sp,fp
 a003164:	df000017 	ldw	fp,0(sp)
 a003168:	dec00104 	addi	sp,sp,4
 a00316c:	f800283a 	ret

0a003170 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a003170:	defffe04 	addi	sp,sp,-8
 a003174:	dfc00115 	stw	ra,4(sp)
 a003178:	df000015 	stw	fp,0(sp)
 a00317c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a003180:	d0a00917 	ldw	r2,-32732(gp)
 a003184:	10000326 	beq	r2,zero,a003194 <alt_get_errno+0x24>
 a003188:	d0a00917 	ldw	r2,-32732(gp)
 a00318c:	103ee83a 	callr	r2
 a003190:	00000106 	br	a003198 <alt_get_errno+0x28>
 a003194:	d0a71f04 	addi	r2,gp,-25476
}
 a003198:	e037883a 	mov	sp,fp
 a00319c:	dfc00117 	ldw	ra,4(sp)
 a0031a0:	df000017 	ldw	fp,0(sp)
 a0031a4:	dec00204 	addi	sp,sp,8
 a0031a8:	f800283a 	ret

0a0031ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 a0031ac:	defffb04 	addi	sp,sp,-20
 a0031b0:	dfc00415 	stw	ra,16(sp)
 a0031b4:	df000315 	stw	fp,12(sp)
 a0031b8:	df000304 	addi	fp,sp,12
 a0031bc:	e13ffe15 	stw	r4,-8(fp)
 a0031c0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a0031c4:	e0bffe17 	ldw	r2,-8(fp)
 a0031c8:	10000816 	blt	r2,zero,a0031ec <fstat+0x40>
 a0031cc:	01400304 	movi	r5,12
 a0031d0:	e13ffe17 	ldw	r4,-8(fp)
 a0031d4:	a0030080 	call	a003008 <__mulsi3>
 a0031d8:	1007883a 	mov	r3,r2
 a0031dc:	00828034 	movhi	r2,2560
 a0031e0:	109f4904 	addi	r2,r2,32036
 a0031e4:	1885883a 	add	r2,r3,r2
 a0031e8:	00000106 	br	a0031f0 <fstat+0x44>
 a0031ec:	0005883a 	mov	r2,zero
 a0031f0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 a0031f4:	e0bffd17 	ldw	r2,-12(fp)
 a0031f8:	10001026 	beq	r2,zero,a00323c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 a0031fc:	e0bffd17 	ldw	r2,-12(fp)
 a003200:	10800017 	ldw	r2,0(r2)
 a003204:	10800817 	ldw	r2,32(r2)
 a003208:	10000726 	beq	r2,zero,a003228 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 a00320c:	e0bffd17 	ldw	r2,-12(fp)
 a003210:	10800017 	ldw	r2,0(r2)
 a003214:	10800817 	ldw	r2,32(r2)
 a003218:	e17fff17 	ldw	r5,-4(fp)
 a00321c:	e13ffd17 	ldw	r4,-12(fp)
 a003220:	103ee83a 	callr	r2
 a003224:	00000a06 	br	a003250 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 a003228:	e0bfff17 	ldw	r2,-4(fp)
 a00322c:	00c80004 	movi	r3,8192
 a003230:	10c00115 	stw	r3,4(r2)
      return 0;
 a003234:	0005883a 	mov	r2,zero
 a003238:	00000506 	br	a003250 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 a00323c:	a0031700 	call	a003170 <alt_get_errno>
 a003240:	1007883a 	mov	r3,r2
 a003244:	00801444 	movi	r2,81
 a003248:	18800015 	stw	r2,0(r3)
    return -1;
 a00324c:	00bfffc4 	movi	r2,-1
  }
}
 a003250:	e037883a 	mov	sp,fp
 a003254:	dfc00117 	ldw	ra,4(sp)
 a003258:	df000017 	ldw	fp,0(sp)
 a00325c:	dec00204 	addi	sp,sp,8
 a003260:	f800283a 	ret

0a003264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a003264:	defffe04 	addi	sp,sp,-8
 a003268:	dfc00115 	stw	ra,4(sp)
 a00326c:	df000015 	stw	fp,0(sp)
 a003270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a003274:	d0a00917 	ldw	r2,-32732(gp)
 a003278:	10000326 	beq	r2,zero,a003288 <alt_get_errno+0x24>
 a00327c:	d0a00917 	ldw	r2,-32732(gp)
 a003280:	103ee83a 	callr	r2
 a003284:	00000106 	br	a00328c <alt_get_errno+0x28>
 a003288:	d0a71f04 	addi	r2,gp,-25476
}
 a00328c:	e037883a 	mov	sp,fp
 a003290:	dfc00117 	ldw	ra,4(sp)
 a003294:	df000017 	ldw	fp,0(sp)
 a003298:	dec00204 	addi	sp,sp,8
 a00329c:	f800283a 	ret

0a0032a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 a0032a0:	deffed04 	addi	sp,sp,-76
 a0032a4:	dfc01215 	stw	ra,72(sp)
 a0032a8:	df001115 	stw	fp,68(sp)
 a0032ac:	df001104 	addi	fp,sp,68
 a0032b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a0032b4:	e0bfff17 	ldw	r2,-4(fp)
 a0032b8:	10000816 	blt	r2,zero,a0032dc <isatty+0x3c>
 a0032bc:	01400304 	movi	r5,12
 a0032c0:	e13fff17 	ldw	r4,-4(fp)
 a0032c4:	a0030080 	call	a003008 <__mulsi3>
 a0032c8:	1007883a 	mov	r3,r2
 a0032cc:	00828034 	movhi	r2,2560
 a0032d0:	109f4904 	addi	r2,r2,32036
 a0032d4:	1885883a 	add	r2,r3,r2
 a0032d8:	00000106 	br	a0032e0 <isatty+0x40>
 a0032dc:	0005883a 	mov	r2,zero
 a0032e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 a0032e4:	e0bfef17 	ldw	r2,-68(fp)
 a0032e8:	10000e26 	beq	r2,zero,a003324 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 a0032ec:	e0bfef17 	ldw	r2,-68(fp)
 a0032f0:	10800017 	ldw	r2,0(r2)
 a0032f4:	10800817 	ldw	r2,32(r2)
 a0032f8:	1000021e 	bne	r2,zero,a003304 <isatty+0x64>
    {
      return 1;
 a0032fc:	00800044 	movi	r2,1
 a003300:	00000d06 	br	a003338 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 a003304:	e0bff004 	addi	r2,fp,-64
 a003308:	100b883a 	mov	r5,r2
 a00330c:	e13fff17 	ldw	r4,-4(fp)
 a003310:	a0031ac0 	call	a0031ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 a003314:	e0bff117 	ldw	r2,-60(fp)
 a003318:	10880020 	cmpeqi	r2,r2,8192
 a00331c:	10803fcc 	andi	r2,r2,255
 a003320:	00000506 	br	a003338 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 a003324:	a0032640 	call	a003264 <alt_get_errno>
 a003328:	1007883a 	mov	r3,r2
 a00332c:	00801444 	movi	r2,81
 a003330:	18800015 	stw	r2,0(r3)
    return 0;
 a003334:	0005883a 	mov	r2,zero
  }
}
 a003338:	e037883a 	mov	sp,fp
 a00333c:	dfc00117 	ldw	ra,4(sp)
 a003340:	df000017 	ldw	fp,0(sp)
 a003344:	dec00204 	addi	sp,sp,8
 a003348:	f800283a 	ret

0a00334c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 a00334c:	defffc04 	addi	sp,sp,-16
 a003350:	df000315 	stw	fp,12(sp)
 a003354:	df000304 	addi	fp,sp,12
 a003358:	e13ffd15 	stw	r4,-12(fp)
 a00335c:	e17ffe15 	stw	r5,-8(fp)
 a003360:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 a003364:	e0fffe17 	ldw	r3,-8(fp)
 a003368:	e0bffd17 	ldw	r2,-12(fp)
 a00336c:	18800c26 	beq	r3,r2,a0033a0 <alt_load_section+0x54>
  {
    while( to != end )
 a003370:	00000806 	br	a003394 <alt_load_section+0x48>
    {
      *to++ = *from++;
 a003374:	e0bffe17 	ldw	r2,-8(fp)
 a003378:	10c00104 	addi	r3,r2,4
 a00337c:	e0fffe15 	stw	r3,-8(fp)
 a003380:	e0fffd17 	ldw	r3,-12(fp)
 a003384:	19000104 	addi	r4,r3,4
 a003388:	e13ffd15 	stw	r4,-12(fp)
 a00338c:	18c00017 	ldw	r3,0(r3)
 a003390:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 a003394:	e0fffe17 	ldw	r3,-8(fp)
 a003398:	e0bfff17 	ldw	r2,-4(fp)
 a00339c:	18bff51e 	bne	r3,r2,a003374 <__alt_mem_flash+0xfe002374>
    {
      *to++ = *from++;
    }
  }
}
 a0033a0:	0001883a 	nop
 a0033a4:	e037883a 	mov	sp,fp
 a0033a8:	df000017 	ldw	fp,0(sp)
 a0033ac:	dec00104 	addi	sp,sp,4
 a0033b0:	f800283a 	ret

0a0033b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 a0033b4:	defffe04 	addi	sp,sp,-8
 a0033b8:	dfc00115 	stw	ra,4(sp)
 a0033bc:	df000015 	stw	fp,0(sp)
 a0033c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 a0033c4:	01828074 	movhi	r6,2561
 a0033c8:	31a44004 	addi	r6,r6,-28416
 a0033cc:	01428034 	movhi	r5,2560
 a0033d0:	295d3404 	addi	r5,r5,29904
 a0033d4:	01028074 	movhi	r4,2561
 a0033d8:	21244004 	addi	r4,r4,-28416
 a0033dc:	a00334c0 	call	a00334c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 a0033e0:	01828034 	movhi	r6,2560
 a0033e4:	31808404 	addi	r6,r6,528
 a0033e8:	01428034 	movhi	r5,2560
 a0033ec:	29400004 	addi	r5,r5,0
 a0033f0:	01028034 	movhi	r4,2560
 a0033f4:	21000004 	addi	r4,r4,0
 a0033f8:	a00334c0 	call	a00334c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 a0033fc:	01828034 	movhi	r6,2560
 a003400:	319d3404 	addi	r6,r6,29904
 a003404:	01428034 	movhi	r5,2560
 a003408:	295d1904 	addi	r5,r5,29796
 a00340c:	01028034 	movhi	r4,2560
 a003410:	211d1904 	addi	r4,r4,29796
 a003414:	a00334c0 	call	a00334c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 a003418:	a00605c0 	call	a00605c <alt_dcache_flush_all>
  alt_icache_flush_all();
 a00341c:	a0062d80 	call	a0062d8 <alt_icache_flush_all>
}
 a003420:	0001883a 	nop
 a003424:	e037883a 	mov	sp,fp
 a003428:	dfc00117 	ldw	ra,4(sp)
 a00342c:	df000017 	ldw	fp,0(sp)
 a003430:	dec00204 	addi	sp,sp,8
 a003434:	f800283a 	ret

0a003438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a003438:	defffe04 	addi	sp,sp,-8
 a00343c:	dfc00115 	stw	ra,4(sp)
 a003440:	df000015 	stw	fp,0(sp)
 a003444:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a003448:	d0a00917 	ldw	r2,-32732(gp)
 a00344c:	10000326 	beq	r2,zero,a00345c <alt_get_errno+0x24>
 a003450:	d0a00917 	ldw	r2,-32732(gp)
 a003454:	103ee83a 	callr	r2
 a003458:	00000106 	br	a003460 <alt_get_errno+0x28>
 a00345c:	d0a71f04 	addi	r2,gp,-25476
}
 a003460:	e037883a 	mov	sp,fp
 a003464:	dfc00117 	ldw	ra,4(sp)
 a003468:	df000017 	ldw	fp,0(sp)
 a00346c:	dec00204 	addi	sp,sp,8
 a003470:	f800283a 	ret

0a003474 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 a003474:	defff904 	addi	sp,sp,-28
 a003478:	dfc00615 	stw	ra,24(sp)
 a00347c:	df000515 	stw	fp,20(sp)
 a003480:	df000504 	addi	fp,sp,20
 a003484:	e13ffd15 	stw	r4,-12(fp)
 a003488:	e17ffe15 	stw	r5,-8(fp)
 a00348c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 a003490:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a003494:	e0bffd17 	ldw	r2,-12(fp)
 a003498:	10000816 	blt	r2,zero,a0034bc <lseek+0x48>
 a00349c:	01400304 	movi	r5,12
 a0034a0:	e13ffd17 	ldw	r4,-12(fp)
 a0034a4:	a0030080 	call	a003008 <__mulsi3>
 a0034a8:	1007883a 	mov	r3,r2
 a0034ac:	00828034 	movhi	r2,2560
 a0034b0:	109f4904 	addi	r2,r2,32036
 a0034b4:	1885883a 	add	r2,r3,r2
 a0034b8:	00000106 	br	a0034c0 <lseek+0x4c>
 a0034bc:	0005883a 	mov	r2,zero
 a0034c0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 a0034c4:	e0bffc17 	ldw	r2,-16(fp)
 a0034c8:	10001026 	beq	r2,zero,a00350c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 a0034cc:	e0bffc17 	ldw	r2,-16(fp)
 a0034d0:	10800017 	ldw	r2,0(r2)
 a0034d4:	10800717 	ldw	r2,28(r2)
 a0034d8:	10000926 	beq	r2,zero,a003500 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 a0034dc:	e0bffc17 	ldw	r2,-16(fp)
 a0034e0:	10800017 	ldw	r2,0(r2)
 a0034e4:	10800717 	ldw	r2,28(r2)
 a0034e8:	e1bfff17 	ldw	r6,-4(fp)
 a0034ec:	e17ffe17 	ldw	r5,-8(fp)
 a0034f0:	e13ffc17 	ldw	r4,-16(fp)
 a0034f4:	103ee83a 	callr	r2
 a0034f8:	e0bffb15 	stw	r2,-20(fp)
 a0034fc:	00000506 	br	a003514 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 a003500:	00bfde84 	movi	r2,-134
 a003504:	e0bffb15 	stw	r2,-20(fp)
 a003508:	00000206 	br	a003514 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 a00350c:	00bfebc4 	movi	r2,-81
 a003510:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 a003514:	e0bffb17 	ldw	r2,-20(fp)
 a003518:	1000070e 	bge	r2,zero,a003538 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 a00351c:	a0034380 	call	a003438 <alt_get_errno>
 a003520:	1007883a 	mov	r3,r2
 a003524:	e0bffb17 	ldw	r2,-20(fp)
 a003528:	0085c83a 	sub	r2,zero,r2
 a00352c:	18800015 	stw	r2,0(r3)
    rc = -1;
 a003530:	00bfffc4 	movi	r2,-1
 a003534:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 a003538:	e0bffb17 	ldw	r2,-20(fp)
}
 a00353c:	e037883a 	mov	sp,fp
 a003540:	dfc00117 	ldw	ra,4(sp)
 a003544:	df000017 	ldw	fp,0(sp)
 a003548:	dec00204 	addi	sp,sp,8
 a00354c:	f800283a 	ret

0a003550 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 a003550:	defffd04 	addi	sp,sp,-12
 a003554:	dfc00215 	stw	ra,8(sp)
 a003558:	df000115 	stw	fp,4(sp)
 a00355c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 a003560:	0009883a 	mov	r4,zero
 a003564:	a0039f80 	call	a0039f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 a003568:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 a00356c:	a003a300 	call	a003a30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 a003570:	01828034 	movhi	r6,2560
 a003574:	319d2104 	addi	r6,r6,29828
 a003578:	01428034 	movhi	r5,2560
 a00357c:	295d2104 	addi	r5,r5,29828
 a003580:	01028034 	movhi	r4,2560
 a003584:	211d2104 	addi	r4,r4,29828
 a003588:	a00667c0 	call	a00667c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 a00358c:	a00615c0 	call	a00615c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 a003590:	01028034 	movhi	r4,2560
 a003594:	21186f04 	addi	r4,r4,25020
 a003598:	a0070380 	call	a007038 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 a00359c:	d0a72017 	ldw	r2,-25472(gp)
 a0035a0:	d0e72117 	ldw	r3,-25468(gp)
 a0035a4:	d1272217 	ldw	r4,-25464(gp)
 a0035a8:	200d883a 	mov	r6,r4
 a0035ac:	180b883a 	mov	r5,r3
 a0035b0:	1009883a 	mov	r4,r2
 a0035b4:	a00024c0 	call	a00024c <main>
 a0035b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 a0035bc:	01000044 	movi	r4,1
 a0035c0:	a00306c0 	call	a00306c <close>
  exit (result);
 a0035c4:	e13fff17 	ldw	r4,-4(fp)
 a0035c8:	a00704c0 	call	a00704c <exit>

0a0035cc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 a0035cc:	defffe04 	addi	sp,sp,-8
 a0035d0:	df000115 	stw	fp,4(sp)
 a0035d4:	df000104 	addi	fp,sp,4
 a0035d8:	e13fff15 	stw	r4,-4(fp)
}
 a0035dc:	0001883a 	nop
 a0035e0:	e037883a 	mov	sp,fp
 a0035e4:	df000017 	ldw	fp,0(sp)
 a0035e8:	dec00104 	addi	sp,sp,4
 a0035ec:	f800283a 	ret

0a0035f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 a0035f0:	defffe04 	addi	sp,sp,-8
 a0035f4:	df000115 	stw	fp,4(sp)
 a0035f8:	df000104 	addi	fp,sp,4
 a0035fc:	e13fff15 	stw	r4,-4(fp)
}
 a003600:	0001883a 	nop
 a003604:	e037883a 	mov	sp,fp
 a003608:	df000017 	ldw	fp,0(sp)
 a00360c:	dec00104 	addi	sp,sp,4
 a003610:	f800283a 	ret

0a003614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a003614:	defffe04 	addi	sp,sp,-8
 a003618:	dfc00115 	stw	ra,4(sp)
 a00361c:	df000015 	stw	fp,0(sp)
 a003620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a003624:	d0a00917 	ldw	r2,-32732(gp)
 a003628:	10000326 	beq	r2,zero,a003638 <alt_get_errno+0x24>
 a00362c:	d0a00917 	ldw	r2,-32732(gp)
 a003630:	103ee83a 	callr	r2
 a003634:	00000106 	br	a00363c <alt_get_errno+0x28>
 a003638:	d0a71f04 	addi	r2,gp,-25476
}
 a00363c:	e037883a 	mov	sp,fp
 a003640:	dfc00117 	ldw	ra,4(sp)
 a003644:	df000017 	ldw	fp,0(sp)
 a003648:	dec00204 	addi	sp,sp,8
 a00364c:	f800283a 	ret

0a003650 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 a003650:	defff904 	addi	sp,sp,-28
 a003654:	dfc00615 	stw	ra,24(sp)
 a003658:	df000515 	stw	fp,20(sp)
 a00365c:	df000504 	addi	fp,sp,20
 a003660:	e13ffd15 	stw	r4,-12(fp)
 a003664:	e17ffe15 	stw	r5,-8(fp)
 a003668:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a00366c:	e0bffd17 	ldw	r2,-12(fp)
 a003670:	10000816 	blt	r2,zero,a003694 <read+0x44>
 a003674:	01400304 	movi	r5,12
 a003678:	e13ffd17 	ldw	r4,-12(fp)
 a00367c:	a0030080 	call	a003008 <__mulsi3>
 a003680:	1007883a 	mov	r3,r2
 a003684:	00828034 	movhi	r2,2560
 a003688:	109f4904 	addi	r2,r2,32036
 a00368c:	1885883a 	add	r2,r3,r2
 a003690:	00000106 	br	a003698 <read+0x48>
 a003694:	0005883a 	mov	r2,zero
 a003698:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 a00369c:	e0bffb17 	ldw	r2,-20(fp)
 a0036a0:	10002226 	beq	r2,zero,a00372c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 a0036a4:	e0bffb17 	ldw	r2,-20(fp)
 a0036a8:	10800217 	ldw	r2,8(r2)
 a0036ac:	108000cc 	andi	r2,r2,3
 a0036b0:	10800060 	cmpeqi	r2,r2,1
 a0036b4:	1000181e 	bne	r2,zero,a003718 <read+0xc8>
        (fd->dev->read))
 a0036b8:	e0bffb17 	ldw	r2,-20(fp)
 a0036bc:	10800017 	ldw	r2,0(r2)
 a0036c0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 a0036c4:	10001426 	beq	r2,zero,a003718 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 a0036c8:	e0bffb17 	ldw	r2,-20(fp)
 a0036cc:	10800017 	ldw	r2,0(r2)
 a0036d0:	10800517 	ldw	r2,20(r2)
 a0036d4:	e0ffff17 	ldw	r3,-4(fp)
 a0036d8:	180d883a 	mov	r6,r3
 a0036dc:	e17ffe17 	ldw	r5,-8(fp)
 a0036e0:	e13ffb17 	ldw	r4,-20(fp)
 a0036e4:	103ee83a 	callr	r2
 a0036e8:	e0bffc15 	stw	r2,-16(fp)
 a0036ec:	e0bffc17 	ldw	r2,-16(fp)
 a0036f0:	1000070e 	bge	r2,zero,a003710 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 a0036f4:	a0036140 	call	a003614 <alt_get_errno>
 a0036f8:	1007883a 	mov	r3,r2
 a0036fc:	e0bffc17 	ldw	r2,-16(fp)
 a003700:	0085c83a 	sub	r2,zero,r2
 a003704:	18800015 	stw	r2,0(r3)
          return -1;
 a003708:	00bfffc4 	movi	r2,-1
 a00370c:	00000c06 	br	a003740 <read+0xf0>
        }
        return rval;
 a003710:	e0bffc17 	ldw	r2,-16(fp)
 a003714:	00000a06 	br	a003740 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 a003718:	a0036140 	call	a003614 <alt_get_errno>
 a00371c:	1007883a 	mov	r3,r2
 a003720:	00800344 	movi	r2,13
 a003724:	18800015 	stw	r2,0(r3)
 a003728:	00000406 	br	a00373c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 a00372c:	a0036140 	call	a003614 <alt_get_errno>
 a003730:	1007883a 	mov	r3,r2
 a003734:	00801444 	movi	r2,81
 a003738:	18800015 	stw	r2,0(r3)
  }
  return -1;
 a00373c:	00bfffc4 	movi	r2,-1
}
 a003740:	e037883a 	mov	sp,fp
 a003744:	dfc00117 	ldw	ra,4(sp)
 a003748:	df000017 	ldw	fp,0(sp)
 a00374c:	dec00204 	addi	sp,sp,8
 a003750:	f800283a 	ret

0a003754 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 a003754:	defffc04 	addi	sp,sp,-16
 a003758:	dfc00315 	stw	ra,12(sp)
 a00375c:	df000215 	stw	fp,8(sp)
 a003760:	dc000115 	stw	r16,4(sp)
 a003764:	df000204 	addi	fp,sp,8
 a003768:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 a00376c:	e0bffe17 	ldw	r2,-8(fp)
 a003770:	108000d0 	cmplti	r2,r2,3
 a003774:	1000111e 	bne	r2,zero,a0037bc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 a003778:	04028034 	movhi	r16,2560
 a00377c:	841f4904 	addi	r16,r16,32036
 a003780:	e0bffe17 	ldw	r2,-8(fp)
 a003784:	01400304 	movi	r5,12
 a003788:	1009883a 	mov	r4,r2
 a00378c:	a0030080 	call	a003008 <__mulsi3>
 a003790:	8085883a 	add	r2,r16,r2
 a003794:	10800204 	addi	r2,r2,8
 a003798:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 a00379c:	04028034 	movhi	r16,2560
 a0037a0:	841f4904 	addi	r16,r16,32036
 a0037a4:	e0bffe17 	ldw	r2,-8(fp)
 a0037a8:	01400304 	movi	r5,12
 a0037ac:	1009883a 	mov	r4,r2
 a0037b0:	a0030080 	call	a003008 <__mulsi3>
 a0037b4:	8085883a 	add	r2,r16,r2
 a0037b8:	10000015 	stw	zero,0(r2)
  }
}
 a0037bc:	0001883a 	nop
 a0037c0:	e6ffff04 	addi	sp,fp,-4
 a0037c4:	dfc00217 	ldw	ra,8(sp)
 a0037c8:	df000117 	ldw	fp,4(sp)
 a0037cc:	dc000017 	ldw	r16,0(sp)
 a0037d0:	dec00304 	addi	sp,sp,12
 a0037d4:	f800283a 	ret

0a0037d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 a0037d8:	defff904 	addi	sp,sp,-28
 a0037dc:	df000615 	stw	fp,24(sp)
 a0037e0:	df000604 	addi	fp,sp,24
 a0037e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a0037e8:	0005303a 	rdctl	r2,status
 a0037ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a0037f0:	e0fffe17 	ldw	r3,-8(fp)
 a0037f4:	00bfff84 	movi	r2,-2
 a0037f8:	1884703a 	and	r2,r3,r2
 a0037fc:	1001703a 	wrctl	status,r2
  
  return context;
 a003800:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 a003804:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 a003808:	d0a00a17 	ldw	r2,-32728(gp)
 a00380c:	10c000c4 	addi	r3,r2,3
 a003810:	00bfff04 	movi	r2,-4
 a003814:	1884703a 	and	r2,r3,r2
 a003818:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 a00381c:	d0e00a17 	ldw	r3,-32728(gp)
 a003820:	e0bfff17 	ldw	r2,-4(fp)
 a003824:	1887883a 	add	r3,r3,r2
 a003828:	0082c034 	movhi	r2,2816
 a00382c:	10800004 	addi	r2,r2,0
 a003830:	10c0062e 	bgeu	r2,r3,a00384c <sbrk+0x74>
 a003834:	e0bffb17 	ldw	r2,-20(fp)
 a003838:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00383c:	e0bffa17 	ldw	r2,-24(fp)
 a003840:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 a003844:	00bfffc4 	movi	r2,-1
 a003848:	00000b06 	br	a003878 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 a00384c:	d0a00a17 	ldw	r2,-32728(gp)
 a003850:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 a003854:	d0e00a17 	ldw	r3,-32728(gp)
 a003858:	e0bfff17 	ldw	r2,-4(fp)
 a00385c:	1885883a 	add	r2,r3,r2
 a003860:	d0a00a15 	stw	r2,-32728(gp)
 a003864:	e0bffb17 	ldw	r2,-20(fp)
 a003868:	e0bffc15 	stw	r2,-16(fp)
 a00386c:	e0bffc17 	ldw	r2,-16(fp)
 a003870:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 a003874:	e0bffd17 	ldw	r2,-12(fp)
} 
 a003878:	e037883a 	mov	sp,fp
 a00387c:	df000017 	ldw	fp,0(sp)
 a003880:	dec00104 	addi	sp,sp,4
 a003884:	f800283a 	ret

0a003888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a003888:	defffe04 	addi	sp,sp,-8
 a00388c:	dfc00115 	stw	ra,4(sp)
 a003890:	df000015 	stw	fp,0(sp)
 a003894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a003898:	d0a00917 	ldw	r2,-32732(gp)
 a00389c:	10000326 	beq	r2,zero,a0038ac <alt_get_errno+0x24>
 a0038a0:	d0a00917 	ldw	r2,-32732(gp)
 a0038a4:	103ee83a 	callr	r2
 a0038a8:	00000106 	br	a0038b0 <alt_get_errno+0x28>
 a0038ac:	d0a71f04 	addi	r2,gp,-25476
}
 a0038b0:	e037883a 	mov	sp,fp
 a0038b4:	dfc00117 	ldw	ra,4(sp)
 a0038b8:	df000017 	ldw	fp,0(sp)
 a0038bc:	dec00204 	addi	sp,sp,8
 a0038c0:	f800283a 	ret

0a0038c4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 a0038c4:	defff904 	addi	sp,sp,-28
 a0038c8:	dfc00615 	stw	ra,24(sp)
 a0038cc:	df000515 	stw	fp,20(sp)
 a0038d0:	df000504 	addi	fp,sp,20
 a0038d4:	e13ffd15 	stw	r4,-12(fp)
 a0038d8:	e17ffe15 	stw	r5,-8(fp)
 a0038dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 a0038e0:	e0bffd17 	ldw	r2,-12(fp)
 a0038e4:	10000816 	blt	r2,zero,a003908 <write+0x44>
 a0038e8:	01400304 	movi	r5,12
 a0038ec:	e13ffd17 	ldw	r4,-12(fp)
 a0038f0:	a0030080 	call	a003008 <__mulsi3>
 a0038f4:	1007883a 	mov	r3,r2
 a0038f8:	00828034 	movhi	r2,2560
 a0038fc:	109f4904 	addi	r2,r2,32036
 a003900:	1885883a 	add	r2,r3,r2
 a003904:	00000106 	br	a00390c <write+0x48>
 a003908:	0005883a 	mov	r2,zero
 a00390c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 a003910:	e0bffb17 	ldw	r2,-20(fp)
 a003914:	10002126 	beq	r2,zero,a00399c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 a003918:	e0bffb17 	ldw	r2,-20(fp)
 a00391c:	10800217 	ldw	r2,8(r2)
 a003920:	108000cc 	andi	r2,r2,3
 a003924:	10001826 	beq	r2,zero,a003988 <write+0xc4>
 a003928:	e0bffb17 	ldw	r2,-20(fp)
 a00392c:	10800017 	ldw	r2,0(r2)
 a003930:	10800617 	ldw	r2,24(r2)
 a003934:	10001426 	beq	r2,zero,a003988 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 a003938:	e0bffb17 	ldw	r2,-20(fp)
 a00393c:	10800017 	ldw	r2,0(r2)
 a003940:	10800617 	ldw	r2,24(r2)
 a003944:	e0ffff17 	ldw	r3,-4(fp)
 a003948:	180d883a 	mov	r6,r3
 a00394c:	e17ffe17 	ldw	r5,-8(fp)
 a003950:	e13ffb17 	ldw	r4,-20(fp)
 a003954:	103ee83a 	callr	r2
 a003958:	e0bffc15 	stw	r2,-16(fp)
 a00395c:	e0bffc17 	ldw	r2,-16(fp)
 a003960:	1000070e 	bge	r2,zero,a003980 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 a003964:	a0038880 	call	a003888 <alt_get_errno>
 a003968:	1007883a 	mov	r3,r2
 a00396c:	e0bffc17 	ldw	r2,-16(fp)
 a003970:	0085c83a 	sub	r2,zero,r2
 a003974:	18800015 	stw	r2,0(r3)
        return -1;
 a003978:	00bfffc4 	movi	r2,-1
 a00397c:	00000c06 	br	a0039b0 <write+0xec>
      }
      return rval;
 a003980:	e0bffc17 	ldw	r2,-16(fp)
 a003984:	00000a06 	br	a0039b0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 a003988:	a0038880 	call	a003888 <alt_get_errno>
 a00398c:	1007883a 	mov	r3,r2
 a003990:	00800344 	movi	r2,13
 a003994:	18800015 	stw	r2,0(r3)
 a003998:	00000406 	br	a0039ac <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 a00399c:	a0038880 	call	a003888 <alt_get_errno>
 a0039a0:	1007883a 	mov	r3,r2
 a0039a4:	00801444 	movi	r2,81
 a0039a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 a0039ac:	00bfffc4 	movi	r2,-1
}
 a0039b0:	e037883a 	mov	sp,fp
 a0039b4:	dfc00117 	ldw	ra,4(sp)
 a0039b8:	df000017 	ldw	fp,0(sp)
 a0039bc:	dec00204 	addi	sp,sp,8
 a0039c0:	f800283a 	ret

0a0039c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 a0039c4:	defffd04 	addi	sp,sp,-12
 a0039c8:	dfc00215 	stw	ra,8(sp)
 a0039cc:	df000115 	stw	fp,4(sp)
 a0039d0:	df000104 	addi	fp,sp,4
 a0039d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 a0039d8:	d1600604 	addi	r5,gp,-32744
 a0039dc:	e13fff17 	ldw	r4,-4(fp)
 a0039e0:	a0060b80 	call	a0060b8 <alt_dev_llist_insert>
}
 a0039e4:	e037883a 	mov	sp,fp
 a0039e8:	dfc00117 	ldw	ra,4(sp)
 a0039ec:	df000017 	ldw	fp,0(sp)
 a0039f0:	dec00204 	addi	sp,sp,8
 a0039f4:	f800283a 	ret

0a0039f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 a0039f8:	defffd04 	addi	sp,sp,-12
 a0039fc:	dfc00215 	stw	ra,8(sp)
 a003a00:	df000115 	stw	fp,4(sp)
 a003a04:	df000104 	addi	fp,sp,4
 a003a08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_1, nios_1);
 a003a0c:	a006b200 	call	a006b20 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 a003a10:	00800044 	movi	r2,1
 a003a14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 a003a18:	0001883a 	nop
 a003a1c:	e037883a 	mov	sp,fp
 a003a20:	dfc00117 	ldw	ra,4(sp)
 a003a24:	df000017 	ldw	fp,0(sp)
 a003a28:	dec00204 	addi	sp,sp,8
 a003a2c:	f800283a 	ret

0a003a30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 a003a30:	defffe04 	addi	sp,sp,-8
 a003a34:	dfc00115 	stw	ra,4(sp)
 a003a38:	df000015 	stw	fp,0(sp)
 a003a3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( FLASH, flash);
 a003a40:	01028034 	movhi	r4,2560
 a003a44:	211fa904 	addi	r4,r4,32420
 a003a48:	a003aec0 	call	a003aec <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 a003a4c:	000d883a 	mov	r6,zero
 a003a50:	000b883a 	mov	r5,zero
 a003a54:	01028034 	movhi	r4,2560
 a003a58:	211fe604 	addi	r4,r4,32664
 a003a5c:	a0047180 	call	a004718 <altera_avalon_jtag_uart_init>
 a003a60:	01028034 	movhi	r4,2560
 a003a64:	211fdc04 	addi	r4,r4,32624
 a003a68:	a0039c40 	call	a0039c4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 a003a6c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_1, sysid_qsys_1);
 a003a70:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 a003a74:	01800044 	movi	r6,1
 a003a78:	000b883a 	mov	r5,zero
 a003a7c:	01028074 	movhi	r4,2561
 a003a80:	2123fe04 	addi	r4,r4,-28680
 a003a84:	a00512c0 	call	a00512c <altera_avalon_uart_init>
 a003a88:	01028074 	movhi	r4,2561
 a003a8c:	2123f404 	addi	r4,r4,-28720
 a003a90:	a0039c40 	call	a0039c4 <alt_dev_reg>
    ALTERA_UP_AVALON_ADC_INIT ( ADC, adc);
 a003a94:	01028074 	movhi	r4,2561
 a003a98:	21242504 	addi	r4,r4,-28524
 a003a9c:	a0039c40 	call	a0039c4 <alt_dev_reg>
}
 a003aa0:	0001883a 	nop
 a003aa4:	e037883a 	mov	sp,fp
 a003aa8:	dfc00117 	ldw	ra,4(sp)
 a003aac:	df000017 	ldw	fp,0(sp)
 a003ab0:	dec00204 	addi	sp,sp,8
 a003ab4:	f800283a 	ret

0a003ab8 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 a003ab8:	defffd04 	addi	sp,sp,-12
 a003abc:	dfc00215 	stw	ra,8(sp)
 a003ac0:	df000115 	stw	fp,4(sp)
 a003ac4:	df000104 	addi	fp,sp,4
 a003ac8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 a003acc:	d1600b04 	addi	r5,gp,-32724
 a003ad0:	e13fff17 	ldw	r4,-4(fp)
 a003ad4:	a0060b80 	call	a0060b8 <alt_dev_llist_insert>
}
 a003ad8:	e037883a 	mov	sp,fp
 a003adc:	dfc00117 	ldw	ra,4(sp)
 a003ae0:	df000017 	ldw	fp,0(sp)
 a003ae4:	dec00204 	addi	sp,sp,8
 a003ae8:	f800283a 	ret

0a003aec <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 a003aec:	defffc04 	addi	sp,sp,-16
 a003af0:	dfc00315 	stw	ra,12(sp)
 a003af4:	df000215 	stw	fp,8(sp)
 a003af8:	df000204 	addi	fp,sp,8
 a003afc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 a003b00:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 a003b04:	e13fff17 	ldw	r4,-4(fp)
 a003b08:	a003b400 	call	a003b40 <alt_epcs_flash_query>
 a003b0c:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 a003b10:	e0bffe17 	ldw	r2,-8(fp)
 a003b14:	1000041e 	bne	r2,zero,a003b28 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 a003b18:	e0bfff17 	ldw	r2,-4(fp)
 a003b1c:	1009883a 	mov	r4,r2
 a003b20:	a003ab80 	call	a003ab8 <alt_flash_device_register>
 a003b24:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 a003b28:	e0bffe17 	ldw	r2,-8(fp)
}
 a003b2c:	e037883a 	mov	sp,fp
 a003b30:	dfc00117 	ldw	ra,4(sp)
 a003b34:	df000017 	ldw	fp,0(sp)
 a003b38:	dec00204 	addi	sp,sp,8
 a003b3c:	f800283a 	ret

0a003b40 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 a003b40:	defffc04 	addi	sp,sp,-16
 a003b44:	dfc00315 	stw	ra,12(sp)
 a003b48:	df000215 	stw	fp,8(sp)
 a003b4c:	df000204 	addi	fp,sp,8
 a003b50:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 a003b54:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 a003b58:	e0bfff17 	ldw	r2,-4(fp)
 a003b5c:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 a003b60:	e0bfff17 	ldw	r2,-4(fp)
 a003b64:	10802e17 	ldw	r2,184(r2)
 a003b68:	1009883a 	mov	r4,r2
 a003b6c:	a005d900 	call	a005d90 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 a003b70:	10c03fcc 	andi	r3,r2,255
 a003b74:	e0bfff17 	ldw	r2,-4(fp)
 a003b78:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 a003b7c:	e0bfff17 	ldw	r2,-4(fp)
 a003b80:	10803017 	ldw	r2,192(r2)
 a003b84:	10800598 	cmpnei	r2,r2,22
 a003b88:	10000a1e 	bne	r2,zero,a003bb4 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 a003b8c:	e0bfff17 	ldw	r2,-4(fp)
 a003b90:	00c02034 	movhi	r3,128
 a003b94:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 a003b98:	e0bfff17 	ldw	r2,-4(fp)
 a003b9c:	00c02004 	movi	r3,128
 a003ba0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 a003ba4:	e0bfff17 	ldw	r2,-4(fp)
 a003ba8:	00c00074 	movhi	r3,1
 a003bac:	10c01015 	stw	r3,64(r2)
 a003bb0:	0000ce06 	br	a003eec <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 a003bb4:	e0bfff17 	ldw	r2,-4(fp)
 a003bb8:	10803017 	ldw	r2,192(r2)
 a003bbc:	10800518 	cmpnei	r2,r2,20
 a003bc0:	10000a1e 	bne	r2,zero,a003bec <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 a003bc4:	e0bfff17 	ldw	r2,-4(fp)
 a003bc8:	00c00834 	movhi	r3,32
 a003bcc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 a003bd0:	e0bfff17 	ldw	r2,-4(fp)
 a003bd4:	00c00804 	movi	r3,32
 a003bd8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 a003bdc:	e0bfff17 	ldw	r2,-4(fp)
 a003be0:	00c00074 	movhi	r3,1
 a003be4:	10c01015 	stw	r3,64(r2)
 a003be8:	0000c006 	br	a003eec <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 a003bec:	e0bfff17 	ldw	r2,-4(fp)
 a003bf0:	10803017 	ldw	r2,192(r2)
 a003bf4:	108004d8 	cmpnei	r2,r2,19
 a003bf8:	10000a1e 	bne	r2,zero,a003c24 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 a003bfc:	e0bfff17 	ldw	r2,-4(fp)
 a003c00:	00c00434 	movhi	r3,16
 a003c04:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 a003c08:	e0bfff17 	ldw	r2,-4(fp)
 a003c0c:	00c00404 	movi	r3,16
 a003c10:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 a003c14:	e0bfff17 	ldw	r2,-4(fp)
 a003c18:	00c00074 	movhi	r3,1
 a003c1c:	10c01015 	stw	r3,64(r2)
 a003c20:	0000b206 	br	a003eec <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 a003c24:	e0bfff17 	ldw	r2,-4(fp)
 a003c28:	10803017 	ldw	r2,192(r2)
 a003c2c:	10800498 	cmpnei	r2,r2,18
 a003c30:	10000a1e 	bne	r2,zero,a003c5c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 a003c34:	e0bfff17 	ldw	r2,-4(fp)
 a003c38:	00c00234 	movhi	r3,8
 a003c3c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 a003c40:	e0bfff17 	ldw	r2,-4(fp)
 a003c44:	00c00204 	movi	r3,8
 a003c48:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 a003c4c:	e0bfff17 	ldw	r2,-4(fp)
 a003c50:	00c00074 	movhi	r3,1
 a003c54:	10c01015 	stw	r3,64(r2)
 a003c58:	0000a406 	br	a003eec <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 a003c5c:	e0bfff17 	ldw	r2,-4(fp)
 a003c60:	10803017 	ldw	r2,192(r2)
 a003c64:	10800418 	cmpnei	r2,r2,16
 a003c68:	10000a1e 	bne	r2,zero,a003c94 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 a003c6c:	e0bfff17 	ldw	r2,-4(fp)
 a003c70:	00c000b4 	movhi	r3,2
 a003c74:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 a003c78:	e0bfff17 	ldw	r2,-4(fp)
 a003c7c:	00c00104 	movi	r3,4
 a003c80:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 a003c84:	e0bfff17 	ldw	r2,-4(fp)
 a003c88:	00e00014 	movui	r3,32768
 a003c8c:	10c01015 	stw	r3,64(r2)
 a003c90:	00009606 	br	a003eec <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 a003c94:	e0bfff17 	ldw	r2,-4(fp)
 a003c98:	10802e17 	ldw	r2,184(r2)
 a003c9c:	1009883a 	mov	r4,r2
 a003ca0:	a005df80 	call	a005df8 <epcs_read_device_id>
 a003ca4:	1007883a 	mov	r3,r2
 a003ca8:	e0bfff17 	ldw	r2,-4(fp)
 a003cac:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 a003cb0:	e0bfff17 	ldw	r2,-4(fp)
 a003cb4:	10c03017 	ldw	r3,192(r2)
 a003cb8:	00804034 	movhi	r2,256
 a003cbc:	10bfffc4 	addi	r2,r2,-1
 a003cc0:	1886703a 	and	r3,r3,r2
 a003cc4:	00800874 	movhi	r2,33
 a003cc8:	10ae8544 	addi	r2,r2,-17899
 a003ccc:	18800a1e 	bne	r3,r2,a003cf8 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 a003cd0:	e0bfff17 	ldw	r2,-4(fp)
 a003cd4:	00c00834 	movhi	r3,32
 a003cd8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 a003cdc:	e0bfff17 	ldw	r2,-4(fp)
 a003ce0:	00c00804 	movi	r3,32
 a003ce4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a003ce8:	e0bfff17 	ldw	r2,-4(fp)
 a003cec:	00c00074 	movhi	r3,1
 a003cf0:	10c01015 	stw	r3,64(r2)
 a003cf4:	00007d06 	br	a003eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 a003cf8:	e0bfff17 	ldw	r2,-4(fp)
 a003cfc:	10c03017 	ldw	r3,192(r2)
 a003d00:	00804034 	movhi	r2,256
 a003d04:	10bfffc4 	addi	r2,r2,-1
 a003d08:	1886703a 	and	r3,r3,r2
 a003d0c:	00800874 	movhi	r2,33
 a003d10:	10ae8584 	addi	r2,r2,-17898
 a003d14:	18800a1e 	bne	r3,r2,a003d40 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 a003d18:	e0bfff17 	ldw	r2,-4(fp)
 a003d1c:	00c01034 	movhi	r3,64
 a003d20:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 a003d24:	e0bfff17 	ldw	r2,-4(fp)
 a003d28:	00c01004 	movi	r3,64
 a003d2c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a003d30:	e0bfff17 	ldw	r2,-4(fp)
 a003d34:	00c00074 	movhi	r3,1
 a003d38:	10c01015 	stw	r3,64(r2)
 a003d3c:	00006b06 	br	a003eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 a003d40:	e0bfff17 	ldw	r2,-4(fp)
 a003d44:	10c03017 	ldw	r3,192(r2)
 a003d48:	00804034 	movhi	r2,256
 a003d4c:	10bfffc4 	addi	r2,r2,-1
 a003d50:	1886703a 	and	r3,r3,r2
 a003d54:	00800874 	movhi	r2,33
 a003d58:	10ae85c4 	addi	r2,r2,-17897
 a003d5c:	18800a1e 	bne	r3,r2,a003d88 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 a003d60:	e0bfff17 	ldw	r2,-4(fp)
 a003d64:	00c02034 	movhi	r3,128
 a003d68:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 a003d6c:	e0bfff17 	ldw	r2,-4(fp)
 a003d70:	00c02004 	movi	r3,128
 a003d74:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a003d78:	e0bfff17 	ldw	r2,-4(fp)
 a003d7c:	00c00074 	movhi	r3,1
 a003d80:	10c01015 	stw	r3,64(r2)
 a003d84:	00005906 	br	a003eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 a003d88:	e0bfff17 	ldw	r2,-4(fp)
 a003d8c:	10c03017 	ldw	r3,192(r2)
 a003d90:	00804034 	movhi	r2,256
 a003d94:	10bfffc4 	addi	r2,r2,-1
 a003d98:	1886703a 	and	r3,r3,r2
 a003d9c:	00800874 	movhi	r2,33
 a003da0:	10ae8604 	addi	r2,r2,-17896
 a003da4:	18800a1e 	bne	r3,r2,a003dd0 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 a003da8:	e0bfff17 	ldw	r2,-4(fp)
 a003dac:	00c04034 	movhi	r3,256
 a003db0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 a003db4:	e0bfff17 	ldw	r2,-4(fp)
 a003db8:	00c04004 	movi	r3,256
 a003dbc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a003dc0:	e0bfff17 	ldw	r2,-4(fp)
 a003dc4:	00c00074 	movhi	r3,1
 a003dc8:	10c01015 	stw	r3,64(r2)
 a003dcc:	00004706 	br	a003eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 a003dd0:	e0bfff17 	ldw	r2,-4(fp)
 a003dd4:	10803017 	ldw	r2,192(r2)
 a003dd8:	10803fcc 	andi	r2,r2,255
 a003ddc:	10800618 	cmpnei	r2,r2,24
 a003de0:	10000a1e 	bne	r2,zero,a003e0c <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 a003de4:	e0bfff17 	ldw	r2,-4(fp)
 a003de8:	00c04034 	movhi	r3,256
 a003dec:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 a003df0:	e0bfff17 	ldw	r2,-4(fp)
 a003df4:	00c01004 	movi	r3,64
 a003df8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 a003dfc:	e0bfff17 	ldw	r2,-4(fp)
 a003e00:	00c00134 	movhi	r3,4
 a003e04:	10c01015 	stw	r3,64(r2)
 a003e08:	00003806 	br	a003eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 a003e0c:	e0bfff17 	ldw	r2,-4(fp)
 a003e10:	10803017 	ldw	r2,192(r2)
 a003e14:	10803fcc 	andi	r2,r2,255
 a003e18:	10800658 	cmpnei	r2,r2,25
 a003e1c:	10000d1e 	bne	r2,zero,a003e54 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 a003e20:	e0bfff17 	ldw	r2,-4(fp)
 a003e24:	00c08034 	movhi	r3,512
 a003e28:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 a003e2c:	e0bfff17 	ldw	r2,-4(fp)
 a003e30:	00c08004 	movi	r3,512
 a003e34:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a003e38:	e0bfff17 	ldw	r2,-4(fp)
 a003e3c:	00c00074 	movhi	r3,1
 a003e40:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 a003e44:	e0bfff17 	ldw	r2,-4(fp)
 a003e48:	00c00044 	movi	r3,1
 a003e4c:	10c03215 	stw	r3,200(r2)
 a003e50:	00002606 	br	a003eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 a003e54:	e0bfff17 	ldw	r2,-4(fp)
 a003e58:	10803017 	ldw	r2,192(r2)
 a003e5c:	10803fcc 	andi	r2,r2,255
 a003e60:	10800818 	cmpnei	r2,r2,32
 a003e64:	10000d1e 	bne	r2,zero,a003e9c <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 a003e68:	e0bfff17 	ldw	r2,-4(fp)
 a003e6c:	00c10034 	movhi	r3,1024
 a003e70:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 a003e74:	e0bfff17 	ldw	r2,-4(fp)
 a003e78:	00c10004 	movi	r3,1024
 a003e7c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a003e80:	e0bfff17 	ldw	r2,-4(fp)
 a003e84:	00c00074 	movhi	r3,1
 a003e88:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 a003e8c:	e0bfff17 	ldw	r2,-4(fp)
 a003e90:	00c00044 	movi	r3,1
 a003e94:	10c03215 	stw	r3,200(r2)
 a003e98:	00001406 	br	a003eec <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 a003e9c:	e0bfff17 	ldw	r2,-4(fp)
 a003ea0:	10803017 	ldw	r2,192(r2)
 a003ea4:	10803fcc 	andi	r2,r2,255
 a003ea8:	10800858 	cmpnei	r2,r2,33
 a003eac:	10000d1e 	bne	r2,zero,a003ee4 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 a003eb0:	e0bfff17 	ldw	r2,-4(fp)
 a003eb4:	00c20034 	movhi	r3,2048
 a003eb8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 a003ebc:	e0bfff17 	ldw	r2,-4(fp)
 a003ec0:	00c20004 	movi	r3,2048
 a003ec4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 a003ec8:	e0bfff17 	ldw	r2,-4(fp)
 a003ecc:	00c00074 	movhi	r3,1
 a003ed0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 a003ed4:	e0bfff17 	ldw	r2,-4(fp)
 a003ed8:	00c00044 	movi	r3,1
 a003edc:	10c03215 	stw	r3,200(r2)
 a003ee0:	00000206 	br	a003eec <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 a003ee4:	00bffb44 	movi	r2,-19
 a003ee8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 a003eec:	e0bfff17 	ldw	r2,-4(fp)
 a003ef0:	10800e17 	ldw	r2,56(r2)
 a003ef4:	1007883a 	mov	r3,r2
 a003ef8:	e0bfff17 	ldw	r2,-4(fp)
 a003efc:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 a003f00:	e0bfff17 	ldw	r2,-4(fp)
 a003f04:	00c00044 	movi	r3,1
 a003f08:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 a003f0c:	e0bfff17 	ldw	r2,-4(fp)
 a003f10:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 a003f14:	e0bfff17 	ldw	r2,-4(fp)
 a003f18:	00c04004 	movi	r3,256
 a003f1c:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 a003f20:	e0bffe17 	ldw	r2,-8(fp)
}
 a003f24:	e037883a 	mov	sp,fp
 a003f28:	dfc00117 	ldw	ra,4(sp)
 a003f2c:	df000017 	ldw	fp,0(sp)
 a003f30:	dec00204 	addi	sp,sp,8
 a003f34:	f800283a 	ret

0a003f38 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 a003f38:	deffee04 	addi	sp,sp,-72
 a003f3c:	dfc01115 	stw	ra,68(sp)
 a003f40:	df001015 	stw	fp,64(sp)
 a003f44:	df001004 	addi	fp,sp,64
 a003f48:	e13ffc15 	stw	r4,-16(fp)
 a003f4c:	e17ffd15 	stw	r5,-12(fp)
 a003f50:	e1bffe15 	stw	r6,-8(fp)
 a003f54:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 a003f58:	00800804 	movi	r2,32
 a003f5c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 a003f60:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 a003f64:	00002706 	br	a004004 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 a003f68:	e0fff117 	ldw	r3,-60(fp)
 a003f6c:	e0bfff17 	ldw	r2,-4(fp)
 a003f70:	1880012e 	bgeu	r3,r2,a003f78 <alt_epcs_flash_memcmp+0x40>
 a003f74:	1805883a 	mov	r2,r3
 a003f78:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 a003f7c:	e0fffe17 	ldw	r3,-8(fp)
 a003f80:	e0bff017 	ldw	r2,-64(fp)
 a003f84:	1885883a 	add	r2,r3,r2
 a003f88:	e0fff404 	addi	r3,fp,-48
 a003f8c:	e1fff217 	ldw	r7,-56(fp)
 a003f90:	180d883a 	mov	r6,r3
 a003f94:	100b883a 	mov	r5,r2
 a003f98:	e13ffc17 	ldw	r4,-16(fp)
 a003f9c:	a00451c0 	call	a00451c <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 a003fa0:	1000020e 	bge	r2,zero,a003fac <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 a003fa4:	00bfffc4 	movi	r2,-1
 a003fa8:	00001906 	br	a004010 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 a003fac:	e0bff017 	ldw	r2,-64(fp)
 a003fb0:	e0fffd17 	ldw	r3,-12(fp)
 a003fb4:	1885883a 	add	r2,r3,r2
 a003fb8:	e13ff217 	ldw	r4,-56(fp)
 a003fbc:	e0fff404 	addi	r3,fp,-48
 a003fc0:	200d883a 	mov	r6,r4
 a003fc4:	180b883a 	mov	r5,r3
 a003fc8:	1009883a 	mov	r4,r2
 a003fcc:	a0070840 	call	a007084 <memcmp>
 a003fd0:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 a003fd4:	e0bff317 	ldw	r2,-52(fp)
 a003fd8:	10000226 	beq	r2,zero,a003fe4 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 a003fdc:	e0bff317 	ldw	r2,-52(fp)
 a003fe0:	00000b06 	br	a004010 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 a003fe4:	e0bff217 	ldw	r2,-56(fp)
 a003fe8:	e0ffff17 	ldw	r3,-4(fp)
 a003fec:	1885c83a 	sub	r2,r3,r2
 a003ff0:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 a003ff4:	e0fff017 	ldw	r3,-64(fp)
 a003ff8:	e0bff217 	ldw	r2,-56(fp)
 a003ffc:	1885883a 	add	r2,r3,r2
 a004000:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 a004004:	e0bfff17 	ldw	r2,-4(fp)
 a004008:	103fd71e 	bne	r2,zero,a003f68 <__alt_mem_flash+0xfe002f68>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 a00400c:	0005883a 	mov	r2,zero
}
 a004010:	e037883a 	mov	sp,fp
 a004014:	dfc00117 	ldw	ra,4(sp)
 a004018:	df000017 	ldw	fp,0(sp)
 a00401c:	dec00204 	addi	sp,sp,8
 a004020:	f800283a 	ret

0a004024 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 a004024:	defff404 	addi	sp,sp,-48
 a004028:	dfc00b15 	stw	ra,44(sp)
 a00402c:	df000a15 	stw	fp,40(sp)
 a004030:	df000a04 	addi	fp,sp,40
 a004034:	e13ffc15 	stw	r4,-16(fp)
 a004038:	e17ffd15 	stw	r5,-12(fp)
 a00403c:	e1bffe15 	stw	r6,-8(fp)
 a004040:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 a004044:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 a004048:	e03ff815 	stw	zero,-32(fp)
 a00404c:	00008306 	br	a00425c <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 a004050:	e0fffc17 	ldw	r3,-16(fp)
 a004054:	e0bff817 	ldw	r2,-32(fp)
 a004058:	1004913a 	slli	r2,r2,4
 a00405c:	1885883a 	add	r2,r3,r2
 a004060:	10800d04 	addi	r2,r2,52
 a004064:	10800017 	ldw	r2,0(r2)
 a004068:	e0fffd17 	ldw	r3,-12(fp)
 a00406c:	18807816 	blt	r3,r2,a004250 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 a004070:	e0fffc17 	ldw	r3,-16(fp)
 a004074:	e0bff817 	ldw	r2,-32(fp)
 a004078:	1004913a 	slli	r2,r2,4
 a00407c:	1885883a 	add	r2,r3,r2
 a004080:	10800d04 	addi	r2,r2,52
 a004084:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 a004088:	e13ffc17 	ldw	r4,-16(fp)
 a00408c:	e0bff817 	ldw	r2,-32(fp)
 a004090:	1004913a 	slli	r2,r2,4
 a004094:	2085883a 	add	r2,r4,r2
 a004098:	10800e04 	addi	r2,r2,56
 a00409c:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 a0040a0:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 a0040a4:	e0fffd17 	ldw	r3,-12(fp)
 a0040a8:	1880690e 	bge	r3,r2,a004250 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 a0040ac:	e0fffc17 	ldw	r3,-16(fp)
 a0040b0:	e0bff817 	ldw	r2,-32(fp)
 a0040b4:	1004913a 	slli	r2,r2,4
 a0040b8:	1885883a 	add	r2,r3,r2
 a0040bc:	10800d04 	addi	r2,r2,52
 a0040c0:	10800017 	ldw	r2,0(r2)
 a0040c4:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 a0040c8:	e03ff915 	stw	zero,-28(fp)
 a0040cc:	00005806 	br	a004230 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 a0040d0:	e0fffd17 	ldw	r3,-12(fp)
 a0040d4:	e0bffa17 	ldw	r2,-24(fp)
 a0040d8:	18804916 	blt	r3,r2,a004200 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 a0040dc:	e0fffc17 	ldw	r3,-16(fp)
 a0040e0:	e0bff817 	ldw	r2,-32(fp)
 a0040e4:	10800104 	addi	r2,r2,4
 a0040e8:	1004913a 	slli	r2,r2,4
 a0040ec:	1885883a 	add	r2,r3,r2
 a0040f0:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 a0040f4:	e0bffa17 	ldw	r2,-24(fp)
 a0040f8:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 a0040fc:	e0fffd17 	ldw	r3,-12(fp)
 a004100:	18803f0e 	bge	r3,r2,a004200 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 a004104:	e0fffc17 	ldw	r3,-16(fp)
 a004108:	e0bff817 	ldw	r2,-32(fp)
 a00410c:	10800104 	addi	r2,r2,4
 a004110:	1004913a 	slli	r2,r2,4
 a004114:	1885883a 	add	r2,r3,r2
 a004118:	10c00017 	ldw	r3,0(r2)
 a00411c:	e0bffa17 	ldw	r2,-24(fp)
 a004120:	1887883a 	add	r3,r3,r2
 a004124:	e0bffd17 	ldw	r2,-12(fp)
 a004128:	1885c83a 	sub	r2,r3,r2
 a00412c:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 a004130:	e0fffb17 	ldw	r3,-20(fp)
 a004134:	e0bfff17 	ldw	r2,-4(fp)
 a004138:	1880010e 	bge	r3,r2,a004140 <alt_epcs_flash_write+0x11c>
 a00413c:	1805883a 	mov	r2,r3
 a004140:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 a004144:	e0bffb17 	ldw	r2,-20(fp)
 a004148:	100f883a 	mov	r7,r2
 a00414c:	e1bffd17 	ldw	r6,-12(fp)
 a004150:	e17ffe17 	ldw	r5,-8(fp)
 a004154:	e13ffc17 	ldw	r4,-16(fp)
 a004158:	a003f380 	call	a003f38 <alt_epcs_flash_memcmp>
 a00415c:	10001226 	beq	r2,zero,a0041a8 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 a004160:	e0bffc17 	ldw	r2,-16(fp)
 a004164:	10800817 	ldw	r2,32(r2)
 a004168:	e17ffa17 	ldw	r5,-24(fp)
 a00416c:	e13ffc17 	ldw	r4,-16(fp)
 a004170:	103ee83a 	callr	r2
 a004174:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 a004178:	e0bff717 	ldw	r2,-36(fp)
 a00417c:	10000a1e 	bne	r2,zero,a0041a8 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 a004180:	e0bffc17 	ldw	r2,-16(fp)
 a004184:	10800917 	ldw	r2,36(r2)
 a004188:	e0fffb17 	ldw	r3,-20(fp)
 a00418c:	d8c00015 	stw	r3,0(sp)
 a004190:	e1fffe17 	ldw	r7,-8(fp)
 a004194:	e1bffd17 	ldw	r6,-12(fp)
 a004198:	e17ffa17 	ldw	r5,-24(fp)
 a00419c:	e13ffc17 	ldw	r4,-16(fp)
 a0041a0:	103ee83a 	callr	r2
 a0041a4:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 a0041a8:	e0ffff17 	ldw	r3,-4(fp)
 a0041ac:	e0bffb17 	ldw	r2,-20(fp)
 a0041b0:	18802e26 	beq	r3,r2,a00426c <alt_epcs_flash_write+0x248>
 a0041b4:	e0bff717 	ldw	r2,-36(fp)
 a0041b8:	10002c1e 	bne	r2,zero,a00426c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 a0041bc:	e0ffff17 	ldw	r3,-4(fp)
 a0041c0:	e0bffb17 	ldw	r2,-20(fp)
 a0041c4:	1885c83a 	sub	r2,r3,r2
 a0041c8:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 a0041cc:	e0fffc17 	ldw	r3,-16(fp)
 a0041d0:	e0bff817 	ldw	r2,-32(fp)
 a0041d4:	10800104 	addi	r2,r2,4
 a0041d8:	1004913a 	slli	r2,r2,4
 a0041dc:	1885883a 	add	r2,r3,r2
 a0041e0:	10c00017 	ldw	r3,0(r2)
 a0041e4:	e0bffa17 	ldw	r2,-24(fp)
 a0041e8:	1885883a 	add	r2,r3,r2
 a0041ec:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 a0041f0:	e0bffb17 	ldw	r2,-20(fp)
 a0041f4:	e0fffe17 	ldw	r3,-8(fp)
 a0041f8:	1885883a 	add	r2,r3,r2
 a0041fc:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 a004200:	e0fffc17 	ldw	r3,-16(fp)
 a004204:	e0bff817 	ldw	r2,-32(fp)
 a004208:	10800104 	addi	r2,r2,4
 a00420c:	1004913a 	slli	r2,r2,4
 a004210:	1885883a 	add	r2,r3,r2
 a004214:	10800017 	ldw	r2,0(r2)
 a004218:	e0fffa17 	ldw	r3,-24(fp)
 a00421c:	1885883a 	add	r2,r3,r2
 a004220:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 a004224:	e0bff917 	ldw	r2,-28(fp)
 a004228:	10800044 	addi	r2,r2,1
 a00422c:	e0bff915 	stw	r2,-28(fp)
 a004230:	e0fffc17 	ldw	r3,-16(fp)
 a004234:	e0bff817 	ldw	r2,-32(fp)
 a004238:	1004913a 	slli	r2,r2,4
 a00423c:	1885883a 	add	r2,r3,r2
 a004240:	10800f04 	addi	r2,r2,60
 a004244:	10800017 	ldw	r2,0(r2)
 a004248:	e0fff917 	ldw	r3,-28(fp)
 a00424c:	18bfa016 	blt	r3,r2,a0040d0 <__alt_mem_flash+0xfe0030d0>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 a004250:	e0bff817 	ldw	r2,-32(fp)
 a004254:	10800044 	addi	r2,r2,1
 a004258:	e0bff815 	stw	r2,-32(fp)
 a00425c:	e0bffc17 	ldw	r2,-16(fp)
 a004260:	10800c17 	ldw	r2,48(r2)
 a004264:	e0fff817 	ldw	r3,-32(fp)
 a004268:	18bf7916 	blt	r3,r2,a004050 <__alt_mem_flash+0xfe003050>
      }
    }
  }

finished:
  return ret_code;
 a00426c:	e0bff717 	ldw	r2,-36(fp)
}
 a004270:	e037883a 	mov	sp,fp
 a004274:	dfc00117 	ldw	ra,4(sp)
 a004278:	df000017 	ldw	fp,0(sp)
 a00427c:	dec00204 	addi	sp,sp,8
 a004280:	f800283a 	ret

0a004284 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 a004284:	defffa04 	addi	sp,sp,-24
 a004288:	df000515 	stw	fp,20(sp)
 a00428c:	df000504 	addi	fp,sp,20
 a004290:	e13ffd15 	stw	r4,-12(fp)
 a004294:	e17ffe15 	stw	r5,-8(fp)
 a004298:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 a00429c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 a0042a0:	e0bffd17 	ldw	r2,-12(fp)
 a0042a4:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 a0042a8:	e0bffc17 	ldw	r2,-16(fp)
 a0042ac:	10c00c17 	ldw	r3,48(r2)
 a0042b0:	e0bfff17 	ldw	r2,-4(fp)
 a0042b4:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 a0042b8:	e0bffc17 	ldw	r2,-16(fp)
 a0042bc:	10800c17 	ldw	r2,48(r2)
 a0042c0:	1000031e 	bne	r2,zero,a0042d0 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 a0042c4:	00bffec4 	movi	r2,-5
 a0042c8:	e0bffb15 	stw	r2,-20(fp)
 a0042cc:	00000b06 	br	a0042fc <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 a0042d0:	e0bffc17 	ldw	r2,-16(fp)
 a0042d4:	10800c17 	ldw	r2,48(r2)
 a0042d8:	10800250 	cmplti	r2,r2,9
 a0042dc:	1000031e 	bne	r2,zero,a0042ec <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 a0042e0:	00bffd04 	movi	r2,-12
 a0042e4:	e0bffb15 	stw	r2,-20(fp)
 a0042e8:	00000406 	br	a0042fc <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 a0042ec:	e0bffc17 	ldw	r2,-16(fp)
 a0042f0:	10c00d04 	addi	r3,r2,52
 a0042f4:	e0bffe17 	ldw	r2,-8(fp)
 a0042f8:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 a0042fc:	e0bffb17 	ldw	r2,-20(fp)
}
 a004300:	e037883a 	mov	sp,fp
 a004304:	df000017 	ldw	fp,0(sp)
 a004308:	dec00104 	addi	sp,sp,4
 a00430c:	f800283a 	ret

0a004310 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 a004310:	defff904 	addi	sp,sp,-28
 a004314:	df000615 	stw	fp,24(sp)
 a004318:	df000604 	addi	fp,sp,24
 a00431c:	e13ffe15 	stw	r4,-8(fp)
 a004320:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 a004324:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 a004328:	e0bffe17 	ldw	r2,-8(fp)
 a00432c:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 a004330:	e0bffb17 	ldw	r2,-20(fp)
 a004334:	10800c17 	ldw	r2,48(r2)
 a004338:	10bfffc4 	addi	r2,r2,-1
 a00433c:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 a004340:	e0fffb17 	ldw	r3,-20(fp)
 a004344:	e0bffc17 	ldw	r2,-16(fp)
 a004348:	1004913a 	slli	r2,r2,4
 a00434c:	1885883a 	add	r2,r3,r2
 a004350:	10800d04 	addi	r2,r2,52
 a004354:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 a004358:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 a00435c:	e13ffb17 	ldw	r4,-20(fp)
 a004360:	e0bffc17 	ldw	r2,-16(fp)
 a004364:	1004913a 	slli	r2,r2,4
 a004368:	2085883a 	add	r2,r4,r2
 a00436c:	10800e04 	addi	r2,r2,56
 a004370:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 a004374:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 a004378:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 a00437c:	e0bfff17 	ldw	r2,-4(fp)
 a004380:	e0fffd17 	ldw	r3,-12(fp)
 a004384:	1880022e 	bgeu	r3,r2,a004390 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 a004388:	00bffec4 	movi	r2,-5
 a00438c:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 a004390:	e0bffa17 	ldw	r2,-24(fp)
}
 a004394:	e037883a 	mov	sp,fp
 a004398:	df000017 	ldw	fp,0(sp)
 a00439c:	dec00104 	addi	sp,sp,4
 a0043a0:	f800283a 	ret

0a0043a4 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 a0043a4:	defffa04 	addi	sp,sp,-24
 a0043a8:	dfc00515 	stw	ra,20(sp)
 a0043ac:	df000415 	stw	fp,16(sp)
 a0043b0:	df000404 	addi	fp,sp,16
 a0043b4:	e13ffe15 	stw	r4,-8(fp)
 a0043b8:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 a0043bc:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 a0043c0:	e0bffe17 	ldw	r2,-8(fp)
 a0043c4:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 a0043c8:	e17fff17 	ldw	r5,-4(fp)
 a0043cc:	e13ffe17 	ldw	r4,-8(fp)
 a0043d0:	a0043100 	call	a004310 <alt_epcs_test_address>
 a0043d4:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 a0043d8:	e0bffc17 	ldw	r2,-16(fp)
 a0043dc:	10000916 	blt	r2,zero,a004404 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 a0043e0:	e0bffd17 	ldw	r2,-12(fp)
 a0043e4:	10c02e17 	ldw	r3,184(r2)
 a0043e8:	e13fff17 	ldw	r4,-4(fp)
 a0043ec:	e0bffd17 	ldw	r2,-12(fp)
 a0043f0:	10803217 	ldw	r2,200(r2)
 a0043f4:	100d883a 	mov	r6,r2
 a0043f8:	200b883a 	mov	r5,r4
 a0043fc:	1809883a 	mov	r4,r3
 a004400:	a0059c40 	call	a0059c4 <epcs_sector_erase>
  }
  return ret_code;
 a004404:	e0bffc17 	ldw	r2,-16(fp)
}
 a004408:	e037883a 	mov	sp,fp
 a00440c:	dfc00117 	ldw	ra,4(sp)
 a004410:	df000017 	ldw	fp,0(sp)
 a004414:	dec00204 	addi	sp,sp,8
 a004418:	f800283a 	ret

0a00441c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 a00441c:	defff404 	addi	sp,sp,-48
 a004420:	dfc00b15 	stw	ra,44(sp)
 a004424:	df000a15 	stw	fp,40(sp)
 a004428:	df000a04 	addi	fp,sp,40
 a00442c:	e13ffc15 	stw	r4,-16(fp)
 a004430:	e17ffd15 	stw	r5,-12(fp)
 a004434:	e1bffe15 	stw	r6,-8(fp)
 a004438:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 a00443c:	e0bffc17 	ldw	r2,-16(fp)
 a004440:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 a004444:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 a004448:	e17ffe17 	ldw	r5,-8(fp)
 a00444c:	e13ffc17 	ldw	r4,-16(fp)
 a004450:	a0043100 	call	a004310 <alt_epcs_test_address>
 a004454:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 a004458:	e0bff917 	ldw	r2,-28(fp)
 a00445c:	10002916 	blt	r2,zero,a004504 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 a004460:	00002606 	br	a0044fc <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 a004464:	e0bff817 	ldw	r2,-32(fp)
 a004468:	10c03117 	ldw	r3,196(r2)
 a00446c:	e0bffe17 	ldw	r2,-8(fp)
 a004470:	1887883a 	add	r3,r3,r2
 a004474:	e0bff817 	ldw	r2,-32(fp)
 a004478:	10803117 	ldw	r2,196(r2)
 a00447c:	0085c83a 	sub	r2,zero,r2
 a004480:	1884703a 	and	r2,r3,r2
 a004484:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 a004488:	e0fffa17 	ldw	r3,-24(fp)
 a00448c:	e0bffe17 	ldw	r2,-8(fp)
 a004490:	1885c83a 	sub	r2,r3,r2
 a004494:	e0c00217 	ldw	r3,8(fp)
 a004498:	1880010e 	bge	r3,r2,a0044a0 <alt_epcs_flash_write_block+0x84>
 a00449c:	1805883a 	mov	r2,r3
 a0044a0:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 a0044a4:	e0bff817 	ldw	r2,-32(fp)
 a0044a8:	11002e17 	ldw	r4,184(r2)
 a0044ac:	e0bff717 	ldw	r2,-36(fp)
 a0044b0:	e0ffff17 	ldw	r3,-4(fp)
 a0044b4:	1887883a 	add	r3,r3,r2
 a0044b8:	e0bff817 	ldw	r2,-32(fp)
 a0044bc:	10803217 	ldw	r2,200(r2)
 a0044c0:	d8800015 	stw	r2,0(sp)
 a0044c4:	e1fffb17 	ldw	r7,-20(fp)
 a0044c8:	180d883a 	mov	r6,r3
 a0044cc:	e17ffe17 	ldw	r5,-8(fp)
 a0044d0:	a005c740 	call	a005c74 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 a0044d4:	e0c00217 	ldw	r3,8(fp)
 a0044d8:	e0bffb17 	ldw	r2,-20(fp)
 a0044dc:	1885c83a 	sub	r2,r3,r2
 a0044e0:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 a0044e4:	e0fff717 	ldw	r3,-36(fp)
 a0044e8:	e0bffb17 	ldw	r2,-20(fp)
 a0044ec:	1885883a 	add	r2,r3,r2
 a0044f0:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 a0044f4:	e0bffa17 	ldw	r2,-24(fp)
 a0044f8:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 a0044fc:	e0800217 	ldw	r2,8(fp)
 a004500:	103fd81e 	bne	r2,zero,a004464 <__alt_mem_flash+0xfe003464>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 a004504:	e0bff917 	ldw	r2,-28(fp)
}
 a004508:	e037883a 	mov	sp,fp
 a00450c:	dfc00117 	ldw	ra,4(sp)
 a004510:	df000017 	ldw	fp,0(sp)
 a004514:	dec00204 	addi	sp,sp,8
 a004518:	f800283a 	ret

0a00451c <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 a00451c:	defff704 	addi	sp,sp,-36
 a004520:	dfc00815 	stw	ra,32(sp)
 a004524:	df000715 	stw	fp,28(sp)
 a004528:	df000704 	addi	fp,sp,28
 a00452c:	e13ffc15 	stw	r4,-16(fp)
 a004530:	e17ffd15 	stw	r5,-12(fp)
 a004534:	e1bffe15 	stw	r6,-8(fp)
 a004538:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 a00453c:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 a004540:	e0bffc17 	ldw	r2,-16(fp)
 a004544:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 a004548:	e17ffd17 	ldw	r5,-12(fp)
 a00454c:	e13ffc17 	ldw	r4,-16(fp)
 a004550:	a0043100 	call	a004310 <alt_epcs_test_address>
 a004554:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 a004558:	e0bffa17 	ldw	r2,-24(fp)
 a00455c:	10000f16 	blt	r2,zero,a00459c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 a004560:	e0bffb17 	ldw	r2,-20(fp)
 a004564:	10c02e17 	ldw	r3,184(r2)
 a004568:	e0bffb17 	ldw	r2,-20(fp)
 a00456c:	10803217 	ldw	r2,200(r2)
 a004570:	d8800015 	stw	r2,0(sp)
 a004574:	e1ffff17 	ldw	r7,-4(fp)
 a004578:	e1bffe17 	ldw	r6,-8(fp)
 a00457c:	e17ffd17 	ldw	r5,-12(fp)
 a004580:	1809883a 	mov	r4,r3
 a004584:	a005ac00 	call	a005ac0 <epcs_read_buffer>
 a004588:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 a00458c:	e0fffa17 	ldw	r3,-24(fp)
 a004590:	e0bfff17 	ldw	r2,-4(fp)
 a004594:	1880011e 	bne	r3,r2,a00459c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 a004598:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 a00459c:	e0bffa17 	ldw	r2,-24(fp)
}
 a0045a0:	e037883a 	mov	sp,fp
 a0045a4:	dfc00117 	ldw	ra,4(sp)
 a0045a8:	df000017 	ldw	fp,0(sp)
 a0045ac:	dec00204 	addi	sp,sp,8
 a0045b0:	f800283a 	ret

0a0045b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 a0045b4:	defffa04 	addi	sp,sp,-24
 a0045b8:	dfc00515 	stw	ra,20(sp)
 a0045bc:	df000415 	stw	fp,16(sp)
 a0045c0:	df000404 	addi	fp,sp,16
 a0045c4:	e13ffd15 	stw	r4,-12(fp)
 a0045c8:	e17ffe15 	stw	r5,-8(fp)
 a0045cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 a0045d0:	e0bffd17 	ldw	r2,-12(fp)
 a0045d4:	10800017 	ldw	r2,0(r2)
 a0045d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 a0045dc:	e0bffc17 	ldw	r2,-16(fp)
 a0045e0:	10c00a04 	addi	r3,r2,40
 a0045e4:	e0bffd17 	ldw	r2,-12(fp)
 a0045e8:	10800217 	ldw	r2,8(r2)
 a0045ec:	100f883a 	mov	r7,r2
 a0045f0:	e1bfff17 	ldw	r6,-4(fp)
 a0045f4:	e17ffe17 	ldw	r5,-8(fp)
 a0045f8:	1809883a 	mov	r4,r3
 a0045fc:	a004bdc0 	call	a004bdc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 a004600:	e037883a 	mov	sp,fp
 a004604:	dfc00117 	ldw	ra,4(sp)
 a004608:	df000017 	ldw	fp,0(sp)
 a00460c:	dec00204 	addi	sp,sp,8
 a004610:	f800283a 	ret

0a004614 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 a004614:	defffa04 	addi	sp,sp,-24
 a004618:	dfc00515 	stw	ra,20(sp)
 a00461c:	df000415 	stw	fp,16(sp)
 a004620:	df000404 	addi	fp,sp,16
 a004624:	e13ffd15 	stw	r4,-12(fp)
 a004628:	e17ffe15 	stw	r5,-8(fp)
 a00462c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 a004630:	e0bffd17 	ldw	r2,-12(fp)
 a004634:	10800017 	ldw	r2,0(r2)
 a004638:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 a00463c:	e0bffc17 	ldw	r2,-16(fp)
 a004640:	10c00a04 	addi	r3,r2,40
 a004644:	e0bffd17 	ldw	r2,-12(fp)
 a004648:	10800217 	ldw	r2,8(r2)
 a00464c:	100f883a 	mov	r7,r2
 a004650:	e1bfff17 	ldw	r6,-4(fp)
 a004654:	e17ffe17 	ldw	r5,-8(fp)
 a004658:	1809883a 	mov	r4,r3
 a00465c:	a004df80 	call	a004df8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 a004660:	e037883a 	mov	sp,fp
 a004664:	dfc00117 	ldw	ra,4(sp)
 a004668:	df000017 	ldw	fp,0(sp)
 a00466c:	dec00204 	addi	sp,sp,8
 a004670:	f800283a 	ret

0a004674 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 a004674:	defffc04 	addi	sp,sp,-16
 a004678:	dfc00315 	stw	ra,12(sp)
 a00467c:	df000215 	stw	fp,8(sp)
 a004680:	df000204 	addi	fp,sp,8
 a004684:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 a004688:	e0bfff17 	ldw	r2,-4(fp)
 a00468c:	10800017 	ldw	r2,0(r2)
 a004690:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 a004694:	e0bffe17 	ldw	r2,-8(fp)
 a004698:	10c00a04 	addi	r3,r2,40
 a00469c:	e0bfff17 	ldw	r2,-4(fp)
 a0046a0:	10800217 	ldw	r2,8(r2)
 a0046a4:	100b883a 	mov	r5,r2
 a0046a8:	1809883a 	mov	r4,r3
 a0046ac:	a004a840 	call	a004a84 <altera_avalon_jtag_uart_close>
}
 a0046b0:	e037883a 	mov	sp,fp
 a0046b4:	dfc00117 	ldw	ra,4(sp)
 a0046b8:	df000017 	ldw	fp,0(sp)
 a0046bc:	dec00204 	addi	sp,sp,8
 a0046c0:	f800283a 	ret

0a0046c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 a0046c4:	defffa04 	addi	sp,sp,-24
 a0046c8:	dfc00515 	stw	ra,20(sp)
 a0046cc:	df000415 	stw	fp,16(sp)
 a0046d0:	df000404 	addi	fp,sp,16
 a0046d4:	e13ffd15 	stw	r4,-12(fp)
 a0046d8:	e17ffe15 	stw	r5,-8(fp)
 a0046dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 a0046e0:	e0bffd17 	ldw	r2,-12(fp)
 a0046e4:	10800017 	ldw	r2,0(r2)
 a0046e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 a0046ec:	e0bffc17 	ldw	r2,-16(fp)
 a0046f0:	10800a04 	addi	r2,r2,40
 a0046f4:	e1bfff17 	ldw	r6,-4(fp)
 a0046f8:	e17ffe17 	ldw	r5,-8(fp)
 a0046fc:	1009883a 	mov	r4,r2
 a004700:	a004aec0 	call	a004aec <altera_avalon_jtag_uart_ioctl>
}
 a004704:	e037883a 	mov	sp,fp
 a004708:	dfc00117 	ldw	ra,4(sp)
 a00470c:	df000017 	ldw	fp,0(sp)
 a004710:	dec00204 	addi	sp,sp,8
 a004714:	f800283a 	ret

0a004718 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 a004718:	defffa04 	addi	sp,sp,-24
 a00471c:	dfc00515 	stw	ra,20(sp)
 a004720:	df000415 	stw	fp,16(sp)
 a004724:	df000404 	addi	fp,sp,16
 a004728:	e13ffd15 	stw	r4,-12(fp)
 a00472c:	e17ffe15 	stw	r5,-8(fp)
 a004730:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 a004734:	e0bffd17 	ldw	r2,-12(fp)
 a004738:	00c00044 	movi	r3,1
 a00473c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 a004740:	e0bffd17 	ldw	r2,-12(fp)
 a004744:	10800017 	ldw	r2,0(r2)
 a004748:	10800104 	addi	r2,r2,4
 a00474c:	1007883a 	mov	r3,r2
 a004750:	e0bffd17 	ldw	r2,-12(fp)
 a004754:	10800817 	ldw	r2,32(r2)
 a004758:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 a00475c:	e0bffe17 	ldw	r2,-8(fp)
 a004760:	e0ffff17 	ldw	r3,-4(fp)
 a004764:	d8000015 	stw	zero,0(sp)
 a004768:	e1fffd17 	ldw	r7,-12(fp)
 a00476c:	01828034 	movhi	r6,2560
 a004770:	3191f604 	addi	r6,r6,18392
 a004774:	180b883a 	mov	r5,r3
 a004778:	1009883a 	mov	r4,r2
 a00477c:	a0062f80 	call	a0062f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 a004780:	e0bffd17 	ldw	r2,-12(fp)
 a004784:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 a004788:	e0bffd17 	ldw	r2,-12(fp)
 a00478c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 a004790:	d0e72417 	ldw	r3,-25456(gp)
 a004794:	e1fffd17 	ldw	r7,-12(fp)
 a004798:	01828034 	movhi	r6,2560
 a00479c:	31927904 	addi	r6,r6,18916
 a0047a0:	180b883a 	mov	r5,r3
 a0047a4:	1009883a 	mov	r4,r2
 a0047a8:	a005f300 	call	a005f30 <alt_alarm_start>
 a0047ac:	1000040e 	bge	r2,zero,a0047c0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 a0047b0:	e0fffd17 	ldw	r3,-12(fp)
 a0047b4:	00a00034 	movhi	r2,32768
 a0047b8:	10bfffc4 	addi	r2,r2,-1
 a0047bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 a0047c0:	0001883a 	nop
 a0047c4:	e037883a 	mov	sp,fp
 a0047c8:	dfc00117 	ldw	ra,4(sp)
 a0047cc:	df000017 	ldw	fp,0(sp)
 a0047d0:	dec00204 	addi	sp,sp,8
 a0047d4:	f800283a 	ret

0a0047d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 a0047d8:	defff804 	addi	sp,sp,-32
 a0047dc:	df000715 	stw	fp,28(sp)
 a0047e0:	df000704 	addi	fp,sp,28
 a0047e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 a0047e8:	e0bfff17 	ldw	r2,-4(fp)
 a0047ec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 a0047f0:	e0bffb17 	ldw	r2,-20(fp)
 a0047f4:	10800017 	ldw	r2,0(r2)
 a0047f8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 a0047fc:	e0bffc17 	ldw	r2,-16(fp)
 a004800:	10800104 	addi	r2,r2,4
 a004804:	10800037 	ldwio	r2,0(r2)
 a004808:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 a00480c:	e0bffd17 	ldw	r2,-12(fp)
 a004810:	1080c00c 	andi	r2,r2,768
 a004814:	10006d26 	beq	r2,zero,a0049cc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 a004818:	e0bffd17 	ldw	r2,-12(fp)
 a00481c:	1080400c 	andi	r2,r2,256
 a004820:	10003526 	beq	r2,zero,a0048f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 a004824:	00800074 	movhi	r2,1
 a004828:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a00482c:	e0bffb17 	ldw	r2,-20(fp)
 a004830:	10800a17 	ldw	r2,40(r2)
 a004834:	10800044 	addi	r2,r2,1
 a004838:	1081ffcc 	andi	r2,r2,2047
 a00483c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 a004840:	e0bffb17 	ldw	r2,-20(fp)
 a004844:	10c00b17 	ldw	r3,44(r2)
 a004848:	e0bffe17 	ldw	r2,-8(fp)
 a00484c:	18801526 	beq	r3,r2,a0048a4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 a004850:	e0bffc17 	ldw	r2,-16(fp)
 a004854:	10800037 	ldwio	r2,0(r2)
 a004858:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 a00485c:	e0bff917 	ldw	r2,-28(fp)
 a004860:	10a0000c 	andi	r2,r2,32768
 a004864:	10001126 	beq	r2,zero,a0048ac <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 a004868:	e0bffb17 	ldw	r2,-20(fp)
 a00486c:	10800a17 	ldw	r2,40(r2)
 a004870:	e0fff917 	ldw	r3,-28(fp)
 a004874:	1809883a 	mov	r4,r3
 a004878:	e0fffb17 	ldw	r3,-20(fp)
 a00487c:	1885883a 	add	r2,r3,r2
 a004880:	10800e04 	addi	r2,r2,56
 a004884:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a004888:	e0bffb17 	ldw	r2,-20(fp)
 a00488c:	10800a17 	ldw	r2,40(r2)
 a004890:	10800044 	addi	r2,r2,1
 a004894:	10c1ffcc 	andi	r3,r2,2047
 a004898:	e0bffb17 	ldw	r2,-20(fp)
 a00489c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 a0048a0:	003fe206 	br	a00482c <__alt_mem_flash+0xfe00382c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 a0048a4:	0001883a 	nop
 a0048a8:	00000106 	br	a0048b0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 a0048ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 a0048b0:	e0bff917 	ldw	r2,-28(fp)
 a0048b4:	10bfffec 	andhi	r2,r2,65535
 a0048b8:	10000f26 	beq	r2,zero,a0048f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 a0048bc:	e0bffb17 	ldw	r2,-20(fp)
 a0048c0:	10c00817 	ldw	r3,32(r2)
 a0048c4:	00bfff84 	movi	r2,-2
 a0048c8:	1886703a 	and	r3,r3,r2
 a0048cc:	e0bffb17 	ldw	r2,-20(fp)
 a0048d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 a0048d4:	e0bffc17 	ldw	r2,-16(fp)
 a0048d8:	10800104 	addi	r2,r2,4
 a0048dc:	1007883a 	mov	r3,r2
 a0048e0:	e0bffb17 	ldw	r2,-20(fp)
 a0048e4:	10800817 	ldw	r2,32(r2)
 a0048e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 a0048ec:	e0bffc17 	ldw	r2,-16(fp)
 a0048f0:	10800104 	addi	r2,r2,4
 a0048f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 a0048f8:	e0bffd17 	ldw	r2,-12(fp)
 a0048fc:	1080800c 	andi	r2,r2,512
 a004900:	103fbe26 	beq	r2,zero,a0047fc <__alt_mem_flash+0xfe0037fc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 a004904:	e0bffd17 	ldw	r2,-12(fp)
 a004908:	1004d43a 	srli	r2,r2,16
 a00490c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 a004910:	00001406 	br	a004964 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 a004914:	e0bffc17 	ldw	r2,-16(fp)
 a004918:	e0fffb17 	ldw	r3,-20(fp)
 a00491c:	18c00d17 	ldw	r3,52(r3)
 a004920:	e13ffb17 	ldw	r4,-20(fp)
 a004924:	20c7883a 	add	r3,r4,r3
 a004928:	18c20e04 	addi	r3,r3,2104
 a00492c:	18c00003 	ldbu	r3,0(r3)
 a004930:	18c03fcc 	andi	r3,r3,255
 a004934:	18c0201c 	xori	r3,r3,128
 a004938:	18ffe004 	addi	r3,r3,-128
 a00493c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a004940:	e0bffb17 	ldw	r2,-20(fp)
 a004944:	10800d17 	ldw	r2,52(r2)
 a004948:	10800044 	addi	r2,r2,1
 a00494c:	10c1ffcc 	andi	r3,r2,2047
 a004950:	e0bffb17 	ldw	r2,-20(fp)
 a004954:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 a004958:	e0bffa17 	ldw	r2,-24(fp)
 a00495c:	10bfffc4 	addi	r2,r2,-1
 a004960:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 a004964:	e0bffa17 	ldw	r2,-24(fp)
 a004968:	10000526 	beq	r2,zero,a004980 <altera_avalon_jtag_uart_irq+0x1a8>
 a00496c:	e0bffb17 	ldw	r2,-20(fp)
 a004970:	10c00d17 	ldw	r3,52(r2)
 a004974:	e0bffb17 	ldw	r2,-20(fp)
 a004978:	10800c17 	ldw	r2,48(r2)
 a00497c:	18bfe51e 	bne	r3,r2,a004914 <__alt_mem_flash+0xfe003914>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 a004980:	e0bffa17 	ldw	r2,-24(fp)
 a004984:	103f9d26 	beq	r2,zero,a0047fc <__alt_mem_flash+0xfe0037fc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 a004988:	e0bffb17 	ldw	r2,-20(fp)
 a00498c:	10c00817 	ldw	r3,32(r2)
 a004990:	00bfff44 	movi	r2,-3
 a004994:	1886703a 	and	r3,r3,r2
 a004998:	e0bffb17 	ldw	r2,-20(fp)
 a00499c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 a0049a0:	e0bffb17 	ldw	r2,-20(fp)
 a0049a4:	10800017 	ldw	r2,0(r2)
 a0049a8:	10800104 	addi	r2,r2,4
 a0049ac:	1007883a 	mov	r3,r2
 a0049b0:	e0bffb17 	ldw	r2,-20(fp)
 a0049b4:	10800817 	ldw	r2,32(r2)
 a0049b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 a0049bc:	e0bffc17 	ldw	r2,-16(fp)
 a0049c0:	10800104 	addi	r2,r2,4
 a0049c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 a0049c8:	003f8c06 	br	a0047fc <__alt_mem_flash+0xfe0037fc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 a0049cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 a0049d0:	0001883a 	nop
 a0049d4:	e037883a 	mov	sp,fp
 a0049d8:	df000017 	ldw	fp,0(sp)
 a0049dc:	dec00104 	addi	sp,sp,4
 a0049e0:	f800283a 	ret

0a0049e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 a0049e4:	defff804 	addi	sp,sp,-32
 a0049e8:	df000715 	stw	fp,28(sp)
 a0049ec:	df000704 	addi	fp,sp,28
 a0049f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 a0049f4:	e0bffb17 	ldw	r2,-20(fp)
 a0049f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 a0049fc:	e0bff917 	ldw	r2,-28(fp)
 a004a00:	10800017 	ldw	r2,0(r2)
 a004a04:	10800104 	addi	r2,r2,4
 a004a08:	10800037 	ldwio	r2,0(r2)
 a004a0c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 a004a10:	e0bffa17 	ldw	r2,-24(fp)
 a004a14:	1081000c 	andi	r2,r2,1024
 a004a18:	10000b26 	beq	r2,zero,a004a48 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 a004a1c:	e0bff917 	ldw	r2,-28(fp)
 a004a20:	10800017 	ldw	r2,0(r2)
 a004a24:	10800104 	addi	r2,r2,4
 a004a28:	1007883a 	mov	r3,r2
 a004a2c:	e0bff917 	ldw	r2,-28(fp)
 a004a30:	10800817 	ldw	r2,32(r2)
 a004a34:	10810014 	ori	r2,r2,1024
 a004a38:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 a004a3c:	e0bff917 	ldw	r2,-28(fp)
 a004a40:	10000915 	stw	zero,36(r2)
 a004a44:	00000a06 	br	a004a70 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 a004a48:	e0bff917 	ldw	r2,-28(fp)
 a004a4c:	10c00917 	ldw	r3,36(r2)
 a004a50:	00a00034 	movhi	r2,32768
 a004a54:	10bfff04 	addi	r2,r2,-4
 a004a58:	10c00536 	bltu	r2,r3,a004a70 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 a004a5c:	e0bff917 	ldw	r2,-28(fp)
 a004a60:	10800917 	ldw	r2,36(r2)
 a004a64:	10c00044 	addi	r3,r2,1
 a004a68:	e0bff917 	ldw	r2,-28(fp)
 a004a6c:	10c00915 	stw	r3,36(r2)
 a004a70:	d0a72417 	ldw	r2,-25456(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 a004a74:	e037883a 	mov	sp,fp
 a004a78:	df000017 	ldw	fp,0(sp)
 a004a7c:	dec00104 	addi	sp,sp,4
 a004a80:	f800283a 	ret

0a004a84 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 a004a84:	defffd04 	addi	sp,sp,-12
 a004a88:	df000215 	stw	fp,8(sp)
 a004a8c:	df000204 	addi	fp,sp,8
 a004a90:	e13ffe15 	stw	r4,-8(fp)
 a004a94:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 a004a98:	00000506 	br	a004ab0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 a004a9c:	e0bfff17 	ldw	r2,-4(fp)
 a004aa0:	1090000c 	andi	r2,r2,16384
 a004aa4:	10000226 	beq	r2,zero,a004ab0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 a004aa8:	00bffd44 	movi	r2,-11
 a004aac:	00000b06 	br	a004adc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 a004ab0:	e0bffe17 	ldw	r2,-8(fp)
 a004ab4:	10c00d17 	ldw	r3,52(r2)
 a004ab8:	e0bffe17 	ldw	r2,-8(fp)
 a004abc:	10800c17 	ldw	r2,48(r2)
 a004ac0:	18800526 	beq	r3,r2,a004ad8 <altera_avalon_jtag_uart_close+0x54>
 a004ac4:	e0bffe17 	ldw	r2,-8(fp)
 a004ac8:	10c00917 	ldw	r3,36(r2)
 a004acc:	e0bffe17 	ldw	r2,-8(fp)
 a004ad0:	10800117 	ldw	r2,4(r2)
 a004ad4:	18bff136 	bltu	r3,r2,a004a9c <__alt_mem_flash+0xfe003a9c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 a004ad8:	0005883a 	mov	r2,zero
}
 a004adc:	e037883a 	mov	sp,fp
 a004ae0:	df000017 	ldw	fp,0(sp)
 a004ae4:	dec00104 	addi	sp,sp,4
 a004ae8:	f800283a 	ret

0a004aec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 a004aec:	defffa04 	addi	sp,sp,-24
 a004af0:	df000515 	stw	fp,20(sp)
 a004af4:	df000504 	addi	fp,sp,20
 a004af8:	e13ffd15 	stw	r4,-12(fp)
 a004afc:	e17ffe15 	stw	r5,-8(fp)
 a004b00:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 a004b04:	00bff9c4 	movi	r2,-25
 a004b08:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 a004b0c:	e0bffe17 	ldw	r2,-8(fp)
 a004b10:	10da8060 	cmpeqi	r3,r2,27137
 a004b14:	1800031e 	bne	r3,zero,a004b24 <altera_avalon_jtag_uart_ioctl+0x38>
 a004b18:	109a80a0 	cmpeqi	r2,r2,27138
 a004b1c:	1000181e 	bne	r2,zero,a004b80 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 a004b20:	00002906 	br	a004bc8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 a004b24:	e0bffd17 	ldw	r2,-12(fp)
 a004b28:	10c00117 	ldw	r3,4(r2)
 a004b2c:	00a00034 	movhi	r2,32768
 a004b30:	10bfffc4 	addi	r2,r2,-1
 a004b34:	18802126 	beq	r3,r2,a004bbc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 a004b38:	e0bfff17 	ldw	r2,-4(fp)
 a004b3c:	10800017 	ldw	r2,0(r2)
 a004b40:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 a004b44:	e0bffc17 	ldw	r2,-16(fp)
 a004b48:	10800090 	cmplti	r2,r2,2
 a004b4c:	1000061e 	bne	r2,zero,a004b68 <altera_avalon_jtag_uart_ioctl+0x7c>
 a004b50:	e0fffc17 	ldw	r3,-16(fp)
 a004b54:	00a00034 	movhi	r2,32768
 a004b58:	10bfffc4 	addi	r2,r2,-1
 a004b5c:	18800226 	beq	r3,r2,a004b68 <altera_avalon_jtag_uart_ioctl+0x7c>
 a004b60:	e0bffc17 	ldw	r2,-16(fp)
 a004b64:	00000206 	br	a004b70 <altera_avalon_jtag_uart_ioctl+0x84>
 a004b68:	00a00034 	movhi	r2,32768
 a004b6c:	10bfff84 	addi	r2,r2,-2
 a004b70:	e0fffd17 	ldw	r3,-12(fp)
 a004b74:	18800115 	stw	r2,4(r3)
      rc = 0;
 a004b78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 a004b7c:	00000f06 	br	a004bbc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 a004b80:	e0bffd17 	ldw	r2,-12(fp)
 a004b84:	10c00117 	ldw	r3,4(r2)
 a004b88:	00a00034 	movhi	r2,32768
 a004b8c:	10bfffc4 	addi	r2,r2,-1
 a004b90:	18800c26 	beq	r3,r2,a004bc4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 a004b94:	e0bffd17 	ldw	r2,-12(fp)
 a004b98:	10c00917 	ldw	r3,36(r2)
 a004b9c:	e0bffd17 	ldw	r2,-12(fp)
 a004ba0:	10800117 	ldw	r2,4(r2)
 a004ba4:	1885803a 	cmpltu	r2,r3,r2
 a004ba8:	10c03fcc 	andi	r3,r2,255
 a004bac:	e0bfff17 	ldw	r2,-4(fp)
 a004bb0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 a004bb4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 a004bb8:	00000206 	br	a004bc4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 a004bbc:	0001883a 	nop
 a004bc0:	00000106 	br	a004bc8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 a004bc4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 a004bc8:	e0bffb17 	ldw	r2,-20(fp)
}
 a004bcc:	e037883a 	mov	sp,fp
 a004bd0:	df000017 	ldw	fp,0(sp)
 a004bd4:	dec00104 	addi	sp,sp,4
 a004bd8:	f800283a 	ret

0a004bdc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 a004bdc:	defff304 	addi	sp,sp,-52
 a004be0:	dfc00c15 	stw	ra,48(sp)
 a004be4:	df000b15 	stw	fp,44(sp)
 a004be8:	df000b04 	addi	fp,sp,44
 a004bec:	e13ffc15 	stw	r4,-16(fp)
 a004bf0:	e17ffd15 	stw	r5,-12(fp)
 a004bf4:	e1bffe15 	stw	r6,-8(fp)
 a004bf8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 a004bfc:	e0bffd17 	ldw	r2,-12(fp)
 a004c00:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 a004c04:	00004706 	br	a004d24 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 a004c08:	e0bffc17 	ldw	r2,-16(fp)
 a004c0c:	10800a17 	ldw	r2,40(r2)
 a004c10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 a004c14:	e0bffc17 	ldw	r2,-16(fp)
 a004c18:	10800b17 	ldw	r2,44(r2)
 a004c1c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 a004c20:	e0fff717 	ldw	r3,-36(fp)
 a004c24:	e0bff817 	ldw	r2,-32(fp)
 a004c28:	18800536 	bltu	r3,r2,a004c40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 a004c2c:	e0fff717 	ldw	r3,-36(fp)
 a004c30:	e0bff817 	ldw	r2,-32(fp)
 a004c34:	1885c83a 	sub	r2,r3,r2
 a004c38:	e0bff615 	stw	r2,-40(fp)
 a004c3c:	00000406 	br	a004c50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 a004c40:	00c20004 	movi	r3,2048
 a004c44:	e0bff817 	ldw	r2,-32(fp)
 a004c48:	1885c83a 	sub	r2,r3,r2
 a004c4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 a004c50:	e0bff617 	ldw	r2,-40(fp)
 a004c54:	10001e26 	beq	r2,zero,a004cd0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 a004c58:	e0fffe17 	ldw	r3,-8(fp)
 a004c5c:	e0bff617 	ldw	r2,-40(fp)
 a004c60:	1880022e 	bgeu	r3,r2,a004c6c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 a004c64:	e0bffe17 	ldw	r2,-8(fp)
 a004c68:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 a004c6c:	e0bffc17 	ldw	r2,-16(fp)
 a004c70:	10c00e04 	addi	r3,r2,56
 a004c74:	e0bff817 	ldw	r2,-32(fp)
 a004c78:	1885883a 	add	r2,r3,r2
 a004c7c:	e1bff617 	ldw	r6,-40(fp)
 a004c80:	100b883a 	mov	r5,r2
 a004c84:	e13ff517 	ldw	r4,-44(fp)
 a004c88:	a0016800 	call	a001680 <memcpy>
      ptr   += n;
 a004c8c:	e0fff517 	ldw	r3,-44(fp)
 a004c90:	e0bff617 	ldw	r2,-40(fp)
 a004c94:	1885883a 	add	r2,r3,r2
 a004c98:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 a004c9c:	e0fffe17 	ldw	r3,-8(fp)
 a004ca0:	e0bff617 	ldw	r2,-40(fp)
 a004ca4:	1885c83a 	sub	r2,r3,r2
 a004ca8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a004cac:	e0fff817 	ldw	r3,-32(fp)
 a004cb0:	e0bff617 	ldw	r2,-40(fp)
 a004cb4:	1885883a 	add	r2,r3,r2
 a004cb8:	10c1ffcc 	andi	r3,r2,2047
 a004cbc:	e0bffc17 	ldw	r2,-16(fp)
 a004cc0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 a004cc4:	e0bffe17 	ldw	r2,-8(fp)
 a004cc8:	00bfcf16 	blt	zero,r2,a004c08 <__alt_mem_flash+0xfe003c08>
 a004ccc:	00000106 	br	a004cd4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 a004cd0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 a004cd4:	e0fff517 	ldw	r3,-44(fp)
 a004cd8:	e0bffd17 	ldw	r2,-12(fp)
 a004cdc:	1880141e 	bne	r3,r2,a004d30 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 a004ce0:	e0bfff17 	ldw	r2,-4(fp)
 a004ce4:	1090000c 	andi	r2,r2,16384
 a004ce8:	1000131e 	bne	r2,zero,a004d38 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 a004cec:	0001883a 	nop
 a004cf0:	e0bffc17 	ldw	r2,-16(fp)
 a004cf4:	10c00a17 	ldw	r3,40(r2)
 a004cf8:	e0bff717 	ldw	r2,-36(fp)
 a004cfc:	1880051e 	bne	r3,r2,a004d14 <altera_avalon_jtag_uart_read+0x138>
 a004d00:	e0bffc17 	ldw	r2,-16(fp)
 a004d04:	10c00917 	ldw	r3,36(r2)
 a004d08:	e0bffc17 	ldw	r2,-16(fp)
 a004d0c:	10800117 	ldw	r2,4(r2)
 a004d10:	18bff736 	bltu	r3,r2,a004cf0 <__alt_mem_flash+0xfe003cf0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 a004d14:	e0bffc17 	ldw	r2,-16(fp)
 a004d18:	10c00a17 	ldw	r3,40(r2)
 a004d1c:	e0bff717 	ldw	r2,-36(fp)
 a004d20:	18800726 	beq	r3,r2,a004d40 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 a004d24:	e0bffe17 	ldw	r2,-8(fp)
 a004d28:	00bfb716 	blt	zero,r2,a004c08 <__alt_mem_flash+0xfe003c08>
 a004d2c:	00000506 	br	a004d44 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 a004d30:	0001883a 	nop
 a004d34:	00000306 	br	a004d44 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 a004d38:	0001883a 	nop
 a004d3c:	00000106 	br	a004d44 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 a004d40:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 a004d44:	e0fff517 	ldw	r3,-44(fp)
 a004d48:	e0bffd17 	ldw	r2,-12(fp)
 a004d4c:	18801826 	beq	r3,r2,a004db0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a004d50:	0005303a 	rdctl	r2,status
 a004d54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a004d58:	e0fffb17 	ldw	r3,-20(fp)
 a004d5c:	00bfff84 	movi	r2,-2
 a004d60:	1884703a 	and	r2,r3,r2
 a004d64:	1001703a 	wrctl	status,r2
  
  return context;
 a004d68:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 a004d6c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 a004d70:	e0bffc17 	ldw	r2,-16(fp)
 a004d74:	10800817 	ldw	r2,32(r2)
 a004d78:	10c00054 	ori	r3,r2,1
 a004d7c:	e0bffc17 	ldw	r2,-16(fp)
 a004d80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 a004d84:	e0bffc17 	ldw	r2,-16(fp)
 a004d88:	10800017 	ldw	r2,0(r2)
 a004d8c:	10800104 	addi	r2,r2,4
 a004d90:	1007883a 	mov	r3,r2
 a004d94:	e0bffc17 	ldw	r2,-16(fp)
 a004d98:	10800817 	ldw	r2,32(r2)
 a004d9c:	18800035 	stwio	r2,0(r3)
 a004da0:	e0bffa17 	ldw	r2,-24(fp)
 a004da4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a004da8:	e0bff917 	ldw	r2,-28(fp)
 a004dac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 a004db0:	e0fff517 	ldw	r3,-44(fp)
 a004db4:	e0bffd17 	ldw	r2,-12(fp)
 a004db8:	18800426 	beq	r3,r2,a004dcc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 a004dbc:	e0fff517 	ldw	r3,-44(fp)
 a004dc0:	e0bffd17 	ldw	r2,-12(fp)
 a004dc4:	1885c83a 	sub	r2,r3,r2
 a004dc8:	00000606 	br	a004de4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 a004dcc:	e0bfff17 	ldw	r2,-4(fp)
 a004dd0:	1090000c 	andi	r2,r2,16384
 a004dd4:	10000226 	beq	r2,zero,a004de0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 a004dd8:	00bffd44 	movi	r2,-11
 a004ddc:	00000106 	br	a004de4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 a004de0:	00bffec4 	movi	r2,-5
}
 a004de4:	e037883a 	mov	sp,fp
 a004de8:	dfc00117 	ldw	ra,4(sp)
 a004dec:	df000017 	ldw	fp,0(sp)
 a004df0:	dec00204 	addi	sp,sp,8
 a004df4:	f800283a 	ret

0a004df8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 a004df8:	defff304 	addi	sp,sp,-52
 a004dfc:	dfc00c15 	stw	ra,48(sp)
 a004e00:	df000b15 	stw	fp,44(sp)
 a004e04:	df000b04 	addi	fp,sp,44
 a004e08:	e13ffc15 	stw	r4,-16(fp)
 a004e0c:	e17ffd15 	stw	r5,-12(fp)
 a004e10:	e1bffe15 	stw	r6,-8(fp)
 a004e14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 a004e18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 a004e1c:	e0bffd17 	ldw	r2,-12(fp)
 a004e20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 a004e24:	00003706 	br	a004f04 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 a004e28:	e0bffc17 	ldw	r2,-16(fp)
 a004e2c:	10800c17 	ldw	r2,48(r2)
 a004e30:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 a004e34:	e0bffc17 	ldw	r2,-16(fp)
 a004e38:	10800d17 	ldw	r2,52(r2)
 a004e3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 a004e40:	e0fff917 	ldw	r3,-28(fp)
 a004e44:	e0bff517 	ldw	r2,-44(fp)
 a004e48:	1880062e 	bgeu	r3,r2,a004e64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 a004e4c:	e0fff517 	ldw	r3,-44(fp)
 a004e50:	e0bff917 	ldw	r2,-28(fp)
 a004e54:	1885c83a 	sub	r2,r3,r2
 a004e58:	10bfffc4 	addi	r2,r2,-1
 a004e5c:	e0bff615 	stw	r2,-40(fp)
 a004e60:	00000b06 	br	a004e90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 a004e64:	e0bff517 	ldw	r2,-44(fp)
 a004e68:	10000526 	beq	r2,zero,a004e80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 a004e6c:	00c20004 	movi	r3,2048
 a004e70:	e0bff917 	ldw	r2,-28(fp)
 a004e74:	1885c83a 	sub	r2,r3,r2
 a004e78:	e0bff615 	stw	r2,-40(fp)
 a004e7c:	00000406 	br	a004e90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 a004e80:	00c1ffc4 	movi	r3,2047
 a004e84:	e0bff917 	ldw	r2,-28(fp)
 a004e88:	1885c83a 	sub	r2,r3,r2
 a004e8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 a004e90:	e0bff617 	ldw	r2,-40(fp)
 a004e94:	10001e26 	beq	r2,zero,a004f10 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 a004e98:	e0fffe17 	ldw	r3,-8(fp)
 a004e9c:	e0bff617 	ldw	r2,-40(fp)
 a004ea0:	1880022e 	bgeu	r3,r2,a004eac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 a004ea4:	e0bffe17 	ldw	r2,-8(fp)
 a004ea8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 a004eac:	e0bffc17 	ldw	r2,-16(fp)
 a004eb0:	10c20e04 	addi	r3,r2,2104
 a004eb4:	e0bff917 	ldw	r2,-28(fp)
 a004eb8:	1885883a 	add	r2,r3,r2
 a004ebc:	e1bff617 	ldw	r6,-40(fp)
 a004ec0:	e17ffd17 	ldw	r5,-12(fp)
 a004ec4:	1009883a 	mov	r4,r2
 a004ec8:	a0016800 	call	a001680 <memcpy>
      ptr   += n;
 a004ecc:	e0fffd17 	ldw	r3,-12(fp)
 a004ed0:	e0bff617 	ldw	r2,-40(fp)
 a004ed4:	1885883a 	add	r2,r3,r2
 a004ed8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 a004edc:	e0fffe17 	ldw	r3,-8(fp)
 a004ee0:	e0bff617 	ldw	r2,-40(fp)
 a004ee4:	1885c83a 	sub	r2,r3,r2
 a004ee8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 a004eec:	e0fff917 	ldw	r3,-28(fp)
 a004ef0:	e0bff617 	ldw	r2,-40(fp)
 a004ef4:	1885883a 	add	r2,r3,r2
 a004ef8:	10c1ffcc 	andi	r3,r2,2047
 a004efc:	e0bffc17 	ldw	r2,-16(fp)
 a004f00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 a004f04:	e0bffe17 	ldw	r2,-8(fp)
 a004f08:	00bfc716 	blt	zero,r2,a004e28 <__alt_mem_flash+0xfe003e28>
 a004f0c:	00000106 	br	a004f14 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 a004f10:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a004f14:	0005303a 	rdctl	r2,status
 a004f18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a004f1c:	e0fffb17 	ldw	r3,-20(fp)
 a004f20:	00bfff84 	movi	r2,-2
 a004f24:	1884703a 	and	r2,r3,r2
 a004f28:	1001703a 	wrctl	status,r2
  
  return context;
 a004f2c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 a004f30:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 a004f34:	e0bffc17 	ldw	r2,-16(fp)
 a004f38:	10800817 	ldw	r2,32(r2)
 a004f3c:	10c00094 	ori	r3,r2,2
 a004f40:	e0bffc17 	ldw	r2,-16(fp)
 a004f44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 a004f48:	e0bffc17 	ldw	r2,-16(fp)
 a004f4c:	10800017 	ldw	r2,0(r2)
 a004f50:	10800104 	addi	r2,r2,4
 a004f54:	1007883a 	mov	r3,r2
 a004f58:	e0bffc17 	ldw	r2,-16(fp)
 a004f5c:	10800817 	ldw	r2,32(r2)
 a004f60:	18800035 	stwio	r2,0(r3)
 a004f64:	e0bffa17 	ldw	r2,-24(fp)
 a004f68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a004f6c:	e0bff817 	ldw	r2,-32(fp)
 a004f70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 a004f74:	e0bffe17 	ldw	r2,-8(fp)
 a004f78:	0080100e 	bge	zero,r2,a004fbc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 a004f7c:	e0bfff17 	ldw	r2,-4(fp)
 a004f80:	1090000c 	andi	r2,r2,16384
 a004f84:	1000101e 	bne	r2,zero,a004fc8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 a004f88:	0001883a 	nop
 a004f8c:	e0bffc17 	ldw	r2,-16(fp)
 a004f90:	10c00d17 	ldw	r3,52(r2)
 a004f94:	e0bff517 	ldw	r2,-44(fp)
 a004f98:	1880051e 	bne	r3,r2,a004fb0 <altera_avalon_jtag_uart_write+0x1b8>
 a004f9c:	e0bffc17 	ldw	r2,-16(fp)
 a004fa0:	10c00917 	ldw	r3,36(r2)
 a004fa4:	e0bffc17 	ldw	r2,-16(fp)
 a004fa8:	10800117 	ldw	r2,4(r2)
 a004fac:	18bff736 	bltu	r3,r2,a004f8c <__alt_mem_flash+0xfe003f8c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 a004fb0:	e0bffc17 	ldw	r2,-16(fp)
 a004fb4:	10800917 	ldw	r2,36(r2)
 a004fb8:	1000051e 	bne	r2,zero,a004fd0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 a004fbc:	e0bffe17 	ldw	r2,-8(fp)
 a004fc0:	00bfd016 	blt	zero,r2,a004f04 <__alt_mem_flash+0xfe003f04>
 a004fc4:	00000306 	br	a004fd4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 a004fc8:	0001883a 	nop
 a004fcc:	00000106 	br	a004fd4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 a004fd0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 a004fd4:	e0fffd17 	ldw	r3,-12(fp)
 a004fd8:	e0bff717 	ldw	r2,-36(fp)
 a004fdc:	18800426 	beq	r3,r2,a004ff0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 a004fe0:	e0fffd17 	ldw	r3,-12(fp)
 a004fe4:	e0bff717 	ldw	r2,-36(fp)
 a004fe8:	1885c83a 	sub	r2,r3,r2
 a004fec:	00000606 	br	a005008 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 a004ff0:	e0bfff17 	ldw	r2,-4(fp)
 a004ff4:	1090000c 	andi	r2,r2,16384
 a004ff8:	10000226 	beq	r2,zero,a005004 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 a004ffc:	00bffd44 	movi	r2,-11
 a005000:	00000106 	br	a005008 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 a005004:	00bffec4 	movi	r2,-5
}
 a005008:	e037883a 	mov	sp,fp
 a00500c:	dfc00117 	ldw	ra,4(sp)
 a005010:	df000017 	ldw	fp,0(sp)
 a005014:	dec00204 	addi	sp,sp,8
 a005018:	f800283a 	ret

0a00501c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 a00501c:	defffa04 	addi	sp,sp,-24
 a005020:	dfc00515 	stw	ra,20(sp)
 a005024:	df000415 	stw	fp,16(sp)
 a005028:	df000404 	addi	fp,sp,16
 a00502c:	e13ffd15 	stw	r4,-12(fp)
 a005030:	e17ffe15 	stw	r5,-8(fp)
 a005034:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 a005038:	e0bffd17 	ldw	r2,-12(fp)
 a00503c:	10800017 	ldw	r2,0(r2)
 a005040:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 a005044:	e0bffc17 	ldw	r2,-16(fp)
 a005048:	10c00a04 	addi	r3,r2,40
 a00504c:	e0bffd17 	ldw	r2,-12(fp)
 a005050:	10800217 	ldw	r2,8(r2)
 a005054:	100f883a 	mov	r7,r2
 a005058:	e1bfff17 	ldw	r6,-4(fp)
 a00505c:	e17ffe17 	ldw	r5,-8(fp)
 a005060:	1809883a 	mov	r4,r3
 a005064:	a0055300 	call	a005530 <altera_avalon_uart_read>
      fd->fd_flags);
}
 a005068:	e037883a 	mov	sp,fp
 a00506c:	dfc00117 	ldw	ra,4(sp)
 a005070:	df000017 	ldw	fp,0(sp)
 a005074:	dec00204 	addi	sp,sp,8
 a005078:	f800283a 	ret

0a00507c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 a00507c:	defffa04 	addi	sp,sp,-24
 a005080:	dfc00515 	stw	ra,20(sp)
 a005084:	df000415 	stw	fp,16(sp)
 a005088:	df000404 	addi	fp,sp,16
 a00508c:	e13ffd15 	stw	r4,-12(fp)
 a005090:	e17ffe15 	stw	r5,-8(fp)
 a005094:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 a005098:	e0bffd17 	ldw	r2,-12(fp)
 a00509c:	10800017 	ldw	r2,0(r2)
 a0050a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 a0050a4:	e0bffc17 	ldw	r2,-16(fp)
 a0050a8:	10c00a04 	addi	r3,r2,40
 a0050ac:	e0bffd17 	ldw	r2,-12(fp)
 a0050b0:	10800217 	ldw	r2,8(r2)
 a0050b4:	100f883a 	mov	r7,r2
 a0050b8:	e1bfff17 	ldw	r6,-4(fp)
 a0050bc:	e17ffe17 	ldw	r5,-8(fp)
 a0050c0:	1809883a 	mov	r4,r3
 a0050c4:	a0057480 	call	a005748 <altera_avalon_uart_write>
      fd->fd_flags);
}
 a0050c8:	e037883a 	mov	sp,fp
 a0050cc:	dfc00117 	ldw	ra,4(sp)
 a0050d0:	df000017 	ldw	fp,0(sp)
 a0050d4:	dec00204 	addi	sp,sp,8
 a0050d8:	f800283a 	ret

0a0050dc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 a0050dc:	defffc04 	addi	sp,sp,-16
 a0050e0:	dfc00315 	stw	ra,12(sp)
 a0050e4:	df000215 	stw	fp,8(sp)
 a0050e8:	df000204 	addi	fp,sp,8
 a0050ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 a0050f0:	e0bfff17 	ldw	r2,-4(fp)
 a0050f4:	10800017 	ldw	r2,0(r2)
 a0050f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 a0050fc:	e0bffe17 	ldw	r2,-8(fp)
 a005100:	10c00a04 	addi	r3,r2,40
 a005104:	e0bfff17 	ldw	r2,-4(fp)
 a005108:	10800217 	ldw	r2,8(r2)
 a00510c:	100b883a 	mov	r5,r2
 a005110:	1809883a 	mov	r4,r3
 a005114:	a0054a00 	call	a0054a0 <altera_avalon_uart_close>
}
 a005118:	e037883a 	mov	sp,fp
 a00511c:	dfc00117 	ldw	ra,4(sp)
 a005120:	df000017 	ldw	fp,0(sp)
 a005124:	dec00204 	addi	sp,sp,8
 a005128:	f800283a 	ret

0a00512c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 a00512c:	defff804 	addi	sp,sp,-32
 a005130:	dfc00715 	stw	ra,28(sp)
 a005134:	df000615 	stw	fp,24(sp)
 a005138:	df000604 	addi	fp,sp,24
 a00513c:	e13ffd15 	stw	r4,-12(fp)
 a005140:	e17ffe15 	stw	r5,-8(fp)
 a005144:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 a005148:	e0bffd17 	ldw	r2,-12(fp)
 a00514c:	10800017 	ldw	r2,0(r2)
 a005150:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 a005154:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 a005158:	1000041e 	bne	r2,zero,a00516c <altera_avalon_uart_init+0x40>
 a00515c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 a005160:	1000021e 	bne	r2,zero,a00516c <altera_avalon_uart_init+0x40>
 a005164:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 a005168:	10000226 	beq	r2,zero,a005174 <altera_avalon_uart_init+0x48>
 a00516c:	00800044 	movi	r2,1
 a005170:	00000106 	br	a005178 <altera_avalon_uart_init+0x4c>
 a005174:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 a005178:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 a00517c:	e0bffc17 	ldw	r2,-16(fp)
 a005180:	10000f1e 	bne	r2,zero,a0051c0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 a005184:	e0bffd17 	ldw	r2,-12(fp)
 a005188:	00c32004 	movi	r3,3200
 a00518c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 a005190:	e0bffb17 	ldw	r2,-20(fp)
 a005194:	10800304 	addi	r2,r2,12
 a005198:	e0fffd17 	ldw	r3,-12(fp)
 a00519c:	18c00117 	ldw	r3,4(r3)
 a0051a0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 a0051a4:	d8000015 	stw	zero,0(sp)
 a0051a8:	e1fffd17 	ldw	r7,-12(fp)
 a0051ac:	01828034 	movhi	r6,2560
 a0051b0:	31947604 	addi	r6,r6,20952
 a0051b4:	e17fff17 	ldw	r5,-4(fp)
 a0051b8:	e13ffe17 	ldw	r4,-8(fp)
 a0051bc:	a0062f80 	call	a0062f8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 a0051c0:	0001883a 	nop
 a0051c4:	e037883a 	mov	sp,fp
 a0051c8:	dfc00117 	ldw	ra,4(sp)
 a0051cc:	df000017 	ldw	fp,0(sp)
 a0051d0:	dec00204 	addi	sp,sp,8
 a0051d4:	f800283a 	ret

0a0051d8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 a0051d8:	defffa04 	addi	sp,sp,-24
 a0051dc:	dfc00515 	stw	ra,20(sp)
 a0051e0:	df000415 	stw	fp,16(sp)
 a0051e4:	df000404 	addi	fp,sp,16
 a0051e8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 a0051ec:	e0bfff17 	ldw	r2,-4(fp)
 a0051f0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 a0051f4:	e0bffc17 	ldw	r2,-16(fp)
 a0051f8:	10800017 	ldw	r2,0(r2)
 a0051fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 a005200:	e0bffd17 	ldw	r2,-12(fp)
 a005204:	10800204 	addi	r2,r2,8
 a005208:	10800037 	ldwio	r2,0(r2)
 a00520c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 a005210:	e0bffd17 	ldw	r2,-12(fp)
 a005214:	10800204 	addi	r2,r2,8
 a005218:	0007883a 	mov	r3,zero
 a00521c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 a005220:	e0bffd17 	ldw	r2,-12(fp)
 a005224:	10800204 	addi	r2,r2,8
 a005228:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 a00522c:	e0bffe17 	ldw	r2,-8(fp)
 a005230:	1080200c 	andi	r2,r2,128
 a005234:	10000326 	beq	r2,zero,a005244 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 a005238:	e17ffe17 	ldw	r5,-8(fp)
 a00523c:	e13ffc17 	ldw	r4,-16(fp)
 a005240:	a0052740 	call	a005274 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 a005244:	e0bffe17 	ldw	r2,-8(fp)
 a005248:	1081100c 	andi	r2,r2,1088
 a00524c:	10000326 	beq	r2,zero,a00525c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 a005250:	e17ffe17 	ldw	r5,-8(fp)
 a005254:	e13ffc17 	ldw	r4,-16(fp)
 a005258:	a0053580 	call	a005358 <altera_avalon_uart_txirq>
  }
  

}
 a00525c:	0001883a 	nop
 a005260:	e037883a 	mov	sp,fp
 a005264:	dfc00117 	ldw	ra,4(sp)
 a005268:	df000017 	ldw	fp,0(sp)
 a00526c:	dec00204 	addi	sp,sp,8
 a005270:	f800283a 	ret

0a005274 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 a005274:	defffc04 	addi	sp,sp,-16
 a005278:	df000315 	stw	fp,12(sp)
 a00527c:	df000304 	addi	fp,sp,12
 a005280:	e13ffe15 	stw	r4,-8(fp)
 a005284:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 a005288:	e0bfff17 	ldw	r2,-4(fp)
 a00528c:	108000cc 	andi	r2,r2,3
 a005290:	10002c1e 	bne	r2,zero,a005344 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 a005294:	e0bffe17 	ldw	r2,-8(fp)
 a005298:	10800317 	ldw	r2,12(r2)
 a00529c:	e0bffe17 	ldw	r2,-8(fp)
 a0052a0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 a0052a4:	e0bffe17 	ldw	r2,-8(fp)
 a0052a8:	10800317 	ldw	r2,12(r2)
 a0052ac:	10800044 	addi	r2,r2,1
 a0052b0:	10800fcc 	andi	r2,r2,63
 a0052b4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 a0052b8:	e0bffe17 	ldw	r2,-8(fp)
 a0052bc:	10800317 	ldw	r2,12(r2)
 a0052c0:	e0fffe17 	ldw	r3,-8(fp)
 a0052c4:	18c00017 	ldw	r3,0(r3)
 a0052c8:	18c00037 	ldwio	r3,0(r3)
 a0052cc:	1809883a 	mov	r4,r3
 a0052d0:	e0fffe17 	ldw	r3,-8(fp)
 a0052d4:	1885883a 	add	r2,r3,r2
 a0052d8:	10800704 	addi	r2,r2,28
 a0052dc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 a0052e0:	e0bffe17 	ldw	r2,-8(fp)
 a0052e4:	e0fffd17 	ldw	r3,-12(fp)
 a0052e8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 a0052ec:	e0bffe17 	ldw	r2,-8(fp)
 a0052f0:	10800317 	ldw	r2,12(r2)
 a0052f4:	10800044 	addi	r2,r2,1
 a0052f8:	10800fcc 	andi	r2,r2,63
 a0052fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 a005300:	e0bffe17 	ldw	r2,-8(fp)
 a005304:	10c00217 	ldw	r3,8(r2)
 a005308:	e0bffd17 	ldw	r2,-12(fp)
 a00530c:	18800e1e 	bne	r3,r2,a005348 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 a005310:	e0bffe17 	ldw	r2,-8(fp)
 a005314:	10c00117 	ldw	r3,4(r2)
 a005318:	00bfdfc4 	movi	r2,-129
 a00531c:	1886703a 	and	r3,r3,r2
 a005320:	e0bffe17 	ldw	r2,-8(fp)
 a005324:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 a005328:	e0bffe17 	ldw	r2,-8(fp)
 a00532c:	10800017 	ldw	r2,0(r2)
 a005330:	10800304 	addi	r2,r2,12
 a005334:	e0fffe17 	ldw	r3,-8(fp)
 a005338:	18c00117 	ldw	r3,4(r3)
 a00533c:	10c00035 	stwio	r3,0(r2)
 a005340:	00000106 	br	a005348 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 a005344:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 a005348:	e037883a 	mov	sp,fp
 a00534c:	df000017 	ldw	fp,0(sp)
 a005350:	dec00104 	addi	sp,sp,4
 a005354:	f800283a 	ret

0a005358 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 a005358:	defffb04 	addi	sp,sp,-20
 a00535c:	df000415 	stw	fp,16(sp)
 a005360:	df000404 	addi	fp,sp,16
 a005364:	e13ffc15 	stw	r4,-16(fp)
 a005368:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 a00536c:	e0bffc17 	ldw	r2,-16(fp)
 a005370:	10c00417 	ldw	r3,16(r2)
 a005374:	e0bffc17 	ldw	r2,-16(fp)
 a005378:	10800517 	ldw	r2,20(r2)
 a00537c:	18803226 	beq	r3,r2,a005448 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 a005380:	e0bffc17 	ldw	r2,-16(fp)
 a005384:	10800617 	ldw	r2,24(r2)
 a005388:	1080008c 	andi	r2,r2,2
 a00538c:	10000326 	beq	r2,zero,a00539c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 a005390:	e0bffd17 	ldw	r2,-12(fp)
 a005394:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 a005398:	10001d26 	beq	r2,zero,a005410 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 a00539c:	e0bffc17 	ldw	r2,-16(fp)
 a0053a0:	10800417 	ldw	r2,16(r2)
 a0053a4:	e0bffc17 	ldw	r2,-16(fp)
 a0053a8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 a0053ac:	e0bffc17 	ldw	r2,-16(fp)
 a0053b0:	10800017 	ldw	r2,0(r2)
 a0053b4:	10800104 	addi	r2,r2,4
 a0053b8:	e0fffc17 	ldw	r3,-16(fp)
 a0053bc:	18c00417 	ldw	r3,16(r3)
 a0053c0:	e13ffc17 	ldw	r4,-16(fp)
 a0053c4:	20c7883a 	add	r3,r4,r3
 a0053c8:	18c01704 	addi	r3,r3,92
 a0053cc:	18c00003 	ldbu	r3,0(r3)
 a0053d0:	18c03fcc 	andi	r3,r3,255
 a0053d4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 a0053d8:	e0bffc17 	ldw	r2,-16(fp)
 a0053dc:	10800417 	ldw	r2,16(r2)
 a0053e0:	10800044 	addi	r2,r2,1
 a0053e4:	e0fffc17 	ldw	r3,-16(fp)
 a0053e8:	18800415 	stw	r2,16(r3)
 a0053ec:	10c00fcc 	andi	r3,r2,63
 a0053f0:	e0bffc17 	ldw	r2,-16(fp)
 a0053f4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 a0053f8:	e0bffc17 	ldw	r2,-16(fp)
 a0053fc:	10800117 	ldw	r2,4(r2)
 a005400:	10c01014 	ori	r3,r2,64
 a005404:	e0bffc17 	ldw	r2,-16(fp)
 a005408:	10c00115 	stw	r3,4(r2)
 a00540c:	00000e06 	br	a005448 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 a005410:	e0bffc17 	ldw	r2,-16(fp)
 a005414:	10800017 	ldw	r2,0(r2)
 a005418:	10800204 	addi	r2,r2,8
 a00541c:	10800037 	ldwio	r2,0(r2)
 a005420:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 a005424:	e0bffd17 	ldw	r2,-12(fp)
 a005428:	1082000c 	andi	r2,r2,2048
 a00542c:	1000061e 	bne	r2,zero,a005448 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 a005430:	e0bffc17 	ldw	r2,-16(fp)
 a005434:	10c00117 	ldw	r3,4(r2)
 a005438:	00bfefc4 	movi	r2,-65
 a00543c:	1886703a 	and	r3,r3,r2
 a005440:	e0bffc17 	ldw	r2,-16(fp)
 a005444:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 a005448:	e0bffc17 	ldw	r2,-16(fp)
 a00544c:	10c00417 	ldw	r3,16(r2)
 a005450:	e0bffc17 	ldw	r2,-16(fp)
 a005454:	10800517 	ldw	r2,20(r2)
 a005458:	1880061e 	bne	r3,r2,a005474 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 a00545c:	e0bffc17 	ldw	r2,-16(fp)
 a005460:	10c00117 	ldw	r3,4(r2)
 a005464:	00beefc4 	movi	r2,-1089
 a005468:	1886703a 	and	r3,r3,r2
 a00546c:	e0bffc17 	ldw	r2,-16(fp)
 a005470:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a005474:	e0bffc17 	ldw	r2,-16(fp)
 a005478:	10800017 	ldw	r2,0(r2)
 a00547c:	10800304 	addi	r2,r2,12
 a005480:	e0fffc17 	ldw	r3,-16(fp)
 a005484:	18c00117 	ldw	r3,4(r3)
 a005488:	10c00035 	stwio	r3,0(r2)
}
 a00548c:	0001883a 	nop
 a005490:	e037883a 	mov	sp,fp
 a005494:	df000017 	ldw	fp,0(sp)
 a005498:	dec00104 	addi	sp,sp,4
 a00549c:	f800283a 	ret

0a0054a0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 a0054a0:	defffd04 	addi	sp,sp,-12
 a0054a4:	df000215 	stw	fp,8(sp)
 a0054a8:	df000204 	addi	fp,sp,8
 a0054ac:	e13ffe15 	stw	r4,-8(fp)
 a0054b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 a0054b4:	00000506 	br	a0054cc <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 a0054b8:	e0bfff17 	ldw	r2,-4(fp)
 a0054bc:	1090000c 	andi	r2,r2,16384
 a0054c0:	10000226 	beq	r2,zero,a0054cc <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 a0054c4:	00bffd44 	movi	r2,-11
 a0054c8:	00000606 	br	a0054e4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 a0054cc:	e0bffe17 	ldw	r2,-8(fp)
 a0054d0:	10c00417 	ldw	r3,16(r2)
 a0054d4:	e0bffe17 	ldw	r2,-8(fp)
 a0054d8:	10800517 	ldw	r2,20(r2)
 a0054dc:	18bff61e 	bne	r3,r2,a0054b8 <__alt_mem_flash+0xfe0044b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 a0054e0:	0005883a 	mov	r2,zero
}
 a0054e4:	e037883a 	mov	sp,fp
 a0054e8:	df000017 	ldw	fp,0(sp)
 a0054ec:	dec00104 	addi	sp,sp,4
 a0054f0:	f800283a 	ret

0a0054f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a0054f4:	defffe04 	addi	sp,sp,-8
 a0054f8:	dfc00115 	stw	ra,4(sp)
 a0054fc:	df000015 	stw	fp,0(sp)
 a005500:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a005504:	d0a00917 	ldw	r2,-32732(gp)
 a005508:	10000326 	beq	r2,zero,a005518 <alt_get_errno+0x24>
 a00550c:	d0a00917 	ldw	r2,-32732(gp)
 a005510:	103ee83a 	callr	r2
 a005514:	00000106 	br	a00551c <alt_get_errno+0x28>
 a005518:	d0a71f04 	addi	r2,gp,-25476
}
 a00551c:	e037883a 	mov	sp,fp
 a005520:	dfc00117 	ldw	ra,4(sp)
 a005524:	df000017 	ldw	fp,0(sp)
 a005528:	dec00204 	addi	sp,sp,8
 a00552c:	f800283a 	ret

0a005530 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 a005530:	defff204 	addi	sp,sp,-56
 a005534:	dfc00d15 	stw	ra,52(sp)
 a005538:	df000c15 	stw	fp,48(sp)
 a00553c:	df000c04 	addi	fp,sp,48
 a005540:	e13ffc15 	stw	r4,-16(fp)
 a005544:	e17ffd15 	stw	r5,-12(fp)
 a005548:	e1bffe15 	stw	r6,-8(fp)
 a00554c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 a005550:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 a005554:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 a005558:	e0bfff17 	ldw	r2,-4(fp)
 a00555c:	1090000c 	andi	r2,r2,16384
 a005560:	1005003a 	cmpeq	r2,r2,zero
 a005564:	10803fcc 	andi	r2,r2,255
 a005568:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 a00556c:	00001306 	br	a0055bc <altera_avalon_uart_read+0x8c>
    {
      count++;
 a005570:	e0bff517 	ldw	r2,-44(fp)
 a005574:	10800044 	addi	r2,r2,1
 a005578:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 a00557c:	e0bffd17 	ldw	r2,-12(fp)
 a005580:	10c00044 	addi	r3,r2,1
 a005584:	e0fffd15 	stw	r3,-12(fp)
 a005588:	e0fffc17 	ldw	r3,-16(fp)
 a00558c:	18c00217 	ldw	r3,8(r3)
 a005590:	e13ffc17 	ldw	r4,-16(fp)
 a005594:	20c7883a 	add	r3,r4,r3
 a005598:	18c00704 	addi	r3,r3,28
 a00559c:	18c00003 	ldbu	r3,0(r3)
 a0055a0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 a0055a4:	e0bffc17 	ldw	r2,-16(fp)
 a0055a8:	10800217 	ldw	r2,8(r2)
 a0055ac:	10800044 	addi	r2,r2,1
 a0055b0:	10c00fcc 	andi	r3,r2,63
 a0055b4:	e0bffc17 	ldw	r2,-16(fp)
 a0055b8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 a0055bc:	e0fff517 	ldw	r3,-44(fp)
 a0055c0:	e0bffe17 	ldw	r2,-8(fp)
 a0055c4:	1880050e 	bge	r3,r2,a0055dc <altera_avalon_uart_read+0xac>
 a0055c8:	e0bffc17 	ldw	r2,-16(fp)
 a0055cc:	10c00217 	ldw	r3,8(r2)
 a0055d0:	e0bffc17 	ldw	r2,-16(fp)
 a0055d4:	10800317 	ldw	r2,12(r2)
 a0055d8:	18bfe51e 	bne	r3,r2,a005570 <__alt_mem_flash+0xfe004570>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 a0055dc:	e0bff517 	ldw	r2,-44(fp)
 a0055e0:	1000251e 	bne	r2,zero,a005678 <altera_avalon_uart_read+0x148>
 a0055e4:	e0bffc17 	ldw	r2,-16(fp)
 a0055e8:	10c00217 	ldw	r3,8(r2)
 a0055ec:	e0bffc17 	ldw	r2,-16(fp)
 a0055f0:	10800317 	ldw	r2,12(r2)
 a0055f4:	1880201e 	bne	r3,r2,a005678 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 a0055f8:	e0bff617 	ldw	r2,-40(fp)
 a0055fc:	1000071e 	bne	r2,zero,a00561c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 a005600:	a0054f40 	call	a0054f4 <alt_get_errno>
 a005604:	1007883a 	mov	r3,r2
 a005608:	008002c4 	movi	r2,11
 a00560c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 a005610:	00800044 	movi	r2,1
 a005614:	e0bff405 	stb	r2,-48(fp)
        break;
 a005618:	00001b06 	br	a005688 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00561c:	0005303a 	rdctl	r2,status
 a005620:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a005624:	e0fff917 	ldw	r3,-28(fp)
 a005628:	00bfff84 	movi	r2,-2
 a00562c:	1884703a 	and	r2,r3,r2
 a005630:	1001703a 	wrctl	status,r2
  
  return context;
 a005634:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 a005638:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 a00563c:	e0bffc17 	ldw	r2,-16(fp)
 a005640:	10800117 	ldw	r2,4(r2)
 a005644:	10c02014 	ori	r3,r2,128
 a005648:	e0bffc17 	ldw	r2,-16(fp)
 a00564c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a005650:	e0bffc17 	ldw	r2,-16(fp)
 a005654:	10800017 	ldw	r2,0(r2)
 a005658:	10800304 	addi	r2,r2,12
 a00565c:	e0fffc17 	ldw	r3,-16(fp)
 a005660:	18c00117 	ldw	r3,4(r3)
 a005664:	10c00035 	stwio	r3,0(r2)
 a005668:	e0bff817 	ldw	r2,-32(fp)
 a00566c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a005670:	e0bffa17 	ldw	r2,-24(fp)
 a005674:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 a005678:	e0bff517 	ldw	r2,-44(fp)
 a00567c:	1000021e 	bne	r2,zero,a005688 <altera_avalon_uart_read+0x158>
 a005680:	e0bffe17 	ldw	r2,-8(fp)
 a005684:	103fcd1e 	bne	r2,zero,a0055bc <__alt_mem_flash+0xfe0045bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a005688:	0005303a 	rdctl	r2,status
 a00568c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a005690:	e0fffb17 	ldw	r3,-20(fp)
 a005694:	00bfff84 	movi	r2,-2
 a005698:	1884703a 	and	r2,r3,r2
 a00569c:	1001703a 	wrctl	status,r2
  
  return context;
 a0056a0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 a0056a4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 a0056a8:	e0bffc17 	ldw	r2,-16(fp)
 a0056ac:	10800117 	ldw	r2,4(r2)
 a0056b0:	10c02014 	ori	r3,r2,128
 a0056b4:	e0bffc17 	ldw	r2,-16(fp)
 a0056b8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a0056bc:	e0bffc17 	ldw	r2,-16(fp)
 a0056c0:	10800017 	ldw	r2,0(r2)
 a0056c4:	10800304 	addi	r2,r2,12
 a0056c8:	e0fffc17 	ldw	r3,-16(fp)
 a0056cc:	18c00117 	ldw	r3,4(r3)
 a0056d0:	10c00035 	stwio	r3,0(r2)
 a0056d4:	e0bff817 	ldw	r2,-32(fp)
 a0056d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a0056dc:	e0bff717 	ldw	r2,-36(fp)
 a0056e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 a0056e4:	e0bff403 	ldbu	r2,-48(fp)
 a0056e8:	10000226 	beq	r2,zero,a0056f4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 a0056ec:	00bffd44 	movi	r2,-11
 a0056f0:	00000106 	br	a0056f8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 a0056f4:	e0bff517 	ldw	r2,-44(fp)
  }
}
 a0056f8:	e037883a 	mov	sp,fp
 a0056fc:	dfc00117 	ldw	ra,4(sp)
 a005700:	df000017 	ldw	fp,0(sp)
 a005704:	dec00204 	addi	sp,sp,8
 a005708:	f800283a 	ret

0a00570c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00570c:	defffe04 	addi	sp,sp,-8
 a005710:	dfc00115 	stw	ra,4(sp)
 a005714:	df000015 	stw	fp,0(sp)
 a005718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00571c:	d0a00917 	ldw	r2,-32732(gp)
 a005720:	10000326 	beq	r2,zero,a005730 <alt_get_errno+0x24>
 a005724:	d0a00917 	ldw	r2,-32732(gp)
 a005728:	103ee83a 	callr	r2
 a00572c:	00000106 	br	a005734 <alt_get_errno+0x28>
 a005730:	d0a71f04 	addi	r2,gp,-25476
}
 a005734:	e037883a 	mov	sp,fp
 a005738:	dfc00117 	ldw	ra,4(sp)
 a00573c:	df000017 	ldw	fp,0(sp)
 a005740:	dec00204 	addi	sp,sp,8
 a005744:	f800283a 	ret

0a005748 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 a005748:	defff204 	addi	sp,sp,-56
 a00574c:	dfc00d15 	stw	ra,52(sp)
 a005750:	df000c15 	stw	fp,48(sp)
 a005754:	df000c04 	addi	fp,sp,48
 a005758:	e13ffc15 	stw	r4,-16(fp)
 a00575c:	e17ffd15 	stw	r5,-12(fp)
 a005760:	e1bffe15 	stw	r6,-8(fp)
 a005764:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 a005768:	e0bffe17 	ldw	r2,-8(fp)
 a00576c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 a005770:	e0bfff17 	ldw	r2,-4(fp)
 a005774:	1090000c 	andi	r2,r2,16384
 a005778:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 a00577c:	00003c06 	br	a005870 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 a005780:	e0bffc17 	ldw	r2,-16(fp)
 a005784:	10800517 	ldw	r2,20(r2)
 a005788:	10800044 	addi	r2,r2,1
 a00578c:	10800fcc 	andi	r2,r2,63
 a005790:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 a005794:	e0bffc17 	ldw	r2,-16(fp)
 a005798:	10c00417 	ldw	r3,16(r2)
 a00579c:	e0bff717 	ldw	r2,-36(fp)
 a0057a0:	1880221e 	bne	r3,r2,a00582c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 a0057a4:	e0bff517 	ldw	r2,-44(fp)
 a0057a8:	10000526 	beq	r2,zero,a0057c0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 a0057ac:	a00570c0 	call	a00570c <alt_get_errno>
 a0057b0:	1007883a 	mov	r3,r2
 a0057b4:	008002c4 	movi	r2,11
 a0057b8:	18800015 	stw	r2,0(r3)
        break;
 a0057bc:	00002e06 	br	a005878 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a0057c0:	0005303a 	rdctl	r2,status
 a0057c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a0057c8:	e0fff917 	ldw	r3,-28(fp)
 a0057cc:	00bfff84 	movi	r2,-2
 a0057d0:	1884703a 	and	r2,r3,r2
 a0057d4:	1001703a 	wrctl	status,r2
  
  return context;
 a0057d8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 a0057dc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 a0057e0:	e0bffc17 	ldw	r2,-16(fp)
 a0057e4:	10800117 	ldw	r2,4(r2)
 a0057e8:	10c11014 	ori	r3,r2,1088
 a0057ec:	e0bffc17 	ldw	r2,-16(fp)
 a0057f0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a0057f4:	e0bffc17 	ldw	r2,-16(fp)
 a0057f8:	10800017 	ldw	r2,0(r2)
 a0057fc:	10800304 	addi	r2,r2,12
 a005800:	e0fffc17 	ldw	r3,-16(fp)
 a005804:	18c00117 	ldw	r3,4(r3)
 a005808:	10c00035 	stwio	r3,0(r2)
 a00580c:	e0bff817 	ldw	r2,-32(fp)
 a005810:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a005814:	e0bff617 	ldw	r2,-40(fp)
 a005818:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 a00581c:	e0bffc17 	ldw	r2,-16(fp)
 a005820:	10c00417 	ldw	r3,16(r2)
 a005824:	e0bff717 	ldw	r2,-36(fp)
 a005828:	18bffc26 	beq	r3,r2,a00581c <__alt_mem_flash+0xfe00481c>
      }
    }

    count--;
 a00582c:	e0bff417 	ldw	r2,-48(fp)
 a005830:	10bfffc4 	addi	r2,r2,-1
 a005834:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 a005838:	e0bffc17 	ldw	r2,-16(fp)
 a00583c:	10c00517 	ldw	r3,20(r2)
 a005840:	e0bffd17 	ldw	r2,-12(fp)
 a005844:	11000044 	addi	r4,r2,1
 a005848:	e13ffd15 	stw	r4,-12(fp)
 a00584c:	10800003 	ldbu	r2,0(r2)
 a005850:	1009883a 	mov	r4,r2
 a005854:	e0bffc17 	ldw	r2,-16(fp)
 a005858:	10c5883a 	add	r2,r2,r3
 a00585c:	10801704 	addi	r2,r2,92
 a005860:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 a005864:	e0bffc17 	ldw	r2,-16(fp)
 a005868:	e0fff717 	ldw	r3,-36(fp)
 a00586c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 a005870:	e0bff417 	ldw	r2,-48(fp)
 a005874:	103fc21e 	bne	r2,zero,a005780 <__alt_mem_flash+0xfe004780>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a005878:	0005303a 	rdctl	r2,status
 a00587c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a005880:	e0fffb17 	ldw	r3,-20(fp)
 a005884:	00bfff84 	movi	r2,-2
 a005888:	1884703a 	and	r2,r3,r2
 a00588c:	1001703a 	wrctl	status,r2
  
  return context;
 a005890:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 a005894:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 a005898:	e0bffc17 	ldw	r2,-16(fp)
 a00589c:	10800117 	ldw	r2,4(r2)
 a0058a0:	10c11014 	ori	r3,r2,1088
 a0058a4:	e0bffc17 	ldw	r2,-16(fp)
 a0058a8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 a0058ac:	e0bffc17 	ldw	r2,-16(fp)
 a0058b0:	10800017 	ldw	r2,0(r2)
 a0058b4:	10800304 	addi	r2,r2,12
 a0058b8:	e0fffc17 	ldw	r3,-16(fp)
 a0058bc:	18c00117 	ldw	r3,4(r3)
 a0058c0:	10c00035 	stwio	r3,0(r2)
 a0058c4:	e0bff817 	ldw	r2,-32(fp)
 a0058c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a0058cc:	e0bffa17 	ldw	r2,-24(fp)
 a0058d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 a0058d4:	e0fffe17 	ldw	r3,-8(fp)
 a0058d8:	e0bff417 	ldw	r2,-48(fp)
 a0058dc:	1885c83a 	sub	r2,r3,r2
}
 a0058e0:	e037883a 	mov	sp,fp
 a0058e4:	dfc00117 	ldw	ra,4(sp)
 a0058e8:	df000017 	ldw	fp,0(sp)
 a0058ec:	dec00204 	addi	sp,sp,8
 a0058f0:	f800283a 	ret

0a0058f4 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 a0058f4:	defff904 	addi	sp,sp,-28
 a0058f8:	dfc00615 	stw	ra,24(sp)
 a0058fc:	df000515 	stw	fp,20(sp)
 a005900:	df000504 	addi	fp,sp,20
 a005904:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 a005908:	00800144 	movi	r2,5
 a00590c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 a005910:	d8000215 	stw	zero,8(sp)
 a005914:	e0bffe44 	addi	r2,fp,-7
 a005918:	d8800115 	stw	r2,4(sp)
 a00591c:	00800044 	movi	r2,1
 a005920:	d8800015 	stw	r2,0(sp)
 a005924:	e1fffe04 	addi	r7,fp,-8
 a005928:	01800044 	movi	r6,1
 a00592c:	000b883a 	mov	r5,zero
 a005930:	e13fff17 	ldw	r4,-4(fp)
 a005934:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 a005938:	e0bffe43 	ldbu	r2,-7(fp)
}
 a00593c:	e037883a 	mov	sp,fp
 a005940:	dfc00117 	ldw	ra,4(sp)
 a005944:	df000017 	ldw	fp,0(sp)
 a005948:	dec00204 	addi	sp,sp,8
 a00594c:	f800283a 	ret

0a005950 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 a005950:	defffd04 	addi	sp,sp,-12
 a005954:	dfc00215 	stw	ra,8(sp)
 a005958:	df000115 	stw	fp,4(sp)
 a00595c:	df000104 	addi	fp,sp,4
 a005960:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 a005964:	e13fff17 	ldw	r4,-4(fp)
 a005968:	a0058f40 	call	a0058f4 <epcs_read_status_register>
 a00596c:	10803fcc 	andi	r2,r2,255
 a005970:	1080004c 	andi	r2,r2,1
}
 a005974:	e037883a 	mov	sp,fp
 a005978:	dfc00117 	ldw	ra,4(sp)
 a00597c:	df000017 	ldw	fp,0(sp)
 a005980:	dec00204 	addi	sp,sp,8
 a005984:	f800283a 	ret

0a005988 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 a005988:	defffd04 	addi	sp,sp,-12
 a00598c:	dfc00215 	stw	ra,8(sp)
 a005990:	df000115 	stw	fp,4(sp)
 a005994:	df000104 	addi	fp,sp,4
 a005998:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 a00599c:	0001883a 	nop
 a0059a0:	e13fff17 	ldw	r4,-4(fp)
 a0059a4:	a0059500 	call	a005950 <epcs_test_wip>
 a0059a8:	103ffd1e 	bne	r2,zero,a0059a0 <__alt_mem_flash+0xfe0049a0>
  {
  }
}
 a0059ac:	0001883a 	nop
 a0059b0:	e037883a 	mov	sp,fp
 a0059b4:	dfc00117 	ldw	ra,4(sp)
 a0059b8:	df000017 	ldw	fp,0(sp)
 a0059bc:	dec00204 	addi	sp,sp,8
 a0059c0:	f800283a 	ret

0a0059c4 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 a0059c4:	defff604 	addi	sp,sp,-40
 a0059c8:	dfc00915 	stw	ra,36(sp)
 a0059cc:	df000815 	stw	fp,32(sp)
 a0059d0:	df000804 	addi	fp,sp,32
 a0059d4:	e13ffd15 	stw	r4,-12(fp)
 a0059d8:	e17ffe15 	stw	r5,-8(fp)
 a0059dc:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 a0059e0:	e0bfff17 	ldw	r2,-4(fp)
 a0059e4:	10001226 	beq	r2,zero,a005a30 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 a0059e8:	00bff604 	movi	r2,-40
 a0059ec:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 a0059f0:	e0bffe17 	ldw	r2,-8(fp)
 a0059f4:	1004d63a 	srli	r2,r2,24
 a0059f8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 a0059fc:	e0bffe17 	ldw	r2,-8(fp)
 a005a00:	1004d43a 	srli	r2,r2,16
 a005a04:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 a005a08:	e0bffe17 	ldw	r2,-8(fp)
 a005a0c:	1004d23a 	srli	r2,r2,8
 a005a10:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 a005a14:	e0bffe17 	ldw	r2,-8(fp)
 a005a18:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 a005a1c:	00800144 	movi	r2,5
 a005a20:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 a005a24:	e13ffd17 	ldw	r4,-12(fp)
 a005a28:	a005e780 	call	a005e78 <epcs_enter_4_bytes_mode>
 a005a2c:	00000c06 	br	a005a60 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 a005a30:	00bff604 	movi	r2,-40
 a005a34:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 a005a38:	e0bffe17 	ldw	r2,-8(fp)
 a005a3c:	1004d43a 	srli	r2,r2,16
 a005a40:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 a005a44:	e0bffe17 	ldw	r2,-8(fp)
 a005a48:	1004d23a 	srli	r2,r2,8
 a005a4c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 a005a50:	e0bffe17 	ldw	r2,-8(fp)
 a005a54:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 a005a58:	00800104 	movi	r2,4
 a005a5c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 a005a60:	e13ffd17 	ldw	r4,-12(fp)
 a005a64:	a005bb40 	call	a005bb4 <epcs_write_enable>

  alt_avalon_spi_command(
 a005a68:	e0bffb03 	ldbu	r2,-20(fp)
 a005a6c:	e0fffb44 	addi	r3,fp,-19
 a005a70:	d8000215 	stw	zero,8(sp)
 a005a74:	d8000115 	stw	zero,4(sp)
 a005a78:	d8000015 	stw	zero,0(sp)
 a005a7c:	180f883a 	mov	r7,r3
 a005a80:	100d883a 	mov	r6,r2
 a005a84:	000b883a 	mov	r5,zero
 a005a88:	e13ffd17 	ldw	r4,-12(fp)
 a005a8c:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 a005a90:	e13ffd17 	ldw	r4,-12(fp)
 a005a94:	a0059880 	call	a005988 <epcs_await_wip_released>

  if(four_bytes_mode)
 a005a98:	e0bfff17 	ldw	r2,-4(fp)
 a005a9c:	10000226 	beq	r2,zero,a005aa8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 a005aa0:	e13ffd17 	ldw	r4,-12(fp)
 a005aa4:	a005ed40 	call	a005ed4 <epcs_exit_4_bytes_mode>
  }
}
 a005aa8:	0001883a 	nop
 a005aac:	e037883a 	mov	sp,fp
 a005ab0:	dfc00117 	ldw	ra,4(sp)
 a005ab4:	df000017 	ldw	fp,0(sp)
 a005ab8:	dec00204 	addi	sp,sp,8
 a005abc:	f800283a 	ret

0a005ac0 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 a005ac0:	defff404 	addi	sp,sp,-48
 a005ac4:	dfc00b15 	stw	ra,44(sp)
 a005ac8:	df000a15 	stw	fp,40(sp)
 a005acc:	df000a04 	addi	fp,sp,40
 a005ad0:	e13ffc15 	stw	r4,-16(fp)
 a005ad4:	e17ffd15 	stw	r5,-12(fp)
 a005ad8:	e1bffe15 	stw	r6,-8(fp)
 a005adc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 a005ae0:	008000c4 	movi	r2,3
 a005ae4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 a005ae8:	e0800217 	ldw	r2,8(fp)
 a005aec:	10001026 	beq	r2,zero,a005b30 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 a005af0:	e0bffd17 	ldw	r2,-12(fp)
 a005af4:	1004d63a 	srli	r2,r2,24
 a005af8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 a005afc:	e0bffd17 	ldw	r2,-12(fp)
 a005b00:	1005d43a 	srai	r2,r2,16
 a005b04:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 a005b08:	e0bffd17 	ldw	r2,-12(fp)
 a005b0c:	1005d23a 	srai	r2,r2,8
 a005b10:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 a005b14:	e0bffd17 	ldw	r2,-12(fp)
 a005b18:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 a005b1c:	00800144 	movi	r2,5
 a005b20:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 a005b24:	e13ffc17 	ldw	r4,-16(fp)
 a005b28:	a005e780 	call	a005e78 <epcs_enter_4_bytes_mode>
 a005b2c:	00000a06 	br	a005b58 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 a005b30:	e0bffd17 	ldw	r2,-12(fp)
 a005b34:	1005d43a 	srai	r2,r2,16
 a005b38:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 a005b3c:	e0bffd17 	ldw	r2,-12(fp)
 a005b40:	1005d23a 	srai	r2,r2,8
 a005b44:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 a005b48:	e0bffd17 	ldw	r2,-12(fp)
 a005b4c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 a005b50:	00800104 	movi	r2,4
 a005b54:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 a005b58:	e13ffc17 	ldw	r4,-16(fp)
 a005b5c:	a0059880 	call	a005988 <epcs_await_wip_released>

  alt_avalon_spi_command(
 a005b60:	e0bfff17 	ldw	r2,-4(fp)
 a005b64:	e13ffa04 	addi	r4,fp,-24
 a005b68:	d8000215 	stw	zero,8(sp)
 a005b6c:	e0fffe17 	ldw	r3,-8(fp)
 a005b70:	d8c00115 	stw	r3,4(sp)
 a005b74:	d8800015 	stw	r2,0(sp)
 a005b78:	200f883a 	mov	r7,r4
 a005b7c:	e1bff917 	ldw	r6,-28(fp)
 a005b80:	000b883a 	mov	r5,zero
 a005b84:	e13ffc17 	ldw	r4,-16(fp)
 a005b88:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 a005b8c:	e0800217 	ldw	r2,8(fp)
 a005b90:	10000226 	beq	r2,zero,a005b9c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 a005b94:	e13ffc17 	ldw	r4,-16(fp)
 a005b98:	a005ed40 	call	a005ed4 <epcs_exit_4_bytes_mode>
  }

  return length;
 a005b9c:	e0bfff17 	ldw	r2,-4(fp)
}
 a005ba0:	e037883a 	mov	sp,fp
 a005ba4:	dfc00117 	ldw	ra,4(sp)
 a005ba8:	df000017 	ldw	fp,0(sp)
 a005bac:	dec00204 	addi	sp,sp,8
 a005bb0:	f800283a 	ret

0a005bb4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 a005bb4:	defff904 	addi	sp,sp,-28
 a005bb8:	dfc00615 	stw	ra,24(sp)
 a005bbc:	df000515 	stw	fp,20(sp)
 a005bc0:	df000504 	addi	fp,sp,20
 a005bc4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 a005bc8:	00800184 	movi	r2,6
 a005bcc:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 a005bd0:	d8000215 	stw	zero,8(sp)
 a005bd4:	d8000115 	stw	zero,4(sp)
 a005bd8:	d8000015 	stw	zero,0(sp)
 a005bdc:	e1fffe04 	addi	r7,fp,-8
 a005be0:	01800044 	movi	r6,1
 a005be4:	000b883a 	mov	r5,zero
 a005be8:	e13fff17 	ldw	r4,-4(fp)
 a005bec:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 a005bf0:	0001883a 	nop
 a005bf4:	e037883a 	mov	sp,fp
 a005bf8:	dfc00117 	ldw	ra,4(sp)
 a005bfc:	df000017 	ldw	fp,0(sp)
 a005c00:	dec00204 	addi	sp,sp,8
 a005c04:	f800283a 	ret

0a005c08 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 a005c08:	defff804 	addi	sp,sp,-32
 a005c0c:	dfc00715 	stw	ra,28(sp)
 a005c10:	df000615 	stw	fp,24(sp)
 a005c14:	df000604 	addi	fp,sp,24
 a005c18:	e13ffe15 	stw	r4,-8(fp)
 a005c1c:	2805883a 	mov	r2,r5
 a005c20:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 a005c24:	00800044 	movi	r2,1
 a005c28:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 a005c2c:	e0bfff03 	ldbu	r2,-4(fp)
 a005c30:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 a005c34:	d8000215 	stw	zero,8(sp)
 a005c38:	d8000115 	stw	zero,4(sp)
 a005c3c:	d8000015 	stw	zero,0(sp)
 a005c40:	e1fffd04 	addi	r7,fp,-12
 a005c44:	01800084 	movi	r6,2
 a005c48:	000b883a 	mov	r5,zero
 a005c4c:	e13ffe17 	ldw	r4,-8(fp)
 a005c50:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 a005c54:	e13ffe17 	ldw	r4,-8(fp)
 a005c58:	a0059880 	call	a005988 <epcs_await_wip_released>
}
 a005c5c:	0001883a 	nop
 a005c60:	e037883a 	mov	sp,fp
 a005c64:	dfc00117 	ldw	ra,4(sp)
 a005c68:	df000017 	ldw	fp,0(sp)
 a005c6c:	dec00204 	addi	sp,sp,8
 a005c70:	f800283a 	ret

0a005c74 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 a005c74:	defff404 	addi	sp,sp,-48
 a005c78:	dfc00b15 	stw	ra,44(sp)
 a005c7c:	df000a15 	stw	fp,40(sp)
 a005c80:	df000a04 	addi	fp,sp,40
 a005c84:	e13ffc15 	stw	r4,-16(fp)
 a005c88:	e17ffd15 	stw	r5,-12(fp)
 a005c8c:	e1bffe15 	stw	r6,-8(fp)
 a005c90:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 a005c94:	00800084 	movi	r2,2
 a005c98:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 a005c9c:	e0800217 	ldw	r2,8(fp)
 a005ca0:	10001026 	beq	r2,zero,a005ce4 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 a005ca4:	e0bffd17 	ldw	r2,-12(fp)
 a005ca8:	1004d63a 	srli	r2,r2,24
 a005cac:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 a005cb0:	e0bffd17 	ldw	r2,-12(fp)
 a005cb4:	1005d43a 	srai	r2,r2,16
 a005cb8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 a005cbc:	e0bffd17 	ldw	r2,-12(fp)
 a005cc0:	1005d23a 	srai	r2,r2,8
 a005cc4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 a005cc8:	e0bffd17 	ldw	r2,-12(fp)
 a005ccc:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 a005cd0:	00800144 	movi	r2,5
 a005cd4:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 a005cd8:	e13ffc17 	ldw	r4,-16(fp)
 a005cdc:	a005e780 	call	a005e78 <epcs_enter_4_bytes_mode>
 a005ce0:	00000a06 	br	a005d0c <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 a005ce4:	e0bffd17 	ldw	r2,-12(fp)
 a005ce8:	1005d43a 	srai	r2,r2,16
 a005cec:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 a005cf0:	e0bffd17 	ldw	r2,-12(fp)
 a005cf4:	1005d23a 	srai	r2,r2,8
 a005cf8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 a005cfc:	e0bffd17 	ldw	r2,-12(fp)
 a005d00:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 a005d04:	00800104 	movi	r2,4
 a005d08:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 a005d0c:	e13ffc17 	ldw	r4,-16(fp)
 a005d10:	a005bb40 	call	a005bb4 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 a005d14:	e0fffa04 	addi	r3,fp,-24
 a005d18:	00800044 	movi	r2,1
 a005d1c:	d8800215 	stw	r2,8(sp)
 a005d20:	d8000115 	stw	zero,4(sp)
 a005d24:	d8000015 	stw	zero,0(sp)
 a005d28:	180f883a 	mov	r7,r3
 a005d2c:	e1bff917 	ldw	r6,-28(fp)
 a005d30:	000b883a 	mov	r5,zero
 a005d34:	e13ffc17 	ldw	r4,-16(fp)
 a005d38:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 a005d3c:	e0bfff17 	ldw	r2,-4(fp)
 a005d40:	d8000215 	stw	zero,8(sp)
 a005d44:	d8000115 	stw	zero,4(sp)
 a005d48:	d8000015 	stw	zero,0(sp)
 a005d4c:	e1fffe17 	ldw	r7,-8(fp)
 a005d50:	100d883a 	mov	r6,r2
 a005d54:	000b883a 	mov	r5,zero
 a005d58:	e13ffc17 	ldw	r4,-16(fp)
 a005d5c:	a006b440 	call	a006b44 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 a005d60:	e13ffc17 	ldw	r4,-16(fp)
 a005d64:	a0059880 	call	a005988 <epcs_await_wip_released>

  if(four_bytes_mode)
 a005d68:	e0800217 	ldw	r2,8(fp)
 a005d6c:	10000226 	beq	r2,zero,a005d78 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 a005d70:	e13ffc17 	ldw	r4,-16(fp)
 a005d74:	a005ed40 	call	a005ed4 <epcs_exit_4_bytes_mode>
  }

  return length;
 a005d78:	e0bfff17 	ldw	r2,-4(fp)
}
 a005d7c:	e037883a 	mov	sp,fp
 a005d80:	dfc00117 	ldw	ra,4(sp)
 a005d84:	df000017 	ldw	fp,0(sp)
 a005d88:	dec00204 	addi	sp,sp,8
 a005d8c:	f800283a 	ret

0a005d90 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 a005d90:	defff804 	addi	sp,sp,-32
 a005d94:	dfc00715 	stw	ra,28(sp)
 a005d98:	df000615 	stw	fp,24(sp)
 a005d9c:	df000604 	addi	fp,sp,24
 a005da0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 a005da4:	00bfeac4 	movi	r2,-85
 a005da8:	e0bffd05 	stb	r2,-12(fp)
 a005dac:	e03ffd45 	stb	zero,-11(fp)
 a005db0:	e03ffd85 	stb	zero,-10(fp)
 a005db4:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 a005db8:	d8000215 	stw	zero,8(sp)
 a005dbc:	e0bffe04 	addi	r2,fp,-8
 a005dc0:	d8800115 	stw	r2,4(sp)
 a005dc4:	00800044 	movi	r2,1
 a005dc8:	d8800015 	stw	r2,0(sp)
 a005dcc:	e1fffd04 	addi	r7,fp,-12
 a005dd0:	01800104 	movi	r6,4
 a005dd4:	000b883a 	mov	r5,zero
 a005dd8:	e13fff17 	ldw	r4,-4(fp)
 a005ddc:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 a005de0:	e0bffe03 	ldbu	r2,-8(fp)
}
 a005de4:	e037883a 	mov	sp,fp
 a005de8:	dfc00117 	ldw	ra,4(sp)
 a005dec:	df000017 	ldw	fp,0(sp)
 a005df0:	dec00204 	addi	sp,sp,8
 a005df4:	f800283a 	ret

0a005df8 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 a005df8:	defff904 	addi	sp,sp,-28
 a005dfc:	dfc00615 	stw	ra,24(sp)
 a005e00:	df000515 	stw	fp,20(sp)
 a005e04:	df000504 	addi	fp,sp,20
 a005e08:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 a005e0c:	00bfe7c4 	movi	r2,-97
 a005e10:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 a005e14:	d8000215 	stw	zero,8(sp)
 a005e18:	e0bffe44 	addi	r2,fp,-7
 a005e1c:	d8800115 	stw	r2,4(sp)
 a005e20:	008000c4 	movi	r2,3
 a005e24:	d8800015 	stw	r2,0(sp)
 a005e28:	e1fffe04 	addi	r7,fp,-8
 a005e2c:	01800044 	movi	r6,1
 a005e30:	000b883a 	mov	r5,zero
 a005e34:	e13fff17 	ldw	r4,-4(fp)
 a005e38:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 a005e3c:	e0bffe43 	ldbu	r2,-7(fp)
 a005e40:	10803fcc 	andi	r2,r2,255
 a005e44:	1006943a 	slli	r3,r2,16
 a005e48:	e0bffe83 	ldbu	r2,-6(fp)
 a005e4c:	10803fcc 	andi	r2,r2,255
 a005e50:	1004923a 	slli	r2,r2,8
 a005e54:	1886b03a 	or	r3,r3,r2
 a005e58:	e0bffec3 	ldbu	r2,-5(fp)
 a005e5c:	10803fcc 	andi	r2,r2,255
 a005e60:	1884b03a 	or	r2,r3,r2
}
 a005e64:	e037883a 	mov	sp,fp
 a005e68:	dfc00117 	ldw	ra,4(sp)
 a005e6c:	df000017 	ldw	fp,0(sp)
 a005e70:	dec00204 	addi	sp,sp,8
 a005e74:	f800283a 	ret

0a005e78 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 a005e78:	defff904 	addi	sp,sp,-28
 a005e7c:	dfc00615 	stw	ra,24(sp)
 a005e80:	df000515 	stw	fp,20(sp)
 a005e84:	df000504 	addi	fp,sp,20
 a005e88:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 a005e8c:	00bfedc4 	movi	r2,-73
 a005e90:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 a005e94:	e13fff17 	ldw	r4,-4(fp)
 a005e98:	a005bb40 	call	a005bb4 <epcs_write_enable>

  alt_avalon_spi_command(
 a005e9c:	d8000215 	stw	zero,8(sp)
 a005ea0:	d8000115 	stw	zero,4(sp)
 a005ea4:	d8000015 	stw	zero,0(sp)
 a005ea8:	e1fffe04 	addi	r7,fp,-8
 a005eac:	01800044 	movi	r6,1
 a005eb0:	000b883a 	mov	r5,zero
 a005eb4:	e13fff17 	ldw	r4,-4(fp)
 a005eb8:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 a005ebc:	0001883a 	nop
}
 a005ec0:	e037883a 	mov	sp,fp
 a005ec4:	dfc00117 	ldw	ra,4(sp)
 a005ec8:	df000017 	ldw	fp,0(sp)
 a005ecc:	dec00204 	addi	sp,sp,8
 a005ed0:	f800283a 	ret

0a005ed4 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 a005ed4:	defff904 	addi	sp,sp,-28
 a005ed8:	dfc00615 	stw	ra,24(sp)
 a005edc:	df000515 	stw	fp,20(sp)
 a005ee0:	df000504 	addi	fp,sp,20
 a005ee4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 a005ee8:	00bffa44 	movi	r2,-23
 a005eec:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 a005ef0:	e13fff17 	ldw	r4,-4(fp)
 a005ef4:	a005bb40 	call	a005bb4 <epcs_write_enable>

  alt_avalon_spi_command(
 a005ef8:	d8000215 	stw	zero,8(sp)
 a005efc:	d8000115 	stw	zero,4(sp)
 a005f00:	d8000015 	stw	zero,0(sp)
 a005f04:	e1fffe04 	addi	r7,fp,-8
 a005f08:	01800044 	movi	r6,1
 a005f0c:	000b883a 	mov	r5,zero
 a005f10:	e13fff17 	ldw	r4,-4(fp)
 a005f14:	a006b440 	call	a006b44 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 a005f18:	0001883a 	nop
}
 a005f1c:	e037883a 	mov	sp,fp
 a005f20:	dfc00117 	ldw	ra,4(sp)
 a005f24:	df000017 	ldw	fp,0(sp)
 a005f28:	dec00204 	addi	sp,sp,8
 a005f2c:	f800283a 	ret

0a005f30 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 a005f30:	defff504 	addi	sp,sp,-44
 a005f34:	df000a15 	stw	fp,40(sp)
 a005f38:	df000a04 	addi	fp,sp,40
 a005f3c:	e13ffc15 	stw	r4,-16(fp)
 a005f40:	e17ffd15 	stw	r5,-12(fp)
 a005f44:	e1bffe15 	stw	r6,-8(fp)
 a005f48:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 a005f4c:	e03ff615 	stw	zero,-40(fp)
 a005f50:	d0a72417 	ldw	r2,-25456(gp)
  
  if (alt_ticks_per_second ())
 a005f54:	10003c26 	beq	r2,zero,a006048 <alt_alarm_start+0x118>
  {
    if (alarm)
 a005f58:	e0bffc17 	ldw	r2,-16(fp)
 a005f5c:	10003826 	beq	r2,zero,a006040 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 a005f60:	e0bffc17 	ldw	r2,-16(fp)
 a005f64:	e0fffe17 	ldw	r3,-8(fp)
 a005f68:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 a005f6c:	e0bffc17 	ldw	r2,-16(fp)
 a005f70:	e0ffff17 	ldw	r3,-4(fp)
 a005f74:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a005f78:	0005303a 	rdctl	r2,status
 a005f7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a005f80:	e0fff917 	ldw	r3,-28(fp)
 a005f84:	00bfff84 	movi	r2,-2
 a005f88:	1884703a 	and	r2,r3,r2
 a005f8c:	1001703a 	wrctl	status,r2
  
  return context;
 a005f90:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 a005f94:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 a005f98:	d0a72517 	ldw	r2,-25452(gp)
      
      current_nticks = alt_nticks();
 a005f9c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 a005fa0:	e0fffd17 	ldw	r3,-12(fp)
 a005fa4:	e0bff617 	ldw	r2,-40(fp)
 a005fa8:	1885883a 	add	r2,r3,r2
 a005fac:	10c00044 	addi	r3,r2,1
 a005fb0:	e0bffc17 	ldw	r2,-16(fp)
 a005fb4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 a005fb8:	e0bffc17 	ldw	r2,-16(fp)
 a005fbc:	10c00217 	ldw	r3,8(r2)
 a005fc0:	e0bff617 	ldw	r2,-40(fp)
 a005fc4:	1880042e 	bgeu	r3,r2,a005fd8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 a005fc8:	e0bffc17 	ldw	r2,-16(fp)
 a005fcc:	00c00044 	movi	r3,1
 a005fd0:	10c00405 	stb	r3,16(r2)
 a005fd4:	00000206 	br	a005fe0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 a005fd8:	e0bffc17 	ldw	r2,-16(fp)
 a005fdc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 a005fe0:	e0bffc17 	ldw	r2,-16(fp)
 a005fe4:	d0e00e04 	addi	r3,gp,-32712
 a005fe8:	e0fffa15 	stw	r3,-24(fp)
 a005fec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 a005ff0:	e0bffb17 	ldw	r2,-20(fp)
 a005ff4:	e0fffa17 	ldw	r3,-24(fp)
 a005ff8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 a005ffc:	e0bffa17 	ldw	r2,-24(fp)
 a006000:	10c00017 	ldw	r3,0(r2)
 a006004:	e0bffb17 	ldw	r2,-20(fp)
 a006008:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 a00600c:	e0bffa17 	ldw	r2,-24(fp)
 a006010:	10800017 	ldw	r2,0(r2)
 a006014:	e0fffb17 	ldw	r3,-20(fp)
 a006018:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 a00601c:	e0bffa17 	ldw	r2,-24(fp)
 a006020:	e0fffb17 	ldw	r3,-20(fp)
 a006024:	10c00015 	stw	r3,0(r2)
 a006028:	e0bff817 	ldw	r2,-32(fp)
 a00602c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a006030:	e0bff717 	ldw	r2,-36(fp)
 a006034:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 a006038:	0005883a 	mov	r2,zero
 a00603c:	00000306 	br	a00604c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 a006040:	00bffa84 	movi	r2,-22
 a006044:	00000106 	br	a00604c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 a006048:	00bfde84 	movi	r2,-134
  }
}
 a00604c:	e037883a 	mov	sp,fp
 a006050:	df000017 	ldw	fp,0(sp)
 a006054:	dec00104 	addi	sp,sp,4
 a006058:	f800283a 	ret

0a00605c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 a00605c:	deffff04 	addi	sp,sp,-4
 a006060:	df000015 	stw	fp,0(sp)
 a006064:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 a006068:	0001883a 	nop
 a00606c:	e037883a 	mov	sp,fp
 a006070:	df000017 	ldw	fp,0(sp)
 a006074:	dec00104 	addi	sp,sp,4
 a006078:	f800283a 	ret

0a00607c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a00607c:	defffe04 	addi	sp,sp,-8
 a006080:	dfc00115 	stw	ra,4(sp)
 a006084:	df000015 	stw	fp,0(sp)
 a006088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a00608c:	d0a00917 	ldw	r2,-32732(gp)
 a006090:	10000326 	beq	r2,zero,a0060a0 <alt_get_errno+0x24>
 a006094:	d0a00917 	ldw	r2,-32732(gp)
 a006098:	103ee83a 	callr	r2
 a00609c:	00000106 	br	a0060a4 <alt_get_errno+0x28>
 a0060a0:	d0a71f04 	addi	r2,gp,-25476
}
 a0060a4:	e037883a 	mov	sp,fp
 a0060a8:	dfc00117 	ldw	ra,4(sp)
 a0060ac:	df000017 	ldw	fp,0(sp)
 a0060b0:	dec00204 	addi	sp,sp,8
 a0060b4:	f800283a 	ret

0a0060b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 a0060b8:	defffa04 	addi	sp,sp,-24
 a0060bc:	dfc00515 	stw	ra,20(sp)
 a0060c0:	df000415 	stw	fp,16(sp)
 a0060c4:	df000404 	addi	fp,sp,16
 a0060c8:	e13ffe15 	stw	r4,-8(fp)
 a0060cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 a0060d0:	e0bffe17 	ldw	r2,-8(fp)
 a0060d4:	10000326 	beq	r2,zero,a0060e4 <alt_dev_llist_insert+0x2c>
 a0060d8:	e0bffe17 	ldw	r2,-8(fp)
 a0060dc:	10800217 	ldw	r2,8(r2)
 a0060e0:	1000061e 	bne	r2,zero,a0060fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 a0060e4:	a00607c0 	call	a00607c <alt_get_errno>
 a0060e8:	1007883a 	mov	r3,r2
 a0060ec:	00800584 	movi	r2,22
 a0060f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 a0060f4:	00bffa84 	movi	r2,-22
 a0060f8:	00001306 	br	a006148 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 a0060fc:	e0bffe17 	ldw	r2,-8(fp)
 a006100:	e0ffff17 	ldw	r3,-4(fp)
 a006104:	e0fffc15 	stw	r3,-16(fp)
 a006108:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 a00610c:	e0bffd17 	ldw	r2,-12(fp)
 a006110:	e0fffc17 	ldw	r3,-16(fp)
 a006114:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 a006118:	e0bffc17 	ldw	r2,-16(fp)
 a00611c:	10c00017 	ldw	r3,0(r2)
 a006120:	e0bffd17 	ldw	r2,-12(fp)
 a006124:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 a006128:	e0bffc17 	ldw	r2,-16(fp)
 a00612c:	10800017 	ldw	r2,0(r2)
 a006130:	e0fffd17 	ldw	r3,-12(fp)
 a006134:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 a006138:	e0bffc17 	ldw	r2,-16(fp)
 a00613c:	e0fffd17 	ldw	r3,-12(fp)
 a006140:	10c00015 	stw	r3,0(r2)

  return 0;  
 a006144:	0005883a 	mov	r2,zero
}
 a006148:	e037883a 	mov	sp,fp
 a00614c:	dfc00117 	ldw	ra,4(sp)
 a006150:	df000017 	ldw	fp,0(sp)
 a006154:	dec00204 	addi	sp,sp,8
 a006158:	f800283a 	ret

0a00615c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 a00615c:	defffd04 	addi	sp,sp,-12
 a006160:	dfc00215 	stw	ra,8(sp)
 a006164:	df000115 	stw	fp,4(sp)
 a006168:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 a00616c:	00828034 	movhi	r2,2560
 a006170:	109d1804 	addi	r2,r2,29792
 a006174:	e0bfff15 	stw	r2,-4(fp)
 a006178:	00000606 	br	a006194 <_do_ctors+0x38>
        (*ctor) (); 
 a00617c:	e0bfff17 	ldw	r2,-4(fp)
 a006180:	10800017 	ldw	r2,0(r2)
 a006184:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 a006188:	e0bfff17 	ldw	r2,-4(fp)
 a00618c:	10bfff04 	addi	r2,r2,-4
 a006190:	e0bfff15 	stw	r2,-4(fp)
 a006194:	e0ffff17 	ldw	r3,-4(fp)
 a006198:	00828034 	movhi	r2,2560
 a00619c:	109d1904 	addi	r2,r2,29796
 a0061a0:	18bff62e 	bgeu	r3,r2,a00617c <__alt_mem_flash+0xfe00517c>
        (*ctor) (); 
}
 a0061a4:	0001883a 	nop
 a0061a8:	e037883a 	mov	sp,fp
 a0061ac:	dfc00117 	ldw	ra,4(sp)
 a0061b0:	df000017 	ldw	fp,0(sp)
 a0061b4:	dec00204 	addi	sp,sp,8
 a0061b8:	f800283a 	ret

0a0061bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 a0061bc:	defffd04 	addi	sp,sp,-12
 a0061c0:	dfc00215 	stw	ra,8(sp)
 a0061c4:	df000115 	stw	fp,4(sp)
 a0061c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 a0061cc:	00828034 	movhi	r2,2560
 a0061d0:	109d1804 	addi	r2,r2,29792
 a0061d4:	e0bfff15 	stw	r2,-4(fp)
 a0061d8:	00000606 	br	a0061f4 <_do_dtors+0x38>
        (*dtor) (); 
 a0061dc:	e0bfff17 	ldw	r2,-4(fp)
 a0061e0:	10800017 	ldw	r2,0(r2)
 a0061e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 a0061e8:	e0bfff17 	ldw	r2,-4(fp)
 a0061ec:	10bfff04 	addi	r2,r2,-4
 a0061f0:	e0bfff15 	stw	r2,-4(fp)
 a0061f4:	e0ffff17 	ldw	r3,-4(fp)
 a0061f8:	00828034 	movhi	r2,2560
 a0061fc:	109d1904 	addi	r2,r2,29796
 a006200:	18bff62e 	bgeu	r3,r2,a0061dc <__alt_mem_flash+0xfe0051dc>
        (*dtor) (); 
}
 a006204:	0001883a 	nop
 a006208:	e037883a 	mov	sp,fp
 a00620c:	dfc00117 	ldw	ra,4(sp)
 a006210:	df000017 	ldw	fp,0(sp)
 a006214:	dec00204 	addi	sp,sp,8
 a006218:	f800283a 	ret

0a00621c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 a00621c:	defffc04 	addi	sp,sp,-16
 a006220:	dfc00315 	stw	ra,12(sp)
 a006224:	df000215 	stw	fp,8(sp)
 a006228:	df000204 	addi	fp,sp,8
 a00622c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 a006230:	d1600b04 	addi	r5,gp,-32724
 a006234:	e13fff17 	ldw	r4,-4(fp)
 a006238:	a006d400 	call	a006d40 <alt_find_dev>
 a00623c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 a006240:	e0bffe17 	ldw	r2,-8(fp)
 a006244:	10000926 	beq	r2,zero,a00626c <alt_flash_open_dev+0x50>
 a006248:	e0bffe17 	ldw	r2,-8(fp)
 a00624c:	10800317 	ldw	r2,12(r2)
 a006250:	10000626 	beq	r2,zero,a00626c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 a006254:	e0bffe17 	ldw	r2,-8(fp)
 a006258:	10800317 	ldw	r2,12(r2)
 a00625c:	e17fff17 	ldw	r5,-4(fp)
 a006260:	e13ffe17 	ldw	r4,-8(fp)
 a006264:	103ee83a 	callr	r2
 a006268:	00000106 	br	a006270 <alt_flash_open_dev+0x54>
  }

  return dev;
 a00626c:	e0bffe17 	ldw	r2,-8(fp)
}
 a006270:	e037883a 	mov	sp,fp
 a006274:	dfc00117 	ldw	ra,4(sp)
 a006278:	df000017 	ldw	fp,0(sp)
 a00627c:	dec00204 	addi	sp,sp,8
 a006280:	f800283a 	ret

0a006284 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 a006284:	defffd04 	addi	sp,sp,-12
 a006288:	dfc00215 	stw	ra,8(sp)
 a00628c:	df000115 	stw	fp,4(sp)
 a006290:	df000104 	addi	fp,sp,4
 a006294:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 a006298:	e0bfff17 	ldw	r2,-4(fp)
 a00629c:	10000826 	beq	r2,zero,a0062c0 <alt_flash_close_dev+0x3c>
 a0062a0:	e0bfff17 	ldw	r2,-4(fp)
 a0062a4:	10800417 	ldw	r2,16(r2)
 a0062a8:	10000526 	beq	r2,zero,a0062c0 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 a0062ac:	e0bfff17 	ldw	r2,-4(fp)
 a0062b0:	10800417 	ldw	r2,16(r2)
 a0062b4:	e13fff17 	ldw	r4,-4(fp)
 a0062b8:	103ee83a 	callr	r2
  }
  return;
 a0062bc:	0001883a 	nop
 a0062c0:	0001883a 	nop
}
 a0062c4:	e037883a 	mov	sp,fp
 a0062c8:	dfc00117 	ldw	ra,4(sp)
 a0062cc:	df000017 	ldw	fp,0(sp)
 a0062d0:	dec00204 	addi	sp,sp,8
 a0062d4:	f800283a 	ret

0a0062d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 a0062d8:	deffff04 	addi	sp,sp,-4
 a0062dc:	df000015 	stw	fp,0(sp)
 a0062e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 a0062e4:	0001883a 	nop
 a0062e8:	e037883a 	mov	sp,fp
 a0062ec:	df000017 	ldw	fp,0(sp)
 a0062f0:	dec00104 	addi	sp,sp,4
 a0062f4:	f800283a 	ret

0a0062f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 a0062f8:	defff904 	addi	sp,sp,-28
 a0062fc:	dfc00615 	stw	ra,24(sp)
 a006300:	df000515 	stw	fp,20(sp)
 a006304:	df000504 	addi	fp,sp,20
 a006308:	e13ffc15 	stw	r4,-16(fp)
 a00630c:	e17ffd15 	stw	r5,-12(fp)
 a006310:	e1bffe15 	stw	r6,-8(fp)
 a006314:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 a006318:	e0800217 	ldw	r2,8(fp)
 a00631c:	d8800015 	stw	r2,0(sp)
 a006320:	e1ffff17 	ldw	r7,-4(fp)
 a006324:	e1bffe17 	ldw	r6,-8(fp)
 a006328:	e17ffd17 	ldw	r5,-12(fp)
 a00632c:	e13ffc17 	ldw	r4,-16(fp)
 a006330:	a0064a80 	call	a0064a8 <alt_iic_isr_register>
}  
 a006334:	e037883a 	mov	sp,fp
 a006338:	dfc00117 	ldw	ra,4(sp)
 a00633c:	df000017 	ldw	fp,0(sp)
 a006340:	dec00204 	addi	sp,sp,8
 a006344:	f800283a 	ret

0a006348 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 a006348:	defff904 	addi	sp,sp,-28
 a00634c:	df000615 	stw	fp,24(sp)
 a006350:	df000604 	addi	fp,sp,24
 a006354:	e13ffe15 	stw	r4,-8(fp)
 a006358:	e17fff15 	stw	r5,-4(fp)
 a00635c:	e0bfff17 	ldw	r2,-4(fp)
 a006360:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a006364:	0005303a 	rdctl	r2,status
 a006368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a00636c:	e0fffb17 	ldw	r3,-20(fp)
 a006370:	00bfff84 	movi	r2,-2
 a006374:	1884703a 	and	r2,r3,r2
 a006378:	1001703a 	wrctl	status,r2
  
  return context;
 a00637c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 a006380:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 a006384:	00c00044 	movi	r3,1
 a006388:	e0bffa17 	ldw	r2,-24(fp)
 a00638c:	1884983a 	sll	r2,r3,r2
 a006390:	1007883a 	mov	r3,r2
 a006394:	d0a72317 	ldw	r2,-25460(gp)
 a006398:	1884b03a 	or	r2,r3,r2
 a00639c:	d0a72315 	stw	r2,-25460(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 a0063a0:	d0a72317 	ldw	r2,-25460(gp)
 a0063a4:	100170fa 	wrctl	ienable,r2
 a0063a8:	e0bffc17 	ldw	r2,-16(fp)
 a0063ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a0063b0:	e0bffd17 	ldw	r2,-12(fp)
 a0063b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 a0063b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 a0063bc:	0001883a 	nop
}
 a0063c0:	e037883a 	mov	sp,fp
 a0063c4:	df000017 	ldw	fp,0(sp)
 a0063c8:	dec00104 	addi	sp,sp,4
 a0063cc:	f800283a 	ret

0a0063d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 a0063d0:	defff904 	addi	sp,sp,-28
 a0063d4:	df000615 	stw	fp,24(sp)
 a0063d8:	df000604 	addi	fp,sp,24
 a0063dc:	e13ffe15 	stw	r4,-8(fp)
 a0063e0:	e17fff15 	stw	r5,-4(fp)
 a0063e4:	e0bfff17 	ldw	r2,-4(fp)
 a0063e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a0063ec:	0005303a 	rdctl	r2,status
 a0063f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a0063f4:	e0fffb17 	ldw	r3,-20(fp)
 a0063f8:	00bfff84 	movi	r2,-2
 a0063fc:	1884703a 	and	r2,r3,r2
 a006400:	1001703a 	wrctl	status,r2
  
  return context;
 a006404:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 a006408:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 a00640c:	00c00044 	movi	r3,1
 a006410:	e0bffa17 	ldw	r2,-24(fp)
 a006414:	1884983a 	sll	r2,r3,r2
 a006418:	0084303a 	nor	r2,zero,r2
 a00641c:	1007883a 	mov	r3,r2
 a006420:	d0a72317 	ldw	r2,-25460(gp)
 a006424:	1884703a 	and	r2,r3,r2
 a006428:	d0a72315 	stw	r2,-25460(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 a00642c:	d0a72317 	ldw	r2,-25460(gp)
 a006430:	100170fa 	wrctl	ienable,r2
 a006434:	e0bffc17 	ldw	r2,-16(fp)
 a006438:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a00643c:	e0bffd17 	ldw	r2,-12(fp)
 a006440:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 a006444:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 a006448:	0001883a 	nop
}
 a00644c:	e037883a 	mov	sp,fp
 a006450:	df000017 	ldw	fp,0(sp)
 a006454:	dec00104 	addi	sp,sp,4
 a006458:	f800283a 	ret

0a00645c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 a00645c:	defffc04 	addi	sp,sp,-16
 a006460:	df000315 	stw	fp,12(sp)
 a006464:	df000304 	addi	fp,sp,12
 a006468:	e13ffe15 	stw	r4,-8(fp)
 a00646c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 a006470:	000530fa 	rdctl	r2,ienable
 a006474:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 a006478:	00c00044 	movi	r3,1
 a00647c:	e0bfff17 	ldw	r2,-4(fp)
 a006480:	1884983a 	sll	r2,r3,r2
 a006484:	1007883a 	mov	r3,r2
 a006488:	e0bffd17 	ldw	r2,-12(fp)
 a00648c:	1884703a 	and	r2,r3,r2
 a006490:	1004c03a 	cmpne	r2,r2,zero
 a006494:	10803fcc 	andi	r2,r2,255
}
 a006498:	e037883a 	mov	sp,fp
 a00649c:	df000017 	ldw	fp,0(sp)
 a0064a0:	dec00104 	addi	sp,sp,4
 a0064a4:	f800283a 	ret

0a0064a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 a0064a8:	defff504 	addi	sp,sp,-44
 a0064ac:	dfc00a15 	stw	ra,40(sp)
 a0064b0:	df000915 	stw	fp,36(sp)
 a0064b4:	df000904 	addi	fp,sp,36
 a0064b8:	e13ffc15 	stw	r4,-16(fp)
 a0064bc:	e17ffd15 	stw	r5,-12(fp)
 a0064c0:	e1bffe15 	stw	r6,-8(fp)
 a0064c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 a0064c8:	00bffa84 	movi	r2,-22
 a0064cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 a0064d0:	e0bffd17 	ldw	r2,-12(fp)
 a0064d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 a0064d8:	e0bff817 	ldw	r2,-32(fp)
 a0064dc:	10800808 	cmpgei	r2,r2,32
 a0064e0:	1000271e 	bne	r2,zero,a006580 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a0064e4:	0005303a 	rdctl	r2,status
 a0064e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a0064ec:	e0fffb17 	ldw	r3,-20(fp)
 a0064f0:	00bfff84 	movi	r2,-2
 a0064f4:	1884703a 	and	r2,r3,r2
 a0064f8:	1001703a 	wrctl	status,r2
  
  return context;
 a0064fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 a006500:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 a006504:	00828074 	movhi	r2,2561
 a006508:	10ab6104 	addi	r2,r2,-21116
 a00650c:	e0fff817 	ldw	r3,-32(fp)
 a006510:	180690fa 	slli	r3,r3,3
 a006514:	10c5883a 	add	r2,r2,r3
 a006518:	e0fffe17 	ldw	r3,-8(fp)
 a00651c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 a006520:	00828074 	movhi	r2,2561
 a006524:	10ab6104 	addi	r2,r2,-21116
 a006528:	e0fff817 	ldw	r3,-32(fp)
 a00652c:	180690fa 	slli	r3,r3,3
 a006530:	10c5883a 	add	r2,r2,r3
 a006534:	10800104 	addi	r2,r2,4
 a006538:	e0ffff17 	ldw	r3,-4(fp)
 a00653c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 a006540:	e0bffe17 	ldw	r2,-8(fp)
 a006544:	10000526 	beq	r2,zero,a00655c <alt_iic_isr_register+0xb4>
 a006548:	e0bff817 	ldw	r2,-32(fp)
 a00654c:	100b883a 	mov	r5,r2
 a006550:	e13ffc17 	ldw	r4,-16(fp)
 a006554:	a0063480 	call	a006348 <alt_ic_irq_enable>
 a006558:	00000406 	br	a00656c <alt_iic_isr_register+0xc4>
 a00655c:	e0bff817 	ldw	r2,-32(fp)
 a006560:	100b883a 	mov	r5,r2
 a006564:	e13ffc17 	ldw	r4,-16(fp)
 a006568:	a0063d00 	call	a0063d0 <alt_ic_irq_disable>
 a00656c:	e0bff715 	stw	r2,-36(fp)
 a006570:	e0bffa17 	ldw	r2,-24(fp)
 a006574:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a006578:	e0bff917 	ldw	r2,-28(fp)
 a00657c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 a006580:	e0bff717 	ldw	r2,-36(fp)
}
 a006584:	e037883a 	mov	sp,fp
 a006588:	dfc00117 	ldw	ra,4(sp)
 a00658c:	df000017 	ldw	fp,0(sp)
 a006590:	dec00204 	addi	sp,sp,8
 a006594:	f800283a 	ret

0a006598 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 a006598:	defff804 	addi	sp,sp,-32
 a00659c:	dfc00715 	stw	ra,28(sp)
 a0065a0:	df000615 	stw	fp,24(sp)
 a0065a4:	dc000515 	stw	r16,20(sp)
 a0065a8:	df000604 	addi	fp,sp,24
 a0065ac:	e13ffb15 	stw	r4,-20(fp)
 a0065b0:	e17ffc15 	stw	r5,-16(fp)
 a0065b4:	e1bffd15 	stw	r6,-12(fp)
 a0065b8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 a0065bc:	e1bffe17 	ldw	r6,-8(fp)
 a0065c0:	e17ffd17 	ldw	r5,-12(fp)
 a0065c4:	e13ffc17 	ldw	r4,-16(fp)
 a0065c8:	a0068200 	call	a006820 <open>
 a0065cc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 a0065d0:	e0bffa17 	ldw	r2,-24(fp)
 a0065d4:	10002216 	blt	r2,zero,a006660 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 a0065d8:	04028034 	movhi	r16,2560
 a0065dc:	841f4904 	addi	r16,r16,32036
 a0065e0:	e0bffa17 	ldw	r2,-24(fp)
 a0065e4:	01400304 	movi	r5,12
 a0065e8:	1009883a 	mov	r4,r2
 a0065ec:	a0030080 	call	a003008 <__mulsi3>
 a0065f0:	8085883a 	add	r2,r16,r2
 a0065f4:	10c00017 	ldw	r3,0(r2)
 a0065f8:	e0bffb17 	ldw	r2,-20(fp)
 a0065fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 a006600:	04028034 	movhi	r16,2560
 a006604:	841f4904 	addi	r16,r16,32036
 a006608:	e0bffa17 	ldw	r2,-24(fp)
 a00660c:	01400304 	movi	r5,12
 a006610:	1009883a 	mov	r4,r2
 a006614:	a0030080 	call	a003008 <__mulsi3>
 a006618:	8085883a 	add	r2,r16,r2
 a00661c:	10800104 	addi	r2,r2,4
 a006620:	10c00017 	ldw	r3,0(r2)
 a006624:	e0bffb17 	ldw	r2,-20(fp)
 a006628:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 a00662c:	04028034 	movhi	r16,2560
 a006630:	841f4904 	addi	r16,r16,32036
 a006634:	e0bffa17 	ldw	r2,-24(fp)
 a006638:	01400304 	movi	r5,12
 a00663c:	1009883a 	mov	r4,r2
 a006640:	a0030080 	call	a003008 <__mulsi3>
 a006644:	8085883a 	add	r2,r16,r2
 a006648:	10800204 	addi	r2,r2,8
 a00664c:	10c00017 	ldw	r3,0(r2)
 a006650:	e0bffb17 	ldw	r2,-20(fp)
 a006654:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 a006658:	e13ffa17 	ldw	r4,-24(fp)
 a00665c:	a0037540 	call	a003754 <alt_release_fd>
  }
} 
 a006660:	0001883a 	nop
 a006664:	e6ffff04 	addi	sp,fp,-4
 a006668:	dfc00217 	ldw	ra,8(sp)
 a00666c:	df000117 	ldw	fp,4(sp)
 a006670:	dc000017 	ldw	r16,0(sp)
 a006674:	dec00304 	addi	sp,sp,12
 a006678:	f800283a 	ret

0a00667c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 a00667c:	defffb04 	addi	sp,sp,-20
 a006680:	dfc00415 	stw	ra,16(sp)
 a006684:	df000315 	stw	fp,12(sp)
 a006688:	df000304 	addi	fp,sp,12
 a00668c:	e13ffd15 	stw	r4,-12(fp)
 a006690:	e17ffe15 	stw	r5,-8(fp)
 a006694:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 a006698:	01c07fc4 	movi	r7,511
 a00669c:	01800044 	movi	r6,1
 a0066a0:	e17ffd17 	ldw	r5,-12(fp)
 a0066a4:	01028034 	movhi	r4,2560
 a0066a8:	211f4c04 	addi	r4,r4,32048
 a0066ac:	a0065980 	call	a006598 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 a0066b0:	01c07fc4 	movi	r7,511
 a0066b4:	000d883a 	mov	r6,zero
 a0066b8:	e17ffe17 	ldw	r5,-8(fp)
 a0066bc:	01028034 	movhi	r4,2560
 a0066c0:	211f4904 	addi	r4,r4,32036
 a0066c4:	a0065980 	call	a006598 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 a0066c8:	01c07fc4 	movi	r7,511
 a0066cc:	01800044 	movi	r6,1
 a0066d0:	e17fff17 	ldw	r5,-4(fp)
 a0066d4:	01028034 	movhi	r4,2560
 a0066d8:	211f4f04 	addi	r4,r4,32060
 a0066dc:	a0065980 	call	a006598 <alt_open_fd>
}  
 a0066e0:	0001883a 	nop
 a0066e4:	e037883a 	mov	sp,fp
 a0066e8:	dfc00117 	ldw	ra,4(sp)
 a0066ec:	df000017 	ldw	fp,0(sp)
 a0066f0:	dec00204 	addi	sp,sp,8
 a0066f4:	f800283a 	ret

0a0066f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 a0066f8:	defffe04 	addi	sp,sp,-8
 a0066fc:	dfc00115 	stw	ra,4(sp)
 a006700:	df000015 	stw	fp,0(sp)
 a006704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 a006708:	d0a00917 	ldw	r2,-32732(gp)
 a00670c:	10000326 	beq	r2,zero,a00671c <alt_get_errno+0x24>
 a006710:	d0a00917 	ldw	r2,-32732(gp)
 a006714:	103ee83a 	callr	r2
 a006718:	00000106 	br	a006720 <alt_get_errno+0x28>
 a00671c:	d0a71f04 	addi	r2,gp,-25476
}
 a006720:	e037883a 	mov	sp,fp
 a006724:	dfc00117 	ldw	ra,4(sp)
 a006728:	df000017 	ldw	fp,0(sp)
 a00672c:	dec00204 	addi	sp,sp,8
 a006730:	f800283a 	ret

0a006734 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 a006734:	defffb04 	addi	sp,sp,-20
 a006738:	dfc00415 	stw	ra,16(sp)
 a00673c:	df000315 	stw	fp,12(sp)
 a006740:	dc000215 	stw	r16,8(sp)
 a006744:	df000304 	addi	fp,sp,12
 a006748:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 a00674c:	e0bffe17 	ldw	r2,-8(fp)
 a006750:	10800217 	ldw	r2,8(r2)
 a006754:	10d00034 	orhi	r3,r2,16384
 a006758:	e0bffe17 	ldw	r2,-8(fp)
 a00675c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 a006760:	e03ffd15 	stw	zero,-12(fp)
 a006764:	00002306 	br	a0067f4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 a006768:	04028034 	movhi	r16,2560
 a00676c:	841f4904 	addi	r16,r16,32036
 a006770:	e0bffd17 	ldw	r2,-12(fp)
 a006774:	01400304 	movi	r5,12
 a006778:	1009883a 	mov	r4,r2
 a00677c:	a0030080 	call	a003008 <__mulsi3>
 a006780:	8085883a 	add	r2,r16,r2
 a006784:	10c00017 	ldw	r3,0(r2)
 a006788:	e0bffe17 	ldw	r2,-8(fp)
 a00678c:	10800017 	ldw	r2,0(r2)
 a006790:	1880151e 	bne	r3,r2,a0067e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 a006794:	04028034 	movhi	r16,2560
 a006798:	841f4904 	addi	r16,r16,32036
 a00679c:	e0bffd17 	ldw	r2,-12(fp)
 a0067a0:	01400304 	movi	r5,12
 a0067a4:	1009883a 	mov	r4,r2
 a0067a8:	a0030080 	call	a003008 <__mulsi3>
 a0067ac:	8085883a 	add	r2,r16,r2
 a0067b0:	10800204 	addi	r2,r2,8
 a0067b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 a0067b8:	10000b0e 	bge	r2,zero,a0067e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 a0067bc:	01400304 	movi	r5,12
 a0067c0:	e13ffd17 	ldw	r4,-12(fp)
 a0067c4:	a0030080 	call	a003008 <__mulsi3>
 a0067c8:	1007883a 	mov	r3,r2
 a0067cc:	00828034 	movhi	r2,2560
 a0067d0:	109f4904 	addi	r2,r2,32036
 a0067d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 a0067d8:	e0bffe17 	ldw	r2,-8(fp)
 a0067dc:	18800226 	beq	r3,r2,a0067e8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 a0067e0:	00bffcc4 	movi	r2,-13
 a0067e4:	00000806 	br	a006808 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 a0067e8:	e0bffd17 	ldw	r2,-12(fp)
 a0067ec:	10800044 	addi	r2,r2,1
 a0067f0:	e0bffd15 	stw	r2,-12(fp)
 a0067f4:	d0a00817 	ldw	r2,-32736(gp)
 a0067f8:	1007883a 	mov	r3,r2
 a0067fc:	e0bffd17 	ldw	r2,-12(fp)
 a006800:	18bfd92e 	bgeu	r3,r2,a006768 <__alt_mem_flash+0xfe005768>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 a006804:	0005883a 	mov	r2,zero
}
 a006808:	e6ffff04 	addi	sp,fp,-4
 a00680c:	dfc00217 	ldw	ra,8(sp)
 a006810:	df000117 	ldw	fp,4(sp)
 a006814:	dc000017 	ldw	r16,0(sp)
 a006818:	dec00304 	addi	sp,sp,12
 a00681c:	f800283a 	ret

0a006820 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 a006820:	defff604 	addi	sp,sp,-40
 a006824:	dfc00915 	stw	ra,36(sp)
 a006828:	df000815 	stw	fp,32(sp)
 a00682c:	df000804 	addi	fp,sp,32
 a006830:	e13ffd15 	stw	r4,-12(fp)
 a006834:	e17ffe15 	stw	r5,-8(fp)
 a006838:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 a00683c:	00bfffc4 	movi	r2,-1
 a006840:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 a006844:	00bffb44 	movi	r2,-19
 a006848:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 a00684c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 a006850:	d1600604 	addi	r5,gp,-32744
 a006854:	e13ffd17 	ldw	r4,-12(fp)
 a006858:	a006d400 	call	a006d40 <alt_find_dev>
 a00685c:	e0bff815 	stw	r2,-32(fp)
 a006860:	e0bff817 	ldw	r2,-32(fp)
 a006864:	1000051e 	bne	r2,zero,a00687c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 a006868:	e13ffd17 	ldw	r4,-12(fp)
 a00686c:	a006dd00 	call	a006dd0 <alt_find_file>
 a006870:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 a006874:	00800044 	movi	r2,1
 a006878:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 a00687c:	e0bff817 	ldw	r2,-32(fp)
 a006880:	10002b26 	beq	r2,zero,a006930 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 a006884:	e13ff817 	ldw	r4,-32(fp)
 a006888:	a006ed80 	call	a006ed8 <alt_get_fd>
 a00688c:	e0bff915 	stw	r2,-28(fp)
 a006890:	e0bff917 	ldw	r2,-28(fp)
 a006894:	1000030e 	bge	r2,zero,a0068a4 <open+0x84>
    {
      status = index;
 a006898:	e0bff917 	ldw	r2,-28(fp)
 a00689c:	e0bffa15 	stw	r2,-24(fp)
 a0068a0:	00002506 	br	a006938 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 a0068a4:	01400304 	movi	r5,12
 a0068a8:	e13ff917 	ldw	r4,-28(fp)
 a0068ac:	a0030080 	call	a003008 <__mulsi3>
 a0068b0:	1007883a 	mov	r3,r2
 a0068b4:	00828034 	movhi	r2,2560
 a0068b8:	109f4904 	addi	r2,r2,32036
 a0068bc:	1885883a 	add	r2,r3,r2
 a0068c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 a0068c4:	e0fffe17 	ldw	r3,-8(fp)
 a0068c8:	00900034 	movhi	r2,16384
 a0068cc:	10bfffc4 	addi	r2,r2,-1
 a0068d0:	1886703a 	and	r3,r3,r2
 a0068d4:	e0bffc17 	ldw	r2,-16(fp)
 a0068d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 a0068dc:	e0bffb17 	ldw	r2,-20(fp)
 a0068e0:	1000051e 	bne	r2,zero,a0068f8 <open+0xd8>
 a0068e4:	e13ffc17 	ldw	r4,-16(fp)
 a0068e8:	a0067340 	call	a006734 <alt_file_locked>
 a0068ec:	e0bffa15 	stw	r2,-24(fp)
 a0068f0:	e0bffa17 	ldw	r2,-24(fp)
 a0068f4:	10001016 	blt	r2,zero,a006938 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 a0068f8:	e0bff817 	ldw	r2,-32(fp)
 a0068fc:	10800317 	ldw	r2,12(r2)
 a006900:	10000826 	beq	r2,zero,a006924 <open+0x104>
 a006904:	e0bff817 	ldw	r2,-32(fp)
 a006908:	10800317 	ldw	r2,12(r2)
 a00690c:	e1ffff17 	ldw	r7,-4(fp)
 a006910:	e1bffe17 	ldw	r6,-8(fp)
 a006914:	e17ffd17 	ldw	r5,-12(fp)
 a006918:	e13ffc17 	ldw	r4,-16(fp)
 a00691c:	103ee83a 	callr	r2
 a006920:	00000106 	br	a006928 <open+0x108>
 a006924:	0005883a 	mov	r2,zero
 a006928:	e0bffa15 	stw	r2,-24(fp)
 a00692c:	00000206 	br	a006938 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 a006930:	00bffb44 	movi	r2,-19
 a006934:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 a006938:	e0bffa17 	ldw	r2,-24(fp)
 a00693c:	1000090e 	bge	r2,zero,a006964 <open+0x144>
  {
    alt_release_fd (index);  
 a006940:	e13ff917 	ldw	r4,-28(fp)
 a006944:	a0037540 	call	a003754 <alt_release_fd>
    ALT_ERRNO = -status;
 a006948:	a0066f80 	call	a0066f8 <alt_get_errno>
 a00694c:	1007883a 	mov	r3,r2
 a006950:	e0bffa17 	ldw	r2,-24(fp)
 a006954:	0085c83a 	sub	r2,zero,r2
 a006958:	18800015 	stw	r2,0(r3)
    return -1;
 a00695c:	00bfffc4 	movi	r2,-1
 a006960:	00000106 	br	a006968 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 a006964:	e0bff917 	ldw	r2,-28(fp)
}
 a006968:	e037883a 	mov	sp,fp
 a00696c:	dfc00117 	ldw	ra,4(sp)
 a006970:	df000017 	ldw	fp,0(sp)
 a006974:	dec00204 	addi	sp,sp,8
 a006978:	f800283a 	ret

0a00697c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 a00697c:	defffa04 	addi	sp,sp,-24
 a006980:	df000515 	stw	fp,20(sp)
 a006984:	df000504 	addi	fp,sp,20
 a006988:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 a00698c:	0005303a 	rdctl	r2,status
 a006990:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 a006994:	e0fffc17 	ldw	r3,-16(fp)
 a006998:	00bfff84 	movi	r2,-2
 a00699c:	1884703a 	and	r2,r3,r2
 a0069a0:	1001703a 	wrctl	status,r2
  
  return context;
 a0069a4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 a0069a8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 a0069ac:	e0bfff17 	ldw	r2,-4(fp)
 a0069b0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 a0069b4:	e0bffd17 	ldw	r2,-12(fp)
 a0069b8:	10800017 	ldw	r2,0(r2)
 a0069bc:	e0fffd17 	ldw	r3,-12(fp)
 a0069c0:	18c00117 	ldw	r3,4(r3)
 a0069c4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 a0069c8:	e0bffd17 	ldw	r2,-12(fp)
 a0069cc:	10800117 	ldw	r2,4(r2)
 a0069d0:	e0fffd17 	ldw	r3,-12(fp)
 a0069d4:	18c00017 	ldw	r3,0(r3)
 a0069d8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 a0069dc:	e0bffd17 	ldw	r2,-12(fp)
 a0069e0:	e0fffd17 	ldw	r3,-12(fp)
 a0069e4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 a0069e8:	e0bffd17 	ldw	r2,-12(fp)
 a0069ec:	e0fffd17 	ldw	r3,-12(fp)
 a0069f0:	10c00015 	stw	r3,0(r2)
 a0069f4:	e0bffb17 	ldw	r2,-20(fp)
 a0069f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 a0069fc:	e0bffe17 	ldw	r2,-8(fp)
 a006a00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 a006a04:	0001883a 	nop
 a006a08:	e037883a 	mov	sp,fp
 a006a0c:	df000017 	ldw	fp,0(sp)
 a006a10:	dec00104 	addi	sp,sp,4
 a006a14:	f800283a 	ret

0a006a18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 a006a18:	defffb04 	addi	sp,sp,-20
 a006a1c:	dfc00415 	stw	ra,16(sp)
 a006a20:	df000315 	stw	fp,12(sp)
 a006a24:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 a006a28:	d0a00e17 	ldw	r2,-32712(gp)
 a006a2c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 a006a30:	d0a72517 	ldw	r2,-25452(gp)
 a006a34:	10800044 	addi	r2,r2,1
 a006a38:	d0a72515 	stw	r2,-25452(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 a006a3c:	00002e06 	br	a006af8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 a006a40:	e0bffd17 	ldw	r2,-12(fp)
 a006a44:	10800017 	ldw	r2,0(r2)
 a006a48:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 a006a4c:	e0bffd17 	ldw	r2,-12(fp)
 a006a50:	10800403 	ldbu	r2,16(r2)
 a006a54:	10803fcc 	andi	r2,r2,255
 a006a58:	10000426 	beq	r2,zero,a006a6c <alt_tick+0x54>
 a006a5c:	d0a72517 	ldw	r2,-25452(gp)
 a006a60:	1000021e 	bne	r2,zero,a006a6c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 a006a64:	e0bffd17 	ldw	r2,-12(fp)
 a006a68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 a006a6c:	e0bffd17 	ldw	r2,-12(fp)
 a006a70:	10800217 	ldw	r2,8(r2)
 a006a74:	d0e72517 	ldw	r3,-25452(gp)
 a006a78:	18801d36 	bltu	r3,r2,a006af0 <alt_tick+0xd8>
 a006a7c:	e0bffd17 	ldw	r2,-12(fp)
 a006a80:	10800403 	ldbu	r2,16(r2)
 a006a84:	10803fcc 	andi	r2,r2,255
 a006a88:	1000191e 	bne	r2,zero,a006af0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 a006a8c:	e0bffd17 	ldw	r2,-12(fp)
 a006a90:	10800317 	ldw	r2,12(r2)
 a006a94:	e0fffd17 	ldw	r3,-12(fp)
 a006a98:	18c00517 	ldw	r3,20(r3)
 a006a9c:	1809883a 	mov	r4,r3
 a006aa0:	103ee83a 	callr	r2
 a006aa4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 a006aa8:	e0bfff17 	ldw	r2,-4(fp)
 a006aac:	1000031e 	bne	r2,zero,a006abc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 a006ab0:	e13ffd17 	ldw	r4,-12(fp)
 a006ab4:	a00697c0 	call	a00697c <alt_alarm_stop>
 a006ab8:	00000d06 	br	a006af0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 a006abc:	e0bffd17 	ldw	r2,-12(fp)
 a006ac0:	10c00217 	ldw	r3,8(r2)
 a006ac4:	e0bfff17 	ldw	r2,-4(fp)
 a006ac8:	1887883a 	add	r3,r3,r2
 a006acc:	e0bffd17 	ldw	r2,-12(fp)
 a006ad0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 a006ad4:	e0bffd17 	ldw	r2,-12(fp)
 a006ad8:	10c00217 	ldw	r3,8(r2)
 a006adc:	d0a72517 	ldw	r2,-25452(gp)
 a006ae0:	1880032e 	bgeu	r3,r2,a006af0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 a006ae4:	e0bffd17 	ldw	r2,-12(fp)
 a006ae8:	00c00044 	movi	r3,1
 a006aec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 a006af0:	e0bffe17 	ldw	r2,-8(fp)
 a006af4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 a006af8:	e0fffd17 	ldw	r3,-12(fp)
 a006afc:	d0a00e04 	addi	r2,gp,-32712
 a006b00:	18bfcf1e 	bne	r3,r2,a006a40 <__alt_mem_flash+0xfe005a40>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 a006b04:	0001883a 	nop
}
 a006b08:	0001883a 	nop
 a006b0c:	e037883a 	mov	sp,fp
 a006b10:	dfc00117 	ldw	ra,4(sp)
 a006b14:	df000017 	ldw	fp,0(sp)
 a006b18:	dec00204 	addi	sp,sp,8
 a006b1c:	f800283a 	ret

0a006b20 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 a006b20:	deffff04 	addi	sp,sp,-4
 a006b24:	df000015 	stw	fp,0(sp)
 a006b28:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 a006b2c:	000170fa 	wrctl	ienable,zero
}
 a006b30:	0001883a 	nop
 a006b34:	e037883a 	mov	sp,fp
 a006b38:	df000017 	ldw	fp,0(sp)
 a006b3c:	dec00104 	addi	sp,sp,4
 a006b40:	f800283a 	ret

0a006b44 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 a006b44:	defff404 	addi	sp,sp,-48
 a006b48:	df000b15 	stw	fp,44(sp)
 a006b4c:	df000b04 	addi	fp,sp,44
 a006b50:	e13ffc15 	stw	r4,-16(fp)
 a006b54:	e17ffd15 	stw	r5,-12(fp)
 a006b58:	e1bffe15 	stw	r6,-8(fp)
 a006b5c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 a006b60:	e0ffff17 	ldw	r3,-4(fp)
 a006b64:	e0bffe17 	ldw	r2,-8(fp)
 a006b68:	1885883a 	add	r2,r3,r2
 a006b6c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 a006b70:	e0c00217 	ldw	r3,8(fp)
 a006b74:	e0800117 	ldw	r2,4(fp)
 a006b78:	1885883a 	add	r2,r3,r2
 a006b7c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 a006b80:	e0800117 	ldw	r2,4(fp)
 a006b84:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 a006b88:	e0bffe17 	ldw	r2,-8(fp)
 a006b8c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 a006b90:	00800044 	movi	r2,1
 a006b94:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 a006b98:	e0bffc17 	ldw	r2,-16(fp)
 a006b9c:	10800504 	addi	r2,r2,20
 a006ba0:	1009883a 	mov	r4,r2
 a006ba4:	00c00044 	movi	r3,1
 a006ba8:	e0bffd17 	ldw	r2,-12(fp)
 a006bac:	1884983a 	sll	r2,r3,r2
 a006bb0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 a006bb4:	e0800317 	ldw	r2,12(fp)
 a006bb8:	1080008c 	andi	r2,r2,2
 a006bbc:	1000051e 	bne	r2,zero,a006bd4 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 a006bc0:	e0bffc17 	ldw	r2,-16(fp)
 a006bc4:	10800304 	addi	r2,r2,12
 a006bc8:	1007883a 	mov	r3,r2
 a006bcc:	00810004 	movi	r2,1024
 a006bd0:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 a006bd4:	e0bffc17 	ldw	r2,-16(fp)
 a006bd8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 a006bdc:	e0bffc17 	ldw	r2,-16(fp)
 a006be0:	10800204 	addi	r2,r2,8
 a006be4:	10800037 	ldwio	r2,0(r2)
 a006be8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 a006bec:	e0bffa17 	ldw	r2,-24(fp)
 a006bf0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 a006bf4:	10000226 	beq	r2,zero,a006c00 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 a006bf8:	e0bff717 	ldw	r2,-36(fp)
 a006bfc:	1000031e 	bne	r2,zero,a006c0c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 a006c00:	e0bffa17 	ldw	r2,-24(fp)
 a006c04:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 a006c08:	103ff426 	beq	r2,zero,a006bdc <__alt_mem_flash+0xfe005bdc>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 a006c0c:	e0bffa17 	ldw	r2,-24(fp)
 a006c10:	1080100c 	andi	r2,r2,64
 a006c14:	10001e26 	beq	r2,zero,a006c90 <alt_avalon_spi_command+0x14c>
 a006c18:	e0bff717 	ldw	r2,-36(fp)
 a006c1c:	00801c0e 	bge	zero,r2,a006c90 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 a006c20:	e0bff717 	ldw	r2,-36(fp)
 a006c24:	10bfffc4 	addi	r2,r2,-1
 a006c28:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 a006c2c:	e0ffff17 	ldw	r3,-4(fp)
 a006c30:	e0bff817 	ldw	r2,-32(fp)
 a006c34:	18800a2e 	bgeu	r3,r2,a006c60 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 a006c38:	e0bffc17 	ldw	r2,-16(fp)
 a006c3c:	10800104 	addi	r2,r2,4
 a006c40:	1009883a 	mov	r4,r2
 a006c44:	e0bfff17 	ldw	r2,-4(fp)
 a006c48:	10c00044 	addi	r3,r2,1
 a006c4c:	e0ffff15 	stw	r3,-4(fp)
 a006c50:	10800003 	ldbu	r2,0(r2)
 a006c54:	10803fcc 	andi	r2,r2,255
 a006c58:	20800035 	stwio	r2,0(r4)
 a006c5c:	00000c06 	br	a006c90 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 a006c60:	e0bff517 	ldw	r2,-44(fp)
 a006c64:	10000826 	beq	r2,zero,a006c88 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 a006c68:	e0bff517 	ldw	r2,-44(fp)
 a006c6c:	10bfffc4 	addi	r2,r2,-1
 a006c70:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 a006c74:	e0bffc17 	ldw	r2,-16(fp)
 a006c78:	10800104 	addi	r2,r2,4
 a006c7c:	0007883a 	mov	r3,zero
 a006c80:	10c00035 	stwio	r3,0(r2)
 a006c84:	00000206 	br	a006c90 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 a006c88:	00bf0004 	movi	r2,-1024
 a006c8c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 a006c90:	e0bffa17 	ldw	r2,-24(fp)
 a006c94:	1080200c 	andi	r2,r2,128
 a006c98:	103fd026 	beq	r2,zero,a006bdc <__alt_mem_flash+0xfe005bdc>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 a006c9c:	e0bffc17 	ldw	r2,-16(fp)
 a006ca0:	10800037 	ldwio	r2,0(r2)
 a006ca4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 a006ca8:	e0bff617 	ldw	r2,-40(fp)
 a006cac:	10000426 	beq	r2,zero,a006cc0 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 a006cb0:	e0bff617 	ldw	r2,-40(fp)
 a006cb4:	10bfffc4 	addi	r2,r2,-1
 a006cb8:	e0bff615 	stw	r2,-40(fp)
 a006cbc:	00000506 	br	a006cd4 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 a006cc0:	e0800217 	ldw	r2,8(fp)
 a006cc4:	10c00044 	addi	r3,r2,1
 a006cc8:	e0c00215 	stw	r3,8(fp)
 a006ccc:	e0fffb17 	ldw	r3,-20(fp)
 a006cd0:	10c00005 	stb	r3,0(r2)
      credits++;
 a006cd4:	e0bff717 	ldw	r2,-36(fp)
 a006cd8:	10800044 	addi	r2,r2,1
 a006cdc:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 a006ce0:	e0bff617 	ldw	r2,-40(fp)
 a006ce4:	103fbd1e 	bne	r2,zero,a006bdc <__alt_mem_flash+0xfe005bdc>
 a006ce8:	e0c00217 	ldw	r3,8(fp)
 a006cec:	e0bff917 	ldw	r2,-28(fp)
 a006cf0:	18bfba1e 	bne	r3,r2,a006bdc <__alt_mem_flash+0xfe005bdc>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 a006cf4:	e0bffc17 	ldw	r2,-16(fp)
 a006cf8:	10800204 	addi	r2,r2,8
 a006cfc:	10800037 	ldwio	r2,0(r2)
 a006d00:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 a006d04:	e0bffa17 	ldw	r2,-24(fp)
 a006d08:	1080080c 	andi	r2,r2,32
 a006d0c:	103ff926 	beq	r2,zero,a006cf4 <__alt_mem_flash+0xfe005cf4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 a006d10:	e0800317 	ldw	r2,12(fp)
 a006d14:	1080004c 	andi	r2,r2,1
 a006d18:	1000041e 	bne	r2,zero,a006d2c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 a006d1c:	e0bffc17 	ldw	r2,-16(fp)
 a006d20:	10800304 	addi	r2,r2,12
 a006d24:	0007883a 	mov	r3,zero
 a006d28:	10c00035 	stwio	r3,0(r2)

  return read_length;
 a006d2c:	e0800117 	ldw	r2,4(fp)
}
 a006d30:	e037883a 	mov	sp,fp
 a006d34:	df000017 	ldw	fp,0(sp)
 a006d38:	dec00104 	addi	sp,sp,4
 a006d3c:	f800283a 	ret

0a006d40 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 a006d40:	defffa04 	addi	sp,sp,-24
 a006d44:	dfc00515 	stw	ra,20(sp)
 a006d48:	df000415 	stw	fp,16(sp)
 a006d4c:	df000404 	addi	fp,sp,16
 a006d50:	e13ffe15 	stw	r4,-8(fp)
 a006d54:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 a006d58:	e0bfff17 	ldw	r2,-4(fp)
 a006d5c:	10800017 	ldw	r2,0(r2)
 a006d60:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 a006d64:	e13ffe17 	ldw	r4,-8(fp)
 a006d68:	a0071000 	call	a007100 <strlen>
 a006d6c:	10800044 	addi	r2,r2,1
 a006d70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 a006d74:	00000d06 	br	a006dac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 a006d78:	e0bffc17 	ldw	r2,-16(fp)
 a006d7c:	10800217 	ldw	r2,8(r2)
 a006d80:	e0fffd17 	ldw	r3,-12(fp)
 a006d84:	180d883a 	mov	r6,r3
 a006d88:	e17ffe17 	ldw	r5,-8(fp)
 a006d8c:	1009883a 	mov	r4,r2
 a006d90:	a0070840 	call	a007084 <memcmp>
 a006d94:	1000021e 	bne	r2,zero,a006da0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 a006d98:	e0bffc17 	ldw	r2,-16(fp)
 a006d9c:	00000706 	br	a006dbc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 a006da0:	e0bffc17 	ldw	r2,-16(fp)
 a006da4:	10800017 	ldw	r2,0(r2)
 a006da8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 a006dac:	e0fffc17 	ldw	r3,-16(fp)
 a006db0:	e0bfff17 	ldw	r2,-4(fp)
 a006db4:	18bff01e 	bne	r3,r2,a006d78 <__alt_mem_flash+0xfe005d78>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 a006db8:	0005883a 	mov	r2,zero
}
 a006dbc:	e037883a 	mov	sp,fp
 a006dc0:	dfc00117 	ldw	ra,4(sp)
 a006dc4:	df000017 	ldw	fp,0(sp)
 a006dc8:	dec00204 	addi	sp,sp,8
 a006dcc:	f800283a 	ret

0a006dd0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 a006dd0:	defffb04 	addi	sp,sp,-20
 a006dd4:	dfc00415 	stw	ra,16(sp)
 a006dd8:	df000315 	stw	fp,12(sp)
 a006ddc:	df000304 	addi	fp,sp,12
 a006de0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 a006de4:	d0a00417 	ldw	r2,-32752(gp)
 a006de8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 a006dec:	00003106 	br	a006eb4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 a006df0:	e0bffd17 	ldw	r2,-12(fp)
 a006df4:	10800217 	ldw	r2,8(r2)
 a006df8:	1009883a 	mov	r4,r2
 a006dfc:	a0071000 	call	a007100 <strlen>
 a006e00:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 a006e04:	e0bffd17 	ldw	r2,-12(fp)
 a006e08:	10c00217 	ldw	r3,8(r2)
 a006e0c:	e0bffe17 	ldw	r2,-8(fp)
 a006e10:	10bfffc4 	addi	r2,r2,-1
 a006e14:	1885883a 	add	r2,r3,r2
 a006e18:	10800003 	ldbu	r2,0(r2)
 a006e1c:	10803fcc 	andi	r2,r2,255
 a006e20:	1080201c 	xori	r2,r2,128
 a006e24:	10bfe004 	addi	r2,r2,-128
 a006e28:	10800bd8 	cmpnei	r2,r2,47
 a006e2c:	1000031e 	bne	r2,zero,a006e3c <alt_find_file+0x6c>
    {
      len -= 1;
 a006e30:	e0bffe17 	ldw	r2,-8(fp)
 a006e34:	10bfffc4 	addi	r2,r2,-1
 a006e38:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 a006e3c:	e0bffe17 	ldw	r2,-8(fp)
 a006e40:	e0ffff17 	ldw	r3,-4(fp)
 a006e44:	1885883a 	add	r2,r3,r2
 a006e48:	10800003 	ldbu	r2,0(r2)
 a006e4c:	10803fcc 	andi	r2,r2,255
 a006e50:	1080201c 	xori	r2,r2,128
 a006e54:	10bfe004 	addi	r2,r2,-128
 a006e58:	10800be0 	cmpeqi	r2,r2,47
 a006e5c:	1000081e 	bne	r2,zero,a006e80 <alt_find_file+0xb0>
 a006e60:	e0bffe17 	ldw	r2,-8(fp)
 a006e64:	e0ffff17 	ldw	r3,-4(fp)
 a006e68:	1885883a 	add	r2,r3,r2
 a006e6c:	10800003 	ldbu	r2,0(r2)
 a006e70:	10803fcc 	andi	r2,r2,255
 a006e74:	1080201c 	xori	r2,r2,128
 a006e78:	10bfe004 	addi	r2,r2,-128
 a006e7c:	10000a1e 	bne	r2,zero,a006ea8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 a006e80:	e0bffd17 	ldw	r2,-12(fp)
 a006e84:	10800217 	ldw	r2,8(r2)
 a006e88:	e0fffe17 	ldw	r3,-8(fp)
 a006e8c:	180d883a 	mov	r6,r3
 a006e90:	e17fff17 	ldw	r5,-4(fp)
 a006e94:	1009883a 	mov	r4,r2
 a006e98:	a0070840 	call	a007084 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 a006e9c:	1000021e 	bne	r2,zero,a006ea8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 a006ea0:	e0bffd17 	ldw	r2,-12(fp)
 a006ea4:	00000706 	br	a006ec4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 a006ea8:	e0bffd17 	ldw	r2,-12(fp)
 a006eac:	10800017 	ldw	r2,0(r2)
 a006eb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 a006eb4:	e0fffd17 	ldw	r3,-12(fp)
 a006eb8:	d0a00404 	addi	r2,gp,-32752
 a006ebc:	18bfcc1e 	bne	r3,r2,a006df0 <__alt_mem_flash+0xfe005df0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 a006ec0:	0005883a 	mov	r2,zero
}
 a006ec4:	e037883a 	mov	sp,fp
 a006ec8:	dfc00117 	ldw	ra,4(sp)
 a006ecc:	df000017 	ldw	fp,0(sp)
 a006ed0:	dec00204 	addi	sp,sp,8
 a006ed4:	f800283a 	ret

0a006ed8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 a006ed8:	defffa04 	addi	sp,sp,-24
 a006edc:	dfc00515 	stw	ra,20(sp)
 a006ee0:	df000415 	stw	fp,16(sp)
 a006ee4:	dc000315 	stw	r16,12(sp)
 a006ee8:	df000404 	addi	fp,sp,16
 a006eec:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 a006ef0:	00bffa04 	movi	r2,-24
 a006ef4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 a006ef8:	e03ffc15 	stw	zero,-16(fp)
 a006efc:	00001d06 	br	a006f74 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 a006f00:	04028034 	movhi	r16,2560
 a006f04:	841f4904 	addi	r16,r16,32036
 a006f08:	e0bffc17 	ldw	r2,-16(fp)
 a006f0c:	01400304 	movi	r5,12
 a006f10:	1009883a 	mov	r4,r2
 a006f14:	a0030080 	call	a003008 <__mulsi3>
 a006f18:	8085883a 	add	r2,r16,r2
 a006f1c:	10800017 	ldw	r2,0(r2)
 a006f20:	1000111e 	bne	r2,zero,a006f68 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 a006f24:	04028034 	movhi	r16,2560
 a006f28:	841f4904 	addi	r16,r16,32036
 a006f2c:	e0bffc17 	ldw	r2,-16(fp)
 a006f30:	01400304 	movi	r5,12
 a006f34:	1009883a 	mov	r4,r2
 a006f38:	a0030080 	call	a003008 <__mulsi3>
 a006f3c:	8085883a 	add	r2,r16,r2
 a006f40:	e0fffe17 	ldw	r3,-8(fp)
 a006f44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 a006f48:	d0e00817 	ldw	r3,-32736(gp)
 a006f4c:	e0bffc17 	ldw	r2,-16(fp)
 a006f50:	1880020e 	bge	r3,r2,a006f5c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 a006f54:	e0bffc17 	ldw	r2,-16(fp)
 a006f58:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 a006f5c:	e0bffc17 	ldw	r2,-16(fp)
 a006f60:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 a006f64:	00000606 	br	a006f80 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 a006f68:	e0bffc17 	ldw	r2,-16(fp)
 a006f6c:	10800044 	addi	r2,r2,1
 a006f70:	e0bffc15 	stw	r2,-16(fp)
 a006f74:	e0bffc17 	ldw	r2,-16(fp)
 a006f78:	10800810 	cmplti	r2,r2,32
 a006f7c:	103fe01e 	bne	r2,zero,a006f00 <__alt_mem_flash+0xfe005f00>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 a006f80:	e0bffd17 	ldw	r2,-12(fp)
}
 a006f84:	e6ffff04 	addi	sp,fp,-4
 a006f88:	dfc00217 	ldw	ra,8(sp)
 a006f8c:	df000117 	ldw	fp,4(sp)
 a006f90:	dc000017 	ldw	r16,0(sp)
 a006f94:	dec00304 	addi	sp,sp,12
 a006f98:	f800283a 	ret

0a006f9c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 a006f9c:	defffe04 	addi	sp,sp,-8
 a006fa0:	df000115 	stw	fp,4(sp)
 a006fa4:	df000104 	addi	fp,sp,4
 a006fa8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 a006fac:	e0bfff17 	ldw	r2,-4(fp)
 a006fb0:	10bffe84 	addi	r2,r2,-6
 a006fb4:	10c00428 	cmpgeui	r3,r2,16
 a006fb8:	18001a1e 	bne	r3,zero,a007024 <alt_exception_cause_generated_bad_addr+0x88>
 a006fbc:	100690ba 	slli	r3,r2,2
 a006fc0:	00828034 	movhi	r2,2560
 a006fc4:	109bf504 	addi	r2,r2,28628
 a006fc8:	1885883a 	add	r2,r3,r2
 a006fcc:	10800017 	ldw	r2,0(r2)
 a006fd0:	1000683a 	jmp	r2
 a006fd4:	0a007014 	ori	r8,at,448
 a006fd8:	0a007014 	ori	r8,at,448
 a006fdc:	0a007024 	muli	r8,at,448
 a006fe0:	0a007024 	muli	r8,at,448
 a006fe4:	0a007024 	muli	r8,at,448
 a006fe8:	0a007014 	ori	r8,at,448
 a006fec:	0a00701c 	xori	r8,at,448
 a006ff0:	0a007024 	muli	r8,at,448
 a006ff4:	0a007014 	ori	r8,at,448
 a006ff8:	0a007014 	ori	r8,at,448
 a006ffc:	0a007024 	muli	r8,at,448
 a007000:	0a007014 	ori	r8,at,448
 a007004:	0a00701c 	xori	r8,at,448
 a007008:	0a007024 	muli	r8,at,448
 a00700c:	0a007024 	muli	r8,at,448
 a007010:	0a007014 	ori	r8,at,448
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 a007014:	00800044 	movi	r2,1
 a007018:	00000306 	br	a007028 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 a00701c:	0005883a 	mov	r2,zero
 a007020:	00000106 	br	a007028 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 a007024:	0005883a 	mov	r2,zero
  }
}
 a007028:	e037883a 	mov	sp,fp
 a00702c:	df000017 	ldw	fp,0(sp)
 a007030:	dec00104 	addi	sp,sp,4
 a007034:	f800283a 	ret

0a007038 <atexit>:
 a007038:	200b883a 	mov	r5,r4
 a00703c:	000f883a 	mov	r7,zero
 a007040:	000d883a 	mov	r6,zero
 a007044:	0009883a 	mov	r4,zero
 a007048:	a0071981 	jmpi	a007198 <__register_exitproc>

0a00704c <exit>:
 a00704c:	defffe04 	addi	sp,sp,-8
 a007050:	000b883a 	mov	r5,zero
 a007054:	dc000015 	stw	r16,0(sp)
 a007058:	dfc00115 	stw	ra,4(sp)
 a00705c:	2021883a 	mov	r16,r4
 a007060:	a0072b00 	call	a0072b0 <__call_exitprocs>
 a007064:	00828074 	movhi	r2,2561
 a007068:	10a43004 	addi	r2,r2,-28480
 a00706c:	11000017 	ldw	r4,0(r2)
 a007070:	20800f17 	ldw	r2,60(r4)
 a007074:	10000126 	beq	r2,zero,a00707c <exit+0x30>
 a007078:	103ee83a 	callr	r2
 a00707c:	8009883a 	mov	r4,r16
 a007080:	a0074300 	call	a007430 <_exit>

0a007084 <memcmp>:
 a007084:	01c000c4 	movi	r7,3
 a007088:	3980192e 	bgeu	r7,r6,a0070f0 <memcmp+0x6c>
 a00708c:	2144b03a 	or	r2,r4,r5
 a007090:	11c4703a 	and	r2,r2,r7
 a007094:	10000f26 	beq	r2,zero,a0070d4 <memcmp+0x50>
 a007098:	20800003 	ldbu	r2,0(r4)
 a00709c:	28c00003 	ldbu	r3,0(r5)
 a0070a0:	10c0151e 	bne	r2,r3,a0070f8 <memcmp+0x74>
 a0070a4:	31bfff84 	addi	r6,r6,-2
 a0070a8:	01ffffc4 	movi	r7,-1
 a0070ac:	00000406 	br	a0070c0 <memcmp+0x3c>
 a0070b0:	20800003 	ldbu	r2,0(r4)
 a0070b4:	28c00003 	ldbu	r3,0(r5)
 a0070b8:	31bfffc4 	addi	r6,r6,-1
 a0070bc:	10c00e1e 	bne	r2,r3,a0070f8 <memcmp+0x74>
 a0070c0:	21000044 	addi	r4,r4,1
 a0070c4:	29400044 	addi	r5,r5,1
 a0070c8:	31fff91e 	bne	r6,r7,a0070b0 <__alt_mem_flash+0xfe0060b0>
 a0070cc:	0005883a 	mov	r2,zero
 a0070d0:	f800283a 	ret
 a0070d4:	20c00017 	ldw	r3,0(r4)
 a0070d8:	28800017 	ldw	r2,0(r5)
 a0070dc:	18bfee1e 	bne	r3,r2,a007098 <__alt_mem_flash+0xfe006098>
 a0070e0:	31bfff04 	addi	r6,r6,-4
 a0070e4:	21000104 	addi	r4,r4,4
 a0070e8:	29400104 	addi	r5,r5,4
 a0070ec:	39bff936 	bltu	r7,r6,a0070d4 <__alt_mem_flash+0xfe0060d4>
 a0070f0:	303fe91e 	bne	r6,zero,a007098 <__alt_mem_flash+0xfe006098>
 a0070f4:	003ff506 	br	a0070cc <__alt_mem_flash+0xfe0060cc>
 a0070f8:	10c5c83a 	sub	r2,r2,r3
 a0070fc:	f800283a 	ret

0a007100 <strlen>:
 a007100:	208000cc 	andi	r2,r4,3
 a007104:	10002026 	beq	r2,zero,a007188 <strlen+0x88>
 a007108:	20800007 	ldb	r2,0(r4)
 a00710c:	10002026 	beq	r2,zero,a007190 <strlen+0x90>
 a007110:	2005883a 	mov	r2,r4
 a007114:	00000206 	br	a007120 <strlen+0x20>
 a007118:	10c00007 	ldb	r3,0(r2)
 a00711c:	18001826 	beq	r3,zero,a007180 <strlen+0x80>
 a007120:	10800044 	addi	r2,r2,1
 a007124:	10c000cc 	andi	r3,r2,3
 a007128:	183ffb1e 	bne	r3,zero,a007118 <__alt_mem_flash+0xfe006118>
 a00712c:	10c00017 	ldw	r3,0(r2)
 a007130:	01ffbff4 	movhi	r7,65279
 a007134:	39ffbfc4 	addi	r7,r7,-257
 a007138:	00ca303a 	nor	r5,zero,r3
 a00713c:	01a02074 	movhi	r6,32897
 a007140:	19c7883a 	add	r3,r3,r7
 a007144:	31a02004 	addi	r6,r6,-32640
 a007148:	1946703a 	and	r3,r3,r5
 a00714c:	1986703a 	and	r3,r3,r6
 a007150:	1800091e 	bne	r3,zero,a007178 <strlen+0x78>
 a007154:	10800104 	addi	r2,r2,4
 a007158:	10c00017 	ldw	r3,0(r2)
 a00715c:	19cb883a 	add	r5,r3,r7
 a007160:	00c6303a 	nor	r3,zero,r3
 a007164:	28c6703a 	and	r3,r5,r3
 a007168:	1986703a 	and	r3,r3,r6
 a00716c:	183ff926 	beq	r3,zero,a007154 <__alt_mem_flash+0xfe006154>
 a007170:	00000106 	br	a007178 <strlen+0x78>
 a007174:	10800044 	addi	r2,r2,1
 a007178:	10c00007 	ldb	r3,0(r2)
 a00717c:	183ffd1e 	bne	r3,zero,a007174 <__alt_mem_flash+0xfe006174>
 a007180:	1105c83a 	sub	r2,r2,r4
 a007184:	f800283a 	ret
 a007188:	2005883a 	mov	r2,r4
 a00718c:	003fe706 	br	a00712c <__alt_mem_flash+0xfe00612c>
 a007190:	0005883a 	mov	r2,zero
 a007194:	f800283a 	ret

0a007198 <__register_exitproc>:
 a007198:	defffa04 	addi	sp,sp,-24
 a00719c:	dc000315 	stw	r16,12(sp)
 a0071a0:	04028074 	movhi	r16,2561
 a0071a4:	84243004 	addi	r16,r16,-28480
 a0071a8:	80c00017 	ldw	r3,0(r16)
 a0071ac:	dc400415 	stw	r17,16(sp)
 a0071b0:	dfc00515 	stw	ra,20(sp)
 a0071b4:	18805217 	ldw	r2,328(r3)
 a0071b8:	2023883a 	mov	r17,r4
 a0071bc:	10003726 	beq	r2,zero,a00729c <__register_exitproc+0x104>
 a0071c0:	10c00117 	ldw	r3,4(r2)
 a0071c4:	010007c4 	movi	r4,31
 a0071c8:	20c00e16 	blt	r4,r3,a007204 <__register_exitproc+0x6c>
 a0071cc:	1a000044 	addi	r8,r3,1
 a0071d0:	8800221e 	bne	r17,zero,a00725c <__register_exitproc+0xc4>
 a0071d4:	18c00084 	addi	r3,r3,2
 a0071d8:	18c7883a 	add	r3,r3,r3
 a0071dc:	18c7883a 	add	r3,r3,r3
 a0071e0:	12000115 	stw	r8,4(r2)
 a0071e4:	10c7883a 	add	r3,r2,r3
 a0071e8:	19400015 	stw	r5,0(r3)
 a0071ec:	0005883a 	mov	r2,zero
 a0071f0:	dfc00517 	ldw	ra,20(sp)
 a0071f4:	dc400417 	ldw	r17,16(sp)
 a0071f8:	dc000317 	ldw	r16,12(sp)
 a0071fc:	dec00604 	addi	sp,sp,24
 a007200:	f800283a 	ret
 a007204:	00800034 	movhi	r2,0
 a007208:	10800004 	addi	r2,r2,0
 a00720c:	10002626 	beq	r2,zero,a0072a8 <__register_exitproc+0x110>
 a007210:	01006404 	movi	r4,400
 a007214:	d9400015 	stw	r5,0(sp)
 a007218:	d9800115 	stw	r6,4(sp)
 a00721c:	d9c00215 	stw	r7,8(sp)
 a007220:	00000000 	call	0 <__alt_mem_onchip-0x4000000>
 a007224:	d9400017 	ldw	r5,0(sp)
 a007228:	d9800117 	ldw	r6,4(sp)
 a00722c:	d9c00217 	ldw	r7,8(sp)
 a007230:	10001d26 	beq	r2,zero,a0072a8 <__register_exitproc+0x110>
 a007234:	81000017 	ldw	r4,0(r16)
 a007238:	10000115 	stw	zero,4(r2)
 a00723c:	02000044 	movi	r8,1
 a007240:	22405217 	ldw	r9,328(r4)
 a007244:	0007883a 	mov	r3,zero
 a007248:	12400015 	stw	r9,0(r2)
 a00724c:	20805215 	stw	r2,328(r4)
 a007250:	10006215 	stw	zero,392(r2)
 a007254:	10006315 	stw	zero,396(r2)
 a007258:	883fde26 	beq	r17,zero,a0071d4 <__alt_mem_flash+0xfe0061d4>
 a00725c:	18c9883a 	add	r4,r3,r3
 a007260:	2109883a 	add	r4,r4,r4
 a007264:	1109883a 	add	r4,r2,r4
 a007268:	21802215 	stw	r6,136(r4)
 a00726c:	01800044 	movi	r6,1
 a007270:	12406217 	ldw	r9,392(r2)
 a007274:	30cc983a 	sll	r6,r6,r3
 a007278:	4992b03a 	or	r9,r9,r6
 a00727c:	12406215 	stw	r9,392(r2)
 a007280:	21c04215 	stw	r7,264(r4)
 a007284:	01000084 	movi	r4,2
 a007288:	893fd21e 	bne	r17,r4,a0071d4 <__alt_mem_flash+0xfe0061d4>
 a00728c:	11006317 	ldw	r4,396(r2)
 a007290:	218cb03a 	or	r6,r4,r6
 a007294:	11806315 	stw	r6,396(r2)
 a007298:	003fce06 	br	a0071d4 <__alt_mem_flash+0xfe0061d4>
 a00729c:	18805304 	addi	r2,r3,332
 a0072a0:	18805215 	stw	r2,328(r3)
 a0072a4:	003fc606 	br	a0071c0 <__alt_mem_flash+0xfe0061c0>
 a0072a8:	00bfffc4 	movi	r2,-1
 a0072ac:	003fd006 	br	a0071f0 <__alt_mem_flash+0xfe0061f0>

0a0072b0 <__call_exitprocs>:
 a0072b0:	defff504 	addi	sp,sp,-44
 a0072b4:	df000915 	stw	fp,36(sp)
 a0072b8:	dd400615 	stw	r21,24(sp)
 a0072bc:	dc800315 	stw	r18,12(sp)
 a0072c0:	dfc00a15 	stw	ra,40(sp)
 a0072c4:	ddc00815 	stw	r23,32(sp)
 a0072c8:	dd800715 	stw	r22,28(sp)
 a0072cc:	dd000515 	stw	r20,20(sp)
 a0072d0:	dcc00415 	stw	r19,16(sp)
 a0072d4:	dc400215 	stw	r17,8(sp)
 a0072d8:	dc000115 	stw	r16,4(sp)
 a0072dc:	d9000015 	stw	r4,0(sp)
 a0072e0:	2839883a 	mov	fp,r5
 a0072e4:	04800044 	movi	r18,1
 a0072e8:	057fffc4 	movi	r21,-1
 a0072ec:	00828074 	movhi	r2,2561
 a0072f0:	10a43004 	addi	r2,r2,-28480
 a0072f4:	12000017 	ldw	r8,0(r2)
 a0072f8:	45005217 	ldw	r20,328(r8)
 a0072fc:	44c05204 	addi	r19,r8,328
 a007300:	a0001c26 	beq	r20,zero,a007374 <__call_exitprocs+0xc4>
 a007304:	a0800117 	ldw	r2,4(r20)
 a007308:	15ffffc4 	addi	r23,r2,-1
 a00730c:	b8000d16 	blt	r23,zero,a007344 <__call_exitprocs+0x94>
 a007310:	14000044 	addi	r16,r2,1
 a007314:	8421883a 	add	r16,r16,r16
 a007318:	8421883a 	add	r16,r16,r16
 a00731c:	84402004 	addi	r17,r16,128
 a007320:	a463883a 	add	r17,r20,r17
 a007324:	a421883a 	add	r16,r20,r16
 a007328:	e0001e26 	beq	fp,zero,a0073a4 <__call_exitprocs+0xf4>
 a00732c:	80804017 	ldw	r2,256(r16)
 a007330:	e0801c26 	beq	fp,r2,a0073a4 <__call_exitprocs+0xf4>
 a007334:	bdffffc4 	addi	r23,r23,-1
 a007338:	843fff04 	addi	r16,r16,-4
 a00733c:	8c7fff04 	addi	r17,r17,-4
 a007340:	bd7ff91e 	bne	r23,r21,a007328 <__alt_mem_flash+0xfe006328>
 a007344:	00800034 	movhi	r2,0
 a007348:	10800004 	addi	r2,r2,0
 a00734c:	10000926 	beq	r2,zero,a007374 <__call_exitprocs+0xc4>
 a007350:	a0800117 	ldw	r2,4(r20)
 a007354:	1000301e 	bne	r2,zero,a007418 <__call_exitprocs+0x168>
 a007358:	a0800017 	ldw	r2,0(r20)
 a00735c:	10003226 	beq	r2,zero,a007428 <__call_exitprocs+0x178>
 a007360:	a009883a 	mov	r4,r20
 a007364:	98800015 	stw	r2,0(r19)
 a007368:	00000000 	call	0 <__alt_mem_onchip-0x4000000>
 a00736c:	9d000017 	ldw	r20,0(r19)
 a007370:	a03fe41e 	bne	r20,zero,a007304 <__alt_mem_flash+0xfe006304>
 a007374:	dfc00a17 	ldw	ra,40(sp)
 a007378:	df000917 	ldw	fp,36(sp)
 a00737c:	ddc00817 	ldw	r23,32(sp)
 a007380:	dd800717 	ldw	r22,28(sp)
 a007384:	dd400617 	ldw	r21,24(sp)
 a007388:	dd000517 	ldw	r20,20(sp)
 a00738c:	dcc00417 	ldw	r19,16(sp)
 a007390:	dc800317 	ldw	r18,12(sp)
 a007394:	dc400217 	ldw	r17,8(sp)
 a007398:	dc000117 	ldw	r16,4(sp)
 a00739c:	dec00b04 	addi	sp,sp,44
 a0073a0:	f800283a 	ret
 a0073a4:	a0800117 	ldw	r2,4(r20)
 a0073a8:	80c00017 	ldw	r3,0(r16)
 a0073ac:	10bfffc4 	addi	r2,r2,-1
 a0073b0:	15c01426 	beq	r2,r23,a007404 <__call_exitprocs+0x154>
 a0073b4:	80000015 	stw	zero,0(r16)
 a0073b8:	183fde26 	beq	r3,zero,a007334 <__alt_mem_flash+0xfe006334>
 a0073bc:	95c8983a 	sll	r4,r18,r23
 a0073c0:	a0806217 	ldw	r2,392(r20)
 a0073c4:	a5800117 	ldw	r22,4(r20)
 a0073c8:	2084703a 	and	r2,r4,r2
 a0073cc:	10000b26 	beq	r2,zero,a0073fc <__call_exitprocs+0x14c>
 a0073d0:	a0806317 	ldw	r2,396(r20)
 a0073d4:	2088703a 	and	r4,r4,r2
 a0073d8:	20000c1e 	bne	r4,zero,a00740c <__call_exitprocs+0x15c>
 a0073dc:	89400017 	ldw	r5,0(r17)
 a0073e0:	d9000017 	ldw	r4,0(sp)
 a0073e4:	183ee83a 	callr	r3
 a0073e8:	a0800117 	ldw	r2,4(r20)
 a0073ec:	15bfbf1e 	bne	r2,r22,a0072ec <__alt_mem_flash+0xfe0062ec>
 a0073f0:	98800017 	ldw	r2,0(r19)
 a0073f4:	153fcf26 	beq	r2,r20,a007334 <__alt_mem_flash+0xfe006334>
 a0073f8:	003fbc06 	br	a0072ec <__alt_mem_flash+0xfe0062ec>
 a0073fc:	183ee83a 	callr	r3
 a007400:	003ff906 	br	a0073e8 <__alt_mem_flash+0xfe0063e8>
 a007404:	a5c00115 	stw	r23,4(r20)
 a007408:	003feb06 	br	a0073b8 <__alt_mem_flash+0xfe0063b8>
 a00740c:	89000017 	ldw	r4,0(r17)
 a007410:	183ee83a 	callr	r3
 a007414:	003ff406 	br	a0073e8 <__alt_mem_flash+0xfe0063e8>
 a007418:	a0800017 	ldw	r2,0(r20)
 a00741c:	a027883a 	mov	r19,r20
 a007420:	1029883a 	mov	r20,r2
 a007424:	003fb606 	br	a007300 <__alt_mem_flash+0xfe006300>
 a007428:	0005883a 	mov	r2,zero
 a00742c:	003ffb06 	br	a00741c <__alt_mem_flash+0xfe00641c>

0a007430 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 a007430:	defffd04 	addi	sp,sp,-12
 a007434:	df000215 	stw	fp,8(sp)
 a007438:	df000204 	addi	fp,sp,8
 a00743c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 a007440:	0001883a 	nop
 a007444:	e0bfff17 	ldw	r2,-4(fp)
 a007448:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 a00744c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 a007450:	10000226 	beq	r2,zero,a00745c <_exit+0x2c>
    ALT_SIM_FAIL();
 a007454:	002af070 	cmpltui	zero,zero,43969
 a007458:	00000106 	br	a007460 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 a00745c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 a007460:	003fff06 	br	a007460 <__alt_mem_flash+0xfe006460>
